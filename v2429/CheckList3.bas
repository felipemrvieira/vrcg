B4A=true
Group=Main Forms
ModulesStructureVersion=1
Type=Activity
Version=9
@EndOfDesignText@
#Region  Activity Attributes 
	#FullScreen: True
	#IncludeTitle: False
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Type topheight(top As Int, height As Int)
	Public Device As Phone
	Private xui As XUI
	Private calculate As B4XEval
	Private CLTimeStart As Timer
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	'These variables can only be accessed from this module.
	Private Lista_ACLAIsLocal As Int = 0' Se é da pergunta (campo data_list do dta_tasks_items_answers)
	Private Lista_ACLAIsLevel As Int = 0 ' Se é de tabela auxiliar
	Private Lista_ACLALevel As Int = 0 ' O nível da tabela auxiliar
	Private Lista_Save2BD As Boolean = False
	Private ChaptersList As List
	Private CurrentChapterLoaded As Int = 0
	Private CurrentTotalChapters As Int = 0
	Private DirectPassthru As Boolean = False
	Private dialog As B4XDialog
	Private READONLY_FEATURES As Boolean = False
	Private CHILD_OPERATION As Boolean = False
	Private TOTAL_POINTS As Double = 0.00
	Private POINTS_RESULT As Boolean = False
	Private CLA_CURRENT_STATE As Int = 0
	Private CLA_CURRENT_PAGE As Int = 0
	Private NONCONFORMITIES As Int = 0
	Private NONCONFORMITIESTYPE As Boolean = False
	Private REPORT_GENERATED As Boolean = False
	Private REPORT_FILE_GENERATED As String = ""
	Private CHECKLIST_TITLE As String = ""
	Private ApplDialog As CustomLayoutDialog
	Private Global_oType As Int
	Private Return2Task As Boolean = False
	Private Return2Main As Boolean = False
	Private CLPrinter As BT_Printer
	
	Dim Signature As SignatureData
	Dim SignCanvas As Canvas
	
	Private clListView As ExpandedListView
	'ExpandedListView
	Private cl_topPanel As Panel
	Private cl_topTitle As Label
	Private cl_InfotopPanel As Panel
	Private ClaTaskConclusionPanel As Panel
	Private panelOptionsBar1 As Panel
	Private changeObjectPanel As Panel
	Private terminatePanel As Panel
	
	Private LabelVersion As Label
	Private LabelDateTime As Label
	Private LabelCopyright As Label
	
	Private lblTitle As B4XView
	Private pnlTitle As B4XView
	Private pnlExpanded As B4XView
	Private xui As XUI
	
	Type ItemData (CollapsedHeight As Int, ExpandedHeight As Int)
	Private listsTabPanel As TabStrip
	Private listsButtonPauseRun As Button
	Private listsButtonClose As Button
	Private CLRunning As Boolean = True
	Private cl_InfotopTitle As Label
	Private butCollpseExpand As Button
	Private butNotConfirm As Button
	Private butConfirm As Button
	Private pnlCurrenIndex As Int
	Private ActionOptionsPanel As Panel
	Private mainLabelOptLists As Label
	Private butChecklistRunAction As Button
	Private butChecklistRunReport As Button
	Private butChecklistRunEnd As Button
	Private ButtonUserUnavailable As Button
	Private ColorTabPanel As Panel
	Private mainLogo As ImageView
	Private cl_FinaltopTitle As Label
	Private ImageView1 As B4XView
	Private pnlGroupCurrenIndex As Int = 0
	Private pnlGroupCurrenIndexs As Int = 0
	
	Private FastCloseAction As Boolean = False
	Private TabPagesCount As Int = 3
	Private CurrentTab As Int = 0
	Private CurrentCLA As RequestCLA
	Private CLAItemTitle As Label
	Private CLAItemEditValue As FloatLabeledEditText
	Private CLAItemEditValueStk As EditText
	Private CLAButtonOptions As Button
	Private CLAItemButton_1 As B4XStateButton
	Private CLAItemButton_2 As B4XStateButton
	Private CLAItem_G1 As Label
	Private CLAItem_G2 As Label
	Private CLAItem_G3 As Label
	Private CLAItem_G4 As Label
	Private CLAItem_G5 As Label
	Private CLAItem_G6 As Label
	Private CLAItem_G7 As Label
	
	Private LoadingProcess As Boolean = True
	Private CLAItem_V11 As Label
	Private CLAItem_V12 As Label
	Private CLAItem_V13 As Label
	Private CLAItem_V14 As Label
	Private CLAItem_V21 As Label
	Private CLAItem_V22 As Label
	Private CLAItem_V23 As Label
	Private CLAItem_V24 As Label

	Private CLAButtonOpt0 As B4XStateButton
	Private CLAButtonOpt1 As B4XStateButton
	Private CLAButtonOpt2 As B4XStateButton
	Private CLAButtonOpt3 As B4XStateButton
	Private CLAButtonOpt4 As B4XStateButton
	Private CLAButtonOpt5 As B4XStateButton
	Private CLAButtonOpt6 As B4XStateButton
	Private CLAButtonOpt7 As B4XStateButton
	Private CLAButtonOpt8 As B4XStateButton
	Private CLAButtonOpt9 As B4XStateButton
	Private CLAButtonOpt14 As B4XStateButton
	Private CLAButtonOpt15 As B4XStateButton
	Private CLAButtonOpt16 As B4XStateButton
	Private CLAButtonOpt17 As B4XStateButton
	Private CLAButtonOpt18 As B4XStateButton
	Private CLAButtonOpt19 As B4XStateButton
	Private CLAButtonOpt20 As B4XStateButton
	Private CLAButtonOpt21 As B4XStateButton
	Private CLAButtonOpt41 As B4XStateButton
	Private CLAButtonOpt42 As B4XStateButton
	Private CLAButtonOpt43 As B4XStateButton
	Private CLAButtonOpt44 As B4XStateButton
	Private CLAButtonOpt45 As B4XStateButton
	Private CLAButtonOpt46 As B4XStateButton
	Private CLAButtonOpt47 As B4XStateButton
	Private CLAButtonOpt48 As B4XStateButton
	Private FINResult As Label
	Private FINActionButton As Button
	Private FINSignatures As Button
	Private FloatLabeledEditText1 As FloatLabeledEditText
	Private FINItemImages As CustomListView
	Private FINGroups As ExpandedListView
	Private FINPause As Label
	Private FINDuration As Label
	Private FINEnd As Label
	Private FINStart As Label
	Private FINPoints As Label
	Private CLAItemSelectValue As Spinner
	Private CLAItemLabel As Label
	Private SelectOptionPanel As Panel
	Private ButtonActionPause As Button
	Private SignPanel As Panel
	Private PanelSignature As Panel
	Private btnSaveSign As Button
	Private btnClearSign As Button
	Private CLAItemRulerValue As SeekBar
	
	Private listsTabPanelExec As Panel
	Private listsTabPanelObject As Panel
	Private listsTabPanelTerminate As Panel
	Private InnerlistsTabPanelExec As Panel
	Private InnerlistsTabPanelObject As Panel
	Private InnerlistsTabPanelTerminate As Panel
	Private CLAItemRulerValueMin As Label
	Private CLAItemRulerValueMax As Label
	Private CLAItemRulerValueCurrent As Label
	Private imageSelectedOnReport As Label
	Private ShowImage As ImageView
	Private ImageFilename As Label
	Private ImageState As Label
	Private imageSelected As Label
	Private TabButtonChangeTerminate As Button
	Private TabButtonChangeObject As Button
	Private TabButtonChangeChecklist As Button
	Private ExecTabButtonChangeTerminate As Button
	Private ExecTabButtonChangeObject As Button
	Private ExecTabButtonChangeChecklist As Button
	Private ObjectTabButtonChangeTerminate As Button
	Private ObjectTabButtonChangeObject As Button
	Private ObjectTabButtonChangeChecklist As Button
	Private butChecklistReport As Button
	Private butChecklistSendReport As Button
	Private SignPerson As Label
	Private CurrentSignature As Int = 0 'Posição da assinatura
	Private lblGroupTitle As Label
	Private butGroupCollpseExpand As Button
	Private pnlGroupExpanded As Panel
	Private pnlGroupTitle As Panel
	Private objectImage As ImageView
	Private objectListView As ExpandedListView   'CustomListViewCollapse
	Private objectNotes As Label
	Private objectTagcode As Label
	Private objectType As Label
	Private objectCode As Label
	Private Button2 As Button
	Private Button5 As Button
	Private lblAddressType As Label
	Private lblAddressName As Label
	Private butAddressEdit As Button
	Private lblAddressName2 As Label
	Private lblAddressPostalCode As Label
	Private lblAddressCity As Label
	Private lblAddressLatitude As Label
	Private lblAddressLongitude As Label
	Private butAddressMap As Button
	Private lblContactName As Label
	Private butContactEdit As Button
	Private lblTypeContact As Label
	Private lblContactEmail As Label
	Private lblContactPhone As Label
	Private lblPropertyValue As Label
	Private butPropertyEdit As Button
	Private lblPropertyName As Label
	Private pnlGroupExpandedProp As Panel
	Private lblGroupTitleProp As Label
	Private butGroupCollpseExpandProp As Button
	Private pnlGroupTitleProp As Panel
	Private pnlGroupExpanded4 As Panel
	Private lblGroupLineName As Label
	Private ButtonAppNetwork As Button
	Private mainActiveUser As Label
	Private CurrentResult As String = ""
	Private SignatureExists As Int = 0 '1=Client, 2=tech, 3=all
	Private CLAItemButton_3 As B4XStateButton
	Private CLAItemButton_4 As B4XStateButton
	Private CLAItemButton_5 As B4XStateButton
	Private CLAMandatory As Label
	Private CLACritical As Label
	Private CLAItemDateEditValue As FloatLabeledEditText
	Private CurrentDateEdit As FloatLabeledEditText
	Private CurrentTimeEdit As FloatLabeledEditText
	Private CLAItemTimeEditValue As FloatLabeledEditText
	Private dlgASDetails As EditText 'FloatLabeledEditText
	Private dlgASEmailsSubject As FloatLabeledEditText
	Private dlgASEmailsCC As FloatLabeledEditText
	Private dlgASEmails As FloatLabeledEditText
	'Private FinalObs As FloatLabeledEditText
	Private CLAItemButton_6 As B4XStateButton
	Private butMoreLeft As Button
	Private butAddMore As Button
	Private butMoreRight As Button
	Private MainObservations As String = ""
	Private ShowImageView As ImageView
	Private CLAItemTitleInfo As Label
	Private FinalObs As EditText
	Private labelMore As Label
	
	Private CLA_TERMINATE_CLICK As Int = 0
	Private butAssociateObject As Button
	Private noObjectPanel As Panel
	Private ListItemsList As CustomListView
	Private PanelCLAEditOptions As Panel
	Private CLAItemEditValueSTD As EditText
	Private CLAItemEditValueSTDUP As Button
	Private CLAItemEditValueSTDDOWN As Button
	Private ImageStateName As Label
	Private CurrentEntity As String = ""
	Private CurrentOrientation As Int = 0
	Private LayOutName As String = "CLA_MainLayout_2"
	Private DeviceHeight As Int = 0
	Private DeviceHeight2 As Int = 0
	Private isPhoneDevice As Boolean = False
	Private lblIcon As Label
	Private CurrentFilter As String = ""
	Private PressedAnswerTagCode As String = ""
	Private CLAItemEditValueUP As Button
	Private CLAItemEditValueDOWN As Button
	Private EVCSQLGETTASKITEMVALUE As String = "EVCSQLGETTASKITEMVALUE"
	Private CLAObjectClear As Button
	Private CLAObjectFind As Button
	Private CLAObjectList As CustomListView
	Private CLAObjectTypeSpinner As Spinner
	Private CLAObjectGroupSpinner As Spinner
	Private CLAObjectDesc As EditText
	Private OBJ_Types As List
	Private OBJ_Groups As List
	Private lblLineHeader As Label
	
	Private createObjectPanel As Panel
	Private createObjectCancelButton As Button
	Private ObjectTypeListView As CustomListView
	Private createObjectConfirmButton As Button
	Private lblGroupObjectTitle As Label
	Private createObjectSaveButton As Button
	Private createObjectCancelButton2 As Button
	Private objectDetailsPanel As Panel
	Private objectTypePanel As Panel
	Private objectCreateListView As CustomListViewCollapse
	Private SelectedObjectTypeTagcode As String

	Private selectObjectPanel As Panel
	Private suggestObjectButton As Button
	Private CancelSelectObjectButton As Button
	Private ObjectsListIndex As Int = 0
	Private ObjectExists As Boolean = False
	Private SignatureRequest As Int = 0
	Private SignatureRequestList As List
	Private SignatureRequestListPosis As List
	Private btnCancelSign As Button
	
	Private CurrentEditValueFloat As FloatLabeledEditText
	Private CurrentTimeValueFloat As FloatLabeledEditText
	Private MainObjectTagCode As String = ""
	
	Private GoogleMaps As GoogleMap
	Private DialogMap As MapFragment
	Private rp As RuntimePermissions
	Private NONCLICK As Int = 0
	Private isFirstChapter As Boolean = True
	Private CLAItemEditValueExtra As FloatLabeledEditText
	Private butDessociateObject As Button
	Private butChangeObject As Button
	Private LabelSeleccioneObjecto As Label
	
	Private DataBulkUpload As Int = 0
		
	Private lblTemposExecucao As Label
	Private lblInicio As Label
	Private lblFim As Label
	Private lblDuracao As Label
	Private lblPausa As Label
	Private lblResultado As Label
	Private lblTotal As Label
		
	Private LabelGrupo As Label
	Private LabelTipoObjecto As Label
	Private LabelDescritivo As Label
	Private LabelReferenciaObjecto As Label
	Private LabelObsObjecto As Label
	Private LabelCodigoInternObjecto As Label
	Private LabelTituloTipoObjecto As Label
	Private LabelImagemObjecto As Label
	Private LabelEscolhaTipoObjecto As Label
	
	Private ItemAddress_TipoMorada As Label
	Private ItemAddress_Endereco As Label
	Private ItemAddress_Continua As Label
	Private ItemAddress_CPostal As Label
	Private ItemAddress_Latitude As Label
	Private ItemAddress_Longitude As Label
	Private ItemAddress_Localidade As Label
	Private CLAItemInformation As Label
	Private CLAItemEditValuePLUS As Button
	Private CLAItemEditValueMINUS As Button
	Private CLA_StockTitle As Label	
	Private CLA_Stock As Label
	Private CLAButtonEditText As Button
	Private CLAItemEditTextValue As FloatLabeledEditText
	Private butChecklistPrinter As Button
	Private MacAddress As String = ""
	
	Private MandatoryValues As List
	Private ComponentList As List
	Private B4XSButtonsList As List
	Private UPDATED_INNER_FIELDS As List
	Private UPDATED_EDIT_FIELDS As List
	
	Private MainEditFocusComponent As EditText
	Private butAddLess As Button
	
	Private TimeActivityStart As String = ""
	Private TimeActivityEnd As String = ""
	Private TimeActivityCLStart As String = ""
	Private TimeActivityCLEnd As String = ""
	Private CLAButtonSearchText As Button
	
	Private ListOfTextViews As List
	Private ListReturnedfromQuery As List
	Private CLAShowOnlyItemInformation As Label
	
	' Dialogo Outros
	Private lblDialogoOutrosTitle As Label
	Private txtDialogoOutros As FloatLabeledEditText
	Private chkDialogoOutrosBD As CheckBox

	Private ButtonRulerNA As Button
	Private CurrentButtonNA As Boolean
	Private SeekBarHasNA As Boolean = False
	
	Private Object2Update As String = ""
	Private butBarCode As Button
	Private RunFromBarcode As Boolean = False
	Private ButtonFromBarcode As B4XStateButton
	Private ListOfMandatoryItems As List
	Private ListBoxExtendedFormat As Boolean = False
	
	Private MainDataStart As RequestCLA
	Private StartNewWay As Boolean = False
	Private IconExtraInfo As Button
	Private dialogo_texto_extraInfo As Label
	Private CurrentButtonState As Int
	
	
	Private LASTEDITBOXFOCUS As B4XView
	Private InvertEnableState As Boolean = False
End Sub

'Dialog_ItemActions
'CLA_MainLayout
'CLA_ITEM_EditBox_ValueConfirm

Sub Activity_Create(FirstTime As Boolean)
	
	If FirstTime Then
		Log("Activity_Create Firsttime Checklist3")
	Else
		Log("Activity_Create Checklist3")
	End If
	
	Private TimeActivityStart As String = Utils.GetCurrDatetimeExt
	CurrentOrientation = 0
	DeviceHeight = 0
	DeviceHeight2 = 0
	
	CLTimeStart.Initialize("CLTimeStart", 2000)
	CLTimeStart.Enabled = False

	StartNewWay = Utils.Int2Bool(ShareCode.DEVICE_TYPEREQUEST_START_NEWWAY)
		
	If (ShareCode.ISPHONE) Then
		ShareCode.DEVICE_ORIENTATION = 1
		Device.SetScreenOrientation(1)
		Device.SetScreenOrientation(ShareCode.DEVICE_ORIENTATION)
		CurrentOrientation = ShareCode.DEVICE_ORIENTATION
		LayOutName = "CLA_MainLayout_2_SP"
		DeviceHeight = 45dip
		DeviceHeight2 = 60dip
		isPhoneDevice = True
	Else
		ShareCode.DEVICE_ORIENTATION = 0
		Device.SetScreenOrientation(0)
		Device.SetScreenOrientation(ShareCode.DEVICE_ORIENTATION)
		CurrentOrientation = ShareCode.DEVICE_ORIENTATION
		LayOutName = "CLA_MainLayout_2"
		isPhoneDevice = False
	End If
	
	CLA_CURRENT_PAGE = 0
	ObjectsListIndex = 0
	Return2Task = False
	Return2Main = False
	CHILD_OPERATION = False
	calculate.Initialize(Me, "Eval")
	SignatureRequestList.Initialize
	SignatureRequestListPosis.Initialize
	ListOfTextViews.Initialize
	ShareCode.Current29Map.Initialize
	UPDATED_INNER_FIELDS.Initialize   'FieldReference
	UPDATED_EDIT_FIELDS.Initialize
		
		
'	xxx -RETIRAR APOS OS TESTES
'	ShareCode.DEVICE_PARAM_ACTIVATE_PRINTMODULE = 1
	
	If (Utils.Int2Bool(ShareCode.DEVICE_PARAM_ACTIVATE_PRINTMODULE)) Then
		CLPrinter.Initialize(Me,"CLPrinter",Encoding.Windows1252)
	End If
	
	MandatoryValues.Initialize
	ComponentList.Initialize
	B4XSButtonsList.Initialize
	
	Private TimeActivityEnd As String = Utils.GetCurrDatetimeExt
	End Sub

Sub InitEDITFOCUS As Boolean
	Return LASTEDITBOXFOCUS.IsInitialized
End Sub

Sub GetFocusFromField(SenderView As B4XView) As ResumableSub
	
	'XXX NOVO METODO PARA FORCAR O LOSTFOCUS
	
	If SenderView Is B4XStateButton Then
		Dim b4xv As B4XStateButton = SenderView
		Dim pnlSender As Panel = b4xv.Parent
	else if SenderView Is Button Then
		Dim bv As Button = SenderView
		Dim pnlSender As Panel = bv.Parent
	End If
	
	Dim dummyEdit As EditText
	dummyEdit.Initialize("")
	pnlSender.AddView(dummyEdit,0,0,0,0)
	dummyEdit.InputType = dummyEdit.INPUT_TYPE_NONE
	dummyEdit.RequestFocus
	dummyEdit.RemoveView
	Return True
End Sub


Sub CLTimeStart_Tick
	CallSubDelayed2(Me, "ActivityStartNextLoad", MainDataStart)
	CLTimeStart.Enabled = False
End Sub


Sub Activity_Resume
	Wait For DialogMap_Ready
	GoogleMaps = DialogMap.GetMap
End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub

Sub UpdateMainLayout
	
	Try
		mainLabelOptLists.TextColor = Consts.ColorMain	
		If Not(ShareCode.ISPHONE) Then
			mainLogo.Gravity = Gravity.FILL
			mainLogo.Width = Consts.LogoWidth
		End If
		Log($"Inicialização de BMP: ${ShareCode.APP_MAIN_LOGO_MINI}"$)
		If (Utils.NNE(ShareCode.APP_MAIN_LOGO_MINI)) Then
			mainLogo.SetBackgroundImage(Utils.B64ToBitmap(ShareCode.APP_MAIN_LOGO_MINI))
		End If
	'	Dim gc As GradientDrawable
	'	gc.Initialize("TOP_BOTTOM", Array As Int(Consts.ColorMain, Consts.ColorSub))
	'	ColorTabPanel.Background = gc
		Utils.SetViewBackgroundColorToMainGradientColor(ColorTabPanel)
	Catch
		Log(LastException.Message)
	End Try
End Sub

Sub WindowStatusUpdate
	If Utils.NE(ShareCode.SESS_OPER_UserName) Then
		StopService(LocationService)
		StopService(Comms)
'		StopService(UserService)
		StopService(Logs)
		StartActivity(Main)
		Sleep(500)
		Activity.Finish
	End If
	Try
		LabelVersion.Text = ShareCode.APP_VersionNocodeName
		LabelCopyright.Text = ShareCode.APP_EntityBrand  '"X-Evolution,Lda"
		mainActiveUser.Text = ShareCode.SESS_OPER_UserName
	
		ButtonAppNetwork.Enabled = False
		ButtonAppNetwork.TextColor = Consts.ColorLightSilver
		If (ShareCode.APP_WORKING_LOCAL) Then
			ButtonAppNetwork.Enabled = True
			ButtonAppNetwork.TextColor = Consts.ColorRedOrange
		End If
		ButtonUserUnavailable.Enabled = False
		ButtonUserUnavailable.TextColor = Consts.ColorLightSilver
		If (ShareCode.USR_STATE = 0) Then
			ButtonUserUnavailable.Enabled = True
			ButtonUserUnavailable.TextColor = Consts.ColorRedOrange
		End If
	
		ButtonActionPause.Enabled = False
		ButtonActionPause.TextColor = Consts.ColorLightSilver
		'	If (ShareCode.CLA_STATE >= 1) Then
		If (ShareCode.SESS_IN_PAUSE = 1) Then
			ButtonActionPause.Enabled = True
			ButtonActionPause.TextColor = Consts.ColorRedOrange
		End If
	
	
		If (CLA_CURRENT_PAGE = 0) Then
			butChecklistRunEnd.Text = ShareCode.checklistbutChecklistRunEnd
		Else If (CLA_CURRENT_PAGE = 1) Then
			butChecklistRunEnd.Text = ShareCode.checklistbutChecklistRunEnd
		Else
			butChecklistRunEnd.Text = ShareCode.checklistTabButtonChangeTerminate
		End If
		FINSignatures.Enabled = Not(READONLY_FEATURES)
		FINActionButton.Enabled = Not(READONLY_FEATURES)
		ButtonActionPause.Enabled = Not(READONLY_FEATURES)
		butChecklistRunEnd.Enabled = Not(READONLY_FEATURES)
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try

End Sub

Sub Activity_KeyPress (KeyCode As Int) As Boolean
	Log($"Pressionou na key: ${KeyCode}"$)
	If KeyCode = KeyCodes.KEYCODE_BACK Then
		Log("pressionou BACK")
		listsButtonClose_Click
	End If
	Return True
End Sub


Sub StartCLA_Activity_Child(data As RequestCLA, Entity As String)
	READONLY_FEATURES = False
	CHILD_OPERATION = True
	StartCLA_Activity(data, Entity)
End Sub


Sub StartCLA_ActivityMain(data As RequestCLA, Entity As String)
	Return2Main = True
	READONLY_FEATURES = False
	StartCLA_Activity(data, Entity)
End Sub

Sub StartCLA_ActivityTasks(data As RequestCLA, Entity As String)
	Return2Task = False 'Return2Task = True
	READONLY_FEATURES = False
	StartCLA_Activity(data, Entity)
End Sub

Sub StartCLA_ActivityReadOnly(data As RequestCLA, Entity As String)
	READONLY_FEATURES = True
	StartCLA_Activity(data, Entity)
End Sub

Sub StartCLA_Activity(data As RequestCLA, Entity As String)
	
'	ShareCode.IsInCheckExecution = True ' False

	' TIP: ENTRADA DA CHECKLIST A PARTIR DA INTERVENCAO DAS 4 SUBS ACIMA (Find References)
	Log("ENTROU StartCLA_Activity")
	'********************************************************************************************************
	' NOTE: VERIFICA SE O ARRANQUE DA CL É NORMAL OU PROGRESSIVO/SELEÇÃO
	'********************************************************************************************************
	If Utils.Int2Bool(ShareCode.DEVICE_TYPEREQUEST_DEFINE_START_NEWWAY) Then
		Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
						$"select distinct paramters
						from dta_typerequests where 1=1
						And tagcode in (select distinct typerequest_tagcode 
						from dta_requests where tagcode='${data.Request.trim}')"$, "paramters")	

		Try
			Dim control_start_newway As Int = QuestParams.Get("control_start_newway")
		Catch
			Dim control_start_newway As Int = 0
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		
		If Utils.Int2Bool(control_start_newway) Then
			Try
				Dim start_newway As Int = QuestParams.Get("start_newway")
			Catch
				Dim start_newway As Int = 0
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
			
			StartNewWay = Utils.Int2Bool(start_newway)
		End If
	End If
	Log($"StartNewWay ${StartNewWay}"$)
	
	Private TimeActivityCLStart As String = Utils.GetCurrDatetimeExt
	Log(data.Status.status)
	CLA_CURRENT_PAGE = 0
	CurrentEntity = Entity
	ObjectExists = False

	
	ProgressDialogShow2("A carregar a Checklist", False)
		
	Activity.LoadLayout(LayOutName)
	
	'	xxx -RETIRAR APOS OS TESTES
'	ShareCode.DEVICE_PARAM_ACTIVATE_PRINTMODULE = 1
	
	If (Utils.Int2Bool(ShareCode.DEVICE_PARAM_ACTIVATE_PRINTMODULE)) Then
		If File.Exists(Starter.InternalFolder,$"defultprinter.set"$) Then
			Dim MacAddress As String = File.ReadString(Starter.InternalFolder,$"defultprinter.set"$)
			Log($"Printer MAC Address: ${MacAddress}"$)
			
			butChecklistPrinter.Enabled = True
			butChecklistPrinter.Color = Consts.ColorMain
		Else
			butChecklistPrinter.Enabled = True
			butChecklistPrinter.Color = Consts.ColorLightSilver
		End If
	End If
	butChecklistPrinter.Tag = data
	

	Utils.SetViewBackgroundColorToMainGradientColor(ColorTabPanel)

	Utils.SetViewBackgroundColorToMainGradientColor(panelOptionsBar1)
	Utils.SetViewBackgroundColorToMainGradientColor(changeObjectPanel)
	Utils.SetViewBackgroundColorToMainGradientColor(terminatePanel)
	
	Utils.SetViewBackgroundColorToMainGradientColor(TabButtonChangeChecklist)
	Utils.SetViewBackgroundColorToMainGradientColor(TabButtonChangeObject)
	Utils.SetViewBackgroundColorToMainColor(TabButtonChangeTerminate)
	
	Utils.SetViewBackgroundColorToMainGradientColor(ExecTabButtonChangeTerminate)
	Utils.SetViewBackgroundColorToMainGradientColor(ExecTabButtonChangeObject)
	Utils.SetViewBackgroundColorToMainColor(ExecTabButtonChangeChecklist)
	
	Utils.SetViewBackgroundColorToMainGradientColor(ObjectTabButtonChangeTerminate)
	Utils.SetViewBackgroundColorToMainGradientColor(ObjectTabButtonChangeChecklist)
	Utils.SetViewBackgroundColorToMainColor(ObjectTabButtonChangeObject)
	
	
	Utils.SetButtonBackgroundColorToMainColorWithRadius(butChecklistRunEnd, 5)
	Utils.SetButtonBackgroundColorToMainColorWithRadius(butChecklistReport, 5)
	Utils.SetButtonBackgroundColorToMainColorWithRadius(butChecklistSendReport, 5)

	butChecklistSendReport.Enabled = Utils.Int2Bool(ShareCode.DEVICE_PARAM_SENDREPORT)
	butChecklistReport.Enabled = Utils.Int2Bool(ShareCode.DEVICE_PARAM_GENERATEREPORT)
	'butChecklistReport.Visible = Utils.Int2Bool(ShareCode.DEVICE_PARAM_GENERATEREPORT)
	
	Starter.CurrentWorkActivity = Me
	
	CurrentCLA = data
	TOTAL_POINTS  = 0.00
	POINTS_RESULT = CurrentCLA.Info.RequestResult = 3
	InnerlistsTabPanelExec.LoadLayout("CLA_TASK_Execution") ', Record.GetString("title")) "Acção/Checklist")
	InnerlistsTabPanelObject.LoadLayout("CLA_TASK_Information")
	InnerlistsTabPanelTerminate.LoadLayout("CLA_TASK_Conclusion")
	
	mainLabelOptLists.Text=ShareCode.checklistmainLabelOptLists
	butChangeObject.Text = ShareCode.checklistbutChangeObject
	LabelSeleccioneObjecto.Text = ShareCode.checklistLabelSeleccioneObjecto
	butDessociateObject.Text = ShareCode.checklistbutDessociateObject
	butAssociateObject.Text = ShareCode.checklistbutAssociateObject
	TabButtonChangeObject.Text=ShareCode.checklistTabButtonChangeObject
	TabButtonChangeChecklist.Text=ShareCode.checklistTabButtonChangeChecklist
	TabButtonChangeTerminate.Text=ShareCode.checklistTabButtonChangeTerminate
	ObjectTabButtonChangeObject.Text=ShareCode.checklistTabButtonChangeObject
	ObjectTabButtonChangeChecklist.Text=ShareCode.checklistTabButtonChangeChecklist
	ObjectTabButtonChangeTerminate.Text=ShareCode.checklistTabButtonChangeTerminate
	ExecTabButtonChangeObject.Text=ShareCode.checklistTabButtonChangeObject
	ExecTabButtonChangeChecklist.Text=ShareCode.checklistTabButtonChangeChecklist
	ExecTabButtonChangeTerminate.Text=ShareCode.checklistTabButtonChangeTerminate
	butChecklistRunEnd.Text=ShareCode.checklistbutChecklistRunEnd
	butChecklistReport.Text=ShareCode.checklistbutChecklistReport
	butChecklistSendReport.Text=ShareCode.checklistbutChecklistSendReport
	
	lblTemposExecucao.Text = ShareCode.checklistllblTemposExecucao
	lblInicio.Text = ShareCode.checklistllblInicio
	lblFim.Text = ShareCode.checklistllblFim
	lblDuracao.Text = ShareCode.checklistllblDuracao
	lblPausa.Text = ShareCode.checklistllblPausa
	lblResultado.Text = ShareCode.checklistllblResultado
	lblTotal.Text = ShareCode.checklistllblTotal
	FinalObs.Hint=ShareCode.checklistlFinalObsHint
	FINSignatures.Text = ShareCode.checklistlButtonFINSignatures
	FINActionButton.Text = ShareCode.checklistlButtonFINActionButton
	cl_FinaltopTitle.Text = ShareCode.checklistclFinaltopTitle
	
	LabelTipoObjecto.Text=ShareCode.checklistLabelTipoObjecto
	
	LabelReferenciaObjecto.Text=ShareCode.checklistLabelReferenciaObjecto
	LabelObsObjecto.Text=ShareCode.checklistlFinalObsHint
	LabelCodigoInternObjecto.Text=ShareCode.checklistLabelCodigoInternObjecto
	LabelTituloTipoObjecto.Text=ShareCode.checklistLabelTipoObjecto
	LabelImagemObjecto.Text=ShareCode.checklistLabelImagemObjecto
	CancelSelectObjectButton.Text = ShareCode.Option_CANCEL
	LabelEscolhaTipoObjecto.Text = ShareCode.checklistLabelEscolhaTipoObjecto
	
	LabelGrupo.text = ShareCode.checklistLabelGrupo
	LabelTipoObjecto.text = ShareCode.checklistLabelTipoObjecto
	LabelDescritivo.Text = ShareCode.checklistLabelDescritivo
	
	Utils.SetViewBackgroundColorToMainColor(cl_topPanel)
	Utils.SetViewBackgroundColorToMainColor(cl_InfotopPanel)
	Utils.SetViewBackgroundColorToMainColor(ClaTaskConclusionPanel)

	
	Utils.SetButtonBackgroundColorToMainColorWithRadius(butAssociateObject, 5)
	Utils.SetButtonBackgroundColorToMainColorWithRadius(butChangeObject, 5)
	Utils.SetButtonBackgroundColorToMainColorWithRadius(butDessociateObject, 5)
	
	Utils.SetButtonBackgroundColorToMainColorWithRadius(FINSignatures,5)
	Utils.SetButtonBackgroundColorToMainColorWithRadius(FINActionButton,5)
	
	Utils.SetButtonBackgroundColorToMainColorWithRadius(CLAObjectClear, 5)
	Utils.SetButtonBackgroundColorToMainColorWithRadius(CLAObjectFind, 5)
	Utils.SetButtonBackgroundColorToMainColorWithRadius(createObjectCancelButton, 5)
	Utils.SetButtonBackgroundColorToMainColorWithRadius(createObjectConfirmButton, 5)
	Utils.SetButtonBackgroundColorToMainColorWithRadius(suggestObjectButton, 5)
	Utils.SetButtonBackgroundColorToMainColorWithRadius(CancelSelectObjectButton, 5)
'	Utils.SetButtonBackgroundColorToMainColorWithRadius(createObjectCancelButton2, 5)
	'Utils.SetButtonBackgroundColorToMainColorWithRadius(btnSaveSign, 100)
	LabelObsObjecto.TextColor = Consts.ColorMain
	
	Sleep(500)
	
	OBJ_Types = DBStructures.getObjectTypes
	OBJ_Groups = DBStructures.getObjectGroups
	
	If DBUtils.TableExists(Starter.LocalSQLEVC, "dta_typerequests_signature") Then
		Dim typetask As String = DBStructures.GetScriptColumnStrEVC($"select typerequest_tagcode
						from dta_requests where tagcode='${data.Request}'"$, "typerequest_tagcode")
						
'		SignatureRequest = DBStructures.GetScriptColumnIntEVC($"select count(0) as total 
'						from dta_typerequests_signature 
'						where typerequest_tagcode='${typetask}'
'						and ((related_to=0) or ((related_to=1) and (task_tagcode='${data.Task.trim}'))) "$, "total")
						
		Dim sSignSql As String = $"select title, mandatory, dategeo_stamp
						from dta_typerequests_signature 
						where typerequest_tagcode='${typetask}'
						and ((related_to=0) or ((related_to=1) and (task_tagcode='${data.Task.trim}'))) and active=1 order by position "$
		Private signCursor As Cursor = Starter.LocalSQLEVC.ExecQuery(sSignSql)
		SignatureRequest = signCursor.RowCount
		If SignatureRequest > 0 Then
			For nn = 0 To signCursor.RowCount-1
				signCursor.Position = nn
				SignatureRequestList.Add(Utils.IfNullOrEmpty(signCursor.GetString("title"), $"Interveniente ${nn+1}"$))
			Next
		End If
	End If
	
	If (SignatureRequest = 0) Then
		SignatureRequest = 2
		SignatureRequestList.Add("Entidade")
		SignatureRequestList.Add("Técnico")
	End If
	
	If (ShareCode.APP_DOMAIN.ToLowerCase = "acail") Then
		FINActionButton.Text = "Submeter"
	End If
	
	
	Dim flist As List : flist.initialize
	For n=0 To OBJ_Types.Size-1
		Dim itc As DB_ITC = OBJ_Types.Get(n)
		flist.Add(itc.Title)
	Next
	CLAObjectTypeSpinner.AddAll(flist)
'	CLAObjectTypePicker.SelectRow(0, 0, False)
	
	Dim flist As List : flist.initialize
	flist.Add("(Todos)")
	For n=0 To OBJ_Groups.Size-1
		Dim itc As DB_ITC = OBJ_Groups.Get(n)
		flist.Add(itc.Title)
	Next
	CLAObjectGroupSpinner.AddAll(flist)
'	CLAObjectGroupPicker.SelectRow(0, 0, False)

	'*************************************************************************************************
	' NOTE:  VERIFICA O POSICIONAMENTO DO TAB A ABRESENTAR (CHECKLIST/OBJECTOS - DADOS GERAIS)
	'*************************************************************************************************
	Dim MudaParaDadosGerais As Int = 0
	Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
										$"select distinct paramters 
										from dta_tasks_adds where 1=1
										and tagcode='${data.Task.trim}'"$, "paramters")

	If (QuestParams.Size > 0) Then
		Try
			If QuestParams.ContainsKey("start_mydata") Then
				Dim MudaParaDadosGerais As Int = QuestParams.Get("start_mydata")
			End If
		Catch
			Dim MudaParaDadosGerais As Int = 0
		End Try
	End If
	
	If (Utils.Int2Bool(ShareCode.DEVICE_CHECKLIST_STARTON_MYDATA)) Or (Utils.Int2Bool(MudaParaDadosGerais)) Then
		TabButtonChangeObject_Click
	End If
	
	ChaptersList.Initialize
	
	SetUpObjectTypeList
	ProgressDialogHide
	
	ActivityStart(CurrentCLA, CurrentEntity)
	If (ObjectExists) Then
		ObjectTypeListView_ItemClick(0, Null)
	End If
	
'	
	Private TimeActivityCLEnd As String = Utils.GetCurrDatetimeExt
	
End Sub

'*************************************************************************
' TIP: START ACTIVITY
'*************************************************************************
Sub ActivityStart(data As RequestCLA, Entity As String)
	MainObservations = ""
	Log("ENTROU ActivityStart")
'	ProgressDialogHide
'	Sleep(100)
	
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(250)
	
	If Utils.NNE(Entity) Then
		cl_InfotopTitle.Text = Entity
		cl_FinaltopTitle.Text = Entity
	End If
	
	Private Record As Cursor
	LoadingProcess = True
'	If  Not(ShareCode.APP_DOMAIN.ToLowerCase = "grandative") And Not(ShareCode.APP_DOMAIN.ToLowerCase = "scms") Then
	Dim SQL As String = $"${DBStructures.EVC_V2_SQL_CURRENT_TASKS} and a.tagcode='${data.Task}'"$
'	Else
'		Dim SQL As String = $"${DBStructures.EVC_SQL_CURRENT_TASKS} and a.tagcode='${CurrentCLA.Task}'"$
'	End If
	Log(SQL)
	Record = Starter.LocalSQLEVC.ExecQuery(SQL)
	If Record.RowCount > 0 Then
		Record.Position = 0
		
		cl_InfotopTitle.Text = Entity
		cl_FinaltopTitle.Text = Entity
		
		'listsTabPanel.LoadLayout("CLA_TASK_Execution", Record.GetString("title")) '"Acção/Checklist")
		
		If Utils.Int2Bool(ShareCode.DEVICE_PARAM_REQUEST_CLTITLE_CANCHANGE) Then
			cl_topTitle.Text = Entity
		Else
			CHECKLIST_TITLE = Record.GetString("name")
			cl_topTitle.Text = CHECKLIST_TITLE
		End If
		' *****************************************************************************************
		' A ESTRUTURA DO RI ESTA A DEVOLVER A INFO DO DTA_REQUEST E VEM SEMPRE OS DADOS DO OBJECTO DE ANALISE
		' DEVERIA VALIDAR SE
		' *****************************************************************************************
		Dim RI As RequestInfo = DBStructures.getRequestInfo(data.Request)
	
		
		Dim objectTagValue As String = DBStructures.GetScriptColumnStrEVC($"select object_tagcode from
											dta_requests where tagcode='${CurrentCLA.Request.Trim}'"$, _
											"object_tagcode")
											
'		Verificar se existe objecto na relação da intervenção
		Dim objectTagRelValue As String = DBStructures.GetScriptColumnStrEVC($"select object_tagcode from
											dta_requests_relations where request_tagcode='${CurrentCLA.Request.Trim}'"$, _
											"object_tagcode")
		
		
		
		MainObservations = Utils.IfNullOrEmpty(Record.GetString("task_obs"), "")
		FastCloseAction = Record.GetInt("fast_close") = 0
		getRequestObject( RI )
		'***************************************************************************************************************************************
		'	IDENTIFICA ASSINATURAS RELACIONADAS COM A INTERVENÇÃO
		'***************************************************************************************************************************************
		
		Dim Rows As Int = 0
		CurrentSignature = 0  'from_who
'		Dim theSignature  As String = ""
		Dim SQL As String = $"select * from dta_requests_signatures where request_tagcode='${data.Request}' and inner_request_tagcode='${data.Action}'"$
		
		Private Recordw As Cursor = Starter.LocalSQLEVC.ExecQuery(SQL)
		SignatureExists = 0 ' 1=Client, 2=Tech, 3=all
		If Recordw.RowCount > 0 Then
			For Rows = 0 To Recordw.RowCount-1
				Recordw.Position = Rows
				Dim CurSignature As Int = Recordw.GetInt("from_who")
				SignatureRequestListPosis.Add(CurSignature)
				
				If Not(File.Exists(Starter.InternalFolder, $"P${CurSignature}_${data.Request}_${data.Task}_Sign.png"$)) Then
					Utils.SaveImageviewToFile(Utils.B64ToBitmap(Recordw.GetString("image")), _
						$"P${CurSignature}_${data.Request}_${data.Task}_Sign.png"$, _
						ShareCode.DEVICE_DEF_IMG_FILETYPE)
				End If
			Next
		End If
		Recordw.Close

		SignCanvas.Initialize(SignPanel)
		Signature.Initialize
		Signature.Canvas = SignCanvas
		Signature.Panel = SignPanel
		Signature.SignatureColor = Colors.Black
		Signature.SignatureWidth = 3dip
		butChecklistReport.Tag = data
	Else
		ToastMessageShow(ShareCode.AvisoToastSemInfoTarefa, True)
		listsButtonClose_Click
	End If
	Record.Close
	

	'***************************************************************************************************************************************
	'	VERIFICA OS TABS E RESPECTIVAS POSIÇÕES
	'***************************************************************************************************************************************
	TabButtonChangeTerminate.Tag = data
	TabButtonChangeObject.Tag = data
	TabButtonChangeChecklist.Tag = data
	If (FINActionButton.IsInitialized) Then
		FINActionButton.Tag = data
	End If
	
	If (data.Status.status >=3) Then
		butChecklistRunEnd.Visible = False
		
		LoadExecution
	End If


	'***************************************************************************************************************************************
	'	IDENTIFICA A TAREFA (CHECKLIST)
	'***************************************************************************************************************************************
	Dim SQL As String = $"${DBStructures.EVC_SQL_GETREQUESTS_CURRENT_TASK} and
				a.request_tagcode='${data.Request}' and 
				a.relation_tagcode='${data.Action}'"$
	Record = Starter.LocalSQLEVC.ExecQuery(SQL)
	If Record.RowCount > 0 Then
		Record.Position = 0
		
'		If (POINTS_RESULT) Then
		FINPoints.text = Record.GetDouble("points")
'		Else
'			FINPoints.text = ""
'		End If
		FINStart.Text = Record.GetString("run_start")
	End If
	Record.Close
    
	CurrentFilter = Utils.IfNullOrEmpty(data.Other.Filter, "")
	
	CurrentChapterLoaded = 0
	CurrentTotalChapters = 0
	

'	'============================================================================
'	' PREPARA QUERY  - EVC_SQL_GET_TASK_ITEM_VALUE
'	'============================================================================
	EVCSQLGETTASKITEMVALUE = $"select x.* from (${DBStructures.EVC_SQL_GET_TASK_ITEM_VALUE} and a.request_tagcode='${data.Request.trim}' and a.task_tagcode='${data.Task.trim}' ) as x "$


	'****************************************************************************
	'VERIFICA OS PARAMETROS JSON DA CHECKLIST - ENTIDADE ASSOCIADA ESTA EM Entity
	'****************************************************************************
	Dim data_bulk_upload As Int = Utils.IfNullOrEmpty( _
						DBStructures.GetScriptColumnStrEVCJSON($"select distinct paramters from dta_tasks_adds 
							where tagcode='${data.Task.Trim}'"$, "paramters", "data_bulk_upload"), "0")		
										
	
	Dim typerequest As String = DBStructures.GetScriptColumnStrEVC($"select typerequest_tagcode from dta_requests where tagcode = '${data.Request.Trim}'"$,"typerequest_tagcode")
	
							
	Dim Status As Int = DBStructures.GetScriptColumnStrEVC($"select status_id from dta_requests
							where tagcode='${data.Request.Trim}'"$, "status_id")
							
	Dim JsonParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
												$"select distinct paramters 
												from dta_typerequests_tasks_adds where 1=1
												And typerequest_tagcode='${typerequest.Trim}'
												And task_tagcode='${data.Task.trim}'"$, "paramters")
		
	
						
	If JsonParams.ContainsKey("upload_bulk_data") Then
		Try
			Dim upload_bulk_data As Int = JsonParams.Get("upload_bulk_data")
		Catch
			Dim upload_bulk_data As Int = 0
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
	Else
		Dim upload_bulk_data As Int = 0
	End If
	
'								
'	If upload_bulk_data = 1 Then
'		
'		
'		
'		Dim upload_bulkdata_settings As List = JsonParams.Get("upload_bulkdata_settings")
'		For Each colupload_bulkdata_settings As Map In upload_bulkdata_settings
'			Dim ubd_chapter_tagcode As String = colupload_bulkdata_settings.Get("ubd_chapter_tagcode")
'			Dim ChapterUK As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_tasks_items where 1=1
'																		and task_tagcode = '${data.Task.Trim}'
'																		and item_tagcode = '${ubd_chapter_tagcode.Trim}'"$,"unique_key")
'			
'			Dim RepeatedItemTC As String = DBStructures.GetScriptColumnStrEVC($"select item_tagcode from dta_tasks_items where 1=1
'																			and task_tagcode = '${data.Task.Trim}'
'																			and parent_tagcode = '${ChapterUK}' limit 1"$,"item_tagcode")
'		Next
'	End If
	
							
	Dim CTRTP3 As ResumableSub = CheckTypeRequestTaskParamters3(data.Request,data.Task, typerequest.Trim, "_NONE_", 3)
	wait for (CTRTP3) Complete (Finished As Boolean)
	
	Dim Ordena As String = "a.position"
	If (data_bulk_upload = 1) Then
		Ordena = "c.repeatcounter, e.fieldval_04, c.repeatfieldcounter, c.position"
		DataBulkUpload = data_bulk_upload
	End If
	
'	If (DBUtils.TableExists(Starter.LocalSQLEVC, "dta_tasks_items_adds")) Then
	'Dim SQL As String = $"${DBStructures.EVC_V2_SQL_GET_TASK_ITEMS} and a.task_tagcode='${data.Task}' and c.repeatcounter='${data.RepeatCounter}' and c.repeatitemcounter='0' and c.request_tagcode='${data.Request}' ${CurrentFilter} order by ${Ordena}"$
	'Dim SQL As String = $"${DBStructures.EVC_V2_SQL_GET_TASK_ITEMS} and a.task_tagcode='${data.Task}' and c.repeatcounter='${data.RepeatCounter}' and c.request_tagcode='${data.Request}' ${CurrentFilter} order by ${Ordena}"$
	Dim SQL As String = $"${DBStructures.EVC_V2_SQL_GET_TASK_ITEMS} and a.task_tagcode='${data.Task}' and c.repeatcounter='${data.RepeatCounter}'and c.repeatitemcounter=0 and c.request_tagcode='${data.Request}' ${CurrentFilter} order by ${Ordena}"$
'	Else
'		Dim SQL As String = $"${DBStructures.EVC_V1_SQL_GET_TASK_ITEMS} and a.task_tagcode='${data.Task}' and c.repeatcounter='${data.RepeatCounter}' and c.request_tagcode='${data.Request}' ${CurrentFilter} order by ${Ordena}"$
'	End If
	Log("«««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««")
	Log(SQL)
	isFirstChapter = True
	Private Record As Cursor = Starter.LocalSQLEVC.ExecQuery(SQL)
	If Record.RowCount > 0 Then
		Dim idx As Int = 0
		Dim subidx As Int = 1
		Dim TopRec As Int = 0
		Dim Initial As Boolean = True
		Dim chapter As B4XView
		Dim id As ItemData
		Dim TaggedID As Int = 0
		Dim LastGroupRow As Int = -1
		
		Dim Rows_COUNT As Int = Record.RowCount
		Dim Global_Rows_COUNT As Int = Record.RowCount
		ProgressDialogShow2("A carregar a Checklist", True)
		Sleep(250)
		
		For Row = 0 To Record.RowCount-1
			Record.Position = Row
			
			Dim oLevel As Int = Record.GetInt("level")
			Dim oType As Int = Record.GetInt("item_type")
			If (oType = 1) Then
				oType = 0
			End If
			Dim oItem1 As String = Record.GetString("item_tagcode")
			Dim oUKey As String = Record.GetString("unique_key")
			
			Dim fieldval_04 As Int = Record.getint("fieldval_04")
			
			Dim title_override As Int = Record.GetInt("title_override")
			
			Dim mandatory As Int = Record.GetInt("mandatory")
			Dim bullet_master As Int = Record.GetInt("bullet_master")
			Dim bullet_child As Int = Record.GetInt("bullet_child")
			Dim item_tagcode As String = Record.GetString("item_tagcode")
			
			If (title_override = 1) Then
				Dim oTitle As String = Record.GetString("title2")
				If(Utils.isNullOrEmpty(oTitle)) Then
					oTitle = Record.GetString("title")
				End If
			Else
				Dim oTitle As String = Record.GetString("title")
			End If

			Dim oValType As Int = Record.GetInt("data_type")
			Dim repeat As Int = Record.GetInt("repeated")
			Dim infoquest As String = ""
			If (Utils.NNE(Record.GetString("info_notes"))) Then
				infoquest = Record.GetString("info_notes")
			Else
				infoquest = ""
			End If
'			Dim typified_answers As Int = Record.GetInt("typified_answers")
			Dim include_numerators As Int = Record.GetInt("include_numerators")
			
'			Dim ExtraHeight As Int = 0
			Dim ChapterItem As RequestCLAItem = Types.MakeRequestCLAItem(data.Request, _
							data.Action, data.Task, oItem1, oUKey, "",0,0,0, "", "", "", repeat, 0, 1, "", _
							DBStructures.DB2CLATaskItem(data.Task.Trim, oUKey), "")
			
			Dim oItem As String = oUKey

			Dim gCols As Int = Record.GetInt("components_row")
			Dim gViewCols As Int = Record.GetInt("components_label")
			
			If ((oLevel = 0) And (oType = 0)) Then

				TopRec = 0
				If Not(Initial) Then
					
					If (CurrentTotalChapters <= 1) And (StartNewWay) Then
						Dim thisChapter  As ChapterRow = ChaptersList.Get(CurrentChapterLoaded)
						thisChapter.ItemsLoaded = True
						ChaptersList.Set(CurrentChapterLoaded, thisChapter)
						CurrentChapterLoaded = CurrentChapterLoaded + 1
					End If
					
					clListView.Add(chapter, id)
					If (idx=0) And Utils.Int2Bool(ShareCode.DEVICE_AUTO_EXPAND_FIRST) Then
						ExpandItem(idx)
					Else
						If Utils.Int2Bool(ShareCode.DEVICE_AUTO_EXPAND_CHECKLIST) Then
							ExpandItem(idx)
						End If
					End If
					idx = idx + 1
				Else
					Initial = False
				End If

				Dim DefHeight As Int = 55dip '60dip
				Dim ilen As Int = 0
				
				'ERRO VEM PARA O PRIMEIRO SCRIPT E NUNCA APANHA O NUMERO DE ITEMS só se o fieldval_04 nao cair nesta primeira condição
				If (data_bulk_upload = 1 Or upload_bulk_data = 1) And (fieldval_04 >= 0) Then
					Dim SQLCounter As String = $"SELECT count(distinct a.id) As counter
								FROM dta_requests_values as a
								inner join dta_requests_values_adds as a1 on 
										(a1.request_tagcode=a.request_tagcode and a1.task_tagcode=a.task_tagcode and a1.item_tagcode=a.item_tagcode and a1.unique_key=a.unique_key
										AND a1.repeatfieldcounter=a.repeatfieldcounter)
			 					WHERE LENGTH(a.title) > 0 AND LENGTH(a.tagcode) > 0  
			 					AND a.request_tagcode='${data.Request}'
			 					AND a.inner_request_tagcode='${data.Action}'
			 					And a.task_tagcode='${data.Task}'
								And a.repeatcounter=${data.RepeatCounter}
			 					And a.unique_key IN (SELECT DISTINCT unique_key 
									FROM dta_tasks_items 
									WHERE 1=1
				 					And task_tagcode='${data.Task}'
				 					And parent_tagcode='${oUKey}')
								and a1.fieldval_04=${fieldval_04}"$
				Else 
					Dim SQLCounter As String = $"SELECT COUNT(task_tagcode) As counter FROM dta_requests_values
			 					WHERE LENGTH(title) > 0 AND LENGTH(tagcode) > 0  
			 					AND request_tagcode='${data.Request}'
			 					AND inner_request_tagcode='${data.Action}'
			 					And task_tagcode='${data.Task}'
								And repeatcounter=${data.RepeatCounter}
			 					And unique_key IN (SELECT DISTINCT unique_key 
								FROM dta_tasks_items 
								WHERE 1=1
			 					And task_tagcode='${data.Task}'
			 					And parent_tagcode='${oUKey}')"$
				End If
					
				
					
				Log(SQLCounter)
				Dim Rows_COUNT As Int = DBStructures.GetScriptColumnIntEVC(SQLCounter, "counter")
				
				Log($"Items de lista ${Rows_COUNT}"$)
				If (data_bulk_upload = 1 Or upload_bulk_data=1) And (fieldval_04 >= 0) Then
					
					Log("fieldval_04 :" & fieldval_04)
					
					Dim lItems As Int = Utils.IntToDIP(DBStructures.getTaskRecordGroupItemsCount( $" and a.task_tagcode='${data.Task.Trim}'
									and a.parent_tagcode='${oItem.Trim}'
									And a.item_tagcode||a.item_tagcode||a.unique_key
									in (Select z.item_tagcode||z.item_tagcode||z.unique_key
									from dta_requests_values_adds as z where  z.fieldval_04=${fieldval_04})									
									"$, CurrentOrientation, isPhoneDevice))
				Else
					Dim lItems As Int = Utils.IntToDIP(DBStructures.getTaskRecordGroupItemsCount( $" and a.task_tagcode='${data.Task.Trim}'
									and a.parent_tagcode='${oItem.Trim}'"$, CurrentOrientation, isPhoneDevice))

				End If
				
							
				If (data_bulk_upload = 1 Or upload_bulk_data = 1) And (fieldval_04 >= 0) Then
					If(Global_Rows_COUNT > 0) Then
						lItems  = lItems * Global_Rows_COUNT
						Log($"Tamanho depois de multiplicado ${lItems} "$)
					Else
						If(Rows_COUNT > 0) Then
							lItems  = lItems * Rows_COUNT
							Log($"Tamanho depois de multiplicado ${lItems} "$)
						End If
					End If
				Else ' TESTAR NOS VARIOS AMBIENTES SE OS CAPITULOS ESTAO OK
					If(Rows_COUNT > 0) Then
						lItems  = lItems * Rows_COUNT
						Log($"Tamanho depois de multiplicado ${lItems} "$)
					End If
				End If

				
				If (lItems = 0) Then
					ilen = DefHeight
				Else
					ilen = lItems
				End If

				Dim id As ItemData
				id.Initialize
				
				If(ShareCode.ISPHONE) Then
					id.CollapsedHeight = 100dip
					Dim xHeight As Double = 55dip + (ilen * 1dip)
					id.ExpandedHeight = xHeight
					Log($"Tamanho depois de verificado SP ${xHeight}"$)
				Else
					id.CollapsedHeight = 55dip
					Dim xHeight As Double = (55dip + ilen)
					id.ExpandedHeight =  xHeight
					Log($"Tamanho depois de verificado ${xHeight}"$)
				End If

				
'				**********************************************************************************************
'				PARAMETROS ESPECIFICOS DE DISPOSITIVOS
'				**********************************************************************************************

				If ShareCode.DEVICE_BRAND.ToUpperCase = "WIKO" And ShareCode.DEVICE_MODEL.ToUpperCase = "JERRY2" Then
					id.ExpandedHeight = xHeight * 1.5
				else if ShareCode.DEVICE_BRAND.ToUpperCase = "LENOVO" And ShareCode.DEVICE_MODEL.ToUpperCase = "LENOVO TB-7504X" Then
					If (data_bulk_upload = 1) And (fieldval_04 >= 0) Then
						id.ExpandedHeight = xHeight * Rows_COUNT
					Else
'						id.ExpandedHeight = xHeight * 1.5 ' TESTAR SE NO CASO DA SHOWBRILHA
					End If
				End If
'				**********************************************************************************************
'				**********************************************************************************************
				
				
				Dim TaggedID As Int = idx+1
				Dim subidx As Int = 1
				If (include_numerators = 1) Then
					oTitle = $"${bullet_master}. ${oTitle}"$
				Else
					oTitle = $"${TaggedID}. ${oTitle}"$
				End If
				
				If Not(LastGroupRow = fieldval_04) Then
					LastGroupRow = fieldval_04
				End If
				Dim chapter As B4XView = CreateChapter(Colors.Gray, oTitle, id, idx, ChapterItem)
			
			Else
				If ((CurrentTotalChapters <= 1) And (StartNewWay)) Or (Not(StartNewWay)) Then
					MandatoryValues.Add( Types.MakeMandatoryRecords(item_tagcode, mandatory, bullet_master, bullet_child, True, False) )
				
					Object2Update=""

					If (oValType = 1) Then
						TopRec = CreateLineItemInformation(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 2) Or (oValType = 14) Then
						TopRec = CreateLineItemEditBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
'				Else if (oValType = 5) Then
'					TopRec = CreateLineItemRadioButtonOne(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey)
					Else if (oValType = 6) Then
						TopRec = CreateLineItemSelectBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
'				Else if (oValType = 7) Then
'					TopRec = CreateLineItemRadioButtonBulk(chapter, oTitle, TopRec, oItem1, oUKey)
					Else if (oValType = 8) Then
						TopRec = CreateLineItemColorButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 9) Then
						TopRec = CreateLineItemDateEditBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if ((oValType = 10) Or (oValType = 22)) Then
						TopRec = CreateLineConfirmButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 11) Then ' Nao é utilizado
						TopRec = CreateLineItemButton2(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 12) Then
						TopRec = CreateLineItemTimeEditBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if ((oValType = 13)  Or (oValType = 18)) Then
						TopRec = CreateLineItemNumberBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 15) Then
						Dim th As topheight = CreateLineItemGridList(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, gCols, gViewCols)
						'topheight(top As Int, height As Int)
						TopRec = th.top
						'id.ExpandedHeight = id.ExpandedHeight + th.height
					Else if ((oValType = 3) Or (oValType = 4) Or (oValType = 5) Or (oValType = 7) Or (oValType = 16)) Then
						TopRec = CreateLineItemButton2(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 19) Then ' TIP : FAZER 30 COM BASE NESTE
						TopRec = CreateLineItemRulerOption(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 20) Then
						TopRec = CreateLineItemConfirmButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 21) Then
						TopRec = CreateLineItemConfirmIntButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 23) Then
						'cla_item_editbox_valueint
						TopRec = CreateLineItemIntUpDownButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 25) Then
						'cla_item_editbox_valueint
						TopRec = CreateLineItemMultiOption(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 26) Then 
						'cla_item_editbox_valueint2Confirm
						TopRec = CreateLineItemConfirmInt2Button(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 27) Then
						'CLA_item_editbox_stock_PlusMinus
						TopRec = CreateLineItemStockPlusMinus(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 28) Then
						Global_oType = 28
						'CLA_ITEM_EditFullText
						TopRec = CreateLineItemEditFullText(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					else if (oValType = 29) Then
						Global_oType = 29
						'CLA_ITEM_Search
						TopRec = CreateLineSearch(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					else if (oValType = 30) Then
						'CLA_ITEM_RulerNA_Device
						TopRec = CreateLineItemRulerNAOption(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					End If
					'CreateLineItemColorButton
					subidx = subidx + 1
				End If
				
			End If
			
		Next

		If Not(Initial) Then
			clListView.Add(chapter, id)
			If (idx=0) And Utils.Int2Bool(ShareCode.DEVICE_AUTO_EXPAND_FIRST) Then
				ExpandItem(idx)

			End If
			idx = idx + 1
		End If
		
		Dim SQL As String = $"select * from dta_requests_relations where  request_tagcode='${data.Request.trim}'
					and relation_tagcode='${data.Action.trim}' and repeatcounter=${data.RepeatCounter}"$
		Private Recordw As Cursor
		Recordw = Starter.LocalSQLEVC.ExecQuery(SQL)
		If Recordw.RowCount > 0 Then
			Recordw.Position = 0
			REPORT_GENERATED = Utils.NNE(Recordw.GetString("file_report")) 'Recordw.GetInt("report_generated") = 1
			REPORT_FILE_GENERATED = Recordw.GetString("file_report")
			If (FinalObs.IsInitialized) Then FinalObs.Text = Utils.IfNullOrEmpty(Recordw.GetString("request_obs"), "")
		End If
		Recordw.Close
	Else
		ToastMessageShow(ShareCode.AvisoToastSemInfoTarefa, True)
		listsButtonClose_Click
	End If
	Record.Close
	
	LoadingProcess = False
	MainDataStart = data
	
	UpdateMainLayout
	WindowStatusUpdate
	If data.Info.Map1.IsInitialized Then
		If data.Info.Map1.Size >= 1 Then
			Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/cla-satus/update"$
			If Not(ShareCode.APP_WORKING_LOCAL) Then
				Utils.CallApi(0, data.Info.Map1, Me, Url, "", data.Request.trim)
			Else
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0,data.Request.Trim,data.Action.Trim,"")
				Utils.save2update(Url, Utils.MapToJson(data.Info.Map1), 0,WorkerND)
			End If
			data.Info.Map1.Clear
			Sleep(500)
		End If
	End If
	If data.Info.Map2.IsInitialized Then
		
		If data.Info.Map2.Size >= 1 Then
			Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clarel-satus/update"$
			If Not(ShareCode.APP_WORKING_LOCAL) Then
				Utils.CallApi(0, data.Info.Map2, Me, Url, "", data.Request.trim)
			Else
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0,data.Request.Trim,data.Action.Trim,"")
				Utils.save2update(Url, Utils.MapToJson(data.Info.Map2), 0, WorkerND)
			End If
			data.Info.Map2.Clear
			Sleep(250)
		End If
	End If
	ProgressDialogHide

End Sub


'*************************************************************************
' TIP: START ACTIVITY NEXT LOAD - STAND BY
'*************************************************************************
Sub ActivityStartNextLoad(data As RequestCLA)

	CurrentFilter = Utils.IfNullOrEmpty(data.Other.Filter, "")
	Log("Loading all others...")
	LoadingProcess = True
	Dim CurrentLoad As Int = 0

	'****************************************************************************
	'VERIFICA OS PARAMETROS JSON DA CHECKLIST - ENTIDADE ASSOCIADA ESTA EM Entity
	'****************************************************************************
	Dim data_bulk_upload As Int = Utils.IfNullOrEmpty( _
						DBStructures.GetScriptColumnStrEVCJSON($"select distinct paramters from dta_tasks_adds 
							where tagcode='${data.Task.Trim}'"$, "paramters", "data_bulk_upload"), "0")					
		
	Dim Ordena As String = "a.position"
	If (data_bulk_upload = 1) Then
		Ordena = "c.repeatcounter, e.fieldval_04, c.repeatfieldcounter, c.position"
		DataBulkUpload = data_bulk_upload
	End If
	
	Dim SQL As String = $"${DBStructures.EVC_V2_SQL_GET_TASK_ITEMS} and a.task_tagcode='${data.Task}' and c.repeatcounter='${data.RepeatCounter}'and c.repeatitemcounter=0 and c.request_tagcode='${data.Request}' ${CurrentFilter} order by ${Ordena}"$
	Log("«««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««")
	Log(SQL)
	isFirstChapter = True
	Private Record As Cursor = Starter.LocalSQLEVC.ExecQuery(SQL)
	If Record.RowCount > 0 Then
		Dim idx As Int = 0
		Dim subidx As Int = 1
		Dim TopRec As Int = 0
		Dim chapter As B4XView
'		Dim id As ItemData
		Dim TaggedID As Int = 0
		For Row = 0 To Record.RowCount-1
			Record.Position = Row
			
			Dim oLevel As Int = Record.GetInt("level")
			Dim oType As Int = Record.GetInt("item_type")
			If (oType = 1) Then 
				oType = 0
			End If
			Dim oItem1 As String = Record.GetString("item_tagcode")
			Dim oUKey As String = Record.GetString("unique_key")
			Dim title_override As Int = Record.GetInt("title_override")
			Dim mandatory As Int = Record.GetInt("mandatory")
			Dim bullet_master As Int = Record.GetInt("bullet_master")
			Dim bullet_child As Int = Record.GetInt("bullet_child")
			Dim item_tagcode As String = Record.GetString("item_tagcode")
			If (title_override = 1) Then
				Dim oTitle As String = Record.GetString("title2")
				If(Utils.isNullOrEmpty(oTitle)) Then
					oTitle = Record.GetString("title")
				End If
			Else
				Dim oTitle As String = Record.GetString("title")
			End If
			Dim oValType As Int = Record.GetInt("data_type")
			Dim infoquest As String = ""
			If (Utils.NNE(Record.GetString("info_notes"))) Then
				infoquest = Record.GetString("info_notes")
			Else
				infoquest = ""
			End If
			Dim gCols As Int = Record.GetInt("components_row")
			Dim gViewCols As Int = Record.GetInt("components_label")
			
			If ((oLevel = 0) And (oType = 0)) Then
				Log(CurrentLoad)
				TopRec = 0
				If (CurrentLoad >= 2) Then
					Dim thisChapter1  As ChapterRow = ChaptersList.Get(CurrentLoad-1)
					thisChapter1.ItemsLoaded = True
					ChaptersList.Set(CurrentLoad-1, thisChapter1)
					CurrentChapterLoaded = CurrentLoad
					Log($"Uploaded ID: ${CurrentLoad}"$)
				End If

				Dim TaggedID As Int = idx+1
				Dim subidx As Int = 1

				Dim thisChapter  As ChapterRow = ChaptersList.Get(CurrentLoad)
				Dim chapter As B4XView = thisChapter.RootPanel
				CurrentLoad = CurrentLoad + 1
			Else
				If (CurrentLoad >= 2) Then
					MandatoryValues.Add( Types.MakeMandatoryRecords(item_tagcode, mandatory, bullet_master, bullet_child, True, False) )
				
					Log($"Load Item: ${CurrentLoad} - ${TaggedID} - ${subidx}"$)
					Object2Update=""

					If (oValType = 1) Then
						TopRec = CreateLineItemInformation(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 2) Or (oValType = 14) Then
						TopRec = CreateLineItemEditBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 6) Then
						TopRec = CreateLineItemSelectBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 8) Then
						TopRec = CreateLineItemColorButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 9) Then
						TopRec = CreateLineItemDateEditBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if ((oValType = 10) Or (oValType = 22)) Then
						TopRec = CreateLineConfirmButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 11) Then
						TopRec = CreateLineItemButton2(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 12) Then
						TopRec = CreateLineItemTimeEditBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if ((oValType = 13)  Or (oValType = 18)) Then
						TopRec = CreateLineItemNumberBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 15) Then
						Dim th As topheight = CreateLineItemGridList(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, gCols, gViewCols)
						TopRec = th.top
					Else if ((oValType = 3) Or (oValType = 4) Or (oValType = 5) Or (oValType = 7) Or (oValType = 16)) Then
						TopRec = CreateLineItemButton2(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 19) Then ' TIP : FAZER 30 COM BASE NESTE
						TopRec = CreateLineItemRulerOption(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 20) Then
						TopRec = CreateLineItemConfirmButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 21) Then
						TopRec = CreateLineItemConfirmIntButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 23) Then
						TopRec = CreateLineItemIntUpDownButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 25) Then
						TopRec = CreateLineItemMultiOption(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 26) Then
						TopRec = CreateLineItemConfirmInt2Button(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 27) Then
						TopRec = CreateLineItemStockPlusMinus(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					Else if (oValType = 28) Then
						Global_oType = 28
						TopRec = CreateLineItemEditFullText(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					else if (oValType = 29) Then
						Global_oType = 29
						TopRec = CreateLineSearch(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					else if (oValType = 30) Then
						TopRec = CreateLineItemRulerNAOption(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					End If
					subidx = subidx + 1
				End If
				
			End If
		Next
		clListView.Refresh
	End If
	Record.Close
	
	LoadingProcess = False
End Sub

'*************************************************************************
' TIP: START ACTIVITY CHAPTER PRESS/CLICK
'*************************************************************************
Sub ActivityStartThisChapter(data As RequestCLA, item_tagcode As String, Index As Int) As ResumableSub
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(150)
	CurrentFilter = Utils.IfNullOrEmpty(data.Other.Filter, "")
	Log("Loading all others...")
	LoadingProcess = True
	Dim CurrentLoad As Int = 0
	
	Dim thisChapterSql As String = $" and (a.item_tagcode='${item_tagcode.Trim}' or a.parent_tagcode in (select unique_key from dta_tasks_items where task_tagcode='${data.Task.trim}' and item_tagcode='${item_tagcode.Trim}'))"$

'	CurrentChapterLoaded = 0
'	CurrentTotalChapters = 0

	'****************************************************************************
	'VERIFICA OS PARAMETROS JSON DA CHECKLIST - ENTIDADE ASSOCIADA ESTA EM Entity
	'****************************************************************************
	Dim data_bulk_upload As Int = Utils.IfNullOrEmpty( _
						DBStructures.GetScriptColumnStrEVCJSON($"select distinct paramters from dta_tasks_adds 
							where tagcode='${data.Task.Trim}'"$, "paramters", "data_bulk_upload"), "0")					
		
	Dim Ordena As String = "a.position"
	If (data_bulk_upload = 1) Then
		Ordena = "c.repeatcounter, e.fieldval_04, c.repeatfieldcounter, c.position"
		DataBulkUpload = data_bulk_upload
	End If
	
	Dim SQL As String = $"${DBStructures.EVC_V2_SQL_GET_TASK_ITEMS} and a.task_tagcode='${data.Task}' ${thisChapterSql} and c.repeatcounter='${data.RepeatCounter}'and c.repeatitemcounter=0 and c.request_tagcode='${data.Request}' ${CurrentFilter} order by ${Ordena}"$
	Log("«««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««««")
	Log(SQL)
	isFirstChapter = True
	Private Record As Cursor = Starter.LocalSQLEVC.ExecQuery(SQL)
	If Record.RowCount > 0 Then
		Dim idx As Int = Index
		Dim subidx As Int = 1
		Dim TopRec As Int = 0
		Dim chapter As B4XView
'		Dim id As ItemData
		Dim TaggedID As Int = 0
		For Row = 0 To Record.RowCount-1
			Record.Position = Row
			
			Dim oLevel As Int = Record.GetInt("level")
			Dim oType As Int = Record.GetInt("item_type")
			If (oType = 1) Then 
				oType = 0
			End If
			Dim oItem1 As String = Record.GetString("item_tagcode")
			Dim oUKey As String = Record.GetString("unique_key")
			Dim title_override As Int = Record.GetInt("title_override")
			Dim mandatory As Int = Record.GetInt("mandatory")
			Dim bullet_master As Int = Record.GetInt("bullet_master")
			Dim bullet_child As Int = Record.GetInt("bullet_child")
			Dim item_tagcode As String = Record.GetString("item_tagcode")
			If (title_override = 1) Then
				Dim oTitle As String = Record.GetString("title2")
				If(Utils.isNullOrEmpty(oTitle)) Then
					oTitle = Record.GetString("title")
				End If
			Else
				Dim oTitle As String = Record.GetString("title")
			End If
			Dim oValType As Int = Record.GetInt("data_type")
			Dim infoquest As String = ""
			If (Utils.NNE(Record.GetString("info_notes"))) Then
				infoquest = Record.GetString("info_notes")
			Else
				infoquest = ""
			End If
			Dim gCols As Int = Record.GetInt("components_row")
			Dim gViewCols As Int = Record.GetInt("components_label")
			
			If ((oLevel = 0) And (oType = 0)) Then
				Log(Index)
				TopRec = 0
				Dim TaggedID As Int = idx+1
				Dim subidx As Int = 1

				Dim thisChapter  As ChapterRow = ChaptersList.Get(Index)
				Dim chapter As B4XView = thisChapter.RootPanel
			Else
				MandatoryValues.Add( Types.MakeMandatoryRecords(item_tagcode, mandatory, bullet_master, bullet_child, True, False) )
			
				Log($"Load Item: ${Index} - ${TaggedID} - ${subidx}"$)
				Object2Update=""
				
				If (oValType = 1) Then
					TopRec = CreateLineItemInformation(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 2) Or (oValType = 14) Then
					TopRec = CreateLineItemEditBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 6) Then
					TopRec = CreateLineItemSelectBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 8) Then
					TopRec = CreateLineItemColorButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 9) Then
					TopRec = CreateLineItemDateEditBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if ((oValType = 10) Or (oValType = 22)) Then
					TopRec = CreateLineConfirmButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 11) Then
					TopRec = CreateLineItemButton2(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 12) Then
					TopRec = CreateLineItemTimeEditBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if ((oValType = 13)  Or (oValType = 18)) Then
					TopRec = CreateLineItemNumberBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 15) Then
					Dim th As topheight = CreateLineItemGridList(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, gCols, gViewCols)
					TopRec = th.top
				Else if ((oValType = 3) Or (oValType = 4) Or (oValType = 5) Or (oValType = 7) Or (oValType = 16)) Then
					TopRec = CreateLineItemButton2(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 19) Then ' TIP : FAZER 30 COM BASE NESTE
					TopRec = CreateLineItemRulerOption(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 20) Then
					TopRec = CreateLineItemConfirmButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 21) Then
					TopRec = CreateLineItemConfirmIntButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 23) Then
					TopRec = CreateLineItemIntUpDownButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 25) Then
					TopRec = CreateLineItemMultiOption(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 26) Then
					TopRec = CreateLineItemConfirmInt2Button(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 27) Then
					TopRec = CreateLineItemStockPlusMinus(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 28) Then
					Global_oType = 28
					TopRec = CreateLineItemEditFullText(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				else if (oValType = 29) Then
					Global_oType = 29
					TopRec = CreateLineSearch(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				else if (oValType = 30) Then
					TopRec = CreateLineItemRulerNAOption(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				End If
				subidx = subidx + 1
				
			End If
		Next
		clListView.Refresh
	End If
	Record.Close
	ProgressDialogHide
	LoadingProcess = False
	Return True
End Sub

Sub findComponentTag(compType As Object, compTag As String) As Object
	Dim ret As Object
	For n = 0 To clListView.Size-1
		Dim pnl As B4XView = clListView.GetPanel(n)
		'Grupo
		For Each v As B4XView In pnl.GetAllViewsRecursive
			'Dim ss As String = GetType(v)
			If ((compTag = v.Tag)) Then ' And (ss = compType)) Then
'				Log(GetType(v))
				ret = v
			End If
			
		Next
	Next
	Return ret
End Sub

Sub StartCLA_Filter(data As RequestCLA, Entity As String)
	
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(250)
	
	CurrentFilter = Utils.IfNullOrEmpty(data.Other.Filter, "")
	Dim CurrentFilter2 As String = Utils.IfNullOrEmpty(data.Other.Filter2, "")
	
	Private Record As Cursor

	If (DBUtils.TableExists(Starter.LocalSQLEVC, "dta_tasks_items_adds")) Then
		Dim NameSQL As String = DBStructures.EVC_V2_SQL_GET_TASK_ITEMS
		Dim Name2SQL As String = DBStructures.EVC_V2_SQL_GET_TASK_ITEMS_TWO
	Else
		Dim NameSQL As String = DBStructures.EVC_V1_SQL_GET_TASK_ITEMS
		Dim Name2SQL As String = DBStructures.EVC_V1_SQL_GET_TASK_ITEMS_TWO
	End If

	Dim SQL1  As String = $"${NameSQL} and a.task_tagcode='${data.Task}' and c.request_tagcode='${CurrentCLA.Request}' ${CurrentFilter} ${CurrentFilter2}"$
'	Log(SQL1)
	Dim SQL3 As String = $"${NameSQL} and a.task_tagcode='${data.Task}'
							and a.level=0 
							and a.unique_key in (${Name2SQL}  and a.task_tagcode='${data.Task}' ${CurrentFilter} ${CurrentFilter2}) "$
'	Log(SQL3)
							
'	Else
'		Dim SQL1  As String = $"${DBStructures.EVC_SQL_GET_TASK_ITEMS} and a.task_tagcode='${data.Task}' ${CurrentFilter} "$
'		Dim SQL3 As String = $"${DBStructures.EVC_SQL_GET_TASK_ITEMS} and a.task_tagcode='${data.Task}'
'							and a.level=0 
'							and a.unique_key in (${DBStructures.EVC_SQL_GET_TASK_ITEMS_TWO}  and a.task_tagcode='${data.Task}' ${CurrentFilter}) "$
'	End If
									
	Dim SQL  As String = $"${SQL1} union ${SQL3}  order by position "$
				
	Log(SQL)
	Record = Starter.LocalSQLEVC.ExecQuery(SQL)
	If Record.RowCount > 0 Then
		clListView.Clear
		ComponentList.Clear
		Dim idx As Int = 0
		Dim subidx As Int = 1
		Dim TopRec As Int = 0
		Dim Initial As Boolean = True
		Dim chapter As B4XView
		Dim id As ItemData
		Dim TaggedID As Int = 0
		For Row = 0 To Record.RowCount-1
			Record.Position = Row
			
			Dim oLevel As Int = Record.GetInt("level")
			Dim oType As Int = Record.GetInt("item_type")
			If (oType = 1) Then
				oType = 0
			End If
			Dim oItem1 As String = Record.GetString("item_tagcode")
			Dim oUKey As String = Record.GetString("unique_key")
			Dim oTitle As String = Record.GetString("title")
			Dim oValType As Int = Record.GetInt("data_type")
			Dim repeat As Int = Record.GetInt("repeated")
			
			Dim mandatory As Int = Record.GetInt("mandatory")
			Dim bullet_master As Int = Record.GetInt("bullet_master")
			Dim bullet_child As Int = Record.GetInt("bullet_child")
			Dim item_tagcode As String = Record.GetString("item_tagcode")
			
			
			Dim infoquest As String = ""
			If (Utils.NNE(Record.GetString("info_notes"))) Then
				infoquest = Record.GetString("info_notes")
			Else
				infoquest = ""
			End If
'			Dim ExtraHeight As Int = 0
			
			Dim ChapterItem As RequestCLAItem = Types.MakeRequestCLAItem(data.Request, _
							data.Action, data.Task, oItem1, oUKey, "",0,0,0, "", "", "", repeat, 0, 1, "", _
							DBStructures.DB2CLATaskItem(data.Task.Trim, oUKey), "")
			
			'If (data.Request = "I_2019_190346") Then
			Dim oItem As String = oUKey
			'Else
			'	Dim oItem As String = oItem1
			'End If

			Dim gCols As Int = Record.GetInt("components_row")
			Dim gViewCols As Int = Record.GetInt("components_label")
			
			Dim bullet_master As Int = Record.GetInt("bullet_master")
			Dim include_numerators As Int = Record.GetInt("include_numerators")
			
			If ((oLevel = 0) And (oType = 0)) Then
				' Verifica total de registos dependentes
				TopRec = 0
				If Not(Initial) Then
					clListView.Add(chapter, id)
					If (idx=0) And Utils.Int2Bool(ShareCode.DEVICE_AUTO_EXPAND_FIRST) Then
						ExpandItem(idx)
					Else
						If Utils.Int2Bool(ShareCode.DEVICE_AUTO_EXPAND_CHECKLIST) Then
							ExpandItem(idx)
						End If
					End If
					idx = idx + 1
				Else
					Initial = False
				End If

				Dim DefHeight As Int = 75dip
				Dim ilen As Int = 0
				
				Dim SQLCounter As String = $"SELECT COUNT(task_tagcode) As counter FROM dta_requests_values
			 					WHERE LENGTH(title) > 0 AND LENGTH(tagcode) > 0  
			 					AND request_tagcode='${data.Request}'
			 					AND inner_request_tagcode='${data.Action}'
			 					And task_tagcode='${data.Task}'
			 					And unique_key IN (SELECT DISTINCT unique_key 
								FROM dta_tasks_items 
								WHERE 1=1
			 					And task_tagcode='${data.Task}'
			 					And parent_tagcode='${oUKey}')"$
				Dim Rows_COUNT  As Int = DBStructures.GetScriptColumnIntEVC(SQLCounter, "counter")
				Dim lItems As Int = DBStructures.getTaskRecordGroupItemsCount($" and a.task_tagcode='${data.Task.Trim}'
								and a.parent_tagcode='${oItem.Trim}' ${data.Other.Filter}"$, CurrentOrientation, isPhoneDevice)
				If(Rows_COUNT > 0) Then
					lItems  = (lItems) * Rows_COUNT
				End If
				
				If (lItems = 0) Then
					ilen = DefHeight
				Else
					ilen = lItems
				End If

				Dim id As ItemData
				id.Initialize
				
				If(ShareCode.ISPHONE) Then
					id.CollapsedHeight = 100dip
					Dim xHeight As Double = 55dip + (ilen * 1dip)
					id.ExpandedHeight = xHeight
					Log($"Tamanho depois de verificado SP ${xHeight}"$)
				Else
					id.CollapsedHeight = 55dip
					Dim xHeight As Double = (55dip + ilen)
					id.ExpandedHeight =  xHeight
					Log($"Tamanho depois de verificado ${xHeight}"$)
				End If
			
				Dim TaggedID As Int = idx+1
				Dim subidx As Int = 1
				If (include_numerators = 1) Then
					oTitle = $"${bullet_master}. ${oTitle}"$
				Else
					oTitle = $"${TaggedID}. ${oTitle}"$
				End If
				
				'***************************************************
				' A verificar filtros
				'***************************************************
				
				Dim chapter As B4XView = CreateChapter(Colors.Gray, $"${TaggedID} - ${oTitle}"$, id, idx, ChapterItem)
			Else
				
				MandatoryValues.Add( Types.MakeMandatoryRecords(item_tagcode, mandatory, bullet_master, bullet_child, True, False) ) ' As MandatoryRecords
				If (oValType = 1) Then
					'TopRec = CreateLineItemRadioButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
					TopRec = CreateLineItemInformation(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 2) Or (oValType = 14) Then
					TopRec = CreateLineItemEditBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
'				Else if (oValType = 5) Then
'					TopRec = CreateLineItemRadioButtonOne(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey)
				Else if (oValType = 6) Then
					TopRec = CreateLineItemSelectBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
'				Else if (oValType = 7) Then
'					TopRec = CreateLineItemRadioButtonBulk(chapter, oTitle, TopRec, oItem1, oUKey)
				Else if (oValType = 8) Then
					TopRec = CreateLineItemColorButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 9) Then
					TopRec = CreateLineItemDateEditBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if ((oValType = 10) Or (oValType = 22)) Then
					TopRec = CreateLineConfirmButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 11) Then
					TopRec = CreateLineItemButton2(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 12) Then
					TopRec = CreateLineItemTimeEditBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if ((oValType = 13) Or (oValType = 18)) Then
					TopRec = CreateLineItemNumberBox(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 15) Then
					Dim th As topheight = CreateLineItemGridList(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, gCols, gViewCols)
					'topheight(top As Int, height As Int)
					TopRec = th.top
					'id.ExpandedHeight = id.ExpandedHeight + th.height
				Else if ((oValType = 3) Or (oValType = 4) Or (oValType = 5) Or (oValType = 7) Or (oValType = 16)) Then
					TopRec = CreateLineItemButton2(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 19) Then
					TopRec = CreateLineItemRulerOption(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 20) Then
					TopRec = CreateLineItemConfirmButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 21) Then
					TopRec = CreateLineItemConfirmIntButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 23) Then
					'cla_item_editbox_valueint
					TopRec = CreateLineItemIntUpDownButton(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 25) Then
					'cla_item_editbox_valueint
					TopRec = CreateLineItemMultiOption(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 26) Then
					'cla_item_editbox_valueint2Confirm
					TopRec = CreateLineItemConfirmInt2Button(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				Else if (oValType = 27) Then
					'CLA_item_editbox_stock_PlusMinus
					TopRec = CreateLineItemStockPlusMinus(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				else if (oValType = 28) Then
					'CLA_ITEM_EditFullText
					TopRec = CreateLineItemEditFullText(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				else if (oValType = 29) Then
					'CLA_ITEM_Search
					TopRec = CreateLineSearch(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				else if (oValType = 30) Then
					'CLA_ITEM_RulerNA_Device
					TopRec = CreateLineItemRulerNAOption(TaggedID, subidx, chapter, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
				End If
				'CreateLineItemColorButton
				subidx = subidx + 1
			End If
			
		Next

		If Not(Initial) Then
			clListView.Add(chapter, id)
			If (idx=0) And Utils.Int2Bool(ShareCode.DEVICE_AUTO_EXPAND_FIRST) Then
				ExpandItem(idx)
			Else
				If Utils.Int2Bool(ShareCode.DEVICE_AUTO_EXPAND_CHECKLIST) Then
					ExpandItem(idx)
				End If
			End If
			idx = idx + 1
		End If

	Else
		ToastMessageShow(ShareCode.AvisoToastSemInfoTarefa, True)
		listsButtonClose_Click
	End If
	Record.Close
	ProgressDialogHide
End Sub

Sub getRequestObject( RI As RequestInfo )
	'***************************************************************************************************************************************
	'	IDENTIFICA OBJECTOS RELACIONADAS COM A INTERVENÇÃO
	'***************************************************************************************************************************************
	noObjectPanel.Visible = False
	
	Private objRecord As Cursor
'	Dim Rows As Int = 0
	Dim objSQL As String = $"${DBStructures.EVC_SQL_CURRENT_OBJECTS} where
				a.tagcode in (select object_tagcode from dta_requests where 
				tagcode in (select request_tagcode from dta_requests_relations where 
				request_tagcode='${CurrentCLA.Request}' and relation_tagcode='${CurrentCLA.Action}' and repeatcounter=${CurrentCLA.RepeatCounter}))"$
'	Log(objSQL)
	objRecord = Starter.LocalSQLEVC.ExecQuery(objSQL)
	ObjectExists = objRecord.RowCount > 0
	If ObjectExists Then
		objRecord.Position = 0
		Dim name As String = objRecord.GetString("name")
		objectCode.Text = objRecord.GetString("reference")
		objectNotes.Text = Utils.IfNullOrEmpty(objRecord.GetString("notes"), "")
		Dim obTagCode As String =  objRecord.GetString("tagcode")
		objectTagcode.Text = name
		objectType.Text = objRecord.GetString("typedesc")
		
		If obTagCode.Contains("__NONE__") Then
			noObjectPanel.Visible = True
		Else
			cl_InfotopTitle.Text = name
			cl_FinaltopTitle.Text = name
			Try
				If Utils.NNE(objRecord.GetString("image")) Then
					'**********************************************************
					' ALTERACAO PC - ALTERADO O PARAMETRO GRAVITY DE CENTER PARA FILL
					'**********************************************************
					objectImage.Gravity = Gravity.FILL
					objectImage.Bitmap = Utils.B64ToBitmap(objRecord.GetString("image"))
				Else
					Dim thefile As String = objRecord.GetString("filename")
					If Utils.NNE(thefile) Then
						If File.Exists(Starter.InternalFolder, thefile) Then
							objectImage.Gravity = Gravity.FILL
							objectImage.Bitmap = LoadBitmap(Starter.InternalFolder, thefile)
						End If
					End If
				End If
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
			
			
			' CRIA A LISTA COM OS DETALHES DO OBJECTO
			' DOCUMENTOS / DADOS / PROPRIEDADES E DEFINE A ORDEM DE APRESENTACAO
			
			ShareCode.DEVICE_CHECKLIST_MYDATA_DOCS_ONTOP=0
			
			If Utils.Int2Bool(ShareCode.DEVICE_CHECKLIST_MYDATA_DOCS_ONTOP) Then
				CreateobjectDetailsDocuments(0, True, objRecord.GetString("tagcode"), RI)
				CreateobjectDetailsData(1, False, objRecord)
				CreateobjectDetailsDataProp(3, False, objRecord.GetString("tagcode"))
			Else
				CreateobjectDetailsData(0, True, objRecord)
				CreateobjectDetailsDataProp(2, False, objRecord.GetString("tagcode"))
				CreateobjectDetailsDocuments(3, False, objRecord.GetString("tagcode"), RI)
			End If
			
			
		End If
		
		MainObjectTagCode = obTagCode.Trim 'objectTagcode.Text.Trim
	Else
'		Button2.Visible = False
'		Button5.Visible = False
'		TabButtonChangeObject.Visible = False
		noObjectPanel.Visible = False
		createObjectPanel.Visible = True
	End If
	objRecord.Close
	
End Sub

Sub CreateobjectDetailsDocuments(idx As Int, clear As Boolean, Tagcode As String, RI As RequestInfo) 'Record As Cursor)
	'objectPropertyListView.Clear
	'MakeDocumentsFolder(3, Tagcode, "Documentos do objecto", RI)
	If clear Then
		objectListView.Clear
		clListView.Clear
		ComponentList.Clear
	End If
	
	MakeDocumentsFolder(idx, Tagcode, "Documentos do objecto", RI)
End Sub

Sub MakeDocumentsFolder(idx As Int, tagcode As String, title As String, RI As RequestInfo)
	Dim id As ItemData
	id.Initialize
	id.CollapsedHeight = 50dip
'	Dim ExpandThis As Boolean = False
	
'	'Dim tgobject As String = Record.GetString("tagcode")
'	Dim SQL As String = $"SELECT a.id,a.tagcode, a.title, a.doc_filename, a.doc_original, a.active
'						FROM dta_documents AS a
'						INNER JOIN dta_objects_documents AS b ON (b.document_tagcode=a.tagcode)
'						WHERE b.object_tagcode='${tagcode}'"$
						
	Dim SQL As String = $"SELECT a.id,a.tagcode, a.title as title, a.doc_filename as filename, a.doc_original, a.active
						FROM dta_documents AS a
						INNER JOIN dta_objects_documents AS b ON (b.document_tagcode=a.tagcode)
						WHERE b.object_tagcode='${RI.RIObject}' 
						union 
						SELECT a1.id,a1.tagcode, a1.title as title, a1.doc_filename as filename, a1.doc_original, a1.active
						FROM dta_documents AS a1
						INNER JOIN dta_objects_documents AS b1 ON (b1.document_tagcode=a1.tagcode)
						WHERE b1.object_tagcode='${RI.RIEntity}' 
						union 
						SELECT a2.id,a2.tagcode, a2.title as title, a2.doc_filename as filename, a2.doc_original, a2.active
						FROM dta_documents AS a2
						INNER JOIN dta_typerequests_documents AS b2 ON (b2.document_tagcode=a2.tagcode)
						WHERE b2.typerequest_tagcode='${RI.RITypeRequest}'
						union 
						SELECT a3.id,a3.tagcode, a3.title as title, a3.doc_filename as filename, a3.doc_original, a3.active
						FROM dta_documents AS a3
						INNER JOIN dta_requests_documents AS b3 ON (b3.document_tagcode=a3.tagcode)
						WHERE b3.request_tagcode='${RI.Request}'"$
						
'	Log(SQL)

	Dim RecordRowCount As Int = DBStructures.GetScriptCountEVC(SQL)
	Log("***************************************")
	Log($"Total de documentos : ${RecordRowCount}"$)
	Log("***************************************")
	
	
	Dim Height As Int = 0
	If RecordRowCount = 0 Then
		id.ExpandedHeight = 50dip
	Else
		id.ExpandedHeight = 50dip + (60dip * RecordRowCount)
	End If
	Dim chapter As B4XView = CreateChapterProp(Colors.Gray, title, id, idx, objectListView.AsView.Width, False)
'	idx = idx +1
'	ExpandThis = True

	Private Record2 As Cursor = Starter.LocalSQLEVC.ExecQuery(SQL)
	Dim row As Int = 0
	Dim AlreadyAnswered As Boolean = False
	For n = 0 To Record2.RowCount-1
		Record2.Position = n
		Dim p As Panel
		p.Initialize( "objectListView")
		Activity.AddView(p, 0, 0, objectListView.AsView.Width, id.ExpandedHeight)
		p.LoadLayout("itemDocument")
		p.RemoveView
		p.Tag = idx
		Dim thisTitle As String = $"Documento ${n}"$
		Try
			Dim thisTitle As String = Utils.IfNullOrEmpty( Record2.GetString("title"), "")
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		Dim thisDocument As String = $"documento_${n}.pdf"$
		Log(thisDocument)
		Try
			Dim thisDocument As String = Utils.IfNullOrEmpty(Record2.GetString("filename"), "")
			'*******************************************************************
			' ALTERACO PC - OBJECTS
			'*******************************************************************
			If Not(File.Exists(Starter.InternalFolder,thisDocument)) Then
				If AlreadyAnswered Then
					Dim res As ResumableSub = GetMissingDocument(thisDocument)
					Wait For(res) Complete (Downloaded As Boolean)
					If(Downloaded) Then
						Log($"Missing File downloaded"$)
					End If
				Else
					Msgbox2Async(ShareCode.userfilenoindentified, ShareCode.GeneralInfoTitle, ShareCode.Option_YES, "", ShareCode.Option_NO,Null,False)
					Wait For Msgbox_Result (Result As Int)
									
					If Result = DialogResponse.POSITIVE Then
						AlreadyAnswered = True
						Dim res As ResumableSub = GetMissingDocument(thisDocument)
						Wait For(res) Complete (Downloaded As Boolean)
						If(Downloaded) Then
							Log($"Missing File downloaded"$)
						End If
					End If
				End If
		
			End If
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		
		Log(thisDocument)
		lblPropertyValue.Text = thisTitle
		
		If thisDocument.EndsWith("pdf") Then
			lblIcon.text = Chr(0xF1C1)
		else if thisDocument.EndsWith ("xls") Or thisDocument.EndsWith ("xlsx") Then
			lblIcon.Text = Chr(0xF1C3)
		Else If thisDocument.EndsWith ("doc") Or thisDocument.EndsWith ("docx") Then
			lblIcon.Text = Chr(0xF1C2)
		Else If thisDocument.EndsWith ("jpg") Or thisDocument.EndsWith ("png") Then
			lblIcon.Text = Chr(0xF1C5)
		Else
			lblIcon.Text = Chr(0xF016)
		End If
		
		lblIcon.tag = thisDocument '.GetString("doc_filename")
		pnlGroupExpandedProp.AddView(p, 0, Height, objectListView.AsView.Width, 60dip)
'		Dim Height As Int = ((RecordRowCount+1)*60dip)-60dip
		Height = Height + 60dip
		row = row +1
	Next
	Record2.Close
	AlreadyAnswered = False
	
	objectListView.Add(chapter, id)
	ExpandItemObj(idx)
	'If ExpandThis Then ExpandItemProp(idx)
End Sub

Sub GetMissingDocument(DocName As String) As ResumableSub
	
	Dim GlobalFTP As FTP
	GlobalFTP.Initialize("ftp", $"${ShareCode.APPL_ACCOUNT.ToLowerCase}.${ShareCode.APPL_HOST}"$, 21, $"${ShareCode.APP_FTP_USER}@${ShareCode.APPL_HOST}"$, "..VRCG@EvolutionCheck20!9")
	GlobalFTP.PassiveMode = True
	GlobalFTP.TimeoutMs = 240000
	Try
		Dim sf As Object = GlobalFTP.DownloadFile("/" & ShareCode.APP_DOMAIN & "/docs/" & DocName, False, Starter.InternalFolder, DocName)
		Wait For (sf) FTP_DownloadCompleted (ServerPath As String, Success As Boolean)
				
		If Success Then
			Log($"/docs/${DocName} : file was download successfully"$)
		Else
			Log($"/docs/${DocName} : Error downloading file"$)
		End If
		GlobalFTP.Close
		Return True
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
		GlobalFTP.Close
		Return False
	End Try
	
End Sub

Sub lblPropertyValue_Click
	Dim lbl As Label = Sender
	Dim Filename As String = lbl.Tag
	Dim Continua As Boolean = False
	If Not(File.Exists(Starter.SharedFolder, Filename)) Then
		If File.Exists(Starter.InternalFolder, Filename) Then
			File.Copy(Starter.InternalFolder, Filename, Starter.SharedFolder, Filename)
			Continua = True
		End If
	Else
		Continua = True
	End If
	If (Continua) Then
		Utils.ViewPDFFile(Filename)
	End If
End Sub

Sub lblIcon_Click 'Document Click
	Dim lbl As Label = Sender
	Dim Filename As String = lbl.Tag
	Dim Continua As Boolean = False
	
	Try Copy_File(Filename)
		Continua = True
	Catch
		ToastMessageShow("Erro ao copiar arquivo", True)
	End Try
	
	If (Continua) Then
		Utils.ViewFile(Filename)
'		If Filename.ToLowerCase.EndsWith("xls") Or Filename.ToLowerCase.EndsWith("xlsx") Then
'			Utils.ViewPDFFile(Filename)
'		else if Filename.ToLowerCase.EndsWith("doc") Or Filename.ToLowerCase.EndsWith("docx") Then
'			Utils.ViewPDFFile(Filename)
'		else if	Filename.ToLowerCase.EndsWith("pdf") Then
'			Utils.ViewPDFFile(Filename)
'		End If
	End If
End Sub

Sub Copy_File(Filename As String)
	If Not(File.Exists(Starter.SharedFolder, Filename)) Then
		If File.Exists(Starter.InternalFolder, Filename) Then
			File.Copy(Starter.InternalFolder, Filename, Starter.SharedFolder, Filename)
		End If
	End If
End Sub

Sub ChapterRepeat(taggedID As Int, parExpand As Panel, Unique_Key As String , repeatitemcounter As Int)
	Private Record As Cursor
	
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(250)
	
	If (DBUtils.TableExists(Starter.LocalSQLEVC, "dta_tasks_items_adds")) Then
		Dim NameSQL As String = DBStructures.EVC_V2_SQL_GET_TASK_ITEMS
	Else
		Dim NameSQL As String = DBStructures.EVC_V1_SQL_GET_TASK_ITEMS
	End If
	
	Dim SQL As String = $"${NameSQL} and a.task_tagcode='${CurrentCLA.Task}'
			and c.request_tagcode='${CurrentCLA.Request}' 
			and c.repeatitemcounter='${repeatitemcounter}' 
			And a.parent_tagcode='${Unique_Key}' ${CurrentFilter} order by a.position"$
			
	Log(SQL)
	Record = Starter.LocalSQLEVC.ExecQuery(SQL)
	If Record.RowCount > 0 Then
	


		Dim TopRec As Int = 0
		Dim subidx As Int = 1
		
		
		
		For Row = 0 To Record.RowCount-1
			Record.Position = Row
			
			Dim oValType As Int = Record.GetInt("data_type")
			Dim oItem1 As String = Record.GetString("item_tagcode")
			Dim oTitle As String = Record.GetString("title")
			Dim oUKey As String = Record.GetString("unique_key")
'			Dim oRepeatitemcounter As Int = repeatitemcounter
			
			Dim mandatory As Int = Record.GetInt("mandatory")
			Dim bullet_master As Int = Record.GetInt("bullet_master")
			Dim bullet_child As Int = Record.GetInt("bullet_child")
			Dim item_tagcode As String = Record.GetString("item_tagcode")
			
			Dim infoquest As String = ""
			
			If (Utils.NNE(Record.GetString("info_notes"))) Then
				infoquest = Record.GetString("info_notes")
			Else
				infoquest = ""
			End If

			MandatoryValues.Add( Types.MakeMandatoryRecords(item_tagcode, mandatory, bullet_master, bullet_child, True, False) )
			
			Dim RL As ResumableSub = RemoveDuplicatesInComponentList(item_tagcode,repeatitemcounter)
			wait for (RL) complete (Finished As Boolean)
			
			If (oValType = 1) Then
				'TopRec = CreateLineItemRadioButton(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
				TopRec = CreateLineItemInformation(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			Else if (oValType = 2) Or (oValType = 14) Then
				TopRec = CreateLineItemEditBox(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			Else if (oValType = 6) Then
				TopRec = CreateLineItemSelectBox(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			Else if (oValType = 8) Then
				TopRec = CreateLineItemColorButton(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			Else if (oValType = 9) Then
				TopRec = CreateLineItemDateEditBox(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			Else if ((oValType = 10) Or (oValType = 22)) Then
				TopRec = CreateLineConfirmButton(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
			Else if (oValType = 11) Then
				TopRec = CreateLineItemButton2(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			Else if (oValType = 12) Then
				TopRec = CreateLineItemTimeEditBox(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			Else if ((oValType = 13) Or (oValType = 18)) Then
				TopRec = CreateLineItemNumberBox(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			Else if ((oValType = 3) Or (oValType = 4) Or (oValType = 5) Or (oValType = 7) Or (oValType = 16)) Then
				TopRec = CreateLineItemButton2(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			Else if (oValType = 19) Then
				TopRec = CreateLineItemRulerOption(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			Else if (oValType = 20) Then
				TopRec = CreateLineItemConfirmButton(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			Else if (oValType = 21) Then
				TopRec = CreateLineItemConfirmIntButton(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			Else if (oValType = 23) Then
				'cla_item_editbox_valueint
				TopRec = CreateLineItemIntUpDownButton(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
			Else if (oValType = 25) Then
				'cla_item_editbox_valueint
				TopRec = CreateLineItemMultiOption(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
			Else if (oValType = 26) Then
				'cla_item_editbox_valueint2Confirm
				TopRec = CreateLineItemConfirmInt2Button(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, 0, 0)
			Else if (oValType = 27) Then
				'CLA_item_editbox_stock_PlusMinus
				TopRec = CreateLineItemStockPlusMinus(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 0)
			else if (oValType = 28) Then
				'CLA_ITEM_EditFullText
				TopRec = CreateLineItemEditFullText(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			else if (oValType = 29) Then
				'CLA_ITEM_Search
				TopRec = CreateLineSearch(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			else if (oValType = 30) Then
				'CLA_ITEM_RulerNA_Device
				TopRec = CreateLineItemRulerNAOption(taggedID, subidx, parExpand, oTitle, TopRec, oItem1, oUKey, Record, infoquest, repeatitemcounter, 1)
			End If
			subidx = subidx + 1
			
		Next
	Else
		ToastMessageShow(ShareCode.AvisoToastSemInfoTarefa, True) ' Faltam dados vindos do BO
		ProgressDialogHide
		listsButtonClose_Click
	End If
	Record.Close
	ProgressDialogHide
	


	
End Sub

'**********************************************************************************
' TIP: VERIFICA ITENS LIGADOS À BASE DE DADOS DO OBJECTO PARA ACTUALIZAÇÃO
'**********************************************************************************
Sub getObjectValue(CLA As RequestCLA, item As String, ukey As String) As String
	Dim ret As String = ""
	
	Private Record9 As Cursor
	Dim sSQL As String = $"select d.object_tagcode, c.connectmode, c.connect2data, b.do_name, b.do_field, b.do_is_additional, a.execute_value
							from dta_requests_values as a
							INNER JOIN dta_tasks_items AS b ON (b.task_tagcode=a.task_tagcode AND b.item_tagcode=a.item_tagcode AND b.unique_key=a.unique_key)
							INNER JOIN dta_tasks AS c ON (c.tagcode=b.task_tagcode)
							INNER JOIN dta_requests AS d ON (d.tagcode=a.request_tagcode)
							WHERE a.execute_status>=1
							AND a.request_tagcode='${CurrentCLA.Request.Trim}'
							AND a.inner_request_tagcode='${CurrentCLA.Action.Trim}'
							AND a.task_tagcode='${CurrentCLA.Task.Trim}'
							AND a.item_tagcode='${item.Trim}'
							AND a.unique_key='${ukey.Trim}'
							AND c.connect2data <> ''
							AND b.do_name <> ''
							AND b.do_field <> ''"$
	Log(sSQL)
	Record9 = Starter.LocalSQLEVC.ExecQuery(sSQL)
	If Record9.RowCount > 0 Then
		Record9.Position = 0
		Dim object_tagcode As String = Record9.GetString("object_tagcode")
		Dim do_is_additional As Int = Record9.GetInt("do_is_additional")
		'Dim connectmode As Int = Record9.GetInt("connectmode")
		Dim do_name As String = Record9.GetString("do_name")
		Dim do_field As String = Record9.GetString("do_field")
'		Dim execute_value As String = Record9.GetString("execute_value")


		If (Utils.NNE(object_tagcode)) Then
			If Utils.NNE(do_name) Then
				If Not(do_name.ToUpperCase = "__TYPEREQUEST__") Then
					If (Utils.NNE(object_tagcode)) Then
						If (do_is_additional = 1) Then
							Dim sSQLin As String = $"select value from dta_objects_fields where object_tagcode='${object_tagcode}' and field_tagcode='${do_field}'"$
						Else
							If Utils.FieldInList(do_field, "address|address2|postalcode|phone|local|latitude|longitude|block|floor|door") Then
								Dim sSQLin As String = $"select ${do_field} as value from dta_locations where tagcode in
															(select local_tagcode from dta_objects where tagcode='${object_tagcode}')"$
							Else If Utils.FieldInList(do_field, "name|phone|email|mobile") Then
								Dim sSQLin As String = $"select distinct ${do_field} as `value` from dta_contacts where tagcode in
															(select contact_tagcode from dta_objects_contacts where object_tagcode='${object_tagcode}' limit 1)"$
							Else
								Dim sSQLin As String = $"select ${do_field} as value from dta_objects where tagcode='${object_tagcode}'"$
							End If
						End If
						Try							
							Log(sSQLin)
							Private Record91 As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQLin)
							If Record91.RowCount > 0 Then
								Record91.Position = 0
								ret = Record91.GetString("value")
							End If
							Record91.Close
						Catch
							Log(LastException.Message)
						End Try
					End If
				End If

			End If
		End If

		
	End If
	Record9.Close
	Object2Update = ret
	Return ret
End Sub

' TIP: ACTUALIZA SERVER COM OS DADOS DOS OBJECTOS
Sub UpdateServerwithObject(CLA As RequestCLA, item As String, ukey As String, Val2Update As String, Tagcode As String ,RepeatItem As Int, RepeatField As Int) As ResumableSub
	
'	Dim rs As ResumableSub = UpdateServerwithObject(CurrentCLA, ItemTagcode, UniqueKey, objValue, RepeatItem, RepeatField)
'	Wait For(rs) Complete (updated As Boolean)

'	Log("»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»")
'	Log($"Update Server with ${Val2Update} @ ${item}"$)
'	Log("»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»")
	
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLARequest", CLA.Request.Trim)
	params.Put("ACLAAction", CLA.Action.Trim)
	params.Put("ACLATask", CLA.Task.trim)
	params.Put("ACLAItem", item.trim)
	params.Put("ACLAUniqueKey", ukey.trim)
	params.Put("ACLATagcode", Tagcode.trim)
	params.Put("ACLAValue", Val2Update.Trim)
	params.Put("ACLAValuetitle", Val2Update.trim)
	params.Put("ACLAReqCounter", CLA.RepeatCounter)
	params.Put("ACLARepeatItem",RepeatItem )
	params.Put("ACLARepeatField",RepeatField )
	params.Put("ACLAInner", 0)
	
	Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
	Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
	
	params.Put("ACLADatetime", Utils.GetCurrDatetimeExt)
	params.Put("ACLALatitude", sACLALatitude)
	params.Put("ACLALongitude", sACLALongitude)
				
	Dim ACLSessUser As String = ShareCode.SESS_OPER_User
	Dim ACLClear As Int = 0
	params.Put("ACLSessUser", ACLSessUser.trim)
	params.Put("ACLClear", ACLClear)
	params.Put("versionTagcode", Main.VersionTagcode.trim)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
	
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then
			Utils.CallApi(0, params, Me, Url, "", CLA.Request.Trim)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,CLA.Request.Trim,CLA.Action.Trim,item.trim)
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(200)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,CLA.Request.Trim,CLA.Action.Trim,item.Trim)
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If
	Sleep(200)
	Return True
	
End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 12
' *************************************************************
Sub CreateLineItemTimeEditBox(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
	ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
	ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
'	If (CurrentOrientation=0) Then
	'***************************************************
	' NOTE: RETORNA PANEL + HEIGHT
	Dim RPI As RowPanelInfo = SetCLAIRowPanel(outRecord, DeviceHeight2, "CLA_ITEM_TimeEdit", "CLA_ITEM_TimeEdit", True, 0, False)
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
	
	If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemLabel.Text = $"${Title}"$
	CLAItemLabel.Tag = typified_answers
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")
	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)
	Log($"Dados do objecto: ${objValue}"$)
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
			
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	'***************************************************
	' NOTE: QUERY GERAL
	Dim AllSQL As String = GetCLAIRowScrip(ItemTagcode, UniqueKey, repeatcounter, repeatitemcounter, repeatfieldcounter, fieldval_04)
						
	Private Record As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	If Record.RowCount > 0 Then
		Record.Position = 0
		Dim repeatcounter As Int = Record.GetInt("repeatcounter")
		CLAItemTimeEditValue.EditText.InputType = Bit.Or(CLAItemTimeEditValue.EditText.INPUT_TYPE_TEXT, 4096) 'Maiusculas
		CLAItemTimeEditValue.Text = Utils.IfNullOrEmpty(Record.GetString("value"), Utils.IfNullOrEmpty(objValue, ""))   'Record.GetString("value")
		CLAItemTimeEditValue.Enabled = Not(READONLY_FEATURES)
		Dim SSTAG As String = $"${Record.GetString("request_tagcode")}|${Record.GetString("inner_request_tagcode")}|
					${Record.GetString("task_tagcode")}|${Record.GetString("item_tagcode")}|${Record.GetString("unique_key")}|
					${Record.GetString("tagcode")}|1|0|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
		
		CLAItemTimeEditValue.Tag = SSTAG
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem( _
				Record.GetString("request_tagcode"), _
				Record.GetString("inner_request_tagcode"), _
				Record.GetString("task_tagcode"), _
				Record.GetString("item_tagcode"), _
				Record.GetString("unique_key"), _
				Record.GetString("tagcode"), _
				Record.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter, Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record.GetString("task_tagcode"), Record.GetString("unique_key")), "")
	
'	*********************************************************************************************************************
'	 ROTINA DE VERIFICACAO SE O PAINEL FOI INACTIVADO POR EVENTO E PROCEDER DE ACORDO, COLOCANDO-O A ENABLE OU DISABLED
'	 E MUDANDO A COR DE BRANCO PARA CINZA E VICE VERSA
'	*********************************************************************************************************************
								
		Dim EnabledState As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(fieldref_02, 'enabled') as EnabledState from dta_requests_values_adds where 1=1
																	and request_tagcode = '${CLAItem.Request.Trim}'
																	and task_tagcode = '${CLAItem.task.trim}'
																	and item_tagcode = '${CLAItem.item.trim}'
																	and repeatcounter = ${repeatcounter}
																	and repeatitemcounter = ${repeatitemcounter}
																	and repeatfieldcounter = ${repeatfieldcounter}"$,"EnabledState")
		If EnabledState.ToLowerCase = "disabled" Then
			Dim Val2set As Boolean = False
			RPI.pan.Enabled = Val2set
			RPI.pan.Color = Colors.LightGray
			For Each v As View In RPI.pan.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		Else
			If READONLY_FEATURES = False Then
				Dim Val2set As Boolean = True
				RPI.pan.Enabled = Val2set
				RPI.pan.Color = Colors.white
				For Each v As View In RPI.pan.GetAllViewsRecursive
							
					If v Is Label Then
						Dim lV As Label = v
						lV.Enabled = Val2set
					else If v Is EditText Then
						Dim eV As EditText = v
						eV.Enabled = Val2set
					else If v Is FloatLabeledEditText Then
						Dim fV As FloatLabeledEditText = v
						fV.Enabled = Val2set
					else If v Is Button Then
						Dim bV As Button = v
						bV.Enabled = Val2set
					else If v Is Spinner Then
						Dim sV As Spinner = v
						sV.Enabled = Val2set
					End If
				Next
			End If
		End If
'	*********************************************************************************************************************
'	*********************************************************************************************************************
		
		ComponentList.add( Types.MakeComponentRecords(RPI.Pan, taggedID, Record.GetString("item_tagcode"), RPI.Height,repeatitemcounter,repeatfieldcounter, True) )
		
		
	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record.Close
	
	'***************************************************
	' NOTE: RETORNA POSIÇAO E ATRIBUI AO CAPITULO
	Return SetCLAIRowPosis(CLAItem, RPI, innerPanel, chapter, Posis)
End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 9
' *************************************************************
Sub CreateLineItemDateEditBox(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
	ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
	ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
'	If (CurrentOrientation=0) Then
	Dim RPI As RowPanelInfo = SetCLAIRowPanel(outRecord, DeviceHeight2, "CLA_ITEM_DateEdit", "CLA_ITEM_DateEdit", True, 0, False)
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
	If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0,0,"", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemDateEditValue.EditText.Padding = Array As Int (0dip, 0dip, 0dip, 0dip)
	CLAItemLabel.Text = $"${Title}"$
	CLAItemLabel.Tag = typified_answers
	
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")
	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)
	
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed

	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	
	Dim AllSQL As String = GetCLAIRowScrip(ItemTagcode, UniqueKey, repeatcounter, repeatitemcounter, repeatfieldcounter, fieldval_04)
	Private Record As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	If Record.RowCount > 0 Then
		Record.Position = 0
		CLAItemDateEditValue.EditText.InputType = Bit.Or(CLAItemDateEditValue.EditText.INPUT_TYPE_TEXT, 4096) 'Maiusculas
		CLAItemDateEditValue.Text = Utils.IfNullOrEmpty(Record.GetString("value"), Utils.IfNullOrEmpty(objValue, ""))  'Record.GetString("value")
		Dim repeatcounter As Int = Record.GetInt("repeatcounter")
		CLAItemDateEditValue.Enabled = Not(READONLY_FEATURES)
		Dim SSTAG As String = $"${Record.GetString("request_tagcode")}|${Record.GetString("inner_request_tagcode")}|
					${Record.GetString("task_tagcode")}|${Record.GetString("item_tagcode")}|${Record.GetString("unique_key")}|
					${Record.GetString("tagcode")}|1|0|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
		
		CLAItemDateEditValue.Tag = SSTAG
						
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record.GetString("request_tagcode"), _
				Record.GetString("inner_request_tagcode"), _
				Record.GetString("task_tagcode"), _
				Record.GetString("item_tagcode"), _
				Record.GetString("unique_key"), _
				Record.GetString("tagcode"), _
				Record.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter,Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record.GetString("task_tagcode"), Record.GetString("unique_key")), "")
							
'	*********************************************************************************************************************
'	 ROTINA DE VERIFICACAO SE O PAINEL FOI INACTIVADO POR EVENTO E PROCEDER DE ACORDO, COLOCANDO-O A ENABLE OU DISABLED
'	 E MUDANDO A COR DE BRANCO PARA CINZA E VICE VERSA
'	*********************************************************************************************************************
								
		Dim EnabledState As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(fieldref_02, 'enabled') as EnabledState from dta_requests_values_adds where 1=1
																	and request_tagcode = '${CLAItem.Request.Trim}'
																	and task_tagcode = '${CLAItem.task.trim}'
																	and item_tagcode = '${CLAItem.item.trim}'
																	and repeatcounter = ${repeatcounter}
																	and repeatitemcounter = ${repeatitemcounter}
																	and repeatfieldcounter = ${repeatfieldcounter}"$,"EnabledState")
		If EnabledState.ToLowerCase = "disabled" Then
			Dim Val2set As Boolean = False
			RPI.pan.Enabled = Val2set
			RPI.pan.Color = Colors.LightGray
			For Each v As View In RPI.pan.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		Else
			Dim Val2set As Boolean = True
			RPI.pan.Enabled = Val2set
			RPI.pan.Color = Colors.white
			For Each v As View In RPI.pan.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		End If
'	*********************************************************************************************************************
'	*********************************************************************************************************************
		
		ComponentList.add( Types.MakeComponentRecords(RPI.Pan, taggedID, Record.GetString("item_tagcode"), RPI.height,repeatitemcounter,repeatfieldcounter,True) )
	
		
	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record.Close
	
	Return SetCLAIRowPosis(CLAItem, RPI, innerPanel, chapter, Posis)
End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 2
' *************************************************************
Sub CreateLineItemEditBox(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
		ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
		ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	
'	If (CurrentOrientation=0) Then
	
	Dim RPI As RowPanelInfo = SetCLAIRowPanel(outRecord, 0, "CLA_ITEM_Editbox_Horizontal_device", "", False, 0, False)
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
		If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")

	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")
	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)

	Log($"Dados do objecto: ${objValue}"$)
	
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed

	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim AllSQL As String = GetCLAIRowScrip(ItemTagcode, UniqueKey, repeatcounter, repeatitemcounter, repeatfieldcounter, fieldval_04)
	Private Record As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	Log(AllSQL)
	If Record.RowCount > 0 Then
		Record.Position = 0
		Dim vtype As Int = Record.GetInt("val_datatype")
		Dim vfrmt As Int = Record.GetInt("val_format")
		Dim repeatcounter As Int = Record.GetInt("repeatcounter")
		'CLAItemEditValue.EditText.Typeface = Typeface.
		
		UPDATED_EDIT_FIELDS.Add( Types.MakeFieldReference(ItemTagcode, CLAItemEditValue, repeatfieldcounter))
		CLAItemEditValue.Hint = Record.GetString("val_title")
		'val_datatype, val_format
		If ((vtype=0) Or (vtype=2)) Then
			If (vfrmt=1) Then
				CLAItemEditValue.EditText.InputType = Bit.Or(CLAItemEditValue.EditText.INPUT_TYPE_TEXT, 4096) 'Maiusculas
			else If (vfrmt=2) Then
				CLAItemEditValue.EditText.InputType = Bit.Or(CLAItemEditValue.EditText.INPUT_TYPE_TEXT, 16384) 'Maiusculas
			End If
		else If (vtype=13) Then
			CLAItemEditValue.EditText.InputType = CLAItemEditValue.EditText.INPUT_TYPE_NUMBERS
		else If (vtype=14) Then
			CLAItemEditValue.EditText.InputType = CLAItemEditValue.EditText.INPUT_TYPE_DECIMAL_NUMBERS
		else If (vtype=18) Then
			CLAItemEditValue.EditText.InputType = Bit.Or(CLAItemEditValue.EditText.INPUT_TYPE_TEXT, 32)
		End If
		
		CLAItemEditValue.Text = Utils.IfNullOrEmpty(Record.GetString("value"), Utils.IfNullOrEmpty(objValue, ""))		'Record.GetString("value")
		CLAItemEditValue.Enabled = Not(READONLY_FEATURES)
		Dim currEdit As EditText = CLAItemEditValue.EditText
		currEdit.Enabled = Not(READONLY_FEATURES)
		
		ListOfTextViews.Add(CLAItemEditValue)
		
		Dim SSTAG As String = $"${Record.GetString("request_tagcode")}|${Record.GetString("inner_request_tagcode")}|
					${Record.GetString("task_tagcode")}|${Record.GetString("item_tagcode")}|${Record.GetString("unique_key")}|
					${Record.GetString("tagcode")}|1|0|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$

		CLAItemEditValue.Tag = SSTAG
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record.GetString("request_tagcode"), _
				Record.GetString("inner_request_tagcode"), _
				Record.GetString("task_tagcode"), _
				Record.GetString("item_tagcode"), _
				Record.GetString("unique_key"), _
				Record.GetString("tagcode"), _
				Record.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter,Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record.GetString("task_tagcode"), Record.GetString("unique_key")), "")
							
		
			ComponentList.add( Types.MakeComponentRecords(RPI.Pan, taggedID, Record.GetString("item_tagcode"), RPI.height,repeatitemcounter,repeatfieldcounter, True) )

'	*********************************************************************************************************************
'	 ROTINA DE VERIFICACAO SE O PAINEL FOI INACTIVADO POR EVENTO E PROCEDER DE ACORDO, COLOCANDO-O A ENABLE OU DISABLED
'	 E MUDANDO A COR DE BRANCO PARA CINZA E VICE VERSA
'	*********************************************************************************************************************
								
		Dim EnabledState As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(fieldref_02, 'enabled') as EnabledState from dta_requests_values_adds where 1=1
																	and request_tagcode = '${CLAItem.Request.Trim}'
																	and task_tagcode = '${CLAItem.task.trim}'
																	and item_tagcode = '${CLAItem.item.trim}'
																	and repeatcounter = ${repeatcounter}
																	and repeatitemcounter = ${repeatitemcounter}
																	and repeatfieldcounter = ${repeatfieldcounter}"$,"EnabledState")
		If EnabledState.ToLowerCase = "disabled" Then
			Dim Val2set As Boolean = False
			RPI.pan.Enabled = Val2set
			RPI.pan.Color = Colors.LightGray
			For Each v As View In RPI.pan.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		Else
			If READONLY_FEATURES = False Then
				Dim Val2set As Boolean = True
				RPI.pan.Enabled = Val2set
				RPI.pan.Color = Colors.white
				For Each v As View In RPI.pan.GetAllViewsRecursive
							
					If v Is Label Then
						Dim lV As Label = v
						lV.Enabled = Val2set
					else If v Is EditText Then
						Dim eV As EditText = v
						eV.Enabled = Val2set
					else If v Is FloatLabeledEditText Then
						Dim fV As FloatLabeledEditText = v
						fV.Enabled = Val2set
					else If v Is Button Then
						Dim bV As Button = v
						bV.Enabled = Val2set
					else If v Is Spinner Then
						Dim sV As Spinner = v
						sV.Enabled = Val2set
					End If
				Next
			End If

		End If
'	*********************************************************************************************************************
'	*********************************************************************************************************************
	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record.Close
	Return SetCLAIRowPosis(CLAItem, RPI, innerPanel, chapter, Posis)
End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 28
' *************************************************************
Sub CreateLineItemEditFullText(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
		ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
		ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	
'	If (CurrentOrientation=0) Then
	
	Dim RPI As RowPanelInfo = SetCLAIRowPanel(outRecord, 0, "CLA_ITEM_EditFullText", "CLA_ITEM_EditFullText", False, 0, False)
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int = 0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
	If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
		
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")
	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)

	Log($"Dados do objecto: ${objValue}"$)
	
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
	
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	Dim AllSQL As String = GetCLAIRowScrip(ItemTagcode, UniqueKey, repeatcounter, repeatitemcounter, repeatfieldcounter, fieldval_04)
	Private Record As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	Log(AllSQL)
	If Record.RowCount > 0 Then
		Record.Position = 0
		Dim vtype As Int = Record.GetInt("val_datatype")
		Dim vfrmt As Int = Record.GetInt("val_format")
		Dim repeatcounter As Int = Record.GetInt("repeatcounter")
		
		CLAItemEditTextValue.Hint = Record.GetString("val_title")
		If ((vtype=0) Or (vtype=2)) Then
			If (vfrmt=1) Then
				CLAItemEditTextValue.EditText.InputType = Bit.Or(CLAItemEditTextValue.EditText.INPUT_TYPE_TEXT, 4096) 'Maiusculas
			else If (vfrmt=2) Then
				CLAItemEditTextValue.EditText.InputType = Bit.Or(CLAItemEditTextValue.EditText.INPUT_TYPE_TEXT, 16384) 'Maiusculas
			End If
		else If (vtype=13) Then
			CLAItemEditTextValue.EditText.InputType = CLAItemEditTextValue.EditText.INPUT_TYPE_NUMBERS
		else If (vtype=14) Then
			CLAItemEditTextValue.EditText.InputType = CLAItemEditTextValue.EditText.INPUT_TYPE_DECIMAL_NUMBERS
		else If (vtype=18) Then
			CLAItemEditTextValue.EditText.InputType = Bit.Or(CLAItemEditTextValue.EditText.INPUT_TYPE_TEXT, 32)
		End If
		
		CLAItemEditTextValue.Text = Utils.IfNullOrEmpty(Record.GetString("value"), Utils.IfNullOrEmpty(objValue, ""))		'Record.GetString("value")
		CLAItemEditTextValue.Enabled = Not(READONLY_FEATURES)
		Dim currEdit As EditText = CLAItemEditTextValue.EditText
		currEdit.Enabled = Not(READONLY_FEATURES)
		
		Dim SSTAG As String = $"${Record.GetString("request_tagcode").Trim}|${Record.GetString("inner_request_tagcode").Trim}|
					${Record.GetString("task_tagcode").Trim}|${Record.GetString("item_tagcode").Trim}|${Record.GetString("unique_key").Trim}|
					${Record.GetString("tagcode").Trim}|1|0|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$

		CLAItemEditTextValue.Tag = SSTAG
		CLAButtonEditText.Tag = SSTAG
		ListOfTextViews.Add(CLAItemEditTextValue)
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record.GetString("request_tagcode"), _
				Record.GetString("inner_request_tagcode"), _
				Record.GetString("task_tagcode"), _
				Record.GetString("item_tagcode"), _
				Record.GetString("unique_key"), _
				Record.GetString("tagcode"), _
				Record.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter,Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record.GetString("task_tagcode"), Record.GetString("unique_key")), "")
							
'	*********************************************************************************************************************
'	 ROTINA DE VERIFICACAO SE O PAINEL FOI INACTIVADO POR EVENTO E PROCEDER DE ACORDO, COLOCANDO-O A ENABLE OU DISABLED
'	 E MUDANDO A COR DE BRANCO PARA CINZA E VICE VERSA
'	*********************************************************************************************************************
								
		Dim EnabledState As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(fieldref_02, 'enabled') as EnabledState from dta_requests_values_adds where 1=1
																	and request_tagcode = '${CLAItem.Request.Trim}'
																	and task_tagcode = '${CLAItem.task.trim}'
																	and item_tagcode = '${CLAItem.item.trim}'
																	and repeatcounter = ${repeatcounter}
																	and repeatitemcounter = ${repeatitemcounter}
																	and repeatfieldcounter = ${repeatfieldcounter}"$,"EnabledState")
		If EnabledState.ToLowerCase = "disabled" Then
			Dim Val2set As Boolean = False
			RPI.pan.Enabled = Val2set
			RPI.pan.Color = Colors.LightGray
			For Each v As View In RPI.pan.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		Else
			If READONLY_FEATURES = False Then
				Dim Val2set As Boolean = True
				RPI.pan.Enabled = Val2set
				RPI.pan.Color = Colors.white
				For Each v As View In RPI.pan.GetAllViewsRecursive
							
					If v Is Label Then
						Dim lV As Label = v
						lV.Enabled = Val2set
					else If v Is EditText Then
						Dim eV As EditText = v
						eV.Enabled = Val2set
					else If v Is FloatLabeledEditText Then
						Dim fV As FloatLabeledEditText = v
						fV.Enabled = Val2set
					else If v Is Button Then
						Dim bV As Button = v
						bV.Enabled = Val2set
					else If v Is Spinner Then
						Dim sV As Spinner = v
						sV.Enabled = Val2set
					End If
				Next
			End If
		End If
'	*********************************************************************************************************************
'	*********************************************************************************************************************

			ComponentList.add( Types.MakeComponentRecords(RPI.Pan, taggedID, Record.GetString("item_tagcode"), RPI.height,repeatitemcounter,repeatfieldcounter ,True) )


	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record.Close

	Dim typeControl As Int = CLAItem.TaskInfo.type_control
	
	If (typeControl = 3) Or (typeControl = 4) Then
		CLAButtonEditText.Text = Chr(0xF041)
		CLAItemEditTextValue.Tag = CLAItemEditTextValue.Tag & "|NOSEARCH"
	Else if (typeControl = 99) Then
		CLAButtonEditText.Text = Chr(0xF002)
		CLAItemEditTextValue.Tag = CLAItemEditTextValue.Tag & "|SEARCH"
	else if (typeControl = 28) Then
		CLAButtonEditText.Text = Chr(0xF0F6)
		CLAItemEditTextValue.Tag = CLAItemEditTextValue.Tag & "|NOSEARCH"
	End If
	
	Return SetCLAIRowPosis(CLAItem, RPI, innerPanel, chapter, Posis)
End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 29
' *************************************************************
Sub CreateLineSearch(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
		ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
		ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	
'	If (CurrentOrientation=0) Then
'	
	Dim RPI As RowPanelInfo = SetCLAIRowPanel(outRecord, 0, "CLA_ITEM_Search", "CLA_ITEM_Search", False, 0, False)
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int = 0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
	If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
		
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")
	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)

	Log($"Dados do objecto: ${objValue}"$)
	
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	Dim AllSQL As String = GetCLAIRowScrip(ItemTagcode, UniqueKey, repeatcounter, repeatitemcounter, repeatfieldcounter, fieldval_04)
	
	Log(AllSQL)
	
	Private Record As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	
	If Record.RowCount > 0 Then
		Record.Position = 0
		Dim vtype As Int = Record.GetInt("val_datatype")
		Dim vfrmt As Int = Record.GetInt("val_format")
		Dim repeatcounter As Int = Record.GetInt("repeatcounter")
		CLAItemEditTextValue.Hint = Record.GetString("val_title")
		If ((vtype=0) Or (vtype=2)) Then
			If (vfrmt=1) Then
				CLAItemEditTextValue.EditText.InputType = Bit.Or(CLAItemEditTextValue.EditText.INPUT_TYPE_TEXT, 4096) 'Maiusculas
			else If (vfrmt=2) Then
				CLAItemEditTextValue.EditText.InputType = Bit.Or(CLAItemEditTextValue.EditText.INPUT_TYPE_TEXT, 16384) 'Maiusculas
			End If
		else If (vtype=13) Then
			CLAItemEditTextValue.EditText.InputType = CLAItemEditTextValue.EditText.INPUT_TYPE_NUMBERS
		else If (vtype=14) Then
			CLAItemEditTextValue.EditText.InputType = CLAItemEditTextValue.EditText.INPUT_TYPE_DECIMAL_NUMBERS
		else If (vtype=18) Then
			CLAItemEditTextValue.EditText.InputType = Bit.Or(CLAItemEditTextValue.EditText.INPUT_TYPE_TEXT, 32)
		End If
		
		CLAItemEditTextValue.Text = Utils.IfNullOrEmpty(Record.GetString("value"), Utils.IfNullOrEmpty(objValue, ""))		'Record.GetString("value")
		CLAItemEditTextValue.Enabled = Not(READONLY_FEATURES)
		Dim currEdit As EditText = CLAItemEditTextValue.EditText
		currEdit.Enabled = Not(READONLY_FEATURES)
		CLAButtonSearchText.Enabled = Not(READONLY_FEATURES)
		
		ListOfTextViews.Add(CLAItemEditTextValue)
		Dim SSTAG As String = $"${Record.GetString("request_tagcode").Trim}|${Record.GetString("inner_request_tagcode").Trim}|
					${Record.GetString("task_tagcode").Trim}|${Record.GetString("item_tagcode").Trim}|${Record.GetString("unique_key").Trim}|
					${Record.GetString("tagcode").Trim}|1|0|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$

		CLAItemEditTextValue.Tag = SSTAG
		CLAButtonSearchText.Tag = SSTAG
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record.GetString("request_tagcode"), _
				Record.GetString("inner_request_tagcode"), _
				Record.GetString("task_tagcode"), _
				Record.GetString("item_tagcode"), _
				Record.GetString("unique_key"), _
				Record.GetString("tagcode"), _
				Record.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter,Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record.GetString("task_tagcode"), Record.GetString("unique_key")), "")
							
'	*********************************************************************************************************************
'	 ROTINA DE VERIFICACAO SE O PAINEL FOI INACTIVADO POR EVENTO E PROCEDER DE ACORDO, COLOCANDO-O A ENABLE OU DISABLED
'	 E MUDANDO A COR DE BRANCO PARA CINZA E VICE VERSA
'	*********************************************************************************************************************
								
		Dim EnabledState As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(fieldref_02, 'enabled') as EnabledState from dta_requests_values_adds where 1=1
																	and request_tagcode = '${CLAItem.Request.Trim}'
																	and task_tagcode = '${CLAItem.task.trim}'
																	and item_tagcode = '${CLAItem.item.trim}'
																	and repeatcounter = ${repeatcounter}
																	and repeatitemcounter = ${repeatitemcounter}
																	and repeatfieldcounter = ${repeatfieldcounter}"$,"EnabledState")
		If EnabledState.ToLowerCase = "disabled" Then
			Dim Val2set As Boolean = False
			RPI.pan.Enabled = Val2set
			RPI.pan.Color = Colors.LightGray
			For Each v As View In RPI.pan.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		Else
			If READONLY_FEATURES = False Then
				Dim Val2set As Boolean = True
				RPI.pan.Enabled = Val2set
				RPI.pan.Color = Colors.white
				For Each v As View In RPI.pan.GetAllViewsRecursive
							
					If v Is Label Then
						Dim lV As Label = v
						lV.Enabled = Val2set
					else If v Is EditText Then
						Dim eV As EditText = v
						eV.Enabled = Val2set
					else If v Is FloatLabeledEditText Then
						Dim fV As FloatLabeledEditText = v
						fV.Enabled = Val2set
					else If v Is Button Then
						Dim bV As Button = v
						bV.Enabled = Val2set
					else If v Is Spinner Then
						Dim sV As Spinner = v
						sV.Enabled = Val2set
					End If
				Next
			End If
		End If
'	*********************************************************************************************************************
'	*********************************************************************************************************************
		
	ComponentList.add( Types.MakeComponentRecords(RPI.Pan, taggedID, Record.GetString("item_tagcode"), RPI.height, repeatitemcounter,repeatfieldcounter,True) )
		

	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record.Close

	Return SetCLAIRowPosis(CLAItem, RPI, innerPanel, chapter, Posis)
End Sub


' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 13-18
' *************************************************************
Sub CreateLineItemNumberBox(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
	ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
	ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int

'	If (CurrentOrientation=0) Then
	
	Dim RPI As RowPanelInfo = SetCLAIRowPanel(outRecord, 0, "CLA_ITEM_Editbox_Number", "", False, 0, False)
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
		If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0,"", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")
	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)
	
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
	
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	Dim AllSQL As String = GetCLAIRowScrip(ItemTagcode, UniqueKey, repeatcounter, repeatitemcounter, repeatfieldcounter, fieldval_04)
	Private Record As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	Log(EVCSQLGETTASKITEMVALUE)
	Log(AllSQL)
	If Record.RowCount > 0 Then
		Record.Position = 0
		Dim vtype As Int = Record.GetInt("val_datatype")
		CLAItemEditValue.Hint = Record.GetString("val_title")
		If (vtype=13) Then
			CLAItemEditValue.EditText.InputType = CLAItemEditValue.EditText.INPUT_TYPE_NUMBERS
		else If (vtype=18) Then
			CLAItemEditValue.EditText.InputType = CLAItemEditValue.EditText.INPUT_TYPE_DECIMAL_NUMBERS
		End If
		CLAItemEditValue.Text = Utils.IfNullOrEmpty(Record.GetString("value"), _
								Utils.IfNullOrEmpty(objValue, _
								Utils.IfNullOrEmpty(Record.GetString("value_default"),"")))
								
		UPDATED_EDIT_FIELDS.Add( Types.MakeFieldReference(ItemTagcode, CLAItemEditValue, repeatfieldcounter))
		Dim repeatcounter As Int = Record.GetInt("repeatcounter")
		CLAItemEditValue.Enabled = Not(READONLY_FEATURES)
		Dim currEdit As EditText = CLAItemEditValue.EditText
		currEdit.Enabled = Not(READONLY_FEATURES)
		
		ListOfTextViews.Add(CLAItemEditValue)
		
		Dim SSTAG As String = $"${Record.GetString("request_tagcode")}|${Record.GetString("inner_request_tagcode")}|
					${Record.GetString("task_tagcode")}|${Record.GetString("item_tagcode")}|${Record.GetString("unique_key")}|
					${Record.GetString("tagcode")}|1|0|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
		
		CLAItemEditValue.Tag = SSTAG
						
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record.GetString("request_tagcode"), _
				Record.GetString("inner_request_tagcode"), _
				Record.GetString("task_tagcode"), _
				Record.GetString("item_tagcode"), _
				Record.GetString("unique_key"), _
				Record.GetString("tagcode"), _
				Record.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter, Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record.GetString("task_tagcode"), Record.GetString("unique_key")), "")
							
'	*********************************************************************************************************************
'	 ROTINA DE VERIFICACAO SE O PAINEL FOI INACTIVADO POR EVENTO E PROCEDER DE ACORDO, COLOCANDO-O A ENABLE OU DISABLED
'	 E MUDANDO A COR DE BRANCO PARA CINZA E VICE VERSA
'	*********************************************************************************************************************
								
		Dim EnabledState As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(fieldref_02, 'enabled') as EnabledState from dta_requests_values_adds where 1=1
																	and request_tagcode = '${CLAItem.Request.Trim}'
																	and task_tagcode = '${CLAItem.task.trim}'
																	and item_tagcode = '${CLAItem.item.trim}'
																	and repeatcounter = ${repeatcounter}
																	and repeatitemcounter = ${repeatitemcounter}
																	and repeatfieldcounter = ${repeatfieldcounter}"$,"EnabledState")
		If EnabledState.ToLowerCase = "disabled" Then
			Dim Val2set As Boolean = False
			RPI.pan.Enabled = Val2set
			RPI.pan.Color = Colors.LightGray
			For Each v As View In RPI.pan.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		Else
			If READONLY_FEATURES = False Then
				Dim Val2set As Boolean = True
				RPI.pan.Enabled = Val2set
				RPI.pan.Color = Colors.white
				For Each v As View In RPI.pan.GetAllViewsRecursive
							
					If v Is Label Then
						Dim lV As Label = v
						lV.Enabled = Val2set
					else If v Is EditText Then
						Dim eV As EditText = v
						eV.Enabled = Val2set
					else If v Is FloatLabeledEditText Then
						Dim fV As FloatLabeledEditText = v
						fV.Enabled = Val2set
					else If v Is Button Then
						Dim bV As Button = v
						bV.Enabled = Val2set
					else If v Is Spinner Then
						Dim sV As Spinner = v
						sV.Enabled = Val2set
					End If
				Next
			End If
		End If
'	*********************************************************************************************************************
'	*********************************************************************************************************************

			ComponentList.add( Types.MakeComponentRecords(RPI.Pan, taggedID, Record.GetString("item_tagcode"), RPI.height,repeatitemcounter,repeatfieldcounter,True) )



	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record.Close

	Return SetCLAIRowPosis(CLAItem, RPI, innerPanel, chapter, Posis)
End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 19
' *************************************************************
Sub CreateLineItemRulerOption(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
	ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
	ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	
	SeekBarHasNA = False
	
'	If (CurrentOrientation=0) Then
	
	Dim RPI As RowPanelInfo = SetCLAIRowPanel(outRecord, DeviceHeight2, "CLA_ITEM_Ruler_Device", "CLA_ITEM_Ruler_Device_SP", False, 0, False)
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
		If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")
	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)
	
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
	
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	Dim AllSQL As String = GetCLAIRowScrip(ItemTagcode, UniqueKey, repeatcounter, repeatitemcounter, repeatfieldcounter, fieldval_04)
	Private Record As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	Log(AllSQL)
	If Record.RowCount > 0 Then
		Record.Position = 0
		Dim points As Double = Record.GetDouble("points")
		Dim risk As Int = Record.GetInt("risk")
		Dim repeatcounter As Int = Record.GetInt("repeatcounter")
		Dim valMin As Int = 1 'Record.GetInt("val_min")
		Dim valMax As Int = 10 'Record.GetInt("val_max")
		If (valMax <= valMin) Then
			valMax = 10
		End If
		CLAItemRulerValue.Max = valMax
		
		
		CLAItemRulerValueMin.text = valMin
		CLAItemRulerValueMax.text = valMax
		Dim i As Int = 0
		i = Utils.IfNullOrEmpty(Record.GetString("value"), Utils.IfNullOrEmpty(objValue, valMin))	
		CLAItemRulerValue.Value = i
		CLAItemRulerValueCurrent.Text = CLAItemRulerValue.Value
		CLAItemRulerValue.Enabled = Not(READONLY_FEATURES)
		Dim SSTAG As String = $"${Record.GetString("request_tagcode")}|${Record.GetString("inner_request_tagcode")}|
					${Record.GetString("task_tagcode")}|${Record.GetString("item_tagcode")}|${Record.GetString("unique_key")}|
					${Record.GetString("tagcode")}|1|0|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
		
		CLAItemRulerValue.Tag = SSTAG
		SelectOptionPanel.Tag = $"${i}|${points}|${risk}"$
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record.GetString("request_tagcode"), _
				Record.GetString("inner_request_tagcode"), _
				Record.GetString("task_tagcode"), _
				Record.GetString("item_tagcode"), _
				Record.GetString("unique_key"), _
				Record.GetString("tagcode"), _
				Record.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter, Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record.GetString("task_tagcode"), Record.GetString("unique_key")), "")
							
'	*********************************************************************************************************************
'	 ROTINA DE VERIFICACAO SE O PAINEL FOI INACTIVADO POR EVENTO E PROCEDER DE ACORDO, COLOCANDO-O A ENABLE OU DISABLED
'	 E MUDANDO A COR DE BRANCO PARA CINZA E VICE VERSA
'	*********************************************************************************************************************
								
		Dim EnabledState As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(fieldref_02, 'enabled') as EnabledState from dta_requests_values_adds where 1=1
																	and request_tagcode = '${CLAItem.Request.Trim}'
																	and task_tagcode = '${CLAItem.task.trim}'
																	and item_tagcode = '${CLAItem.item.trim}'
																	and repeatcounter = ${repeatcounter}
																	and repeatitemcounter = ${repeatitemcounter}
																	and repeatfieldcounter = ${repeatfieldcounter}"$,"EnabledState")
		If EnabledState.ToLowerCase = "disabled" Then
			Dim Val2set As Boolean = False
			RPI.pan.Enabled = Val2set
			RPI.pan.Color = Colors.LightGray
			For Each v As View In RPI.pan.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		Else
			If READONLY_FEATURES = False Then
				Dim Val2set As Boolean = True
				RPI.pan.Enabled = Val2set
				RPI.pan.Color = Colors.white
				For Each v As View In RPI.pan.GetAllViewsRecursive
							
					If v Is Label Then
						Dim lV As Label = v
						lV.Enabled = Val2set
					else If v Is EditText Then
						Dim eV As EditText = v
						eV.Enabled = Val2set
					else If v Is FloatLabeledEditText Then
						Dim fV As FloatLabeledEditText = v
						fV.Enabled = Val2set
					else If v Is Button Then
						Dim bV As Button = v
						bV.Enabled = Val2set
					else If v Is Spinner Then
						Dim sV As Spinner = v
						sV.Enabled = Val2set
					End If
				Next
			End If
		End If
'	*********************************************************************************************************************
'	*********************************************************************************************************************

			ComponentList.add( Types.MakeComponentRecords(RPI.Pan, taggedID, Record.GetString("item_tagcode"), RPI.height, repeatitemcounter,repeatfieldcounter,True) )


	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record.Close

	Return SetCLAIRowPosis(CLAItem, RPI, innerPanel, chapter, Posis)
End Sub


' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 23
' *************************************************************
Sub CreateLineItemIntUpDownButton(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
	ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
	ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	
'	If (CurrentOrientation=0) Then

	Dim RPI As RowPanelInfo = SetCLAIRowPanel(outRecord, DeviceHeight2, "cla_item_editbox_valueint", "cla_item_editbox_valueint", False, 30dip, False)

	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
	If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If

	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0,"", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")
	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)
	
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	Dim AllSQL As String = GetCLAIRowScrip(ItemTagcode, UniqueKey, repeatcounter, repeatitemcounter, repeatfieldcounter, fieldval_04)
	Private Record As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	If Record.RowCount > 0 Then
		Record.Position = 0
		Dim vtype As Int = Record.GetInt("val_datatype")
		CLAItemEditValue.Hint = Record.GetString("val_title")
		Dim val_format As Int = Record.GetInt("val_format")
		
		UPDATED_EDIT_FIELDS.Add( Types.MakeFieldReference(ItemTagcode, CLAItemEditValue, repeatfieldcounter))
		If (vtype=13) Then
			CLAItemEditValue.EditText.InputType = CLAItemEditValue.EditText.INPUT_TYPE_NUMBERS
		else If (vtype=18) Then
			CLAItemEditValue.EditText.InputType = CLAItemEditValue.EditText.INPUT_TYPE_DECIMAL_NUMBERS
		else If ((vtype=21) Or (vtype=23)) Then
			CLAItemEditValue.EditText.InputType = CLAItemEditValue.EditText.INPUT_TYPE_NUMBERS
			If (val_format = 18) Then
				CLAItemEditValue.EditText.InputType = CLAItemEditValue.EditText.INPUT_TYPE_DECIMAL_NUMBERS
			End If
		End If
		CLAItemEditValue.Text = Utils.IfNullOrEmpty(Record.GetString("value"), _
								Utils.IfNullOrEmpty(objValue, _
								Utils.IfNullOrEmpty(Record.GetString("value_default"),"")))
		Dim repeatcounter As Int = Record.GetInt("repeatcounter")
		CLAItemEditValue.Enabled = Not(READONLY_FEATURES)
		Dim currEdit As EditText = CLAItemEditValue.EditText
		currEdit.Enabled = Not(READONLY_FEATURES)
		
		Dim SSTAG As String = $"${Record.GetString("request_tagcode")}|${Record.GetString("inner_request_tagcode")}|
					${Record.GetString("task_tagcode")}|${Record.GetString("item_tagcode")}|${Record.GetString("unique_key")}|
					${Record.GetString("tagcode")}|1|0|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
		
		
		
		CLAItemEditValue.Tag = SSTAG
		
		
'		p.Tag = SSTAG
						
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record.GetString("request_tagcode"), _
				Record.GetString("inner_request_tagcode"), _
				Record.GetString("task_tagcode"), _
				Record.GetString("item_tagcode"), _
				Record.GetString("unique_key"), _
				Record.GetString("tagcode"), _
				Record.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter, Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record.GetString("task_tagcode"), Record.GetString("unique_key")), "")
							
		Dim pnl As Panel = CLAItemEditValue.Parent
		pnl.Tag = CLAItem
	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record.Close
	
	Return SetCLAIRowPosis(CLAItem, RPI, innerPanel, chapter, Posis)
End Sub

Sub CLAItemEditValue_TextChanged(Old As String, New As String)
	
End Sub

Sub AddOnTouch(V As View, Event As String)
	Private r As Reflector
	r.Target = V
	r.SetOnTouchListener(Event)
End Sub


' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 6
' *************************************************************
Sub CreateLineItemSelectBox(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
		ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
		ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
'	
'	If (CurrentOrientation=0) Then
	
	Dim RPI As RowPanelInfo = SetCLAIRowPanel(outRecord, DeviceHeight2, "CLA_ITEM_SelectBox_Device", "", False, 0, True)
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
		If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	AddOnTouch(CLAItemSelectValue, "CLAItemSelectValue_onTouch")
	
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0,"", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
		
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")
	
	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)
	
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
						
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	Dim AllSQL As String = GetCLAIRowScrip(ItemTagcode, UniqueKey, repeatcounter, repeatitemcounter, repeatfieldcounter, fieldval_04)
	Private Record As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	Dim TotalRecords As Int = Record.RowCount
	
	If TotalRecords > 0 Then
		Record.Position = 0
		
		Dim ExtendedFormat As Boolean = Utils.Int2Bool(Record.GetInt("can_search"))
		ListBoxExtendedFormat = ExtendedFormat
		Dim SelectScript As String = ""
		Dim options As String = Record.GetString("value_options")
		Dim repeatcounter As Int = Record.GetInt("repeatcounter")
		'Dim vfrmt As Int = Record.GetInt("val_format")
		Dim points As Double = Record.GetDouble("points")
		Dim risk As Int = Record.GetInt("risk")

		Dim i As Int = 0
		Dim do_origin As String = Utils.IfNullOrEmpty(Record.GetString("do_origin"), "")
		
		Dim haveValues As Boolean = Utils.NNE(options)
		'If Not(Utils.isNullOrEmpty(options)) Then
		
			
		If (haveValues) And (Utils.NE(do_origin)) Then
			Dim Columns As List = Regex.Split("\|", options )
			CLAItemSelectValue.AddAll(Columns)
'			CLAItemSelectValue.Add("(Outros)")
			If ExtendedFormat Then CLAItemSelectValue.Add("(Outros)")
		Else
			
			Dim do_origin_group As String = Utils.IfNullOrEmpty(Record.GetString("do_origin_group"), "")
			Dim do_origin_titlefield As String = Utils.IfNullOrEmpty(Record.GetString("do_origin_titlefield"), "")
			Dim do_tagcode As String = Utils.IfNullOrEmpty(Record.GetString("do_tagcode"), "")
			Dim level3_table As Int = Utils.IfNullOrEmpty(Record.GetInt("level3_table"), "0")
			Dim do_subgroup As String = Utils.IfNullOrEmpty(Record.GetString("do_subgroup"), "")
			
			Dim do_subsubgroup As String = Utils.IfNullOrEmpty(Record.GetString("do_subsubgroup"), "")
			Dim do_affected_field As String = Utils.IfNullOrEmpty(Record.GetString("do_affected_field"), "")
		
			Dim do_associate_type As Int = Utils.IfNullOrEmpty(Record.GetInt("do_associate_type"), "0")
			'object_tagcode
			'Dim ordField As String = ""
			If Utils.NNE(do_origin) Then
				'If (do_origin = "TOBJNATT_004") Or (do_origin="TOBJNATT_005") Then
				
				Dim this_object_tagcode As String = Utils.IfNullOrEmpty( _
						DBStructures.GetScriptColumnStrEVC($"select distinct object_tagcode 
								from dta_requests where tagcode='${Record.GetString("request_tagcode")}'"$, _
								"object_tagcode"), "")
				
				If (do_origin="TOBJNATT_005") Then
					Dim object_dependent As Int = Utils.IfNullOrEmpty( _
						DBStructures.GetScriptColumnStrEVCJSON($"select distinct paramters from dta_tasks_items_adds 
							where task_tagcode='${CurrentCLA.Task.trim}' and item_tagcode='${ItemTagcode.Trim}' 
							and unique_key='${UniqueKey.Trim}'"$, _
							"paramters", "object_dependent"), "0")
					
					Dim object_relation_type As Int = Utils.IfNullOrEmpty( _
						DBStructures.GetScriptColumnStrEVCJSON($"select distinct paramters from dta_tasks_items_adds 
							where task_tagcode='${CurrentCLA.Task.trim}' and item_tagcode='${ItemTagcode.Trim}' 
							and unique_key='${UniqueKey.Trim}'"$, _
							"paramters", "object_relation_type"), "0")
					
					Log( $"${object_dependent}, ${object_relation_type}"$ )
					Dim gField As String = DBStructures.GetScriptColumnStrEVC($"select tablename from type_objectnaturetypes where tagcode='${do_origin}'"$, "tablename")
					If Not(Utils.NNE(gField)) Then
						gField = "dta_objects"
					End If
					Dim gList As List : gList.Initialize
					If Utils.NNE(gField) Then
						Dim dog As String = ""
						If (Utils.NNE(do_tagcode)) Then
							Dim theListGroup As String = Utils.StrList2SQLArray(Regex.Split("\|", do_tagcode ))
							If Utils.NNE(theListGroup) Then
								Dim dog As String = $" and (object_type in ${theListGroup})"$
							End If
						End If
						
						Dim UniqueField As String = do_origin_titlefield
						Dim OrderField As String = do_origin_titlefield
						
						If  (ShareCode.APP_DOMAIN.ToLowerCase = "nve") And _
							((CurrentCLA.Task.trim = "TSKS_CLREG_ENTRADA") Or (CurrentCLA.Task.trim = "TSKS_CLREG_SAIDA")) Then
							do_origin_titlefield = $"('('||(select value from dta_objects_fields where object_tagcode=${gField}.tagcode and field_tagcode='FIELD_EMPRESA' limit 1)||') '||${do_origin_titlefield}) as ${do_origin_titlefield}"$
							
						End If
						
						Dim gScript As String = $"select ${do_origin_titlefield}, tagcode from ${gField} where active=1 ${dog} "$
						
												
						
						If (Utils.NNE(do_origin_group)) Then
							Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", do_origin_group ))
							If Utils.NNE(theList) Then
								gScript = $"${gScript} and object_group in ${theList}"$
							End If
						End If
						
						If (object_dependent = 1) And Utils.NNE(MainObjectTagCode) Then
							If Not(MainObjectTagCode.Contains("__NONE__")) Then
								If (object_relation_type >= 2) Then
									gScript = $"${gScript} and tagcode in (select child_tagcode from dta_objects_relations where parent_tagcode='${MainObjectTagCode}' and relation_type='${object_relation_type}')"$
								Else
									gScript = $"${gScript} and (tagcode in (select parent_tagcode from dta_objects_relations where child_tagcode='${MainObjectTagCode}')) or
																		(tagcode in (select child_tagcode from dta_objects_relations where parent_tagcode='${MainObjectTagCode}' and relation_type=0))"$
								End If
							End If
						End If
						
						Log(gScript)
						Dim continua1 As Boolean = True
						Try
							If Utils.NNE(OrderField) Then
								gScript = $"${gScript} order by ${OrderField}"$
							End If
							
							Private RecordOrigin As Cursor = Starter.LocalSQLEVC.ExecQuery(gScript)
						Catch
							Log(LastException)
							Utils.WriteErrors2Log(LastException)
							continua1 = False
						End Try
						If (continua1) Then
							SelectScript = gScript
							If RecordOrigin.rowcount > 0 Then
								gList.Add("(Sem seleção)")
								For n1=0 To RecordOrigin.RowCount-1
									RecordOrigin.Position = n1
									gList.Add(RecordOrigin.GetString(UniqueField))   'do_origin_titlefield))
								Next
'								gList.Add("(Outros)")
								If ExtendedFormat Then CLAItemSelectValue.Add("(Outros)")
							Else
								gList.Add("(Sem seleção)")
'								gList.Add("(Outros)")
								If ExtendedFormat Then CLAItemSelectValue.Add("(Outros)")
							End If
						End If

					End If
					haveValues = gList.Size > 0
					If Not(haveValues) Then
						gList.Add("(Sem seleção)")
'						gList.Add("(Outros)")
						If ExtendedFormat Then CLAItemSelectValue.Add("(Outros)")
					End If
					CLAItemSelectValue.AddAll(gList)
				Else If (do_origin="TOBJNATT_004") Then
					'type_inouttypes
					Dim sField As String = ""
					Dim iField As Int = DBStructures.GetScriptColumnIntEVC($"select reference from type_inouttypes where tagcode='${do_tagcode}'"$, "reference")
					If iField = 1 Then
						Dim gField As String = "dta_technicals"
					else If iField = 2 Then
						Dim gField As String = "dta_departments"
					else If iField = 3 Then
						Dim gField As String = "dta_teams"
					else If iField = 4 Then
						Dim gField As String = "dta_objects" 'Viaturas
						Dim sField As String = " and active=1 and object_type in (select tagcode from dta_objecttypes where inout_tagcode in (select tagcode from type_inouttypes where reference=4))"
					else If iField = 5 Then
						Dim gField As String = "" 'Empresas
					else If iField = 6 Then
						Dim gField As String = "dta_warehouses"
					else If iField = 7 Then
						Dim gField As String = "dta_articles"
						If (Utils.NNE(do_origin_group)) Then
							Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", do_origin_group ))
							If Utils.NNE(theList) Then
								sField = $" and article_group in ${theList}"$
							End If
						End If
						If (Utils.NNE(do_subgroup)) Then
							Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", do_subgroup ))
							If Utils.NNE(theList) Then
								sField = $" and article_type in ${theList}"$
							End If
						End If
					else If iField = 8 Then
						Dim gField As String = "dta_articles"

						'0-None, 1-Objecto, 2-Tecnico, 3-Equipa, 4-Viatura, 5-Entidade, 6-Tipo Intervenção, 7-Tipo Objecto
						If (do_associate_type = 1) Then
							'this_object_tagcode
							sField = $" and (tagcode in (select article_tagcode from dta_warehouses_articles
										where warehouse_tagcode in (select tagcode from dta_warehouses
											where object_tagcode='${this_object_tagcode}')))"$
						Else If (do_associate_type = 2) Then
							sField = $" and (tagcode in (Select article_tagcode from dta_warehouses_articles
											where warehouse_tagcode in (Select warehouse_tagcode from dta_warehouses_adds
												where inout_tagcode='TINOUT_TECHNICAL' and technical_tagcode='${ShareCode.SESS_OPER_User}')))"$
						Else If (do_associate_type = 3) Then
							sField = $" and (tagcode in (Select article_tagcode from dta_warehouses_articles
										where warehouse_tagcode in (Select warehouse_tagcode from dta_warehouses_adds
											where inout_tagcode='${do_subsubgroup}' and reference_tagcode in (
												select value from dta_objects_fields 
													where object_tagcode='${this_object_tagcode}' and field_tagcode='${do_affected_field}'
											))))"$
						End If
						
						If (Utils.NNE(do_origin_group)) Then
							Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", do_origin_group ))
							If Utils.NNE(theList) Then
								sField = $" and article_group in ${theList}"$
							End If
						End If
						If (Utils.NNE(do_subgroup)) Then
							Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", do_subgroup ))
							If Utils.NNE(theList) Then
								sField = $" and article_type in ${theList}"$
							End If
						End If
					else If iField = 9 Then
						Dim gField As String = "aut_users"
						If (Utils.NNE(do_origin_group)) Then
							Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", do_origin_group ))
							If Utils.NNE(theList) Then
								sField = $" and profile_tagcode in ${theList}"$
							End If
'							ordField = $""$
						End If
					else If iField = 12 Then
						Dim gField As String = "dta_equipments"
						If (Utils.NNE(do_origin_group)) Then
							Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", do_origin_group ))
							If Utils.NNE(theList) Then
								sField = $" and equipment_group in ${theList}"$
							End If
						End If
						If (Utils.NNE(do_subgroup)) Then
							Dim theList1 As String = Utils.StrList2SQLArray(Regex.Split("\|", do_subgroup ))
							If Utils.NNE(theList1) Then
								sField = $" and equipment_type in ${theList1}"$
							End If
						End If
					Else
						Dim gField As String = "dta_articles"
						If (Utils.NNE(do_origin_group)) Then
							Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", do_origin_group ))
							If Utils.NNE(theList) Then
								sField = $" and article_group in ${theList}"$
							End If
						End If
						If (Utils.NNE(do_subgroup)) Then
							Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", do_subgroup ))
							If Utils.NNE(theList) Then
								sField = $" and article_type in ${theList}"$
							End If
						End If
						If (do_origin_titlefield = "name") Then
							do_origin_titlefield = "title"
						End If
					End If
				
					Dim gList As List : gList.Initialize
					If Utils.NNE(gField) Then
						'Dim gScript As String = $"select ${do_origin_titlefield} from ${gField} where 1=1 ${sField}"$
						Dim gScript As String = $"select ${do_origin_titlefield}, tagcode from ${gField} where 1=1 ${sField} and active=1  order by ${do_origin_titlefield}"$
						Private RecordOri As Cursor = Starter.LocalSQLEVC.ExecQuery(gScript)
						If RecordOri.rowcount > 0 Then
							SelectScript = gScript
							gList.Add("(Sem seleção)")
							For n1=0 To RecordOri.RowCount-1
								RecordOri.Position = n1
								gList.Add(RecordOri.GetString(do_origin_titlefield))
							Next
							If ExtendedFormat Then CLAItemSelectValue.Add("(Outros)")
'							gList.Add("(Outros)")
						Else
							gList.Add("(Sem seleção)")
							If ExtendedFormat Then CLAItemSelectValue.Add("(Outros)")
'							gList.Add("(Outros)")
						End If
					End If
					haveValues = gList.Size > 0
					If haveValues Then
						CLAItemSelectValue.AddAll(gList)
					End If
				else if ((do_origin="TOBJNATT_007") And (Utils.Int2Bool(level3_table))) Then ' Tabela de 3 níves  type_level3types + type_level3mastertypes + type_level3childtypes
					
					Dim level3_level As Int = Utils.IfNullOrEmpty(Record.GetInt("level3_level"), "1")
					Dim level3_tagcode As String = Utils.IfNullOrEmpty(Record.GetString("level3_tagcode"), "")
					Dim level3_parent As String = Utils.IfNullOrEmpty(Record.GetString("level3_parent"), "")
					If (level3_level = 0) Then
						Dim tablepar As String = ""
						Dim tablename As String = "type_level3types"
						Dim tabcond As String = ""
					else If (level3_level = 1) Then
						Dim tablepar As String = "type_level3types"
						Dim tablename As String = "type_level3mastertypes"
						Dim tabcond As String = "level3_tagcode"
					Else
						Dim tablepar As String = "type_level3mastertypes"
						Dim tablename As String = "type_level3childtypes"
						Dim tabcond As String = "level3_tagcode"
					End If
					If (Utils.NNE(tabcond)) Then
						If Utils.NNE(level3_tagcode) Then
							tabcond = $" and ${tabcond}='${level3_tagcode}'"$
						Else
							If Utils.NNE(level3_parent) And Utils.NNE(tablepar) Then
								Dim tvl As Int = DBStructures.GetScriptColumnIntEVC($"select execute_value from dta_requests_values
													where request_tagcode='${CurrentCLA.Request.Trim}'
													and unique_key='${level3_parent}'
													and repeatcounter=${CurrentCLA.RepeatCounter}
													and repeatitemcounter=${repeatitemcounter}"$, "execute_value")
													
								Dim tgc As String = DBStructures.GetScriptColumnStrEVC($"SELECT tagcode FROM ${tablepar} LIMIT ${tvl-1},1"$, "tagcode")
								tabcond = $" and ${tabcond}='${tgc}'"$
							End If
						End If
					End If
					Dim gScript As String = $"select tagdesc, tagcode from ${tablename} where 1=1 ${tabcond}"$
					
					Dim gList As List : gList.Initialize

					Private RecordOri As Cursor = Starter.LocalSQLEVC.ExecQuery(gScript)
					If RecordOri.rowcount > 0 Then
						SelectScript = gScript
						gList.Add("(Sem seleção)")
						For n1=0 To RecordOri.RowCount-1
							RecordOri.Position = n1
							gList.Add(RecordOri.GetString("tagdesc"))
						Next
						If ExtendedFormat Then CLAItemSelectValue.Add("(Outros)")
'						gList.Add("(Outros)")
					Else
						gList.Add("(Sem seleção)")
						If ExtendedFormat Then CLAItemSelectValue.Add("(Outros)")
'						gList.Add("(Outros)")
					End If

					haveValues = gList.Size > 0
					If haveValues Then
						CLAItemSelectValue.AddAll(gList)
					End If
					
				End If
			End If
		End If
		Dim i As Int = 0
		
		Dim OtherValues As String = DBStructures.GetScriptColumnStrEVC($"select execute_value_title from dta_requests_values where request_tagcode = '${CurrentCLA.Request}'
																						 and task_tagcode = '${CurrentCLA.Task}'
																						 and item_tagcode = '${ItemTagcode}'
																						 "$,"execute_value_title")
		
		
		If IsNumber(Record.GetString("value")) Then
			i = Utils.IfNullOrEmpty(Record.GetString("value"), Utils.IfNullOrEmpty(objValue, "0"))		'Record.GetString("value")
		End If
		
		If haveValues Then
			
			Dim ppos As Int = 0
			For a=0 To CLAItemSelectValue.Size -1
				Dim tmpVal As String = CLAItemSelectValue.GetItem(a)
				If tmpVal = "(Outros)" Then
					ppos = a
				End If
			Next
			
			CLAItemSelectValue.SelectedIndex = 	i 'Record.GetString("value") ' CLAItemSelectValue.IndexOf(Record.GetString("value"))
			
			Try
				If CLAItemSelectValue.GetItem(i) = "(Outros)" And Utils.NNE(OtherValues) Then
					CLAItemSelectValue.RemoveAt(i)
					CLAItemSelectValue.Add(OtherValues)
					
					For a=0 To CLAItemSelectValue.Size -1
						Dim tmpVal As String = CLAItemSelectValue.GetItem(a)
						If tmpVal = OtherValues Then
							CLAItemSelectValue.SelectedIndex = a
						End If
					Next
					
					CLAItemSelectValue.Add("(Outros)")
					
				End If
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try

		End If
		
		
		Dim SSTAG As String = $"${Record.GetString("request_tagcode")}|${Record.GetString("inner_request_tagcode")}|
					${Record.GetString("task_tagcode")}|${Record.GetString("item_tagcode")}|${Record.GetString("unique_key")}|
					${Record.GetString("tagcode")}|1|0|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}|${SelectScript}"$
		
		CLAItemSelectValue.Tag = SSTAG
'		p.Tag = SSTAG
		
		CLAItemSelectValue.Enabled = Not(READONLY_FEATURES)
		If (i = 0) Then
			SelectOptionPanel.Color = Consts.ColorSelecNotSelected
		Else
			SelectOptionPanel.Color = Consts.ColorSelecSelected
		End If
		SelectOptionPanel.Tag = $"${i}|${points}|${risk}"$
		
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record.GetString("request_tagcode"), _
				Record.GetString("inner_request_tagcode"), _
				Record.GetString("task_tagcode"), _
				Record.GetString("item_tagcode"), _
				Record.GetString("unique_key"), _
				Record.GetString("tagcode"), _
				Record.GetInt("repeatcounter"), repeatitemcounter, repeatfieldcounter,Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record.GetString("task_tagcode"), Record.GetString("unique_key")), "")
							
'	*********************************************************************************************************************
'	 ROTINA DE VERIFICACAO SE O PAINEL FOI INACTIVADO POR EVENTO E PROCEDER DE ACORDO, COLOCANDO-O A ENABLE OU DISABLED
'	 E MUDANDO A COR DE BRANCO PARA CINZA E VICE VERSA
'	*********************************************************************************************************************
								
		Dim EnabledState As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(fieldref_02, 'enabled') as EnabledState from dta_requests_values_adds where 1=1
																	and request_tagcode = '${CLAItem.Request.Trim}'
																	and task_tagcode = '${CLAItem.task.trim}'
																	and item_tagcode = '${CLAItem.item.trim}'
																	and repeatcounter = ${repeatcounter}
																	and repeatitemcounter = ${repeatitemcounter}
																	and repeatfieldcounter = ${repeatfieldcounter}"$,"EnabledState")
		If EnabledState.ToLowerCase = "disabled" Then
			Dim Val2set As Boolean = False
			RPI.pan.Enabled = Val2set
			RPI.pan.Color = Colors.LightGray
			For Each v As View In RPI.pan.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		Else
			If READONLY_FEATURES = False Then
				Dim Val2set As Boolean = True
				RPI.pan.Enabled = Val2set
				RPI.pan.Color = Colors.white
				For Each v As View In RPI.pan.GetAllViewsRecursive
							
					If v Is Label Then
						Dim lV As Label = v
						lV.Enabled = Val2set
					else If v Is EditText Then
						Dim eV As EditText = v
						eV.Enabled = Val2set
					else If v Is FloatLabeledEditText Then
						Dim fV As FloatLabeledEditText = v
						fV.Enabled = Val2set
					else If v Is Button Then
						Dim bV As Button = v
						bV.Enabled = Val2set
					else If v Is Spinner Then
						Dim sV As Spinner = v
						sV.Enabled = Val2set
					End If
				Next
			End If
		End If
'	*********************************************************************************************************************
'	*********************************************************************************************************************

			ComponentList.add( Types.MakeComponentRecords(RPI.Pan, taggedID, Record.GetString("item_tagcode"),RPI.Height,repeatitemcounter,repeatfieldcounter ,True) )

		
	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record.Close


	Return SetCLAIRowPosis(CLAItem, RPI, innerPanel, chapter, Posis)
End Sub


' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 1
' *************************************************************
Sub CreateLineItemInformation(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
		ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
		ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	
'	If (CurrentOrientation=0) Then
	Dim vfrmt As Int = outRecord.GetInt("val_format")
	
	Dim RPI As RowPanelInfo = SetCLAIRowPanel(outRecord, 0, "V2_CLA_ITEM_Information", "", False, 0, False)
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
	If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	
	ListOfTextViews.Add(CLAItemTitle)
	
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
	Dim AllSQL As String = GetCLAIRowScrip(ItemTagcode, UniqueKey, repeatcounter, repeatitemcounter, repeatfieldcounter, fieldval_04)
	Private Record2 As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	Log(AllSQL)
	If Record2.RowCount > 0 Then
		Record2.Position = 0
		Dim do_name As String = Utils.IfNullOrEmpty(Record2.GetString("do_name"), "")
		Dim do_is_additional As String = Utils.IfNullOrEmpty(Record2.GetString("do_is_additional"), "0")
		Dim execute_value_title As String = Utils.IfNullOrEmpty(Record2.GetString("execute_value_title"), "")
		Dim value As String = Utils.IfNullOrEmpty(Record2.GetString("value"), "")
		
		'*****************************************************************************************
		' ALTERACAO PARA NO CASO DESTA LABEL ESTAR A MOSTRAR O VALOR DE UM INDICE DE UMA LISTA
		' PODER IR MOSTRAR O TEXTO DA MESMA, LENDO O execute_value_title E MOSTRANDO NUMA VIEW
		' SO VISIVEL PARA O EFEITO, A VIEW DE CONTROLO, CONTINUA COM O VALOR ORIGINAL
		' VIEW ORIGINAL DE CONTROLO : CLAItemInformation
		' VIEW APENAS PARA MOSTRAR  : CLAShowOnlyItemInformation
		'*****************************************************************************************
		CLAItemInformation.Text = value
		CLAShowOnlyItemInformation.Text = execute_value_title
		Dim ItemTagcode As String = Utils.IfNullOrEmpty(Record2.GetString("item_tagcode"), "")
		
		If Utils.NNE(execute_value_title) And IsNumber(value) Then
			CLAShowOnlyItemInformation.Visible = True
			CLAItemInformation.Visible = False
			UPDATED_EDIT_FIELDS.Add( Types.MakeFieldReference(ItemTagcode, CLAShowOnlyItemInformation, repeatfieldcounter))
		Else
			CLAShowOnlyItemInformation.Visible = False
			CLAItemInformation.Visible = True
			UPDATED_EDIT_FIELDS.Add( Types.MakeFieldReference(ItemTagcode, CLAItemInformation, repeatfieldcounter))
		End If
		
		UPDATED_INNER_FIELDS.Add( Types.MakeFieldReference(ItemTagcode, CLAItemInformation, repeatfieldcounter))   'FieldReference
			
		Dim Status As Int = Record2.GetInt("status")
		Dim repeatcounter As Int = Record2.GetInt("repeatcounter")
		Dim SSTAG1 As String = $"${Record2.GetString("request_tagcode")}|${Record2.GetString("inner_request_tagcode")}|
						${Record2.GetString("task_tagcode")}|${Record2.GetString("item_tagcode")}|${Record2.GetString("unique_key")}|
						${Record2.GetString("tagcode")}|1|${Status}|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
		CLAItemInformation.tag = SSTAG1
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record2.GetString("request_tagcode"), _
				Record2.GetString("inner_request_tagcode"), _
				Record2.GetString("task_tagcode"), _
				Record2.GetString("item_tagcode"), _
				Record2.GetString("unique_key"), _
				Record2.GetString("tagcode"), _
				Record2.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter, Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record2.GetString("task_tagcode"), Record2.GetString("unique_key")), "")
							
'	*********************************************************************************************************************
'	 ROTINA DE VERIFICACAO SE O PAINEL FOI INACTIVADO POR EVENTO E PROCEDER DE ACORDO, COLOCANDO-O A ENABLE OU DISABLED
'	 E MUDANDO A COR DE BRANCO PARA CINZA E VICE VERSA
'	*********************************************************************************************************************
								
		Dim EnabledState As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(fieldref_02, 'enabled') as EnabledState from dta_requests_values_adds where 1=1
																	and request_tagcode = '${CLAItem.Request.Trim}'
																	and task_tagcode = '${CLAItem.task.trim}'
																	and item_tagcode = '${CLAItem.item.trim}'
																	and repeatcounter = ${repeatcounter}
																	and repeatitemcounter = ${repeatitemcounter}
																	and repeatfieldcounter = ${repeatfieldcounter}"$,"EnabledState")
		If EnabledState.ToLowerCase = "disabled" Then
			Dim Val2set As Boolean = False
			RPI.pan.Enabled = Val2set
			RPI.pan.Color = Colors.LightGray
			For Each v As View In RPI.pan.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		Else
			If READONLY_FEATURES = False Then
				Dim Val2set As Boolean = True
				RPI.pan.Enabled = Val2set
				RPI.pan.Color = Colors.white
				For Each v As View In RPI.pan.GetAllViewsRecursive
							
					If v Is Label Then
						Dim lV As Label = v
						lV.Enabled = Val2set
					else If v Is EditText Then
						Dim eV As EditText = v
						eV.Enabled = Val2set
					else If v Is FloatLabeledEditText Then
						Dim fV As FloatLabeledEditText = v
						fV.Enabled = Val2set
					else If v Is Button Then
						Dim bV As Button = v
						bV.Enabled = Val2set
					else If v Is Spinner Then
						Dim sV As Spinner = v
						sV.Enabled = Val2set
					End If
				Next
			End If
		End If
'	*********************************************************************************************************************
'	*********************************************************************************************************************
		ComponentList.add( Types.MakeComponentRecords(RPI.Pan, taggedID, Record2.GetString("item_tagcode"),RPI.height,repeatitemcounter,repeatfieldcounter ,True) )


	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record2.Close
	
	Return SetCLAIRowPosis(CLAItem, RPI, innerPanel, chapter, Posis)
End Sub

Sub RemoveDuplicatesInComponentList(itc As String, ric As Int) As ResumableSub
	
	ProgressDialogShow2("Processando eventos. Aguarde por favor !", False)
	Dim retval As Boolean = False
	Try
		For i=0 To ComponentList.Size -1
			Dim ClItem As ComponentRecords = ComponentList.Get(i)
			If ClItem.item_tagcode = itc.trim And ClItem.RepeatItemCounter = ric Then
				ComponentList.RemoveAt(i)
				Log("Found Duplicate and removed it")
				Exit
			End If
		Next	
		retval = True
	Catch
		retval = False
		Log(LastException)
	End Try
	ProgressDialogHide
	Return retval
End Sub

Sub CreateLineItemRadioButton(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
		ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
		ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	
'	If (CurrentOrientation=0) Then
	
	Dim RPI As RowPanelInfo = SetCLAIRowPanel(outRecord, DeviceHeight2, "V2_CLA_ITEM_RadioB2", "V2_CLA_ITEM_RadioB2", False, 0, False)
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
'	p.Tag = ItemTagcode
	
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")

	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
	
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	Dim AllSQL As String = GetCLAIRowScrip(ItemTagcode, UniqueKey, repeatcounter, repeatitemcounter, repeatfieldcounter, fieldval_04)
			
	Private Record2 As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	If Record2.RowCount > 0 Then
		Record2.Position = 0
		
		Dim Status As Int = Record2.GetInt("status")
		Dim cnf As Int = Record2.GetInt("conform_type")
		Dim repeatcounter As Int = Record2.GetInt("repeatcounter")
		
		If (Status > 0) Then
			CLAItemButton_1.State = 1
			CLAItemButton_1.Conformity = cnf
		End If
		
		If (Record2.RowCount > 1) Then
			Record2.Position = 1
			Dim Status As Int = Record2.GetInt("status")
			Dim cnf As Int = Record2.GetInt("conform_type")
			If (Status > 0) Then
				CLAItemButton_2.State = 1
				CLAItemButton_2.Conformity = cnf
			End If
		End If
		
		CLAItemButton_1.Enabled = Not(READONLY_FEATURES)
		CLAItemButton_2.Enabled = Not(READONLY_FEATURES)
		
		Dim SSTAG1 As String = $"${Record2.GetString("request_tagcode")}|${Record2.GetString("inner_request_tagcode")}|
						${Record2.GetString("task_tagcode")}|${Record2.GetString("item_tagcode")}|${Record2.GetString("unique_key")}|
						${Record2.GetString("tagcode")}|1|${Status}|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
		
		Dim SSTAG2 As String = $"${Record2.GetString("request_tagcode")}|${Record2.GetString("inner_request_tagcode")}|
						${Record2.GetString("task_tagcode")}|${Record2.GetString("item_tagcode")}|${Record2.GetString("unique_key")}|
						${Record2.GetString("tagcode")}|2|${Status}|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
		
		CLAItemButton_1.Tag = SSTAG1
		CLAItemButton_2.Tag = SSTAG2
		
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record2.GetString("request_tagcode"), _
				Record2.GetString("inner_request_tagcode"), _
				Record2.GetString("task_tagcode"), _
				Record2.GetString("item_tagcode"), _
				Record2.GetString("unique_key"), _
				Record2.GetString("tagcode"), _
				Record2.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter, Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record2.GetString("task_tagcode"), Record2.GetString("unique_key")), "")
	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record2.Close
	
	Return SetCLAIRowPosis(CLAItem, RPI, innerPanel, chapter, Posis)
End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 8
' *************************************************************
Sub CreateLineItemColorButton(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
	ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
	ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	
	Dim RPI As RowPanelInfo = SetCLAIRowPanel(outRecord, DeviceHeight2, "V2_CLA_ITEM_Button", "V2_CLA_ITEM_Button", False, 0, False)
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
		If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")
	
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed

	
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	
	Dim AllSQL As String = GetCLAIRowScrip(ItemTagcode, UniqueKey, repeatcounter, repeatitemcounter, repeatfieldcounter, fieldval_04)
	Private Record2 As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	If Record2.RowCount > 0 Then
		Record2.Position = 0
		If (Utils.NNE(Record2.GetString("value"))) Then
			CLAItemButton_1.FirstStateColor = Record2.GetString("value")
		End If
		Dim repeatcounter As Int = Record2.GetInt("repeatcounter")
		CLAItemButton_1.Enabled = Not(READONLY_FEATURES)
		
		Dim SSTAG As String = $"${Record2.GetString("request_tagcode")}|${Record2.GetString("inner_request_tagcode")}|
						${Record2.GetString("task_tagcode")}|${Record2.GetString("item_tagcode")}|${Record2.GetString("unique_key")}|
						${Record2.GetString("tagcode")}|1|0|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
		
		CLAItemButton_1.Tag = SSTAG

		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record2.GetString("request_tagcode"), _
				Record2.GetString("inner_request_tagcode"), _
				Record2.GetString("task_tagcode"), _
				Record2.GetString("item_tagcode"), _
				Record2.GetString("unique_key"), _
				Record2.GetString("tagcode"), _
				Record2.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter,Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record2.GetString("task_tagcode"), Record2.GetString("unique_key")), "")
	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record2.Close
	
	Return SetCLAIRowPosis(CLAItem, RPI, innerPanel, chapter, Posis)
End Sub

' *************************************************************
' TIP: EVENTO DE ATUALIZAÇÃO DE VALOR DE COR
' *************************************************************
Sub CLAItemButtonColor_StateClick (State As Int)
	Dim Current As B4XStateButton = Sender
	
	Dim cw As ColorWheelDialog
	cw.Initialize
	cw.ShowAsync(Me, "Escolha a cor")
	Wait For (cw) Color_Result(Success As Boolean)
	If Success Then
		Current.FirstStateColor = cw.ColorResult
		Current.SecondStateColor = cw.ColorResult
		Current.updateButtonState(State)
		Dim New As String = cw.ColorResult
		Dim Columns As List = Regex.Split("\|", Current.tag )
		If (Columns.Size >= 1) Then
			Dim doContinua As Boolean = True
			Try
				Dim request_tagcode As String = Columns.Get(0)
				Dim action_tagcode As String = Columns.Get(1)
				Dim task_tagcode As String = Columns.Get(2)
				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
				Dim tagcode As String = Columns.Get(5)
'				Dim val As String = Columns.Get(6)
'				Dim StatusIcon As Int = Columns.Get(7)
'				Dim Multi As Int = Columns.Get(8)
				Dim repeatcounter As Int = Columns.Get(9)
				Dim repeatitemcounter As Int = Columns.Get(10)
				Dim repeatfieldcounter As Int = Columns.Get(11)
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				doContinua = False
			End Try
	
			If (doContinua) Then
				PressedAnswerTagCode = tagcode
				Dim SetInner As Int = 0
				Dim status As Int = 1
				Dim sACLADatetime As String = Utils.GetCurrDatetime
				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")

				Dim sSQL As String = $"update dta_requests_values set execute_value='${New}',
							execute_status='${status}', 
							execute_datetime='${sACLADatetime}', 
							execute_latitude='${sACLALatitude}', 
							execute_longitude='${sACLALongitude}'
							where request_tagcode='${request_tagcode.trim}' and
							task_tagcode='${task_tagcode.trim}' and item_tagcode='${item_tagcode.trim}' and 
							unique_key='${uniquekey.trim}' and tagcode='${tagcode.trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
				Try
					Log(sSQL)
					Utils.SaveSQLToLog("CLAItemEditValue_EnterPressed",sSQL, request_tagcode)
					'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
					Dim params As Map
					params.Initialize
					params.Clear
					params.Put("_token", ShareCode.APP_TOKEN)
					params.Put("ACLARequest", request_tagcode)
					params.Put("ACLAAction", action_tagcode)
					params.Put("ACLATask", task_tagcode)
					params.Put("ACLAItem", item_tagcode)
					params.Put("ACLAUniqueKey", uniquekey)
					params.Put("ACLATagcode", tagcode)
					params.Put("ACLAValue", New)
					params.Put("ACLAReqCounter", repeatcounter)
					params.Put("ACLARepeatItem", repeatitemcounter)
					params.Put("ACLARepeatField", repeatfieldcounter)
					params.Put("ACLAInner", SetInner)
				
					params.Put("ACLADatetime", sACLADatetime)
					params.Put("ACLALatitude", sACLALatitude)
					params.Put("ACLALongitude", sACLALongitude)
					
					Dim ACLSessUser As String = ShareCode.SESS_OPER_User
					Dim ACLClear As Int = 0
					params.Put("ACLSessUser", ACLSessUser)
					params.Put("ACLClear", ACLClear)
					params.Put("versionTagcode", Main.VersionTagcode)
					params.Put("_authorization", Main.DeviceAuthorization)
					params.Put("_instance", Main.DeviceInstance)
					params.put("_deviceBrand", Main.DeviceBrand)
					params.put("_deviceModel", Main.DeviceModel)
					params.put("_deviceMacAddress", Main.DeviceMacAddress)
					params.Put("_user", ShareCode.SESS_User)
					Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
					If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
						If Not(ShareCode.APP_WORKING_LOCAL) Then
'							TIP : VERIFICAR SE JA EXISTE UM REGISTO NO WORKER, SE NAO ESCREVE NO SVR, SE SIM, ESCREVE NO WORKER PARA UPDATE POSTERIOR
							Dim GODR As ResumableSub = GetOfflineDataRec(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
							Wait For (GODR) Complete (HasResults As Boolean)
							If HasResults Then
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							Else
								Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim) 
							End If
							
						Else
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						End If
						Sleep(250)
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
	
			End If
		End If
	End If

End Sub

' *************************************************************
' TIP: EVENTO DE ATUALIZAÇÃO DE VALOR DE BOTÃO (2)
' *************************************************************
Sub CreateLineItemButton2(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, ItemTagcode As String, _
				UniqueKey As String, outRecord As Cursor, _
				ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int

	If (CurrentOrientation=0) Then
		Dim height As Int = Utils.IntToDIP(outRecord.GetInt("height_land") + DeviceHeight2)
	Else

		Dim height As Int = DeviceHeight2
		
		Dim rowitems As Int = outRecord.GetInt("rowitems")
		If(ShareCode.ISPHONE And rowitems > 1) Then
			height = height + (rowitems*60dip)
		Else If	(ShareCode.ISPHONE And rowitems = 1)Then
			height = height + 60dip
		End If
		
	End If
	
	Dim SP As String = ""
'	If (ShareCode.ISPHONE) Then
'		SP = "_SP"
'	End If
	
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int = 0
	End Try
	
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	
	Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
						
	If (DataBulkUpload=1) And (fieldval_04>=0) Then
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						and x.item_tagcode||x.item_tagcode||x.unique_key||x.repeatcounter in (select z.item_tagcode||z.item_tagcode||z.unique_key||z.repeatcounter  
						from dta_requests_values_adds as z where  z.fieldval_04=${fieldval_04})
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	Else
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	End If
'	Log(AllSQL)
	Private Record2 As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	
	
	Dim request_tagcode As String = ""
	Dim inner_request_tagcode As String = ""
	Dim task_tagcode As String = ""
	Dim item_tagcode As String = ""
	Dim unique_key As String = ""
	Dim tagcode As String = ""
	Dim TotalRecords As Int = Record2.RowCount
	
	Dim Continuar As Boolean = True
	
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	'Dim Repeat As Int = outRecord.GetInt("repeated")
	Dim Multi As Int = outRecord.GetInt("multiple")
	Dim Critical As Int = outRecord.GetInt("critical")
	
'	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0,"", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
'	Try
	Dim NameView As String = ""
	Dim Row As Int = 0
'		If Not(ShareCode.ISPHONE) Then

	If (TotalRecords = 0) Then
		Return
	End If
	
	If TotalRecords > 6 Then
		TotalRecords = 6
	End If
	
	If (TotalRecords = 1) Then
'		If Utils.NNE(ExtraInfo) Then
'			NameView = "V2_CLA_ITEM_RadioB1_Info"
'		Else
			NameView = "V2_CLA_ITEM_RadioB1" & SP
'		End If
	else If (TotalRecords = 2) Then
'		If Utils.NNE(ExtraInfo) Then
'			NameView = "V2_CLA_ITEM_RadioB2_Info"
'		Else
			NameView = "V2_CLA_ITEM_RadioB2" & SP
'		End If
	else If (TotalRecords = 3) Then
'		If Utils.NNE(ExtraInfo) Then
'			NameView = "V2_CLA_ITEM_RadioB3_Info"
'		Else
			NameView = "V2_CLA_ITEM_RadioB3" & SP
'		End If
	Else If (TotalRecords = 4) Then
'			addHeight = 75dip
'		If Utils.NNE(ExtraInfo) Then
'			NameView = "V2_CLA_ITEM_RadioB4_Info"
'		Else
			NameView = "V2_CLA_ITEM_RadioB4" & SP
'		End If
	Else If (TotalRecords = 5) Then
'			addHeight = 75dip
'		If Utils.NNE(ExtraInfo) Then
'			NameView = "V2_CLA_ITEM_RadioB5_Info"
'		Else
			NameView = "V2_CLA_ITEM_RadioB5" & SP
'		End If
	Else If (TotalRecords = 6) Then
'			addHeight = 75dip
'		If Utils.NNE(ExtraInfo) Then
'			NameView = "V2_CLA_ITEM_RadioB6_Info"
'		Else
			NameView = "V2_CLA_ITEM_RadioB6" & SP
'		End If
	Else If (TotalRecords > 6) Then' ALTERACAO PC - SE FOR MAIOR DO QUE 6 ENTAO TotalRecords = 6
'		If Utils.NNE(ExtraInfo) Then
'			NameView = "V2_CLA_ITEM_RadioB6_Info"
'		Else
			NameView = "V2_CLA_ITEM_RadioB6" & SP
'		End If
	End If
		
	Continuar = Utils.NNE(NameView.Trim)
	'height = height + addHeight
	Dim p As Panel
	p.Initialize("CLALineClick")
	Activity.AddView(p, 0, 0, 100%x, height) ' + addHeight)
	p.LoadLayout(NameView)
	
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
		If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	
	p.RemoveView
	''		p.Height = p.Height + addHeight
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
'		p.Tag = UniqueKey 'ItemTagcode
	
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")

	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	
	'CLAItemTitle.Text = $"${taggedID}.${subidx} - ${Title}"$
'	If Utils.NNE(ExtraInfo) Then CLAItemTitleInfo.Text = ExtraInfo
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
		
	If TotalRecords > 0 Then
		For Row = 0 To TotalRecords-1
			Record2.Position = Row
				
			Dim request_tagcode As String = Utils.IfNullOrEmpty(Record2.GetString("request_tagcode"), "")
			Dim inner_request_tagcode As String = Utils.IfNullOrEmpty(Record2.GetString("inner_request_tagcode"), "")
			Dim task_tagcode As String = Utils.IfNullOrEmpty(Record2.GetString("task_tagcode"), "")
			Dim item_tagcode As String = Utils.IfNullOrEmpty(Record2.GetString("item_tagcode"), "")
			Dim unique_key As String = Utils.IfNullOrEmpty(Record2.GetString("unique_key"), "")
			Dim tagcode As String = Utils.IfNullOrEmpty(Record2.GetString("tagcode"), "")
			Dim repeatcounter As Int = Record2.GetInt("repeatcounter")
			Dim repeatitemcounter1 As Int = Record2.GetInt("repeatitemcounter")
			Dim icon As String = Record2.GetString("icon")
			Dim printout_type As String = Record2.GetString("printout_type")
				
			Dim Status As Int = Record2.GetInt("status")
			Dim cnf As Int = Record2.GetInt("conform_type")
			Dim valbut As String = ""
			Try
				valbut = Record2.GetString("value")
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				valbut = ""
			End Try
				
			If (Row = 0) Then
				Dim btn As B4XStateButton = CLAItemButton_1
			Else If (Row = 1) Then
				Dim btn As B4XStateButton = CLAItemButton_2
			Else If (Row = 2) Then
				Dim btn As B4XStateButton = CLAItemButton_3
			Else If (Row = 3) Then
				Dim btn As B4XStateButton = CLAItemButton_4
			Else If (Row = 4) Then
				Dim btn As B4XStateButton = CLAItemButton_5
			Else If (Row = 5) Then
				Dim btn As B4XStateButton = CLAItemButton_6
			Else
				Dim btn As B4XStateButton
				btn.Initialize(Me, "")
			End If
				
'			B4XSButtonsList.Add(Types.MakeB4XSRecords(btn, taggedID, subidx, item_tagcode, True, tagcode))
			
			If (btn.IsInitialized) Then
				If (Multi = 0) And (TotalRecords >1) Then
					btn.ButtonGroup = 1
				Else
					btn.ButtonGroup = 0
					btn.SecondStateColor = Consts.ColorBlue
				End If
								
				If (cnf = 1) Then
					btn.SecondStateColor = Consts.ColorGreen
				else If (cnf = 2) Then
					btn.SecondStateColor = Consts.ColorRed
				Else
					btn.SecondStateColor = Consts.ColorBlue
				End If
				'FirstState
				btn.Conformity = cnf
				
				If (cnf > 0) Then
					btn.Reference = cnf
				End If
				
				If (Multi = 0) And (TotalRecords >=1) Then
					If (Status > 0) Then
						btn.FirstState = 1
					End If
				Else
					Dim Columns2 As List = Regex.Split("\,", valbut )
					If (Columns2.Size >= 1) Then
						For ii=0 To Columns2.Size-1
							If ((Row+1) = Utils.IfNullOrEmpty(Columns2.Get(ii), 0)) Then
								btn.FirstState = 1
								Status = 1
							End If
						Next
					End If
				End If
'					btn.FirstState = Status
				If (valbut.Length >=2) Then
					Dim ButTitle As String = valbut
				Else
					Dim ButTitle As String = Utils.IfNullOrEmpty(Record2.GetString("val_title"), "")
				End If
					
				If (printout_type = "TPOUT_002") Or (printout_type = "TPOUT_003") Then
					btn.Typeface = Typeface.FONTAWESOME
					If (printout_type = "TPOUT_002") Then
						If (icon = "TICOT_CAM") Then
							ButTitle = $"${Chr(0xF030)}"$
						else If (icon = "TICOT_CHECK") Then
							ButTitle = $"${Chr(0xF00C)}"$
						else If (icon = "TICOT_TIMES") Then
							ButTitle = $"${Chr(0xF00D)}"$
						End If
					Else
						If (icon = "TICOT_CAM") Then
							ButTitle = $"${Chr(0xF030)} ${ButTitle}"$
						else If (icon = "TICOT_CHECK") Then
							ButTitle = $"${Chr(0xF00C)} ${ButTitle}"$
						else If (icon = "TICOT_TIMES") Then
							ButTitle = $"${Chr(0xF00D)} ${ButTitle}"$
						End If
					End If
				End If
				btn.Text = ButTitle
					
				Dim strTag As String = $"${request_tagcode}|${inner_request_tagcode}|${task_tagcode}|
											${item_tagcode}|${unique_key}|${tagcode.trim}|${Row+1}|${Status}|
											${Multi}|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
				btn.Tag = strTag
					
				btn.Enabled = Not(READONLY_FEATURES)
				
				
				B4XSButtonsList.Add(Types.MakeB4XSRecords(btn, taggedID, subidx, item_tagcode, True, tagcode))
'				Log($"Botão item_tagcode: ${item_tagcode}, tagcode: ${tagcode}"$)
				
				Dim updreqval As String = $"update dta_requests_values set execute_format_title='${ButTitle}'
											where 1=1
											and request_tagcode='${request_tagcode}'
											and task_tagcode='${task_tagcode}'
											and item_tagcode='${item_tagcode}'
											and unique_key='${unique_key}'
											and tagcode='${tagcode.trim}'
											and repeatcounter='${repeatcounter}'
											and repeatitemcounter='${repeatitemcounter}' "$
											
				Starter.LocalSQLEVC.ExecNonQuery(updreqval)
			End If
		Next
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem( _
						request_tagcode, _
						inner_request_tagcode, _
						task_tagcode, _
						item_tagcode, _
						unique_key, _
						tagcode.trim, _													
						repeatcounter,repeatitemcounter1, repeatfieldcounter, Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(task_tagcode, unique_key), "")		
							
'	*********************************************************************************************************************
'	 ROTINA DE VERIFICACAO SE O PAINEL FOI INACTIVADO POR EVENTO E PROCEDER DE ACORDO, COLOCANDO-O A ENABLE OU DISABLED
'	 E MUDANDO A COR DE BRANCO PARA CINZA E VICE VERSA
'	*********************************************************************************************************************
								
		Dim EnabledState As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(fieldref_02, 'enabled') as EnabledState from dta_requests_values_adds where 1=1
																	and request_tagcode = '${CLAItem.Request.Trim}'
																	and task_tagcode = '${CLAItem.task.trim}'
																	and item_tagcode = '${CLAItem.item.trim}'
																	and repeatcounter = ${repeatcounter}
																	and repeatitemcounter = ${repeatitemcounter}
																	and repeatfieldcounter = ${repeatfieldcounter}"$,"EnabledState")
		If EnabledState.ToLowerCase = "disabled" Then
			Dim Val2set As Boolean = False
			p.Enabled = Val2set
			p.Color = Colors.LightGray
			For Each v As View In p.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		Else
			If READONLY_FEATURES = False Then
				Dim Val2set As Boolean = True
				p.Enabled = Val2set
				p.Color = Colors.white
				For Each v As View In p.GetAllViewsRecursive
							
					If v Is Label Then
						Dim lV As Label = v
						lV.Enabled = Val2set
					else If v Is EditText Then
						Dim eV As EditText = v
						eV.Enabled = Val2set
					else If v Is FloatLabeledEditText Then
						Dim fV As FloatLabeledEditText = v
						fV.Enabled = Val2set
					else If v Is Button Then
						Dim bV As Button = v
						bV.Enabled = Val2set
					else If v Is Spinner Then
						Dim sV As Spinner = v
						sV.Enabled = Val2set
					End If
				Next
			End If
			
		End If
'	*********************************************************************************************************************
'	*********************************************************************************************************************

	ComponentList.add( Types.MakeComponentRecords(p, taggedID, item_tagcode,height,repeatitemcounter, repeatfieldcounter ,True) )


	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record2.Close
		
	CLAButtonOptions.Tag = CLAItem
	CLAButtonOptions.Enabled = Not(READONLY_FEATURES)
	p.Tag = CLAItem
'	Catch
'		Continuar = False
'		Log(LastException)
'	End Try
	
	If (Continuar) Then
		p.Tag = CLAItem
		If (innerPanel = 0) Then
			Dim pnl As B4XView = chapter.GetView(1)
			pnl.AddView(p, 0, Posis, chapter.Width, height)
'			pnlExpanded.AddView(p, 0, Posis, chapter.Width, height)
		Else
			chapter.AddView(p, 0, Posis, chapter.Width, height)
		End If
		Posis = Posis + height
	End If
	Return Posis
End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 3-4-5-7-11-18
' *************************************************************
Sub CreateLineItemButton2Checking(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, ItemTagcode As String, _
				UniqueKey As String, outRecord As Cursor, _
				ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	If (CurrentOrientation=0) Then
		Dim height As Int = Utils.IntToDIP(outRecord.GetInt("height_land") + DeviceHeight2)
	Else

		Dim height As Int = DeviceHeight2
		
		Dim rowitems As Int = outRecord.GetInt("rowitems")
		If(ShareCode.ISPHONE And rowitems > 1) Then
			height = height + (rowitems*60dip)
		Else If	(ShareCode.ISPHONE And rowitems = 1)Then
			height = height + 60dip
		End If
		
	End If
	Dim SP As String = ""
	If (ShareCode.ISPHONE) Then
		SP = "_SP"
	End If

	If Utils.NNE(ExtraInfo) Then
		height = height + Utils.IntToDIP(55)
	End If
	
	Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")

	
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	
	Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id "$
						
	If (DataBulkUpload=1) And (fieldval_04>=0) Then
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						and x.item_tagcode||x.item_tagcode||x.unique_key||x.repeatcounter in (select z.item_tagcode||z.item_tagcode||z.unique_key||z.repeatcounter  
						from dta_requests_values_adds as z where  z.fieldval_04=${fieldval_04})
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id "$
	Else
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id "$
	End If
	Log(AllSQL)
	Private Record2 As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	
	
	Dim request_tagcode As String = ""
	Dim inner_request_tagcode As String = ""
	Dim task_tagcode As String = ""
	Dim item_tagcode As String = ""
	Dim unique_key As String = ""
	Dim tagcode As String = ""
	Dim TotalRecords As Int = Record2.RowCount
	
	Dim Continuar As Boolean = True
	
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	'Dim Repeat As Int = outRecord.GetInt("repeated")
	Dim Multi As Int = outRecord.GetInt("multiple")
	Dim Critical As Int = outRecord.GetInt("critical")
	
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0,"", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")

	Dim NameView As String = ""
	Dim Row As Int = 0
	If (TotalRecords = 1) Then
		If Utils.NNE(ExtraInfo) Then
			NameView = "V2_CLA_ITEM_RadioB1_Info"
		Else
			NameView = "V2_CLA_ITEM_RadioB1" & SP
		End If
	else If (TotalRecords = 2) Then
		If Utils.NNE(ExtraInfo) Then
			NameView = "V2_CLA_ITEM_RadioB2_Info"
		Else
			NameView = "V2_CLA_ITEM_RadioB2" & SP
		End If
	else If (TotalRecords = 3) Then
		If Utils.NNE(ExtraInfo) Then
			NameView = "V2_CLA_ITEM_RadioB3_Info"
		Else
			NameView = "V2_CLA_ITEM_RadioB3" & SP
		End If
	Else If (TotalRecords = 4) Then
'			addHeight = 75dip
		If Utils.NNE(ExtraInfo) Then
			NameView = "V2_CLA_ITEM_RadioB4_Info"
		Else
			NameView = "V2_CLA_ITEM_RadioB4" & SP
		End If
	Else If (TotalRecords = 5) Then
'			addHeight = 75dip
		If Utils.NNE(ExtraInfo) Then
			NameView = "V2_CLA_ITEM_RadioB5_Info"
		Else
			NameView = "V2_CLA_ITEM_RadioB5" & SP
		End If
	Else If (TotalRecords = 6) Then
'			addHeight = 75dip
		If Utils.NNE(ExtraInfo) Then
			NameView = "V2_CLA_ITEM_RadioB6_Info"
		Else
			NameView = "V2_CLA_ITEM_RadioB6" & SP
		End If
				
	End If

	Continuar = Utils.NNE(NameView.Trim)
	'height = height + addHeight
	Dim p As Panel
	p.Initialize("CLALineClick")
	Activity.AddView(p, 0, 0, 100%x, height) ' + addHeight)
	p.LoadLayout(NameView)
	p.RemoveView
	''		p.Height = p.Height + addHeight
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
'		p.Tag = UniqueKey 'ItemTagcode
	
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")

	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	
	'CLAItemTitle.Text = $"${taggedID}.${subidx} - ${Title}"$
'	If Utils.NNE(ExtraInfo) Then CLAItemTitleInfo.Text = ExtraInfo
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
		
	If TotalRecords > 0 Then
		For Row = 0 To TotalRecords-1
			Record2.Position = Row
				
			Dim request_tagcode As String = Record2.GetString("request_tagcode")
			Dim inner_request_tagcode As String = Record2.GetString("inner_request_tagcode")
			Dim task_tagcode As String = Record2.GetString("task_tagcode")
			Dim item_tagcode As String = Record2.GetString("item_tagcode")
			Dim unique_key As String = Record2.GetString("unique_key")
			Dim tagcode As String = Record2.GetString("tagcode")
			Dim repeatcounter As Int = Record2.GetInt("repeatcounter")
			Dim repeatitemcounter1 As Int = Record2.GetInt("repeatitemcounter")
			Dim icon As String = Record2.GetString("icon")
			Dim printout_type As String = Record2.GetString("printout_type")
				
			Dim Status As Int = Record2.GetInt("status")
			Dim cnf As Int = Record2.GetInt("conform_type")
			Dim valbut As String = ""
			Try
				valbut = Record2.GetString("value")
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				valbut = ""
			End Try
				
			If (Row = 0) Then
				Dim btn As B4XStateButton = CLAItemButton_1
			Else If (Row = 1) Then
				Dim btn As B4XStateButton = CLAItemButton_2
			Else If (Row = 2) Then
				Dim btn As B4XStateButton = CLAItemButton_3
			Else If (Row = 3) Then
				Dim btn As B4XStateButton = CLAItemButton_4
			Else If (Row = 4) Then
				Dim btn As B4XStateButton = CLAItemButton_5
			Else If (Row = 5) Then
				Dim btn As B4XStateButton = CLAItemButton_6
			Else
				Dim btn As B4XStateButton
				btn.Initialize(Me, "")
			End If
				
				
			If (btn.IsInitialized) Then
				If (Multi = 0) And (TotalRecords >1) Then
					btn.ButtonGroup = 1
				Else
					btn.ButtonGroup = 0
					btn.SecondStateColor = Consts.ColorBlue
				End If
								
				If (cnf = 1) Then
					btn.SecondStateColor = Consts.ColorGreen
				else If (cnf = 2) Then
					btn.SecondStateColor = Consts.ColorRed
				Else
					btn.SecondStateColor = Consts.ColorBlue
				End If
				'FirstState
				btn.Conformity = cnf
				If (Multi = 0) And (TotalRecords >=1) Then
					If (Status > 0) Then
						btn.FirstState = 1
					End If
				Else
					Dim Columns2 As List = Regex.Split("\,", valbut )
					If (Columns2.Size >= 1) Then
						For ii=0 To Columns2.Size-1
							If ((Row+1) = Utils.IfNullOrEmpty(Columns2.Get(ii), 0)) Then
								btn.FirstState = 1
								Status = 1
							End If
						Next
					End If
				End If
'					btn.FirstState = Status
				If (valbut.Length >=2) Then
					Dim ButTitle As String = valbut
				Else
					Dim ButTitle As String = Record2.GetString("val_title")
				End If
					
				If (printout_type = "TPOUT_002") Or (printout_type = "TPOUT_003") Then
					btn.Typeface = Typeface.FONTAWESOME
					If (printout_type = "TPOUT_002") Then
						If (icon = "TICOT_CAM") Then
							ButTitle = $"${Chr(0xF030)}"$
						else If (icon = "TICOT_CHECK") Then
							ButTitle = $"${Chr(0xF00C)}"$
						else If (icon = "TICOT_TIMES") Then
							ButTitle = $"${Chr(0xF00D)}"$
						End If
					Else
						If (icon = "TICOT_CAM") Then
							ButTitle = $"${Chr(0xF030)} ${ButTitle}"$
						else If (icon = "TICOT_CHECK") Then
							ButTitle = $"${Chr(0xF00C)} ${ButTitle}"$
						else If (icon = "TICOT_TIMES") Then
							ButTitle = $"${Chr(0xF00D)} ${ButTitle}"$
						End If
					End If
				End If
				btn.Text = ButTitle
					
				Dim strTag As String = $"${request_tagcode}|${inner_request_tagcode}|${task_tagcode}|
											${item_tagcode}|${unique_key}|${tagcode}|${Row+1}|${Status}|
											${Multi}|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
				btn.Tag = strTag
					
				btn.Enabled = Not(READONLY_FEATURES)
			End If
		Next
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem( _
						request_tagcode, _
						inner_request_tagcode, _
						task_tagcode, _
						item_tagcode, _
						unique_key, _
						"", _							'tagcode
						repeatcounter,repeatitemcounter1, repeatfieldcounter, Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(task_tagcode, unique_key), "")				
	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record2.Close
		
	CLAButtonOptions.Tag = CLAItem
	CLAButtonOptions.Enabled = Not(READONLY_FEATURES)
	p.Tag = CLAItem
	If (Continuar) Then
		p.Tag = CLAItem
		If (innerPanel = 0) Then
			Dim pnl As B4XView = chapter.GetView(1)
			pnl.AddView(p, 0, Posis, chapter.Width, height)
'			pnlExpanded.AddView(p, 0, Posis, chapter.Width, height)
		Else
			chapter.AddView(p, 0, Posis, chapter.Width, height)
		End If
		Posis = Posis + height
	End If
	Return Posis
End Sub

' *************************************************************
' TIP: CRIAÇÃO DE REGISTO DE COMPONENTE DE EDIÇÃO
' *************************************************************
Sub MakeEditComponent(CLAIEdit As FloatLabeledEditText, Title As String, Record As Cursor, _
		vfrmt As Int, objValue As String, repeatcounter As Int, repeatitemcounter As Int, repeatfieldcounter As Int) As RequestCLAItem
	CLAIEdit.Hint = Record.GetString("val_title")
	If (vfrmt=13) Then
		CLAIEdit.EditText.InputType = CLAIEdit.EditText.INPUT_TYPE_NUMBERS
	else If (vfrmt=14) Then
		CLAIEdit.EditText.InputType = CLAIEdit.EditText.INPUT_TYPE_DECIMAL_NUMBERS
	else If (vfrmt=18) Then
		CLAIEdit.EditText.InputType = Bit.Or(CLAIEdit.EditText.INPUT_TYPE_TEXT, 32)
	End If
	CLAIEdit.Text = Utils.IfNullOrEmpty(Record.GetString("value"), Utils.IfNullOrEmpty(objValue, ""))		'Record.GetString("value")
	CLAIEdit.Enabled = Not(READONLY_FEATURES)
	Dim currEdit As EditText = CLAIEdit.EditText
	currEdit.Enabled = Not(READONLY_FEATURES)
		
	Dim SSTAG As String = $"${Record.GetString("request_tagcode")}|${Record.GetString("inner_request_tagcode")}|
							${Record.GetString("task_tagcode")}|${Record.GetString("item_tagcode")}|${Record.GetString("unique_key")}|
							${Record.GetString("tagcode")}|1|0|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$

	CLAIEdit.Tag = SSTAG
				
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record.GetString("request_tagcode"), _
							Record.GetString("inner_request_tagcode"), _
							Record.GetString("task_tagcode"), _
							Record.GetString("item_tagcode"), _
							Record.GetString("unique_key"), _
							Record.GetString("tagcode"), _
							Record.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter,Title.Trim, "", "", 3, 0, 0, "", _
										DBStructures.DB2CLATaskItem(Record.GetString("task_tagcode"), Record.GetString("unique_key")), "")
	Return CLAItem
End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 25
' *************************************************************
Sub CreateLineItemMultiOption(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, ItemTagcode As String, _
				UniqueKey As String, outRecord As Cursor, _
				ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int

	If (CurrentOrientation=0) Then
		Dim height As Int = Utils.IntToDIP(outRecord.GetInt("height_land"))
	Else
		If (ShareCode.ISPHONE) Then
			Dim height As Int = Utils.IntToDIP(outRecord.GetInt("height_port_sp"))
		Else
			Dim height As Int = Utils.IntToDIP(outRecord.GetInt("height_port"))
		End If
	End If
	
	Dim LayOutStr As String = "V2_CLA_ITEM_Editbox_Double"
	If (ShareCode.ISPHONE) Then
		LayOutStr = "V2_CLA_ITEM_Editbox_Double"
	End If

	Dim p As Panel
	p.Initialize("CLALineClick")
	Activity.AddView(p, 0, 0, 100%x, height) '115dip)
	p.LoadLayout(LayOutStr)
	p.RemoveView
	
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int = 0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
	If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	
	Dim Continuar As Boolean = True
	Try
		Dim bullet_master As Int = outRecord.GetInt("bullet_master")
		Dim bullet_child As Int = outRecord.GetInt("bullet_child")
		Dim typified_answers As Int = outRecord.GetInt("typified_answers")
		Dim include_numerators As Int = outRecord.GetInt("include_numerators")
		
		Try
			Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
		Catch
			Dim repeatfieldcounter As Int =0
		End Try
		If (include_numerators = 1) Then
			Title = $"${bullet_master}.${bullet_child}. ${Title}"$
		Else
			Title = $"${taggedID}.${subidx}. ${Title}"$
		End If
	
		CLAItemTitle.Text = $"${Title}"$
		CLAItemTitle.Tag = typified_answers
	
'		If Utils.NNE(ExtraInfo) Then CLAItemTitleInfo.Text = ExtraInfo
		Dim Mandatory As Int = outRecord.GetInt("mandatory")
		Dim Critical As Int = outRecord.GetInt("critical")
		Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)

		Log($"Dados do objecto: ${objValue}"$)
	
		If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
		If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
	
		Private Record As Cursor
''		Dim stask As String = CurrentCLA.Task.Trim
'		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
'						and x.repeatcounter=${CurrentCLA.RepeatCounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
'						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
						
		Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
		Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
		
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
						
		If (DataBulkUpload=1) And (fieldval_04>=0) Then
			Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						and x.item_tagcode||x.item_tagcode||x.unique_key||x.repeatcounter in (select z.item_tagcode||z.item_tagcode||z.unique_key||z.repeatcounter  
						from dta_requests_values_adds as z where  z.fieldval_04=${fieldval_04})
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
		Else
			Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
		End If
		Log(AllSQL)
		Record = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	
		If Record.RowCount > 0 Then
			Dim nPosis As Int = 1
			For ns=0 To Record.RowCount-1
				Record.Position = ns
				If (nPosis <=2) Then
					Dim vtype As Int = Record.GetInt("val_datatype")
					Dim vfrmt As Int = Record.GetInt("val_format")
					Dim repeatcounter As Int = Record.GetInt("repeatcounter")
			
					If ((vtype=25) And (vfrmt=13)) Then
						If (nPosis = 1) Then
							Dim CLAItem As RequestCLAItem = MakeEditComponent(CLAItemEditValue,Title, Record, vfrmt, objValue, _
									repeatcounter, repeatitemcounter, repeatfieldcounter)
						Else
							Dim CLAItem As RequestCLAItem = MakeEditComponent(CLAItemEditValueExtra,Title, Record, vfrmt, objValue, _
									repeatcounter, repeatitemcounter, repeatfieldcounter)
						End If
					End If
				
					nPosis = nPosis +1
				End If
			
			Next
			Record.Position = 0
		Else
			Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
		End If
		Record.Close
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
		Dim Continuar As Boolean = False
	End Try
	
	If (Continuar) Then
		CLAButtonOptions.Tag = CLAItem
		CLAButtonOptions.Enabled = Not(READONLY_FEATURES)
		p.Tag = CLAItem
		If (innerPanel = 0) Then
			Dim pnl As B4XView = chapter.GetView(1)
			pnl.AddView(p, 0, Posis, chapter.Width, height)
'			pnlExpanded.AddView(p, 0, Posis, chapter.Width, height)
		Else
			chapter.AddView(p, 0, Posis, chapter.Width, height)
		End If
		Posis = Posis + height
	End If
	
	Return Posis
End Sub


' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO RADIO BUTTON (ANTIGO TIPO 1)
' *************************************************************
Sub CreateLineItemRadioButtonOne(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, ItemTagcode As String, UniqueKey As String, ExtraInfo As String) As Int
	
	Dim height As Int = 75dip
	Dim LayOutStr As String = "CLA_ITEM_RadioB1_device_2"
	If (ShareCode.ISPHONE) Then
		LayOutStr = "CLA_ITEM_RadioB1_device_2"
		Dim height As Int = 130dip
	End If
	
	Dim RepeatItemCounter As Int = 0
	Dim repeatfieldcounter As Int = 0
	Dim p As Panel
	p.Initialize("CLALineClick")
	Activity.AddView(p, 0, 0, 100%x, height) '115dip)
	p.LoadLayout(LayOutStr)
	
	p.RemoveView
	
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0,0,"", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
'	p.Tag = ItemTagcode

	Title = $"${taggedID}.${subidx} - ${Title}"$
	CLAItemTitle.Text = Title
'	If Utils.NNE(ExtraInfo) Then CLAItemTitleInfo.Text = ExtraInfo
	
	CLAItemButton_1.Text = Title
'	CLAItemButton_1.ButtonGroup = 0
'	Private Row As Int = 0
	Private Record2 As Cursor
''	Dim sSQL As String = $" and a.request_tagcode='${CurrentCLA.Request}' and a.task_tagcode='${CurrentCLA.Task}'
''						and a.item_tagcode='${ItemTagcode}' and a.unique_key='${UniqueKey}'
''						and repeatcounter=${CurrentCLA.RepeatCounter} and a.repeatitemcounter=${RepeatItemCounter} and a.repeatfieldcounter=${repeatfieldcounter}"$
''	Dim AllSQL As String = $"${DBStructures.EVC_SQL_GET_TASK_ITEM_VALUE} ${sSQL} order by a.request_tagcode, a.task_tagcode, a.item_tagcode, a.unique_key, a.tagcode,  a.id"$
''	Log(AllSQL)
'	
'	Dim AllSQL As String = $"select * from ${EVCSQLGETTASKITEMVALUE} where item_tagcode='${ItemTagcode.trim}' and unique_key='${UniqueKey.trim}'
'						and repeatcounter=${CurrentCLA.RepeatCounter} and repeatitemcounter=${RepeatItemCounter} and repeatfieldcounter=${repeatfieldcounter}
'						order by request_tagcode, task_tagcode, item_tagcode, unique_key, tagcode,  id"$
	Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${CurrentCLA.RepeatCounter} and x.repeatitemcounter=${RepeatItemCounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	Record2 = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	If Record2.RowCount > 0 Then
		Record2.Position = 0
		Dim repeatcounter As Int = Record2.GetInt("repeatcounter")
		Dim SSTAG As String = $"${Record2.GetString("request_tagcode")}|${Record2.GetString("inner_request_tagcode")}|
						${Record2.GetString("task_tagcode")}|${Record2.GetString("item_tagcode")}|${Record2.GetString("unique_key")}|
						${Record2.GetString("tagcode")}|1|0|0|${repeatcounter}|${repeatfieldcounter}"$
		
		CLAItemButton_1.Tag = SSTAG
		Dim Status As Int = Record2.GetInt("status")
		If (Status > 0) Then
			CLAItemButton_1.State = 1
		End If
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record2.GetString("request_tagcode"), _
				Record2.GetString("inner_request_tagcode"), _
				Record2.GetString("task_tagcode"), _
				Record2.GetString("item_tagcode"), _
				Record2.GetString("unique_key"), _
				Record2.GetString("tagcode"), _
				Record2.GetInt("repeatcounter"),0, repeatfieldcounter, Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record2.GetString("task_tagcode"), Record2.GetString("unique_key")), "")
	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record2.Close
	CLAButtonOptions.Tag = CLAItem
	CLAButtonOptions.Enabled = Not(READONLY_FEATURES)
	p.Tag = CLAItem
	
	Dim pnl As B4XView = chapter.GetView(1)
	pnl.AddView(p, 0, Posis, chapter.Width, height)
'			pnlExpanded.AddView(p, 0, Posis, chapter.Width, height)
	Posis = Posis + height '115dip
	Return Posis
End Sub


'Sub makeState(btn As B4XStateButton, tags As String)
'	btn.State = 1
'	btn.Tag = tags
'End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 15 (NÃO UTILIZADO)
' *************************************************************
Sub CreateLineItemGridList(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
		ItemTagcode As String, UniqueKey As String, gCols As Int, gViewCols As Int) As topheight
		
	Dim th As topheight
	th.Initialize '(top As Int, height As Int)
'	
'	Private Record As Cursor
'	Dim Condition As String = $" and a.request_tagcode='${CurrentCLA.Request}' and a.task_tagcode='${CurrentCLA.Task}' and a.item_tagcode='${ItemTagcode}' and a.uniquekey='${UniqueKey}'"$
'	Dim SQLScript As String = $"${DBStructures.SQL_GET_TASK_GRIDITEMS} ${Condition}"$
'	
'	If Not(ShareCode.ISPHONE) Then
'		Dim height As Int = 60dip
'	Else
'		Dim height As Int = 215dip
'	End If
'
'	Record = Starter.LocalSQL.ExecQuery(SQLScript)
'	If Record.RowCount > 0 Then
'		th.height = height * Record.RowCount
'		For Row = 0 To Record.RowCount-1
'			Record.Position = Row
'			Dim p As Panel
'			p.Initialize("CLALineClick")
'			Activity.AddView(p, 0, 0, 100%x, height) '115dip)
'			
'			
'			If (gViewCols = 2) Then
'				p.LoadLayout("CLA_ITEM_GridList2Columns")
'			Else If (gViewCols = 3) Then
'				If Not(ShareCode.ISPHONE) Then
'					p.LoadLayout("CLA_ITEM_GridListCols")
'				Else
'					p.LoadLayout("CLA_ITEM_GridListCols_device_2")
'				End If
'			Else
'				If Not(ShareCode.ISPHONE) Then
'					p.LoadLayout("CLA_ITEM_GridList")
'				Else
'					p.LoadLayout("CLA_ITEM_GridList_device_2")
'				End If
'			End If
'			p.RemoveView
'			p.Tag = ItemTagcode
'			
'			Dim Tagcode As String = Record.GetString("tagcode")
'			Dim StatusIcon As Int = 0
'			
'			Dim sValue As String = Utils.IfNullOrEmpty(Record.GetString("val_title"), "")
'			If (sValue <> "") Then
'				If (gViewCols = 2) Then
'					Dim Columns As List = Regex.Split("\|", sValue )
'					CLAItem_G1.Text = Utils.IfNullOrEmpty(Record.GetString("request_text"), "")
'					CLAItem_G2.Text = Columns.Get(0) 'sValue
'					CLAItem_G3.Text = Columns.Get(1) 'sValue
'				Else If (gViewCols = 3) Then
'					Dim Columns As List = Regex.Split("\|", sValue )
'					If Columns.Size>=1 Then CLAItem_G1.Text = Columns.Get(0)
'					If Columns.Size>=2 Then CLAItem_G2.Text = Columns.Get(1)
'					If Columns.Size>=3 Then CLAItem_G3.Text = Columns.Get(2)
'					If Columns.Size>=4 Then CLAItem_G4.Text = Columns.Get(3)
'					If Columns.Size>=5 Then CLAItem_G5.Text = Columns.Get(4)
'					If Columns.Size>=6 Then CLAItem_G6.Text = Columns.Get(5)
'					If Columns.Size>=7 Then CLAItem_G7.Text = Columns.Get(6)
'				Else
'					StatusIcon = 1
'					Dim Columns As List = Regex.Split("\|", sValue )
'
'					CLAItem_G1.Text = Utils.IfNullOrEmpty(Record.GetString("request_stime"), "")
'					CLAItem_G2.Text = Utils.IfNullOrEmpty(Record.GetString("request_text"), "")
'					CLAItem_G3.Text = Columns.Get(0)
'					CLAItem_G4.Text = Columns.Get(1)
'					CLAItem_G5.Text = Columns.Get(2)
'					CLAItem_G6.Text = Columns.Get(3)
'					CLAItem_G7.Text = Columns.Get(4)
'				End If
'			End If
'			
'			Private Record2 As Cursor
'			Dim sSQL As String = $" and a.request_tagcode='${CurrentCLA.Request}' and a.task_tagcode='${CurrentCLA.Task}' and a.item_tagcode='${ItemTagcode}' and a.uniquekey='${UniqueKey}' and a.tagcode='${Tagcode}'"$
'			Dim sSQL1 As String = $"${DBStructures.SQL_GET_TASK_ITEM_VALUE_GRID} ${sSQL} order by a.id"$
'			Record2 = Starter.LocalSQL.ExecQuery(sSQL1)
'			If Record2.RowCount > 0 Then
'				Record2.Position = 0
'				
'				Dim Status As Int = Record2.GetInt("status")
'				If (Status = 1) Then
'					CLAItemButton_2.State = 1
'					'CLAItemButton_1.State = 1
'				Else If (Status = 2) Then
'					'CLAItemButton_2.State = 1
'					CLAItemButton_1.State = 1
'				End If
'		
''				For Row = 0 To Record.RowCount-1
''					Record.Position = Row
''					Ret.Add(Record.GetInt("status"))
''				Next
'				CLAItemButton_1.Tag = $"${Record2.GetString("request_tagcode")}|${Record2.GetString("inner_request_tagcode")}|${Record2.GetString("task_tagcode")}|${Record2.GetString("item_tagcode")}|${Record2.GetString("uniquekey")}|${Record2.GetString("tagcode")}|2|${StatusIcon}"$
'				CLAItemButton_2.Tag = $"${Record2.GetString("request_tagcode")}|${Record2.GetString("inner_request_tagcode")}|${Record2.GetString("task_tagcode")}|${Record2.GetString("item_tagcode")}|${Record2.GetString("uniquekey")}|${Record2.GetString("tagcode")}|1|${StatusIcon}"$
'
'				Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record2.GetString("request_tagcode"), _
'					Record2.GetString("inner_request_tagcode"), _
'					Record2.GetString("task_tagcode"), _
'					Record2.GetString("item_tagcode"), _
'					Record2.GetString("uniquekey"), _
'					Record2.GetString("tagcode"),"", "", "", 3, 0, 0, "")
'				CLAButtonOptions.Tag = CLAItem
'				CLAButtonOptions.Enabled = Not(READONLY_FEATURES)
'			Else
'				Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "","", "", "", 3, 0, 0, "")
'			End If
'			Record2.Close
'	
'			pnlExpanded.AddView(p, 0, Posis, chapter.Width, height) '115dip)
'			Posis = Posis + height '115dip
'		Next
'		'Ret = Record.GetInt("total")
'	End If
'	Record.Close
'	th.top = Posis
'	
	Return th 'Posis
End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE CAPÍTULO
' *************************************************************
Sub CreateChapter(clr As Int, Title As String, id As ItemData, idx As Int, ChapterItem As RequestCLAItem) As B4XView
	Dim p As B4XView = xui.CreatePanel("")
	
	p.SetLayoutAnimated(0, 0, 0, 100%x, id.ExpandedHeight) 'clListView.AsView.Width
	p.LoadLayout("CLA_GROUP_ListView")
	p.SetLayoutAnimated(0, 0, 0, p.Width,id.CollapsedHeight)
	
	lblTitle.Text = Title
	pnlTitle.Tag = idx
	ChapterItem.Title = Title
	CLAButtonOptions.Tag = ChapterItem
	CLAButtonOptions.Enabled = Not(READONLY_FEATURES)
	butBarCode.Visible = False
	
	Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
												$"select paramters from dta_tasks_items_adds
												where task_tagcode='${ChapterItem.Action.trim}' 
												and item_tagcode='${ChapterItem.Item.Trim}' 
												and unique_key='${ChapterItem.UniqueKey.Trim}'"$, "paramters")	
	
	
	If (QuestParams.Size > 0) Then
		Try
			If QuestParams.ContainsKey("barcode_scanner") Then
				Dim barcode_scanner As Int = QuestParams.Get("barcode_scanner")
			End If
		Catch
			Dim barcode_scanner As Int = 0
		End Try
		
	
		' O BOTAO DE LER CODIGOS DE BARRAS SO FICA VISIVEL CONSOANTE PARAMETRO
		If (Utils.Int2Bool(barcode_scanner)) Then
			butBarCode.Visible = True
			Dim barcode_scanner_settings As Map = QuestParams.Get("barcode_scanner_settings")
			Dim make_list As String = barcode_scanner_settings.Get("make_list")
			Dim allow_addnew As String = barcode_scanner_settings.Get("allow_addnew")
			Dim allow_reset_andnew As String = barcode_scanner_settings.Get("allow_reset_andnew")
			Dim distinct_codes As String = barcode_scanner_settings.Get("distinct_codes")
			Dim request_control_field As String = Utils.IfNullOrEmpty(barcode_scanner_settings.Get("request_control_field"),"subobject_tagcode")
			Dim compare_with_list As String = barcode_scanner_settings.Get("compare_with_list")
			Dim normal_color As String = Utils.IfNullOrEmpty(barcode_scanner_settings.Get("normal_color"),"black")
			Dim found_color As String = Utils.IfNullOrEmpty(barcode_scanner_settings.Get("found_color"),"green")
			Dim notfound_color As String = Utils.IfNullOrEmpty(barcode_scanner_settings.Get("notfound_color"),"red")
			
			Try
				Dim on_return_settings As Map = QuestParams.Get("on_return_settings")
				Dim count_equals As String = on_return_settings.Get("count_equals")
				Dim affected_field As String = on_return_settings.Get("affected_field")
				Dim set_confirm_button As String = on_return_settings.Get("set_confirm_button")
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				Dim count_equals As String = "0"
				Dim affected_field As String = ""
				Dim set_confirm_button As String = "0"
			End Try
			
			ShareCode.BarCode_request_control_field = request_control_field
			
			ShareCode.BarCode_normalColor = normal_color
			ShareCode.BarCode_FoundColor = found_color
			ShareCode.BarCode_NotFoundColor = notfound_color
			
			If Utils.Int2Bool(count_equals) Then
				ShareCode.BarCode_CountEquals = True
			Else
				ShareCode.BarCode_CountEquals = False
			End If
			
			ShareCode.BarCode_AffectedField = affected_field
			
			If compare_with_list = "1" Then
				ShareCode.Barcode_CompareWithList = True
			Else
				ShareCode.Barcode_CompareWithList = False
			End If
			
			If set_confirm_button = "1" Then
				ShareCode.Barcode_SetConfirmButton = True
			Else
				ShareCode.Barcode_SetConfirmButton = False
			End If
			
			If make_list = "0" Then
				ShareCode.SingleScan = True
			Else If make_list = "1" Then
				ShareCode.SingleScan = False
			End If
			
			If distinct_codes = "0" Then
				ShareCode.AllowScanDuplicates = True
			else if distinct_codes = "1" Then
				ShareCode.AllowScanDuplicates = False
			End If
			
			If allow_addnew = "0" Then
				ShareCode.ClearBarcodeList = True
			Else If allow_addnew = "1" Then
				ShareCode.ClearBarcodeList = False
			End If
			
			
			
		End If
	End If
	
	
	If (ChapterItem.Origin = 1) Then
		Private nextCounter As Int = getMaxCounter(ChapterItem)
		
		labelMore.Text = $"(1/${nextCounter+1})"$
		labelMore.Visible = True
		butMoreLeft.Visible = True
		butMoreLeft.Tag = ChapterItem
		butAddMore.Visible = True
		butAddMore.Tag = ChapterItem
		butAddLess.Visible = True
		butAddLess.Tag = ChapterItem
		butMoreRight.Visible = True
		butMoreRight.Tag = ChapterItem
	End If
	

	ComponentList.add( Types.MakeComponentRecords(p, idx, ChapterItem.Item, 0, ChapterItem.RepeatItemCounter,ChapterItem.repeatfieldcounter, True) )

	
	Dim ReadOnly As Boolean = False, CanExpand As Boolean = True, ItemsLoaded As Boolean = False, ReloadItems As Boolean = False
	Dim thisChapter  As ChapterRow = Types.MakeChapterRow(idx, ChapterItem.Item, p, pnlExpanded, ReadOnly, CanExpand, ItemsLoaded, ReloadItems)
	ChaptersList.Add(thisChapter)
	CurrentTotalChapters = CurrentTotalChapters + 1
	
'	Log("CHAPTER ITEM:" & ChapterItem.Item.Trim)
	p.Tag = False 'collapsed
	Return p
End Sub

Sub MakeMapArray(count As Int, field As String, value As Int) As Object
	Dim vals(count) As Map
	For i=0 To count-1
		vals(i).Initialize
		vals(i).Put(field, value)
	Next
	Return vals
End Sub

Sub ShadeColor(clr As Int) As Int
	Dim argb() As Int = GetARGB(clr)
	Dim factor As Float = 0.75
	Return xui.Color_RGB(argb(1) * factor, argb(2) * factor, argb(3) * factor)
End Sub

Sub GetARGB(Color As Int) As Int()
	Private res(4) As Int
	res(0) = Bit.UnsignedShiftRight(Bit.And(Color, 0xff000000), 24)
	res(1) = Bit.UnsignedShiftRight(Bit.And(Color, 0xff0000), 16)
	res(2) = Bit.UnsignedShiftRight(Bit.And(Color, 0xff00), 8)
	res(3) = Bit.And(Color, 0xff)
	Return res
End Sub

' *************************************************************
' TIP: EVENTO COLLAPSE DA LISTA DA CHECKLIST
' *************************************************************
Sub CollapseItem(index As Int)
	Dim id As ItemData = clListView.GetValue(index)
	clListView.ResizeItem(index, id.CollapsedHeight)
	clListView.GetPanel(index).Tag = False
	'AnimatedArrow(index, 180, 0)
	
	If (pnlCurrenIndex <> index) Then
		clListView.GetPanel(pnlCurrenIndex).GetView(0).GetView(2).Color = Consts.NoColor
		clListView.GetPanel(index).GetView(0).GetView(2).Color = Consts.ColorRed
		butCollpseExpand.text = Types.EXPAND_ICON
		pnlCurrenIndex = index
	Else
		butCollpseExpand.text = Types.EXPAND_ICON
	End If
	
End Sub

' *************************************************************
' TIP: EVENTO EXPAND DA LISTA DA CHECKLIST
' *************************************************************
Sub ExpandItem (index As Int)
	Dim id As ItemData = clListView.GetValue(index)
	clListView.ResizeItem(index, id.ExpandedHeight)
	clListView.GetPanel(index).Tag = True
	'AnimatedArrow(index, 0, 180)
	If (pnlCurrenIndex <> index) Then
		clListView.GetPanel(pnlCurrenIndex).GetView(0).GetView(2).Color = Consts.NoColor
		clListView.GetPanel(index).GetView(0).GetView(2).Color = Consts.ColorRed
		clListView.GetPanel(index).GetView(0).GetView(1).Text = Types.COLLAPSE_ICON
		pnlCurrenIndex = index
	Else
		clListView.GetPanel(index).GetView(0).GetView(1).Text = Types.COLLAPSE_ICON
	End If
End Sub

Sub AnimatedArrow(index As Int, From As Int, ToDegree As Int)
	pnlTitle = clListView.GetPanel(index).GetView(0) 'pnlTitle is the first item
	Dim iv As B4XView = pnlTitle.GetView(1) 'ImageView1 is the second item
	iv.SetRotationAnimated(0, From)
	iv.SetRotationAnimated(clListView.AnimationDuration, ToDegree)
End Sub


' *************************************************************
' TIP: EVENTO SELECÇÃO DE ITEM DA LISTA DA CHECKLIST
' *************************************************************
Sub ListItemSelected(pan As Panel)
	For index= 0 To clListView.GetSize-1
		Dim p As Panel = clListView.GetPanel(index)
		p.Color = Consts.ColorWhite
	Next
	pan.Color = Consts.ColorCianSoftLight
End Sub

'***************************************************************************************************
' TIP: COLLAPSE/EXPAND
'***************************************************************************************************
Sub clListView_ItemClick (index As Int, Value As Object)
	
	If (StartNewWay) Then 
		Dim thisChapter  As ChapterRow = ChaptersList.Get(index)
		If (thisChapter.ItemsLoaded = False) Then
			Dim resEvt As ResumableSub = ActivityStartThisChapter(CurrentCLA, thisChapter.ItemTagcode, index)
			Wait For(resEvt) Complete (retEvt As Boolean)
			If retEvt Then
				thisChapter.ItemsLoaded = True
				ChaptersList.Set(index, thisChapter)
			End If
		End If
	End If
	
	Dim pan As B4XView = clListView.GetPanel(index)
	If pan.Tag = True Then
		clListView.CollapseItem(index)
	Else
		clListView.ExpandItem(index)
	End If
	ListItemSelected(pan)
End Sub

'Sub clListView_ItemClick (Index As Int, Value As Object)
'	Dim pan As B4XView = clListView.GetPanel(Index)
'	If pan.Tag = True Then
'		CollapseItem(Index)
'	Else
'		ExpandItem(Index)
'	End If
''	panelActionOptions.Visible = False
'	ListItemSelected(pan)
'End Sub

Sub clListView_ItemLongClick (Index As Int, Value As Object)
'	panelActionOptions.Visible = True
End Sub

Sub FindExapnded As Int 'ignore
	For i = 0 To clListView.GetSize - 1
		If clListView.GetPanel(i).Tag = True Then Return i
	Next
	Return -1
End Sub

Sub butPhoto_Click
'	panelActionOptions.Visible = False
End Sub

Sub butTask_Click
'	panelActionOptions.Visible = False
End Sub



'**********************************************************************************
'	CHAMA PROPRIEDADES ADICIONAIS DA OPÇÃO
'**********************************************************************************

'Sub butActions_Click
'	Dim DIA As DialogItemActions
'	DIA.Initialize(Activity, ActionOptionsPanel)
'	'DIA.StartDlgIOActivity("")
''	panelActionOptions.Visible = False
'End Sub


Public Sub RemoveActionOptionsPanel
	If ActionOptionsPanel.NumberOfViews > 0 Then ActionOptionsPanel.RemoveAllViews
	ActionOptionsPanel.SetVisibleAnimated(100, False)
	'If ActionOptionsPanel.Visible Then ActionOptionsPanel.Visible = False
End Sub

'Sub butActionsClose_Click
''	panelActionOptions.Visible = False
'End Sub


Sub clListView_ReachEnd
	
End Sub

Sub clListView_VisibleRangeChanged (FirstIndex As Int, LastIndex As Int)
	
End Sub

' *************************************************************
' TIP: EVENTO CLICK PARA FECHO DE INTERVENÇÃO/CHECKLIST
' *************************************************************
Sub listsButtonClose_Click
'	ProgressDialogHide
'	Sleep(50)
	Log("Back CHECKLISTS")
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(150)
	
	Dim ContinuarOper As Boolean = True
	
'	If ((ShareCode.APPL_ACCOUNT.ToUpperCase = "ERGUELOP") And (CurrentCLA.Action.Trim = "TSKS_20200514_021013")) Then
'		
'		Dim Total As Int = 0
'		Dim sss As String = $"select count(execute_value) total
'							from dta_requests_values
'							where item_tagcode in ('FIELD_PHC_NUMBER', 'FIELD_DOCUMENTO')
'							and request_tagcode='${CurrentCLA.Request.Trim}'
'							and task_tagcode='${CurrentCLA.Action.Trim}'
'							and (execute_value<>'' and execute_value is not null and execute_value<>'0')"$
'		Private sssTotal As Cursor = Starter.LocalSQLEVC.ExecQuery(sss)
'		If (sssTotal.RowCount >=1) Then
'			sssTotal.Position = 0
'			Dim Total As Int = sssTotal.GetInt("total")
'		End If
'		sssTotal.Close
'		ContinuarOper = Total >= 1
'	End If
	
	If (ContinuarOper) Then
		
		Dim ReqFocus As ResumableSub = HiddenEditRequestFocus( Sender )
		Wait For(ReqFocus) Complete (RetSender As Object)
		
		
		' *****************************************************************
		' VERIFICA SE EXISTEM CAMPOS A ACTUALIZAR A TABELA
		' *****************************************************************
		Dim ThisTagcodeRequest As String = ""
		Try
			Dim ThisTagcodeRequest As String = CurrentCLA.Request.Trim
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		If Utils.NNE(ThisTagcodeRequest) Then
			Dim sSQLzz As String = $"select ifnull(
								CASE
							    WHEN (b.execute_value_title is null or b.execute_value_title='') THEN b.execute_value
							    ELSE b.execute_value_title
								END, '') as execute_value, a.do_field
							from dta_requests_values as b
							inner join dta_tasks_items as a on (a.task_tagcode=b.task_tagcode
									and a.item_tagcode=b.item_tagcode
									and a.unique_key=b.unique_key)
							where a.do_name='__TYPEREQUEST__' and b.request_tagcode='${CurrentCLA.Request.Trim}'"$
			Private Record91z As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQLzz)
			If (Record91z.RowCount >=1) Then
				For nnn=0 To Record91z.RowCount-1
					Record91z.Position = nnn
					Dim execute_value As String = Record91z.GetString("execute_value")
					Dim do_field As String = Record91z.GetString("do_field")
					Dim updSQL As String = $"update dta_requests_fields set value='${execute_value}'
									where request_tagcode='${CurrentCLA.Request.Trim}' and field_tagcode='${do_field}'"$
					Utils.SaveSQLToLog("UpdFieldsRequest", updSQL, CurrentCLA.Request.Trim)
				Next
			End If
			Record91z.Close
		End If

		Dim SaveObs As ResumableSub = saveFinalObs
		wait for (SaveObs) Complete (Finished As Boolean)
		
		
		If Not(ShareCode.APP_WORKING_LOCAL) Then
			Log("upload from listsButtonClose_Click")
			ProgressDialogShow2(ShareCode.checklistenviardados2BO, False)
			Dim UpdServer As ResumableSub = UpdateData2Server
			Wait For (UpdServer) Complete (Finished As Boolean)
			ProgressDialogHide
		End If
		

	Sleep(1000)
	Try
			Dim valor As String = FinalObs.Text
			If (Not(Return2Task) And Not(Return2Main)) Then
				Dim rr As RequestCLAOBS = Types.MakeRequestCLAOBS(CHILD_OPERATION, CurrentCLA, valor)
			
				Dim CriaAcao As Boolean = False
				Dim event_tagcode As String = ""
				Dim field_tagcode As String = ""
				Dim subject As String = ""
			
				Dim TypeRequest As String = Utils.IfNullOrEmpty( _
							DBStructures.GetScriptColumnStrEVC($"select typerequest_tagcode from dta_requests
							where tagcode='${CurrentCLA.Request.Trim}'"$, "typerequest_tagcode"), "")
			
				Dim sSQLzz As String = $"Select * FROM `dta_typerequests_events`
									WHERE 1 And `event_tagcode`='EVENTTYPEREQ_NEWACTION'
									And typerequest_tagcode='${TypeRequest.Trim}' and active=1"$
			
				Private Record9z As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQLzz)
				If (Record9z.RowCount >=1) Then
					For nnn=0 To Record9z.RowCount-1
						Record9z.Position = nnn
						Dim event_tagcode As String = Record9z.GetString("event_tagcode")
						Dim field_tagcode As String = Record9z.GetString("field_tagcode")
						Dim subject As String = Record9z.GetString("subject")
						CriaAcao = (event_tagcode = "EVENTTYPEREQ_NEWACTION")
					Next
				End If
				Record9z.Close
				
				ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
				Sleep(2500)
				ProgressDialogHide
				
				If (CriaAcao) Then
					Dim RTA As RunTypeAction
					RTA.Initialize
					RTA.tagcode = field_tagcode
					RTA.title = subject
					CallSubDelayed3(requests3, "ListReturn5", RTA, rr)
				Else
					If (CHILD_OPERATION = True) Then
						CallSubDelayed3(requests3, "ListReturn3", rr, CurrentCLA.Info.ReqIndex)
					Else
						CallSubDelayed2(requests3, "ListReturn2", rr)
					End If
				End If
			Else
				Sleep(1000)
				If (Return2Task) Then
					CallSubDelayed3(TasksCL2, "ListsReturn", "",CurrentCLA)
				End If
		
				If (Return2Main) Then
					CallSubDelayed2(MainMenu, "ListsReturn", CurrentCLA)
				End If
			End If
	Catch
			Log(LastException)
			ProgressDialogHide
			Utils.WriteErrors2Log(LastException)
	End Try
'		ShareCode.IsInCheckExecution = False
		Activity.Finish
		ShareCode.SetAnimation("zoom_enter", "zoom_exit")
	Else
		MsgboxAsync("Existem dados do documento por preencher!", "Alerta!")
	End If
'	ShareCode.IsInCheckExecution = False
	Activity.Finish
	ShareCode.SetAnimation("zoom_enter", "zoom_exit")

End Sub

Sub listsButtonPauseRun_Click
	If (CLRunning) Then
		Dim n As Int = Msgbox2("Deseja parar a execução da CheckList?", "Alerta!", "Sim", "Não", "", Null)
		Log(n)
		If n=1 Then
			listsButtonPauseRun.Text = Chr(0xF04B)
			CLRunning = False
			ShareCode.CLA_STATE = ShareCode.CLA_STATE + 1
		End If
	Else
		CLRunning = True
		listsButtonPauseRun.Text = Chr(0xF04C)
		ShareCode.CLA_STATE = ShareCode.CLA_STATE - 1
	End If
	WindowStatusUpdate
End Sub

Sub butCollpseExpand_Click
	Dim b As Button = Sender
	Dim p As Panel = b.Parent
	
	clListView_ItemClick(p.tag, "")
End Sub

Sub butConfirm_Click
	butNotConfirm.Color = Consts.ColorBlue
	butConfirm.Color = Consts.ColorGreen
	Log("Confirm")
End Sub

Sub butNotConfirm_Click
	butNotConfirm.Color = Consts.ColorBlue
	butConfirm.Color = Consts.ColorRed
	Log("Not Confirm")
End Sub

' *************************************************************
' TIP: EVENTO CLICK DE BOTÃO DE OPÇÕES ADICIONAIS (MORE)
' *************************************************************
Sub CLAButtonOptions_Click
	Dim Btn As Button = Sender 
	'CLAButtonOptions.Tag = CLAItem
'	ProgressDialogShow2("Aguarde por favor ...", True)
'	Sleep(100)

	Dim ReqFocus As ResumableSub = HiddenEditRequestFocus( Sender )
	Wait For(ReqFocus) Complete (RetSender As Object)

	Dim valid As Boolean = True
	Try
		Dim CLAItem As RequestCLAItem = Btn.Tag
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
		valid = False
	End Try
	If(valid)Then
		CLAItem.Origin = 3
		Dim Filter As AppActionDialogs
		Filter.Initialize
		Filter.GetMoreActionsDialog(Activity, "CheckList3", CLAItem, 0, "", MainObservations, 0, GetPressedAnswerTagCode(CLAItem), "", "",0)
	End If
	'CallSubDelayed3(MoreActions, "StartCLA_Activity", Types.MakeActivityParams(Activity, "requests3", 0, "", ""), CLAItem)
'	ProgressDialogHide
End Sub

' *************************************************************
' TIP: EVENTO CLICK DE BOTÃO DE OPÇÕES ADICIONAIS TIPO 2 (MORE)
' *************************************************************
Sub CLAButtonOptions2(CLAItem As RequestCLAItem, action As Int)
	
	CLAItem.Origin = 3	
	CallSubDelayed2(CameraActivity2, "StartCamera3", CLAItem)
End Sub

' *************************************************************
' TIP: EVENTO CLICK DE BOTÃO DE OPÇÕES ADICIONAIS TIPO 3 (MORE)
' *************************************************************
Sub CLAButtonOptions3(CLAItem As RequestCLAItem, action As Int, tagcode As String, group As String, actionforce As Int)
	
	CLAItem.Origin = 3
	Dim Filter As AppActionDialogs
	Filter.Initialize
	Filter.GetMoreActionsDialog(Activity, "CheckList3", CLAItem, 0, "", MainObservations, action, GetPressedAnswerTagCode(CLAItem), tagcode, group, actionforce)
End Sub


' *************************************************************
' TIP: EVENTO CLICK DE BOTÃO DE OPÇÕES ADICIONAIS TIPO 4 (MORE)
' *************************************************************
Sub CLAButtonOptions4(CLAItem As RequestCLAItem, action As Int)
	CLAItem.Origin = 3
	Dim Filter As AppActionDialogs
	Filter.Initialize
	Filter.GetMoreActionsDialog(Activity, "CheckList3", CLAItem, 0, "", MainObservations, action, GetPressedAnswerTagCode(CLAItem), "", "", 0)
End Sub

' *************************************************************
' TIP: PROCEDIMENTO CLICK DE BOTÃO DE ESTADO (B4XSTATEBUTTON)
' *************************************************************
'Sub CLAItemButtonStateClick (State As Int, tag As String)
'	
'	Dim Columns As List = Regex.Split("\|", tag )
'	Log(tag)
'	If (Columns.Size >= 1) Then
'		Dim doContinua As Boolean = True
'		Try
'			Dim request_tagcode As String = Columns.Get(0)
'			Dim action_tagcode As String = Columns.Get(1)
'			Dim task_tagcode As String = Columns.Get(2)
'			Dim item_tagcode As String = Columns.Get(3)
'			Dim uniquekey As String = Columns.Get(4)
'			Dim tagcode As String = Columns.Get(5)
''			Dim val As String = Columns.Get(6)
'			Dim StatusIcon As Int = Columns.Get(7)
'			Dim Multi As Int = Columns.Get(8)
'			Dim repeatcounter As Int = Columns.Get(9)
'			Dim repeatitemcounter As Int = Columns.Get(10)
'			Dim repeatfieldcounter As Int = Columns.Get(11)
'		Catch
'			Log(LastException)
'			doContinua = False
'		End Try
'	
'		Log(doContinua)
'		If (doContinua) Then
'			tagcode = tagcode.Trim
'			Dim tagcodeValue As String = ""
'			If Utils.NNE(tagcode) Then
'				Dim tagcodeValue As String = $"and tagcode='${tagcode}'"$
'			End If
'			
'			Dim CurrentValue As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(execute_value, '') as valor
'						from dta_requests_values where request_tagcode='${request_tagcode.trim}' and task_tagcode = '${task_tagcode.trim}'
'						and item_tagcode='${task_tagcode.trim}' ${tagcodeValue} and repeatcounter=${repeatcounter}
'						and repeatitemcounter=${repeatitemcounter}"$, "valor")
'						
'			Log(tagcodeValue)
'			Log(CurrentValue)
'			Log(val)
'			
'			If Not(CurrentValue = val) Then
'				Dim ExecStatus As String = "1"
'				If (val = "") Then
'					Dim ExecStatus As String = "0"
'				End If
'				Dim sSQL As String = $"update dta_requests_values set execute_value='${val}',
'							execute_status='${ExecStatus}'
'							where request_tagcode='${request_tagcode.trim}' and
'							task_tagcode='${task_tagcode.trim}' and item_tagcode='${item_tagcode.trim}' and 
'							unique_key='${uniquekey.trim}' 
'							${tagcodeValue}
'							and repeatcounter=${repeatcounter}
'							and repeatitemcounter=${repeatitemcounter}"$
'				Utils.SaveSQLToLog("CLAItemEditValue_EnterPressed",sSQL, request_tagcode)
'			End If
'			
'		End If
'	End If
'	Return True
'End Sub

Sub ValidateInputOnDB(tag As String, val As String) As ResumableSub
	Dim Columns As List = Regex.Split("\|", tag )
	Log(tag)
	If (Columns.Size >= 1) Then
		Dim doContinua As Boolean = True
		Try
			Dim request_tagcode As String = Columns.Get(0)
			Dim action_tagcode As String = Columns.Get(1)
			Dim task_tagcode As String = Columns.Get(2)
			Dim item_tagcode As String = Columns.Get(3)
			Dim uniquekey As String = Columns.Get(4)
			Dim tagcode As String = Columns.Get(5)
'			Dim val As String = Columns.Get(6)
			Dim StatusIcon As Int = Columns.Get(7)
			Dim Multi As Int = Columns.Get(8)
			Dim repeatcounter As Int = Columns.Get(9)
			Dim repeatitemcounter As Int = Columns.Get(10)
			Dim repeatfieldcounter As Int = Columns.Get(11)
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
			doContinua = False
		End Try
	
		Log(doContinua)
		If (doContinua) Then
			tagcode = tagcode.Trim
			Dim tagcodeValue As String = ""
			If Utils.NNE(tagcode) Then
				Dim tagcodeValue As String = $"and tagcode='${tagcode}'"$
			End If
			
			Dim CurrentValue As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(execute_value, '') as valor
						from dta_requests_values where request_tagcode='${request_tagcode.trim}' and task_tagcode = '${task_tagcode.trim}'
						and item_tagcode='${task_tagcode.trim}' ${tagcodeValue} and repeatcounter=${repeatcounter}
						and repeatitemcounter=${repeatitemcounter}"$, "valor")
						
			Log(tagcodeValue)
			Log(CurrentValue)
			Log(val)
			
			If Not(CurrentValue = val) Then
				Dim ExecStatus As String = "1"
				If (val = "") Then
					Dim ExecStatus As String = "0"
				End If
				Dim sSQL As String = $"update dta_requests_values set execute_value='${val}',
							execute_status='${ExecStatus}'
							where request_tagcode='${request_tagcode.trim}' and
							task_tagcode='${task_tagcode.trim}' and item_tagcode='${item_tagcode.trim}' and 
							unique_key='${uniquekey.trim}' 
							${tagcodeValue}
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}"$
				Utils.SaveSQLToLog("CLAItemEditValue_EnterPressed",sSQL, request_tagcode)
			End If
			
		End If
	End If
	Return True
End Sub


Sub HiddenEditRequestFocus(RetSender As Object) As ResumableSub
	If InitEDITFOCUS Then
		Dim TAGVAL As String = "", VVAL As String = ""
		
		If (LASTEDITBOXFOCUS Is EditText) Then
			Dim temp As EditText = LASTEDITBOXFOCUS
			MainEditFocusComponent.RequestFocus
			temp.RequestFocus
			TAGVAL = temp.Tag
			VVAL = temp.Text
		else if (LASTEDITBOXFOCUS Is FloatLabeledEditText) Then
			Dim ftemp As FloatLabeledEditText = LASTEDITBOXFOCUS
			MainEditFocusComponent.RequestFocus
			ftemp.RequestFocus
			TAGVAL = ftemp.Tag
			VVAL = ftemp.Text
		End If
		
'		Dim rret As ResumableSub = ValidateInputOnDB(TAGVAL, VVAL)
'		Wait For(rret) Complete (ret As Boolean)

	End If

	Sleep(100)
	Return RetSender
End Sub


' *************************************************************
' TIP: EVENTO CLICK DE BOTÃO DE ESTADO (B4XSTATEBUTTON)
' *************************************************************
Sub CLAItemButton_StateClick (State As Int)
	
	Dim ReqFocus As ResumableSub = HiddenEditRequestFocus( Sender )
	Wait For(ReqFocus) Complete (RetSender As Object)
	
	Dim this As B4XStateButton = RetSender
	Dim pthis As Panel = this.Parent
	
	'LASTEDITBOXFOCUS = RetSender

	
	Dim Columns As List = Regex.Split("\|", this.tag )
	If (Columns.Size >= 1) Then
		Dim doContinua As Boolean = True
		Try
			Dim request_tagcode As String = Columns.Get(0)
			Dim action_tagcode As String = Columns.Get(1)
			Dim task_tagcode As String = Columns.Get(2)
			Dim item_tagcode As String = Columns.Get(3)
			Dim uniquekey As String = Columns.Get(4)
			Dim tagcode As String = Columns.Get(5)
			Dim val As String = Columns.Get(6)
			Dim StatusIcon As Int = Columns.Get(7)
			Dim Multi As Int = Columns.Get(8)
			Dim repeatcounter As Int = Columns.Get(9)
			Dim repeatitemcounter As Int = Columns.Get(10)
			Dim repeatfieldcounter As Int = Columns.Get(11)
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
			doContinua = False
		End Try
	
		If (doContinua) Then
			item_tagcode = item_tagcode.Trim
			Dim TheItemTagCode As String = item_tagcode.trim
			PressedAnswerTagCode = tagcode
			Dim Continuar As Boolean = True
			
			Dim thisCLAItem As RequestCLAItem
			thisCLAItem.Initialize
			Try
				Dim thisCLAItem As RequestCLAItem = pthis.tag
			Catch
				Log(LastException)
				Continuar = False
			End Try
			
			Continuar = (Continuar) And (thisCLAItem Is RequestCLAItem)
			
			If Continuar Then
				Dim forceTime As Int = 0
				Dim typeControl As Int = 0
				Dim forceControl As Int = 0
				Dim answer_change_title As Int = 0
				Dim typeTime As Int = 0
				Dim change_title_totime As Int = 0
				Dim currTime As String = Utils.GetCurrentTime
				Dim relUniqueKey As String = ""
'			Dim duration As Int = 0
			
				If (thisCLAItem.IsInitialized) Then
					If (Utils.NNE(thisCLAItem.Request)) Then
						Dim typeControl As Int = thisCLAItem.TaskInfo.type_control
						Dim forceControl As Int = thisCLAItem.TaskInfo.force_control
						Dim answer_change_title As Int = thisCLAItem.TaskInfo.answer_change_title

						Dim forceTime As Int = thisCLAItem.TaskInfo.force_time
						Dim typeTime As Int = thisCLAItem.TaskInfo.type_time_control '1|2|3
						Dim change_title_totime As Int = thisCLAItem.TaskInfo.change_title_totime
						Dim durationTick As Long = DateTime.TimeParse(Utils.IfNullOrEmpty(thisCLAItem.TaskInfo.time_duration, "00:00:00"))
'					Dim duration As Int = DateTime.GetMinute(durationTick)
						Dim relUniqueKey As String = Utils.IfNullOrEmpty(thisCLAItem.TaskInfo.dependent_key, "")
					
					
'					Dim force_control As Int = thisCLAItem.TaskInfo.force_control
'					Dim type_control As Int = thisCLAItem.TaskInfo.type_control '1|2|3
					
					End If
				End If
'				Dim NoAnswer As Boolean = False

				If  (ShareCode.APP_DOMAIN.ToLowerCase.contains("grandative")) Then
					doContinua = True
				Else
					Dim DefaultValueStr As String = val
					If Not(this.AllowClick) Then
						If ((forceTime=1) And (typeTime=2)) Then
							'EVC_SQL_GETREQUESTTASK_ITEMVALUE
							If Utils.NNE(relUniqueKey) Then
								Dim isOK As Boolean = True
								Dim val1 As String = DBStructures.getRequestValuesValueFrom( request_tagcode, _
												action_tagcode, _
												task_tagcode, _
												item_tagcode, _
												uniquekey, "execute_value")
								DefaultValueStr = val1
								Try
									Dim currTick As Long = DateTime.TimeParse(val1)
								Catch
									Log(LastException)
									Utils.WriteErrors2Log(LastException)
									isOK = False
								End Try
						
								If isOK Then
									Dim timenow As Long = DateTime.TimeParse( currTime )
									Dim timetest As Long = currTick+durationTick
									Log($"timenow=${timenow} - timetest=${timetest}"$)
									If (timenow >= timetest) Then
										this.AllowClick = True
										doContinua= False
										this.MakeClick
									End If
							
								End If
						
							End If
						End If
					Else
						doContinua = True
						If ((forceTime=1) And (typeTime=1) And (State = 1)) Then
						End If
					End If
				End If
			
				Dim ACLAObjectTag As String = ""
			
				If (doContinua) Then
					Dim ChangeObjectGeoLocation As Int = 0
					Dim sACLADatetime As String = Utils.GetCurrDatetime
					Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
					Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
			
					If State = 0 Then
						val = ""
					Else
						If ((forceTime=1) And (change_title_totime=1)) Then
							this.Text = currTime
							val = currTime
						End If
						
						If ((forceControl=1) And ((typeControl=3) Or (typeControl=4))) Then
							'*************************************************************************************
							' FORCECONTROL=1+TYPECONTROL3/4 ==> GRAVA LATITUDE E LONGITUDE
							'*************************************************************************************
							val = $"${sACLALatitude}, ${sACLALongitude}"$
							If (answer_change_title = 1) Then
								this.Text = val
							End If
							
							'*************************************************************************************
							' SE TYPECONTROL=4 ==> GRAVA LATITUDE E LONGITUDE NA BD DO OBJECTO e INTERVENÇÃO
							'*************************************************************************************
							If (typeControl=4) Then
								Dim ChangeObjectGeoLocation As Int = 1
								Dim ACLAObjectTag As String = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnStrEVC($"select object_tagcode from dta_requests
												where tagcode='${request_tagcode.Trim}'"$, "object_tagcode"), "")
												
								Dim sINSQL As String = $"update dta_locations set latitude='${sACLALatitude}',
									longitude='${sACLALongitude}' where tagcode in (select local_tagcode from dta_requests
									where tagcode='${request_tagcode.Trim}')"$
								Utils.SaveSQLToLog("CLAItemButton_Localtion",sINSQL, request_tagcode)
								Sleep(100)
									
								Dim sINSQL As String = $"update dta_locations set latitude='${sACLALatitude}',
									longitude='${sACLALongitude}' where tagcode in (select local_tagcode from dta_objects where
									tagcode in (select object_tagcode from dta_requests
									where tagcode='${request_tagcode.Trim}'))"$
								Utils.SaveSQLToLog("CLAItemButton_Localtion2",sINSQL, request_tagcode)
								Sleep(100)
							End If
						else If ((forceControl=1) And ((typeControl<3) And (typeControl>4))) Then
							If (answer_change_title = 1) Then
								this.Text = DefaultValueStr
							End If
						End If
					End If
		
					Dim vMulti As String = val
					Dim vMultiStatus As String = State
			
					Dim ACLSessUser As String = ShareCode.SESS_OPER_User
					Dim ACLClear As Int = 1

					'*************************************************************************************
					' SE NÃO É DO TIPO MULTIPLA SELECÇÃO, ENTÃO LIMPA OS ESTADOS TODOS ANTES DE GRAVAR
					'*************************************************************************************
					If (Multi = 0) Then
						Dim sSQL As String = $"update dta_requests_values set execute_value='', execute_status=0, execute_datetime='${sACLADatetime.Trim}',
								sess_user='${ACLSessUser}',
								execute_latitude='${sACLALatitude.Trim}',
								execute_longitude='${sACLALongitude.Trim}' where request_tagcode='${request_tagcode.Trim}' and
								task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' 
								and unique_key='${uniquekey.Trim}'
								and repeatcounter=${repeatcounter}
								and repeatitemcounter=${repeatitemcounter}
								and repeatfieldcounter=${repeatfieldcounter}"$
						Log(sSQL)
						Utils.SaveSQLToLog("CLAItemButton_StateClick",sSQL, request_tagcode)
						'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
						vMulti = val
						vMultiStatus = State
					Else
						ACLClear = 0
					End If
					Log(TheItemTagCode)
					
					SetMandatoryValue(TheItemTagCode.trim, Utils.Int2Bool(vMultiStatus))
					
					'*********************************************************************************************************************
					' ALTERACAO PC - REMOVER A AS SE O UTILIZADOR DESMARCAR O BOTAO QUE CONTINHA O EVENTO QUE CRIOU AUTOMATICAMENTE A AS
					'*********************************************************************************************************************
					' TEM DE SER VERIFICADO SE EXISTE NA BD UMA AS PARA ESTA PERGUNTA, E CORRER O EVENTO DE APAGAR SE O State = 1
					If State = 1 Then
						CurrentButtonState = 1
						Dim sqlStr As String = $"SELECT a.tagcode, a.type_conformity, a.title , a.item_tagcode, e.event_tagcode from dta_tasks_items_answers AS a
												LEFT join dta_tasks_items_answers_events AS e ON (e.tagcode = a.tagcode)
												WHERE a.task_tagcode = '${task_tagcode}' AND a.item_tagcode = '${TheItemTagCode}'"$
						
						Dim SqlCrs As Cursor = Starter.LocalSQLEVC.ExecQuery(sqlStr)
						If SqlCrs.RowCount > 0 Then
							For r = 0 To SqlCrs.RowCount -1
								SqlCrs.Position = r
								Dim Evento As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(event_tagcode,'') as evento from dta_tasks_items_answers_events where
								task_tagcode = '${task_tagcode}'
								AND item_tagcode = '${TheItemTagCode}'"$, "evento")
								
								If Evento = "EVENTTASK_NOTESACTION" Then
									Dim ItemTagcode2R As String = SqlCrs.GetString("item_tagcode")
								
									'CHECK IF AS EXISTS
									Dim R2R_Request As String = SqlCrs
									Dim RecCount As Cursor
								
									Dim SqlCheck As String = $"SELECT * from dta_actions where request_Tagcode = '${request_tagcode}'
															And task_tagcode = '${task_tagcode}'
															And item_tagcode = '${ItemTagcode2R}'
															And uniquekey = '${uniquekey}'"$
									RecCount = Starter.LocalSQLEVC.ExecQuery($"${SqlCheck}"$)
									If RecCount.RowCount > 0 Then
								
										'************************************************************************************************
										' ELIMINAR A ACCAO SUBSEQUENTE CRIADA PELO MESMO EVENTO AO VOLTAR DO DIALOGO DE OPCOES ADICIONAIS
										'************************************************************************************************
							
										' APANHA O TAGCODE PARA ELIMINACAO NO dta_actions_items
										'******************************************************
										Dim DataHora As String = Utils.GetCurrDatetimeext
							
										Dim AsTagcode As String =  DBStructures.GetScriptColumnStrEVC($"select tagcode from dta_actions where request_tagcode = '${request_tagcode.Trim}'
												and task_tagcode = '${task_tagcode.trim}' 
												and item_Tagcode = '${ItemTagcode2R.trim}' 
												and uniquekey = '${uniquekey.trim}'"$,"tagcode")
							
										' APANHA O IU_TAGCODE PARA limpar o execute_action no dta_requests_values
										'************************************************************************
										Dim Iu_Tagcode As String =  DBStructures.GetScriptColumnStrEVC($"select iu_tagcode from dta_actions where request_tagcode = '${request_tagcode.Trim}'
												and task_tagcode = '${task_tagcode.trim}' 
												and item_Tagcode = '${ItemTagcode2R.trim}' 
												and uniquekey = '${uniquekey.trim}'"$,"iu_tagcode")
							
										If Utils.NNE(AsTagcode) Then
								
											' APAGA O REGISTO DO dta_actions
											'**************************************
											Dim RemoveAS_SQL1 As String = $"delete from dta_actions where tagcode = '${AsTagcode.Trim}'"$
											Log(RemoveAS_SQL1)
											Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_SQL1, request_tagcode)
								
											' APAGA O REGISTO DO dta_actions_item
											'**************************************
											Dim RemoveAS_SQL2 As String = $"delete from dta_actions_items where actions_tagcode = '${AsTagcode}'"$
											Log(RemoveAS_SQL2)
											Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_SQL2, request_tagcode)
											' APAGA O REGISTO DO dta_actions_adds
											'**************************************
											Dim RemoveAS_SQL3 As String = $"delete from dta_actions_adds where actions_tagcode = '${AsTagcode}'"$
											Log(RemoveAS_SQL3)
											Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_SQL3, request_tagcode)
								
								
											If Utils.NNE(Iu_Tagcode) Then
									
												' FAZ UPDATE AO REGISTO DO dta_requests_values, LIMPANDO O execute_datetime E ACTUALIZANDO O execute_datetime
												'**************************************
												Dim RemoveAS_D_R_V As String = $"update dta_requests_values set execute_action = '', execute_datetime = '${DataHora}' where request_tagcode = '${request_tagcode.trim}'
																And task_tagcode = '${task_tagcode.trim}'
																And unique_key = '${uniquekey.trim}'
																And item_tagcode = '${ItemTagcode2R.trim}'
																And tagcode = '${Iu_Tagcode.trim}'"$
												Log(RemoveAS_D_R_V)
												Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_D_R_V, request_tagcode)
											End If
								
											' ENVIA A PROCEDIMENTO AO SERVIDOR
																
											Dim params As Map
											params.Initialize
											params.Clear
											params.Put("_token", ShareCode.APP_TOKEN)
											params.Put("ACLRequest", request_tagcode.Trim)
											params.Put("ACLAction", action_tagcode .Trim)
											params.Put("ACLTask", task_tagcode.Trim)
											params.Put("ACLItem", TheItemTagCode.Trim)
											params.Put("ACLUniqueKey", uniquekey.Trim)
											params.Put("ACLTagcode", Iu_Tagcode)
											params.Put("ACLAASNC", AsTagcode)
											params.Put("ACLADatetime", DataHora)
											params.Put("ACLSessUser", ShareCode.SESS_OPER_User)
											params.Put("ACLAReqCounter", repeatcounter)
											params.Put("ACLARepeatItem", repeatitemcounter)
											params.Put("ACLARepeatField", repeatfieldcounter)
											params.Put("versionTagcode", Main.VersionTagcode)
											params.Put("_authorization", Main.DeviceAuthorization)
											params.Put("_instance", Main.DeviceInstance)
											params.put("_deviceBrand", Main.DeviceBrand)
											params.put("_deviceModel", Main.DeviceModel)
											params.put("_deviceMacAddress", Main.DeviceMacAddress)
											params.Put("_user", ShareCode.SESS_User)
											Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/event/del/asnc"$
											Log(">>>>>>>>>>>>>>>> APAGA AS DESDE O OUTRO BOTAO <<<<<<<<<<<<<<<<")
											If Not(ShareCode.APP_WORKING_LOCAL) Then
												Dim GODR As ResumableSub = GetOfflineDataRec(1,request_tagcode.Trim,task_tagcode.Trim,TheItemTagCode.Trim)
												Wait For (GODR) Complete (HasResults As Boolean)
												If HasResults Then
													Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,TheItemTagCode.Trim)
													Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
												Else
													Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim)
												End If
											Else
												Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,TheItemTagCode.Trim)
												Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
											End If
											Sleep(550)
										End If
								
								
									End If
								End If
							Next
						End If
						
					End If
					'****************************************************************************************************************************************************
					
					If State = 0 Then 'State = 0 desmarcar
						CurrentButtonState = 0
						Dim Evento As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(event_tagcode,'') as evento from dta_tasks_items_answers_events where
								task_tagcode = '${task_tagcode}'
								AND unique_key = '${uniquekey}'
								AND item_tagcode = '${TheItemTagCode}'"$, "evento")	
					
					
						If Evento = "EVENTTASK_NOTESACTION" Then
							
							'************************************************************************************************
							' ELIMINAR A ACCAO SUBSEQUENTE CRIADA PELO MESMO EVENTO AO VOLTAR DO DIALOGO DE OPCOES ADICIONAIS
							' PERGUNTAR ANTES DE APAGAR
							'************************************************************************************************
							
							' APANHA O TAGCODE PARA ELIMINACAO NO dta_actions_items
							'******************************************************
							Dim DataHora As String = Utils.GetCurrDatetimeext
							
							Dim AsTagcode As String =  DBStructures.GetScriptColumnStrEVC($"select tagcode from dta_actions where request_tagcode = '${request_tagcode.Trim}'
												and task_tagcode = '${task_tagcode.trim}' 
												and item_Tagcode = '${TheItemTagCode.trim}' 
												and uniquekey = '${uniquekey.trim}'"$,"tagcode")
							
							' APANHA O IU_TAGCODE PARA limpar o execute_action no dta_requests_values
							'************************************************************************
							Dim Iu_Tagcode As String =  DBStructures.GetScriptColumnStrEVC($"select iu_tagcode from dta_actions where request_tagcode = '${request_tagcode.Trim}'
												and task_tagcode = '${task_tagcode.trim}' 
												and item_Tagcode = '${TheItemTagCode.trim}' 
												and uniquekey = '${uniquekey.trim}'"$,"iu_tagcode")
							
							If Utils.NNE(AsTagcode) Then
								
								' APAGA O REGISTO DO dta_actions
								'**************************************
								Dim RemoveAS_SQL1 As String = $"delete from dta_actions where tagcode = '${AsTagcode.Trim}'"$
								Log(RemoveAS_SQL1)
								Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_SQL1, request_tagcode)
								
								' APAGA O REGISTO DO dta_actions_item
								'**************************************
								Dim RemoveAS_SQL2 As String = $"delete from dta_actions_items where actions_tagcode = '${AsTagcode}'"$
								Log(RemoveAS_SQL2)
								Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_SQL2, request_tagcode)
								
								' APAGA O REGISTO DO dta_actions_item_files
								'**************************************
								Dim RemoveAS_SQL3 As String = $"delete from dta_actions_items_files where actions_tagcode = '${AsTagcode}'"$
								Log(RemoveAS_SQL3)
								Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_SQL3, request_tagcode)
								
								' APAGA O REGISTO DO dta_actions_adds
								'**************************************
								Dim RemoveAS_SQL4 As String = $"delete from dta_actions_adds where actions_tagcode = '${AsTagcode}'"$
								Log(RemoveAS_SQL4)
								Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_SQL4, request_tagcode)
								
								
								If Utils.NNE(Iu_Tagcode) Then
									
									' FAZ UPDATE AO REGISTO DO dta_requests_values, LIMPANDO O execute_datetime E ACTUALIZANDO O execute_datetime
									'**************************************
									Dim RemoveAS_D_R_V As String = $"update dta_requests_values set execute_action = '', execute_datetime = '${DataHora}' where request_tagcode = '${request_tagcode.trim}'
																And task_tagcode = '${task_tagcode.trim}'
																And unique_key = '${uniquekey.trim}'
																And item_tagcode = '${TheItemTagCode.trim}'
																And tagcode = '${Iu_Tagcode.trim}'
																And repeatcounter = ${repeatcounter}
																And repeatitemcounter = ${repeatitemcounter}
																And repeatfieldcounter = ${repeatfieldcounter}"$
									Log(RemoveAS_D_R_V)
									Utils.SaveSQLToLog("RemoveAS",RemoveAS_D_R_V, request_tagcode)
								End If
								
								' ENVIA A PROCEDIMENTO AO SERVIDOR
																
								Dim params As Map
								params.Initialize
								params.Clear
								params.Put("_token", ShareCode.APP_TOKEN)
								params.Put("ACLRequest", request_tagcode.Trim)
								params.Put("ACLAction", action_tagcode .Trim)
								params.Put("ACLTask", task_tagcode.Trim)
								params.Put("ACLItem", TheItemTagCode.Trim)
								params.Put("ACLUniqueKey", uniquekey.Trim)
								params.Put("ACLTagcode", Iu_Tagcode)
								params.Put("ACLAASNC", AsTagcode)
								params.Put("ACLADatetime", DataHora)
								params.Put("ACLSessUser", ShareCode.SESS_OPER_User)
								params.Put("ACLAReqCounter", repeatcounter)
								params.Put("ACLARepeatItem", repeatitemcounter)
								params.Put("ACLARepeatField", repeatfieldcounter)
								params.Put("versionTagcode", Main.VersionTagcode)
								params.Put("_authorization", Main.DeviceAuthorization)
								params.Put("_instance", Main.DeviceInstance)
								params.put("_deviceBrand", Main.DeviceBrand)
								params.put("_deviceModel", Main.DeviceModel)
								params.put("_deviceMacAddress", Main.DeviceMacAddress)
								params.Put("_user", ShareCode.SESS_User)
								Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/event/del/asnc"$
								Log(">>>>>>>>>>>>>>>> APAGA AS DESDE O MESMO BOTAO <<<<<<<<<<<<<<<<")
								If Not(ShareCode.APP_WORKING_LOCAL) Then
									Dim GODR As ResumableSub = GetOfflineDataRec(1,request_tagcode.Trim,task_tagcode.Trim,TheItemTagCode.Trim)
									Wait For (GODR) Complete (HasResults As Boolean)
									If HasResults Then
										Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,TheItemTagCode.Trim)
										Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
									Else
										Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim)
									End If
								Else
									Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,TheItemTagCode.Trim)
									Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
								End If
								Sleep(550)
							End If
						Else
							
							'VERIFICAR SE EXISTEM AS CRIADAS
							Dim As_Count As String =  DBStructures.GetScriptColumnStrEVC($"select count(tagcode) as contador from dta_actions where request_tagcode = '${request_tagcode.Trim}'
												and task_tagcode = '${task_tagcode.trim}' 
												and item_Tagcode = '${TheItemTagCode.trim}' 
												and uniquekey = '${uniquekey.trim}'"$,"contador")
												
							If As_Count > 0 Then
								Msgbox2Async(" Existem Acções subsequentes criadas. Deseja eliminá-las ?", ShareCode.GeneralInfoTitle, ShareCode.Option_YES, "", ShareCode.Option_NO, Null, False)
								Wait For Msgbox_Result (Result As Int)
								If Result = DialogResponse.POSITIVE Then
									' APANHA O TAGCODE PARA ELIMINACAO NO dta_actions_items
									'******************************************************
									Dim DataHora As String = Utils.GetCurrDatetimeext
							
									Dim AsTagcode As String =  DBStructures.GetScriptColumnStrEVC($"select tagcode from dta_actions where request_tagcode = '${request_tagcode.Trim}'
												and task_tagcode = '${task_tagcode.trim}' 
												and item_Tagcode = '${TheItemTagCode.trim}' 
												and uniquekey = '${uniquekey.trim}'"$,"tagcode")
							
									' APANHA O IU_TAGCODE PARA limpar o execute_action no dta_requests_values
									'************************************************************************
									Dim Iu_Tagcode As String =  DBStructures.GetScriptColumnStrEVC($"select iu_tagcode from dta_actions where request_tagcode = '${request_tagcode.Trim}'
												and task_tagcode = '${task_tagcode.trim}' 
												and item_Tagcode = '${TheItemTagCode.trim}' 
												and uniquekey = '${uniquekey.trim}'"$,"iu_tagcode")
							
									If Utils.NNE(AsTagcode) Then
								
										' APAGA O REGISTO DO dta_actions
										'**************************************
										Dim RemoveAS_SQL1 As String = $"delete from dta_actions where tagcode = '${AsTagcode.Trim}'"$
										Log(RemoveAS_SQL1)
										Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_SQL1, request_tagcode)
								
										' APAGA O REGISTO DO dta_actions_item
										'**************************************
										Dim RemoveAS_SQL2 As String = $"delete from dta_actions_items where actions_tagcode = '${AsTagcode}'"$
										Log(RemoveAS_SQL2)
										Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_SQL2, request_tagcode)
										' APAGA O REGISTO DO dta_actions_adds
										'**************************************
										Dim RemoveAS_SQL3 As String = $"delete from dta_actions_adds where actions_tagcode = '${AsTagcode}'"$
										Log(RemoveAS_SQL3)
										Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_SQL3, request_tagcode)
								
								
										If Utils.NNE(Iu_Tagcode) Then
									
											' FAZ UPDATE AO REGISTO DO dta_requests_values, LIMPANDO O execute_datetime E ACTUALIZANDO O execute_datetime
											'**************************************
											Dim RemoveAS_D_R_V As String = $"update dta_requests_values set execute_action = '', execute_datetime = '${DataHora}' where request_tagcode = '${request_tagcode.trim}'
																And task_tagcode = '${task_tagcode.trim}'
																And unique_key = '${uniquekey.trim}'
																And item_tagcode = '${TheItemTagCode.trim}'
																And tagcode = '${Iu_Tagcode.trim}'
																And repeatcounter = ${repeatcounter}
																And repeatitemcounter = ${repeatitemcounter}
																And repeatfieldcounter = ${repeatfieldcounter}"$
											Log(RemoveAS_D_R_V)
											Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_D_R_V, request_tagcode)
										End If
								
										' ENVIA A PROCEDIMENTO AO SERVIDOR
																
										Dim params As Map
										params.Initialize
										params.Clear
										params.Put("_token", ShareCode.APP_TOKEN)
										params.Put("ACLRequest", request_tagcode.Trim)
										params.Put("ACLAction", action_tagcode .Trim)
										params.Put("ACLTask", task_tagcode.Trim)
										params.Put("ACLItem", TheItemTagCode.Trim)
										params.Put("ACLUniqueKey", uniquekey.Trim)
										params.Put("ACLTagcode", Iu_Tagcode)
										params.Put("ACLAASNC", AsTagcode)
										params.Put("ACLADatetime", DataHora)
										params.Put("ACLSessUser", ShareCode.SESS_OPER_User)
										params.Put("ACLAReqCounter", repeatcounter)
										params.Put("ACLARepeatItem", repeatitemcounter)
										params.Put("ACLARepeatField", repeatfieldcounter)
										params.Put("versionTagcode", Main.VersionTagcode)
										params.Put("_authorization", Main.DeviceAuthorization)
										params.Put("_instance", Main.DeviceInstance)
										params.put("_deviceBrand", Main.DeviceBrand)
										params.put("_deviceModel", Main.DeviceModel)
										params.put("_deviceMacAddress", Main.DeviceMacAddress)
										params.Put("_user", ShareCode.SESS_User)
										Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/event/del/asnc"$
										Log(">>>>>>>>>>>>>>>> APAGA AS DESDE O MESMO BOTAO <<<<<<<<<<<<<<<<")
										If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
											Utils.CallApi(0,params, Me, Url, "", request_tagcode.Trim)
										Else
											Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(2,request_tagcode.Trim,task_tagcode.Trim,TheItemTagCode.Trim)
											Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
										End If
										Sleep(550)
									End If
								End If
													
							End If
								
						End If
						
						
					End If
					'************************************************************************************************
					
					
					Dim sSQL As String = $"update dta_requests_values set execute_value='${vMulti}',
										execute_status=${vMultiStatus}, 
										execute_datetime='${sACLADatetime.Trim}',
										sess_user='${ACLSessUser}',
										execute_latitude='${sACLALatitude.Trim}',
										execute_longitude='${sACLALongitude.Trim}' 
										where 1=1
											And request_tagcode='${request_tagcode.Trim}' 
											And task_tagcode='${task_tagcode.Trim}' 
											And item_tagcode='${item_tagcode.Trim}' 
											And unique_key='${uniquekey.Trim}' 
											And tagcode='${tagcode.Trim}'
											And repeatcounter=${repeatcounter}
											And repeatitemcounter=${repeatitemcounter}
											And repeatfieldcounter=${repeatfieldcounter}"$
'					Log(sSQL)
					Utils.SaveSQLToLog("CLAItemButton_StateClick",sSQL, request_tagcode)
					'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
		
					Dim params As Map
					params.Initialize
					params.Clear
					params.Put("_token", ShareCode.APP_TOKEN)
					params.Put("ACLARequest", request_tagcode)
					params.Put("ACLAAction", action_tagcode)
					params.Put("ACLATask", task_tagcode)
					params.Put("ACLAItem", item_tagcode)
					params.Put("ACLAUniqueKey", uniquekey)
					params.Put("ACLATagcode", tagcode)
					params.Put("ACLAValue", val)
					params.Put("ACLAReqCounter", repeatcounter)
					params.Put("ACLARepeatItem", repeatitemcounter)
					params.Put("ACLARepeatField", repeatfieldcounter)
					params.Put("ACLAInner", 0)
					params.Put("ACLAChangeObjectGeoLocation", ChangeObjectGeoLocation)
					params.Put("ACLAObjectTag", ACLAObjectTag)

					params.Put("ACLADatetime", sACLADatetime)
					params.Put("ACLALatitude", sACLALatitude)
					params.Put("ACLALongitude", sACLALongitude)
			
					params.Put("ACLSessUser", ACLSessUser)
					params.Put("ACLClear", ACLClear)
					params.Put("versionTagcode", Main.VersionTagcode)
					params.Put("_authorization", Main.DeviceAuthorization)
					params.Put("_instance", Main.DeviceInstance)
					params.put("_deviceBrand", Main.DeviceBrand)
					params.put("_deviceModel", Main.DeviceModel)
					params.put("_deviceMacAddress", Main.DeviceMacAddress)
					params.Put("_user", ShareCode.SESS_User)
					Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
					If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
						If Not(ShareCode.APP_WORKING_LOCAL) Then
							Dim GODR As ResumableSub = GetOfflineDataRec(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
							Wait For (GODR) Complete (HasResults As Boolean)
							If HasResults Then
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							Else
								Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim)
							End If
						Else
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						End If
						Sleep(250)
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
			
					Dim ppar As Panel = this.Parent
					Dim bb As Button
					Try
						Dim bb As Button = ppar.GetView(3)
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
					End Try
					'******************************************************************************
					'	CONTROLO DE EVENTOS
					'******************************************************************************

					If (vMultiStatus=1) And (bb.IsInitialized) Then
						CurrentButtonState = 1
						InvertEnableState = False
						Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
										$"select distinct paramters 
										from dta_tasks_items_adds where 1=1
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${item_tagcode.trim}'
										And unique_key='${uniquekey.trim}'"$, "paramters")	

						'Log(bb.Tag)
						'EVENTTASK_ADDREQUESTNEW
						
						'dta_tasks_items_answers_events
						Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${item_tagcode.trim}'
										And unique_key='${uniquekey.trim}'
										And tagcode='${tagcode.trim}'
										Order by position"$  
										
						Log(" ======================================================================")
						Log(" AQUI JAZIA O ANTIGO CÓDIGO, AGORA INSERIDO NA FUNÇÃO CALLFORCETRIGGERS")
						Log(" ======================================================================")
						Log(sSQL)
						Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
						
						Log("EVENTOS ROW COUNT : " & Eventos.RowCount)
						
						If Eventos.RowCount >= 1 Then
							For n=0 To Eventos.RowCount-1
								Eventos.Position = n
								Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
								Dim bbTag As RequestCLAItem = bb.tag
								
								' ===================================================================
								' AQUI JAZ O ANTIGO CÓDIGO AGORA INSERIDO NA FUNÇÃO CALLFORCETRIGGERS
								' ===================================================================
								
'								Dim resEvt As ResumableSub = CallForceTriggers(request_tagcode, task_tagcode, _
'													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, _
'													QuestParams, vMulti, evt, bbTag, this, tagcode.trim)
								Dim resEvt As ResumableSub = CallForceTriggers(request_tagcode, task_tagcode, _
													TheItemTagCode, uniquekey, repeatcounter, repeatitemcounter, _
													QuestParams, vMulti, evt, bbTag, this, tagcode.trim)
								Wait For(resEvt) Complete (resbool As Boolean)
								If(resbool) Then
									Log("sucesso!")
								End If
							
								
								Dim resEvt2 As ResumableSub = InputControlParameter("BUTTON", item_tagcode, this.Text, bbTag)
								Wait For(resEvt2) Complete (resbool2 As Boolean)
								If(resbool2) Then
									Log("sucesso!")
								End If
								
							Next
						End If
						Eventos.Close
						If QuestParams.ContainsKey("double_button_control") Then
							Try
								Dim double_button_control As Int = QuestParams.Get("double_button_control")
							Catch
								Dim double_button_control As Int = 0
								Log(LastException)
								Utils.WriteErrors2Log(LastException)
							End Try
						End If
						
						
						
						If Utils.Int2Bool(double_button_control) Then
							Dim double_button_settings As Map = QuestParams.Get("double_button_settings")
							Dim control_conformities As Int = double_button_settings.Get("control_conformities")
							If Utils.Int2Bool(control_conformities) Then
								Dim conformity_type_button1 As String = double_button_settings.Get("conformity_type_button1")
								Dim conformity_type_button2 As String = double_button_settings.Get("conformity_type_button2")
							End If
							
							Dim action_on_buttons As Int = double_button_settings.Get("action_on_buttons")
							
							If Utils.Int2Bool(action_on_buttons) Then
								Dim action_buttons As List = double_button_settings.Get("action_buttons")
								For Each colaction_buttons As Map In action_buttons
									Dim button_number As String = colaction_buttons.Get("button_number")
									If (val = button_number) Then
										Dim resobsgrp_tagcode As String = colaction_buttons.Get("resobsgrp_tagcode")
										Dim have_condition As Int = colaction_buttons.Get("have_condition")
										Dim event_tagcode As String = colaction_buttons.Get("event_tagcode")
										Dim add_object_email As Int = colaction_buttons.Get("add_object_email")
										Dim type_item As Int = colaction_buttons.Get("type_item")
										Dim use_internal_image As Int = colaction_buttons.Get("use_internal_image")
										Dim request_signature As Int = colaction_buttons.Get("request_signature")
										Dim is_status As Int = colaction_buttons.Get("is_status")
										Dim is_more As Int = colaction_buttons.Get("is_more")
										Dim have_formula As Int = colaction_buttons.Get("have_formula")
										Dim team_tagcode As String = colaction_buttons.Get("team_tagcode")
										Dim value As String = colaction_buttons.Get("value")
										Dim email_to As String = colaction_buttons.Get("email_to")
										Dim is_email As Int = colaction_buttons.Get("is_email")
										Dim active As Int = colaction_buttons.Get("active")
										Dim is_alert As Int = colaction_buttons.Get("is_alert")
										Dim is_foto As Int = colaction_buttons.Get("is_foto")
										Dim is_action As Int = colaction_buttons.Get("is_action")
										Dim have_status As Int = colaction_buttons.Get("have_status")
										Dim default_typerequest As String = colaction_buttons.Get("default_typerequest")
										Dim add_entity_email As Int = colaction_buttons.Get("add_entity_email")
										Dim formula As String = colaction_buttons.Get("formula")
										Dim position As Int = colaction_buttons.Get("position")
										Dim is_jump As Int = colaction_buttons.Get("is_jump")
										Dim inc_object_contacts As Int = colaction_buttons.Get("inc_object_contacts")
										Dim email_cc As String = colaction_buttons.Get("email_cc")
									
'										Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
										Dim evt As CLAIEvent = Types.MakeCLAIEvent( event_tagcode, _
																				position, _
																				type_item, _
																				active, _
																				value, _
																				formula, _
																				have_formula, _
																				have_condition, _
																				have_status, _
																				is_jump, _
																				is_status, _
																				is_alert, _
																				is_email, _
																				is_more, _
																				is_foto, _
																				is_action, _
																				inc_object_contacts, _
																				team_tagcode, _
																				email_to, _
																				email_cc, _
																				use_internal_image, _
																				default_typerequest, _
																				resobsgrp_tagcode, _
																				add_entity_email, _
																				add_object_email, _
																				request_signature)
								
							
										Dim res As ResumableSub = CallForceTriggers(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, _
													QuestParams, vMulti, evt, bb.tag, this, tagcode.trim)
										Wait For(res) Complete (resbool As Boolean)
										If(resbool) Then
											Log("sucesso!")
										End If
										
									End If
									
								Next
							End If
						End If

						
					else If (vMultiStatus=0) And (bb.IsInitialized) Then 'Botao Desmarcado
						CurrentButtonState = 0
						InvertEnableState = True
						Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
										$"select distinct paramters 
										from dta_tasks_items_adds where 1=1
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${item_tagcode.trim}'
										And unique_key='${uniquekey.trim}'"$, "paramters")	

					
						'dta_tasks_items_answers_events
						Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${item_tagcode.trim}'
										And unique_key='${uniquekey.trim}'
										And tagcode='${tagcode.trim}'
										Order by position"$  
										
						
						Log(sSQL)
						Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
						
						Log("EVENTOS ROW COUNT : " & Eventos.RowCount)
						
						If Eventos.RowCount >= 1 Then
							For n=0 To Eventos.RowCount-1
								Eventos.Position = n
								Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
								Dim bbTag As RequestCLAItem = bb.tag
								
								' AO CHAMAR A SUB DE ACTIVAR/INACTIVAR COM O Status = 0 VAI INVERTER OS PARAMTROS DE ACTIVACAO CAUSANDO
								' A INVERSAO DO ESTADO DOS PAINES BLOQUEADOS OU DESBLOQUEADOS
								If ((evt.event_tagcode = "EVENTTASK_ACTIVE_INACTIVE_ITEM") And (evt.type_item = 25)) Then
									Log(ComponentList.Size)
									Dim SCI As SingleCLAItem = Types.MakeSingleCLAItem(request_tagcode,task_tagcode,item_tagcode,uniquekey,tagcode,repeatcounter,repeatitemcounter,repeatfieldcounter)
									
									Dim res As ResumableSub = ActiveInactive(this , bbTag, evt, tagcode.trim, SCI, True, repeatitemcounter)
									Wait For(res) Complete (Ended As Boolean)
								End If
'								TIP : Desmarcar o Evento de activar / desactivar view - Verificar para so actuar em condicao
'								Dim resEvt2 As ResumableSub = InputControlParameter("BUTTON", item_tagcode, this.Text, bbTag)
'								Wait For(resEvt2) Complete (resbool2 As Boolean)
'								If(resbool2) Then
'									Log("sucesso!")
'								End If
								
							Next
						End If
						Eventos.Close
						
					End If
			
				End If
			End If

		End If
	End If
	
'	ProgressDialogHide
	
End Sub

' *************************************************************
' TIP: EVENTOS DE TRIGGERS CALLFORCETRIGGER
' *************************************************************
Sub CallForceTriggers(request_tagcode As String, task_tagcode As String, item_tagcode As String, uniquekey As String, _
	repeatcounter As Int, repeatitemcounter As Int, QuestParams As Map, vMulti As String, evt As CLAIEvent,  bbTag As RequestCLAItem, _
	this As B4XView, answertagcode As String) As ResumableSub
	Log("CHEGOU AO CALLFORCETRIGGERS")
	
	Dim ThisItemValue As String = Utils.IfNullOrEmpty( _
								DBStructures.GetScriptColumnStrEVC($"select execute_value as valor
									from dta_requests_values where execute_status=1 and request_tagcode='${request_tagcode.trim}' 
									and task_tagcode = '${task_tagcode.Trim}'
									and item_tagcode='${item_tagcode.trim}' 
									and repeatcounter = ${repeatcounter}
									and repeatitemcounter = ${repeatitemcounter}
									limit 1 "$, "valor"), "")
									
	If (evt.type_item = 9) Then
		ControlUpdateRequestField(bbTag, evt.value, vMulti)
	Else
		ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
		Sleep(150)
		If (Utils.Int2Bool(evt.is_status)) Then   							' TERMINA
			If (Utils.Int2Bool(evt.have_condition) And Utils.Int2Bool(evt.have_status)) Then
				ForceTerminateChecklistAndCreate(evt.value)
			Else
				ForceTerminateChecklist(evt.value)
			End If
		else if (Utils.Int2Bool(evt.is_foto)) Then
			ForceTakePicture(bbTag)
		else if (Utils.Int2Bool(evt.is_more)) Then
			ForceAddMore(bbTag)
		else if ((Utils.Int2Bool(evt.is_action)) Or (evt.event_tagcode = "EVENTTASK_ACTIONNOFORM")) Then
			If (evt.event_tagcode = "EVENTTASK_ACTIONNOFORM") Then
				Dim resEvt As ResumableSub = ForceAddActionNoForm(bbTag, evt.value, evt.formula)  'Value=Tagcode Tipo AS,  Formula=Tagcode Tipo Operação
				Wait For(resEvt) Complete (retEvt As Boolean)
			Else
				If Utils.NNE(evt.value) Then
					ForceAddActionTPA(bbTag, evt.value, "",0)
				Else
					ForceAddAction(bbTag)
				End If
			End If
			
		else if (Utils.Int2Bool(evt.is_jump)) Then
			ForceAddJump(evt.value)
		else if ((Utils.Int2Bool(evt.is_alert)) Or (Utils.Int2Bool(evt.is_email))) Then
		else if ((Utils.Int2Bool(evt.request_signature)) Or ((evt.event_tagcode = "EVENTTASK_SIGNATURE") And (evt.type_item = 4))) Then
			ForceAddSignature(bbTag)
		else if ((Utils.Int2Bool(evt.have_formula) And (evt.type_item = 2)) Or ((evt.event_tagcode = "EVENTTASK_FORMULA") And (evt.type_item = 2))) Then
			If ((ShareCode.APPL_ACCOUNT.ToUpperCase = "ERGUELOP")) Then
				Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
				Wait For(res) Complete (retAPI As ExternalDocsInfo)
				If(retAPI.status = 1) Then
					Log($"Missing File downloaded"$)
				End If
			Else
'				PressedAnswerTagCode
				If this Is B4XStateButton Then
					Dim b4xsb_this As B4XStateButton = this
					Dim resFormula As ResumableSub = CalcFormulaTrigger(request_tagcode, task_tagcode.trim, item_tagcode, uniquekey, _
									PressedAnswerTagCode.trim, repeatcounter, repeatitemcounter, 0, _
									evt.value, evt.Formula, b4xsb_this.Text,b4xsb_this)
					Wait For(resFormula) Complete (result As Boolean)
				Else
					Dim resFormula As ResumableSub = CalcFormulaTrigger(request_tagcode, task_tagcode.trim, item_tagcode, uniquekey, _
									PressedAnswerTagCode.trim, repeatcounter, repeatitemcounter, 0, _
									evt.value, evt.Formula, this.Text,this)
					Wait For(resFormula) Complete (result As Boolean)
				End If
				
			End If
		else if ((evt.event_tagcode = "EVENTTASK_CHECKTABLE") And (evt.type_item = 15)) Then
			'....
		else if ((evt.event_tagcode = "EVENTTASK_AUTODUPLICATE_CHAPTER") And (evt.type_item = 25)) Then
			
			' PASSAR PARA AQUI O CODIGO DEPOIS DE CONCLUIDO NO EDITTEXT
			
		else if ((evt.event_tagcode = "EVENTTASK_CHECKTABLE_ADVANCE") And (evt.type_item = 15)) Then
			' EDP TESTE
			ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
			Sleep(150)
			Dim CLA As RequestCLA = Types.MakeRequestCLA(request_tagcode, task_tagcode, task_tagcode,repeatcounter,0,Types.MakeInterv(0,"",0,0), _
			Types.MakeRequestTaskInfoClear,Types.MakeOtherCLA("", "", ""))
			
			Dim resFormula As ResumableSub = TableValueCheck(CLA, task_tagcode, item_tagcode, uniquekey)
			Wait For(resFormula) Complete (result As Boolean)
			If result Then
				If (this Is B4XStateButton) And (evt.have_condition=9) Then
					Dim b4xsb_this As B4XStateButton = this
					Dim thisFieldValue As String = Utils.IfNullOrEmpty( _
								DBStructures.GetScriptColumnStrEVC($"select execute_value as valor
									from dta_requests_values where execute_status= 1 and request_tagcode='${CLA.Request.trim}' and task_tagcode = '${CLA.Task.Trim}'
									and item_tagcode='${item_tagcode.trim}' and repeatcounter = ${CLA.RepeatCounter}"$, "valor"), _
									"Calcular")
					b4xsb_this.Text = thisFieldValue
				End If
			End If
			ProgressDialogHide
			Sleep(50)
		else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
			Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
			Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
			SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, False)
		else if ((evt.event_tagcode = "EVENTTASK_MANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
			Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
			Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
			SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, True)
		else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYALLDOWN") And (evt.type_item = 7)) Then
			SetMandatoryStateAfterItem(item_tagcode.trim, False)
		else if ((evt.event_tagcode = "EVENTTASK_MANDATORYALLDOWN") And (evt.type_item = 7)) Then
			SetMandatoryStateAfterItem(item_tagcode.trim, True)
		else if ((evt.event_tagcode = "EVENTTASK_INTEGRATION") And (evt.type_item = 8)) Then
			Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
			Wait For(res) Complete (retAPI As ExternalDocsInfo)
			If(retAPI.status = 1) Then
				Log($"Missing File downloaded"$)
			End If
		else if ((evt.event_tagcode = "EVENTTASK_ALLDOWNCHAPTERCONFORM") And (evt.type_item = 10)) Then
			Dim res As ResumableSub = SetConformAllDown(this, item_tagcode.trim, True)
			Wait For(res) Complete (Ended As Boolean)
		else if ((evt.event_tagcode = "EVENTTASK_ALLDOWNCHAPTERNOCONFORM") And (evt.type_item = 10)) Then
			Dim res As ResumableSub = SetNoConformAllDown(this, item_tagcode.trim, True)
			Wait For(res) Complete (Ended As Boolean)
		else if ((evt.event_tagcode = "EVENTTASK_ALLDOWNCHAPTERNOAPLICABLE") And (evt.type_item = 10)) Then
			Dim res As ResumableSub = SetNoAplicableAllDown(this, item_tagcode.trim, True)
			Wait For(res) Complete (Ended As Boolean)
		else if ((evt.event_tagcode = "EVENTTASK_ALLDOWNCONFORM") And (evt.type_item = 10)) Then
			Dim res As ResumableSub = SetConformAllDown(this, item_tagcode.trim, False)
			Wait For(res) Complete (Ended As Boolean)
		else if ((evt.event_tagcode = "EVENTTASK_ALLDOWNNOCONFORM") And (evt.type_item = 10)) Then
			Dim res As ResumableSub = SetNoConformAllDown(this, item_tagcode.trim, False)
			Wait For(res) Complete (Ended As Boolean)
		else if ((evt.event_tagcode = "EVENTTASK_ALLDOWNNOAPLICABLE") And (evt.type_item = 10)) Then
			Dim res As ResumableSub = SetNoAplicableAllDown(this, item_tagcode.trim, False)
			Wait For(res) Complete (Ended As Boolean)
		else if ((evt.event_tagcode = "EVENTTASK_INVERTCONFORMITY") And (evt.type_item = 30)) Then
			Dim res As ResumableSub = InvertConformity(this, request_tagcode.Trim , task_tagcode.trim , item_tagcode.trim , uniquekey.trim , _
										repeatcounter , repeatitemcounter , bbTag, answertagcode)
			Wait For(res) Complete (Ended As Boolean)
		else if ((evt.event_tagcode = "EVENTTASK_ACTIVE_INACTIVE_ITEM") And (evt.type_item = 25)) Then
			
			Dim SCI As SingleCLAItem = Types.MakeSingleCLAItem(request_tagcode.trim, task_tagcode.trim, item_tagcode.trim, uniquekey.trim,"",repeatcounter,repeatitemcounter,0)
			Dim res As ResumableSub = ActiveInactive(this , bbTag, evt, answertagcode, SCI, True, repeatitemcounter)
			Wait For(res) Complete (Ended As Boolean)
		else if	((evt.event_tagcode = "EVENTTASK_COLLAPSE") And (evt.type_item = 1)) Then
			Dim VCR As ResumableSub =  ViewChapters(evt, repeatitemcounter)
			Wait For (VCR) Complete (Finished As Boolean)
		else if	((evt.event_tagcode = "EVENTTASK_CHAPTERLEFTRIGHT") And (evt.type_item = 1)) Then
			Dim VCR As ResumableSub =  ViewChapters(evt, repeatitemcounter)
			Wait For (VCR) Complete (Finished As Boolean)
		else if	((evt.event_tagcode = "EVENTTASK_CHAPTERADDREMOVE") And (evt.type_item = 1)) Then
			Dim VCR As ResumableSub =  ViewChapters(evt, repeatitemcounter)
			Wait For (VCR) Complete (Finished As Boolean)
		else if ((evt.event_tagcode = "EVENTTASK_ADDCHECKLISTNEW") And (evt.type_item = 0)) Then
			'NADA AINDA
		else if ((evt.event_tagcode = "EVENTTASK_ADDCHECKLISTNEWPARM") And (evt.type_item = 1)) Then
			Dim typerequest As String = DBStructures.GetScriptColumnStrEVC($"select typerequest_tagcode as valor from dta_requests where 1=1 and tagcode='${request_tagcode}'"$, "valor")
			Dim object_tagcode As String = DBStructures.GetScriptColumnStrEVC( $"select distinct object_tagcode from dta_requests_values where 1=1
													And request_tagcode='${request_tagcode.trim}'
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'
													And repeatcounter='${repeatcounter}'
													And repeatitemcounter='${repeatitemcounter}'
													And repeatfieldcounter='0'
													"$, "object_tagcode")
			If (Utils.NNE(object_tagcode) And Not(object_tagcode = "__NONE__") And Not(object_tagcode = "__NULL__")) Then
				Dim res As ResumableSub = CheckTypeRequestTaskParamters4(request_tagcode, task_tagcode, typerequest, object_tagcode, 0, "")
				Wait For(res) Complete (Ended As Boolean)
			End If
			
		else if ((evt.event_tagcode = "EVENTTASK_DUPLICATECKLISTNEW") And (evt.type_item = 0)) Then
			
		else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTER") And (evt.type_item = 30)) Then
			Dim ContinuarCheck As Boolean = True
			If (Utils.NNE(ThisItemValue) And Utils.isNumeric(ThisItemValue) And Utils.Int2Bool(evt.have_status)) Then
				ContinuarCheck = False ' JÁ TEM VALOR
			End If
					
			If (ContinuarCheck) Then
				Dim ItemTagCode As String = item_tagcode.Trim
				Dim valorVerificar As String = ""
				If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
					ItemTagCode = evt.value.Trim
				End If
				Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
				Wait For(res) Complete (retval As Int)
				valorVerificar = retval
				
				ThisItemValue = valorVerificar
			
				Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
										repeatcounter, repeatitemcounter, repeatitemcounter, ThisItemValue)
				Wait For(res1) Complete (retbool As Boolean)
			End If
			
			If (Utils.NNE(ThisItemValue)) Then
				If (this Is B4XStateButton) And (evt.have_condition=9) Then
					Dim b4xsb_this As B4XStateButton = this
					b4xsb_this.Text = ThisItemValue
				End If
			End If
		else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTEROTHER") And (evt.type_item = 31)) Then
			'*******************************************************************************************************
			' NOTE: A MESMA FUNCIONALIDADE SÓ QUE PERMITE INDICAR OUTRO ITEM_TAGCODE QUE VAI RECEBER O RESULTADO
			'*******************************************************************************************************
			Dim ItemTagCode As String = item_tagcode.Trim
			Dim OtherValue As String = ""
			Dim valorVerificar As String = ""
			If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
				ItemTagCode = evt.value.Trim
			End If
			If (Utils.NNE(evt.formula)) Then
				OtherValue = evt.formula.Trim
			End If
			Dim res As ResumableSub = CLAIGetSetExternalCounterOther(task_tagcode, ItemTagCode, ThisItemValue, OtherValue, evt)
			Wait For(res) Complete (retval As Int)
			valorVerificar = retval
			
			Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, OtherValue, uniquekey, PressedAnswerTagCode, _
										repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
			Wait For(res1) Complete (retbool As Boolean)
		else if ((evt.event_tagcode = "EVENTTASK_NOTESACTION") And (evt.type_item = 5)) Then
			'Apagar qualquer AS existente para o presente item_tagcode e chamar a opcao dos 3pontinhos
							
			'CHECK IF AS EXISTS
			
			Dim SqlCheck As String = $"SELECT * from dta_actions where request_Tagcode = '${request_tagcode}'
															And task_tagcode = '${task_tagcode}'
															And item_tagcode = '${item_tagcode}'
															And uniquekey = '${uniquekey}'"$
			Dim RecCount As Cursor = Starter.LocalSQLEVC.ExecQuery(SqlCheck)
			If RecCount.RowCount > 0 Then
								
				'************************************************************************************************
				' ELIMINAR A ACCAO SUBSEQUENTE CRIADA PELO MESMO EVENTO AO VOLTAR DO DIALOGO DE OPCOES ADICIONAIS
				'************************************************************************************************
							
				' APANHA O TAGCODE PARA ELIMINACAO NO dta_actions_items
				'******************************************************
				Dim DataHora As String = Utils.GetCurrDatetimeext
							
				Dim AsTagcode As String =  DBStructures.GetScriptColumnStrEVC($"select tagcode from dta_actions where request_tagcode = '${request_tagcode.Trim}'
												and task_tagcode = '${task_tagcode.trim}' 
												and item_Tagcode = '${item_tagcode.trim}' 
												and uniquekey = '${uniquekey.trim}'"$,"tagcode")
							
				' APANHA O IU_TAGCODE PARA limpar o execute_action no dta_requests_values
				'************************************************************************
				Dim Iu_Tagcode As String =  DBStructures.GetScriptColumnStrEVC($"select iu_tagcode from dta_actions where request_tagcode = '${request_tagcode.Trim}'
												and task_tagcode = '${task_tagcode.trim}' 
												and item_Tagcode = '${item_tagcode.trim}' 
												and uniquekey = '${uniquekey.trim}'"$,"iu_tagcode")
							
				If Utils.NNE(AsTagcode) Then
								
					' APAGA O REGISTO DO dta_actions
					'**************************************
					Dim RemoveAS_SQL1 As String = $"delete from dta_actions where tagcode = '${AsTagcode.Trim}'"$
					Log(RemoveAS_SQL1)
					Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_SQL1, request_tagcode)
								
					' APAGA O REGISTO DO dta_actions_item
					'**************************************
					Dim RemoveAS_SQL2 As String = $"delete from dta_actions_items where actions_tagcode = '${AsTagcode}'"$
					Log(RemoveAS_SQL2)
					Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_SQL2, request_tagcode)
					' APAGA O REGISTO DO dta_actions_adds
					'**************************************
					Dim RemoveAS_SQL3 As String = $"delete from dta_actions_adds where actions_tagcode = '${AsTagcode}'"$
					Log(RemoveAS_SQL3)
					Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_SQL3, request_tagcode)
								
								
					If Utils.NNE(Iu_Tagcode) Then
									
						' FAZ UPDATE AO REGISTO DO dta_requests_values, LIMPANDO O execute_datetime E ACTUALIZANDO O execute_datetime
						'**************************************
						Dim RemoveAS_D_R_V As String = $"update dta_requests_values set execute_action = '', execute_datetime = '${DataHora}' where 1=1
																And request_tagcode = '${request_tagcode.trim}'
																And task_tagcode = '${task_tagcode.trim}'
																And unique_key = '${uniquekey.trim}'
																And item_tagcode = '${item_tagcode.trim}'
																And tagcode = '${Iu_Tagcode.trim}'"$
						Log(RemoveAS_D_R_V)
						Utils.SaveSQLToLog("RemoveAutoAS",RemoveAS_D_R_V, request_tagcode)
					End If
								
					' ENVIA A PROCEDIMENTO AO SERVIDOR
																
					Dim params As Map
					params.Initialize
					params.Clear
					params.Put("_token", ShareCode.APP_TOKEN)
					params.Put("ACLRequest", request_tagcode.Trim)
					params.Put("ACLAction", task_tagcode .Trim)
					params.Put("ACLTask", task_tagcode.Trim)
					params.Put("ACLItem", item_tagcode.Trim)
					params.Put("ACLUniqueKey", uniquekey.Trim)
					params.Put("ACLTagcode", Iu_Tagcode)
					params.Put("ACLAASNC", AsTagcode)
					params.Put("ACLADatetime", DataHora)
					params.Put("ACLSessUser", ShareCode.SESS_OPER_User)
					params.Put("ACLAReqCounter", repeatcounter)
					params.Put("ACLARepeatItem", repeatitemcounter)
					params.Put("ACLARepeatField", 0)
					params.Put("versionTagcode", Main.VersionTagcode)
					params.Put("_authorization", Main.DeviceAuthorization)
					params.Put("_instance", Main.DeviceInstance)
					params.put("_deviceBrand", Main.DeviceBrand)
					params.put("_deviceModel", Main.DeviceModel)
					params.put("_deviceMacAddress", Main.DeviceMacAddress)
					params.Put("_user", ShareCode.SESS_User)
					Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/event/del/asnc"$
					Log(">>>>>>>>>>>>>>>> APAGA AS DESDE O OUTRO BOTAO <<<<<<<<<<<<<<<<")
					If Not(ShareCode.APP_WORKING_LOCAL) Then
						Dim GODR As ResumableSub = GetOfflineDataRec(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
						Wait For (GODR) Complete (HasResults As Boolean)
						If HasResults Then
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						Else
							Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim)
						End If
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
					Sleep(550)
				End If
								
								
			End If
						
			'Chamar a janela dos 3pontinhos
'		Dim Filter As AppActionDialogs
'		Filter.Initialize
'		Filter.GetMoreActionsDialog(Activity, "CheckList3", CLAItem, 0, "", MainObservations, 0, "", "", "",0)
			
		End If
		ProgressDialogHide
	End If
	Return True
End Sub


' acrescentei ao this as b4xview o thistext as string, uma vez que so necessitamos do texto passado e o b4xview da erros no type de view
Sub CalcFormulaTrigger(request_tagcode As String, task_tagcode As String, item_tagcode As String, uniquekey As String, _
	tagcode As String, repeatcounter As Int, repeatitemcounter As Int, repeatfieldcounter As Int, value As String, Formula As String, _
	thisText As String, this As B4XView) As ResumableSub
'	ProgressDialogHide
	ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
	Sleep(150)
	Dim RetVal As Boolean = True

	If Utils.NNE(Formula) Then
		
		If Formula.Contains("__FNCEVALREL2ABSIDX(") Then
			If this Is Spinner Then
				Dim Spn As Spinner = this
				thisText = Spn.SelectedIndex
			End If
		End If
		DirectPassthru = False
		Dim resFormula As ResumableSub = ReplaceFormulaFields(request_tagcode, task_tagcode, item_tagcode,  _
						repeatcounter, repeatitemcounter, repeatfieldcounter, Formula, thisText)
		Wait For(resFormula) Complete (FormulaResultRet As String)
		Dim FormulaResult As String = FormulaResultRet
	
		Dim fncFormula As ResumableSub = FNCFormulas(request_tagcode, task_tagcode, item_tagcode,  _
						repeatcounter, repeatitemcounter, repeatfieldcounter, FormulaResult, thisText)
		Wait For(fncFormula) Complete (FormulaResultRet As String)
		
		Dim val2show As String = ""
		
		If Formula.StartsWith("__FNC") Then
			val2show = FormulaResultRet
		Else
'			NOTA: se a variavel directpassthru estiver a true, nao passa pela formula w devolve o valor directamente
'					como por exemplo se for uma string, como tal tem de ser passado na formula apenas [tv]
			
			If Not(DirectPassthru) Then
				Try
					Dim val As Double = calculate.Eval(FormulaResult)
					val = NumberFormat2(val,1,2,2,False)
					val2show = val
				Catch
					Dim val As Double = 0
					val2show = val
				End Try
			Else
				val2show = FormulaResultRet
			End If

				' se for string entao val2show = FormulaResultRet
			
			
		End If
		
		Try
			Dim have_condition As Int = DBStructures.GetScriptColumnIntEVC($"select have_condition from dta_tasks_items_answers_events where 1=1
																	And task_tagcode = '${task_tagcode}'
																	And item_tagcode = '${item_tagcode}'
																	And unique_key = '${uniquekey}'
																	And tagcode = '${tagcode}'"$,"have_condition")
		Catch
			Dim have_condition As Int = 0
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		Log("CHEGOU ao have_condition")
		' So vai iterar sobre a lista dos campos de texto
		If have_condition = 9 Then
			Try
				If Utils.NNE(value) And Utils.NNE(val2show) Then
					For n = 0 To B4XSButtonsList.Size-1
						Dim cpm As B4XSRecords = B4XSButtonsList.Get(n)
						Log(cpm.item_tagcode)
						
						If cpm.item_tagcode = value Then
							Dim comp_type As B4XView = cpm.component
							If comp_type Is B4XStateButton Then
								Dim b4xsb2set As B4XStateButton = comp_type
								b4xsb2set.Text = val2show
							else if comp_type Is Button Then
								Dim btn2set As Button = comp_type
								btn2set.Text = val2show
							End If
						End If
					Next
				End If
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
			
		Else
			Try
				If Utils.NNE(value.trim) And Utils.NNE(val2show.trim) Then
					For x=0 To UPDATED_EDIT_FIELDS.size -1
						Dim cItem As FieldReference = UPDATED_EDIT_FIELDS.Get(x)
						Dim thisTag As RequestCLAItem
						If (cItem.tagname=value.Trim) Then
							If cItem.tagobject Is FloatLabeledEditText Then
								Dim fv As FloatLabeledEditText = cItem.tagobject
								fv.Text = ""
								fv.Text = val2show
							Else If cItem.tagobject Is EditText Then
								Dim ev As EditText = cItem.tagobject
								ev.Text = ""
								ev.Text = val2show
							Else If cItem.tagobject Is Label Then
								Dim lv As Label = cItem.tagobject
								lv.Text = ""
								lv.Text = val2show
							Else If cItem.tagobject Is Spinner Then
								Dim sv As Spinner = cItem.tagobject
								sv.GetItem(val2show)
							End If
						End If
					Next
				End If
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
		End If
		
		
		
	Else
		Dim RetVal As Boolean = False
	End If
	
	Dim sACLADatetime As String = Utils.GetCurrDatetime

	
																
	Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
	Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
	
	Dim ACLSessUser As String = ShareCode.SESS_OPER_User
	Dim ACLClear As Int = 1
	
	Dim CurrentItemTagcode As String = DBStructures.GetScriptColumnStrEVC($"select tagcode from dta_requests_values where 1=1
																			and request_tagcode = '${request_tagcode.trim}'
																			and task_tagcode = '${task_tagcode.trim}'
																			And item_tagcode = '${value.trim}'"$, "tagcode")
	
	Dim UK_Item As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_requests_values where 1=1
																and request_tagcode='${request_tagcode.trim}' 
																and task_tagcode='${task_tagcode.trim}' 
																and item_tagcode='${value.trim}' 
																and tagcode='${CurrentItemTagcode}'"$,"unique_key")
	If have_condition = 9 Then
		Dim sSQL As String = $"update dta_requests_values set execute_value='${val2show}',
						execute_status='1',
						execute_datetime='${sACLADatetime}', 
						title='${val2show}',
						execute_value_title='${val2show}',
						execute_latitude='${sACLALatitude}', 
						execute_longitude='${sACLALongitude}'
						where request_tagcode='${request_tagcode.trim}' 
						and task_tagcode='${task_tagcode.trim}' 
						and item_tagcode='${value.trim}' 
						and tagcode='${CurrentItemTagcode}'
						and repeatcounter=${repeatcounter}
						and repeatfieldcounter = ${repeatfieldcounter}
						And repeatitemcounter=${repeatitemcounter}"$
		Starter.LocalSQLEVC.ExecNonQuery(sSQL)
	Else
		Dim sSQL As String = $"update dta_requests_values set execute_value='${val2show}',
						execute_status='1',
						execute_datetime='${sACLADatetime}', 
						execute_value_title='${val2show}',
						execute_latitude='${sACLALatitude}', 
						execute_longitude='${sACLALongitude}'
						where request_tagcode='${request_tagcode.trim}' 
						and task_tagcode='${task_tagcode.trim}' 
						and item_tagcode='${value.trim}' 
						and tagcode='${CurrentItemTagcode}'
						and repeatcounter=${repeatcounter}
						and repeatfieldcounter = ${repeatfieldcounter}
						And repeatitemcounter=${repeatitemcounter}"$
		Starter.LocalSQLEVC.ExecNonQuery(sSQL)
	End If

	Sleep(200)
	
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLARequest", request_tagcode.Trim)
	params.Put("ACLAAction", task_tagcode.Trim)
	params.Put("ACLATask", task_tagcode.trim)
	params.Put("ACLAItem", value.trim)
	params.Put("ACLAUniqueKey", UK_Item.trim)
	params.Put("ACLATagcode", CurrentItemTagcode.trim)
	params.Put("ACLAValue", val2show.Trim)
	params.Put("ACLAValuetitle", val2show.trim)
	If have_condition = 9 Then
		params.Put("ACLAtitle", val2show.trim)
	End If
	params.Put("ACLAReqCounter", repeatcounter)
	params.Put("ACLARepeatItem",repeatitemcounter )
	params.Put("ACLARepeatField",repeatfieldcounter )
	params.Put("ACLAInner", 0)
	
	Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
	Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
	
	params.Put("ACLADatetime", Utils.GetCurrDatetimeExt)
	params.Put("ACLALatitude", sACLALatitude)
	params.Put("ACLALongitude", sACLALongitude)
				
	Dim ACLSessUser As String = ShareCode.SESS_OPER_User
	Dim ACLClear As Int = 0
	params.Put("ACLSessUser", ACLSessUser.trim)
	params.Put("ACLClear", ACLClear)
	params.Put("versionTagcode", Main.VersionTagcode.trim)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
	
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then
			Dim GODR As ResumableSub = GetOfflineDataRec(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
			Wait For (GODR) Complete (HasResults As Boolean)
			If HasResults Then
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			Else
				Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim)
			End If
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(200)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If
	Sleep(200)
	
	
	ProgressDialogHide
	Return RetVal
End Sub

'FormulaResult
'TIP : FUNCOES E SUBSTITUICOES DE CAMPOS DAS FORMULAS
Sub ReplaceFormulaFields(request_tagcode As String, task_tagcode As String, item_tagcode As String,  _
	repeatcounter As Int, repeatitemcounter As Int, repeatfieldcounter As Int, Formula As String, thisText As String) As ResumableSub
	If Formula.ToUpperCase = "[TV]" Then 
		DirectPassthru = True
	Else 
		DirectPassthru = False
	End If
	Log("ENTROU EM : ReplaceFormulaFields")
	Dim FormulaResult As String = Formula.ToUpperCase.Replace("[TV]", thisText)
	
		
	Dim PosisStart As Int = FormulaResult.IndexOf("[")
	Dim counter As Int = 0
	Do While PosisStart >=0
		Dim PosisEnd As Int = FormulaResult.IndexOf("]")
		Log($"${PosisStart}, ${PosisEnd}"$)
		If (PosisEnd >= 0) Then
			Dim Valor As String = FormulaResult.SubString2(PosisStart+1, PosisEnd)

			Dim getResultValor As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(execute_value, 0) as valor
						from dta_requests_values where request_tagcode='${request_tagcode}' 
						and task_tagcode='${task_tagcode}'
						and item_tagcode='${Valor}' 
						and repeatcounter=${repeatcounter}
						and repeatitemcounter=${repeatitemcounter}
						and repeatfieldcounter=${repeatfieldcounter}
						limit 1"$, "valor")
			
			If getResultValor ="" Then
				Dim getResultValor As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(execute_value, 0) as valor
						from dta_requests_values where request_tagcode='${request_tagcode}' 
						and task_tagcode='${task_tagcode}'
						and item_tagcode='${Valor}' 
						and repeatcounter=${repeatcounter}
						and repeatitemcounter=0
						and repeatfieldcounter=${repeatfieldcounter}
						limit 1"$, "valor")
				If  getResultValor = "" Then getResultValor = "0"
			End If
			
			
				
			FormulaResult = FormulaResult.Replace($"[${Valor}]"$, getResultValor)
			Dim PosisStart As Int = FormulaResult.IndexOf("[")
			counter = counter + 1
		Else
			Exit
		End If
	Loop

	Return FormulaResult
	
End Sub

Sub FNCFormulas(request_tagcode As String, task_tagcode As String, item_tagcode As String,  _
	repeatcounter As Int, repeatitemcounter As Int, repeatfieldcounter As Int, Formula As String, thisText As String) As ResumableSub
	
	Dim FormulaResult As String = Formula
	
	If Formula.ToUpperCase.StartsWith("__FNCCALCAGE") Then
		
		Try
			Dim OldDTF As String = DateTime.DateFormat
			DateTime.DateFormat  = "dd-MM-yyyy"
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Var2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			DateTime.DateFormat = OldDTF
			Dim OriVar2process As String = Var2process
			Var2process = Var2process.Replace("/","-")
			
			Dim TstSep As String = Var2process.SubString2(2,3)
			If TstSep = "-" Then
				Dim YearRef As String = Var2process.SubString2(6,10)
			Else
				Dim YearRef As String = Var2process.SubString2(0,4)
			End If
			
			Dim YearNow As String = DateTime.GetYear(DateTime.Now)
			
			FormulaResult = FormulaResult.Replace($"__FNCCALCAGE(${OriVar2process})"$, Abs(YearNow - YearRef))
			Log("FormulaResult : " & FormulaResult)
		Catch
		
		End Try
		
	else If Formula.ToUpperCase.StartsWith("__FNCCALCAGEBETWEEN") Then
		
		' ESTA ERRADO, TEM DE SER ALTERADO, E SO PAR AAO DAR ERRO AGORA
		Dim getResultValor As String = Utils.GetCurrentDate
		
		Try
			Dim OldDTF As String = DateTime.DateFormat
			DateTime.DateFormat  = "dd-MM-yyyy"
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Var2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Var2process = Var2process.Replace("/","-")
			Dim TstSep As String = Var2process.SubString2(2,3)
			If TstSep = "-" Then
				Dim YearRef As String = Var2process.SubString2(6,10)
			Else
				Dim YearRef As String = Var2process.SubString2(0,4)
			End If
			Dim YearNow As String = DateTime.GetYear(DateTime.DateParse(getResultValor))
			
			Dim ResultOperInt As Int = Abs(YearNow - YearRef)
			FormulaResult = FormulaResult.Replace($"_FNCCALCAGEBETWEEN(${Var2process})"$, ResultOperInt)
			DateTime.DateFormat = OldDTF
		Catch
		
		End Try
		
		
	else If Formula.ToUpperCase.StartsWith("__FNCYEAR") Then
		
		Try
			Dim OldDTF As String = DateTime.DateFormat
			DateTime.DateFormat  = "dd-MM-yyyy"
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Var2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Var2process = Var2process.Replace("/","-")
			Dim TstSep As String = Var2process.SubString2(2,3)
			If TstSep = "-" Then
				Dim ResultOperStr As String = Var2process.SubString2(6,10)
			Else
				Dim ResultOperStr As String = Var2process.SubString2(0,4)
			End If
		
			FormulaResult = FormulaResult.Replace($"__FNCYEAR(${Var2process})"$, ResultOperStr)
			DateTime.DateFormat = OldDTF
		Catch
		
		End Try

	else If Formula.ToUpperCase.StartsWith("__FNCMONTH") Then
		
		Try
			Dim OldDTF As String = DateTime.DateFormat
			DateTime.DateFormat  = "dd-MM-yyyy"
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Var2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Var2process = Var2process.Replace("/","-")
			Dim TstSep As String = Var2process.SubString2(2,3)
			If TstSep = "-" Then
				Dim ResultOperStr As String = Var2process.SubString2(6,10)
			Else
				Dim ResultOperStr As String = Var2process.SubString2(0,4)
			End If
			
			FormulaResult = FormulaResult.Replace($"__FNCMONTH(${Var2process})"$, ResultOperStr)
			DateTime.DateFormat = OldDTF
		Catch
		
		End Try
		
	else If Formula.ToUpperCase.StartsWith("__FNCDAY") Then
		
		Try
			Dim OldDTF As String = DateTime.DateFormat
			DateTime.DateFormat  = "dd-MM-yyyy"
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Var2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Var2process = Var2process.Replace("/","-")
			Dim TstSep As String = Var2process.SubString2(2,3)
			If TstSep = "-" Then
				Dim ResultOperStr As String = Var2process.SubString2(6,10)
			Else
				Dim ResultOperStr As String = Var2process.SubString2(0,4)
			End If
			
			FormulaResult = FormulaResult.Replace($"__FNCDAY(${Var2process})"$, ResultOperStr)
			DateTime.DateFormat = OldDTF
		Catch
		
		End Try
		
	else If Formula.ToUpperCase.StartsWith("__FNCWEEK") Then
		
		Try
			Dim OldDTF As String = DateTime.DateFormat
			DateTime.DateFormat  = "dd-MM-yyyy"
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Var2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Var2process = Var2process.Replace("/","-")
			Dim Date2ticks As Long = DateTime.DateParse(Var2process)
			Dim offset As Int = DateTime.GetDayOfWeek(DateUtils.SetDate( DateTime.GetYear(Date2ticks), 1, 1))
			Dim ResultOperInt As Int = Floor((DateTime.GetDayOfYear(Date2ticks) + offset) / 7) + 1
						
			FormulaResult = FormulaResult.Replace($"__FNCWEEK(${Var2process})"$, ResultOperInt)
			DateTime.DateFormat = OldDTF
		Catch
		
		End Try
		
	else If Formula.ToUpperCase.StartsWith("__FNCDAYWEEK") Then
		
		Try
			Dim OldDTF As String = DateTime.DateFormat
			DateTime.DateFormat  = "dd-MM-yyyy"
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Var2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Var2process = Var2process.Replace("/","-")
			Dim ResultOperStr As String = DateTime.GetDayOfWeek(DateTime.DateParse(Var2process))
			If ResultOperStr.Trim = "1" Then
				ResultOperStr = "domingo"
			else If ResultOperStr.Trim = "2" Then
				ResultOperStr = "segunda-feira"
			else If ResultOperStr.Trim = "3" Then
				ResultOperStr = "terça-feira"
			else If ResultOperStr.Trim = "4" Then
				ResultOperStr = "quarta-feira"
			else If ResultOperStr.Trim = "5" Then
				ResultOperStr = "quinta-feira"
			else If ResultOperStr.Trim = "6" Then
				ResultOperStr = "sexta-feira"
			else If ResultOperStr.Trim = "7" Then
				ResultOperStr = "sábado"
			End If
			FormulaResult = FormulaResult.Replace($"__FNCDAYWEEK(${Var2process})"$, ResultOperStr)
			DateTime.DateFormat = OldDTF
		Catch
		
		End Try
		
	else if Formula.ToUpperCase.StartsWith("__FNCEVALGEL2ABSEXT") Then
		
		Try
			FormulaResult = FormulaResult.Replace("__FNCEVALGEL2ABSEXT(","")
			If FormulaResult.EndsWith(")") Then
				FormulaResult = FormulaResult.SubString2(0,FormulaResult.Length-1)
			End If
			Dim ListaCondicoes As List = Regex.Split(";",FormulaResult)
			
			Dim Val2Return As String = ""
			
			For x = 0 To ListaCondicoes.Size -1
				Dim ElementoListaCondicoes As String = ListaCondicoes.Get(x)
				Dim ListaCondicao As List = Regex.Split("\|",ElementoListaCondicoes)
				Dim TesteCondicao As String = ListaCondicao.Get(0)
				Dim ResultadoCondicao As String = ListaCondicao.Get(1)
				Dim Parcelas As String = TesteCondicao
				Dim Parcelas As String = Parcelas.Replace(" <= ", "|")
				Dim Parcelas As String = Parcelas.Replace(" < ", "|")
				Dim Parcelas As String = Parcelas.Replace(" >= ", "|")
				Dim Parcelas As String = Parcelas.Replace(" > ", "|")
				Dim Parcelas As String = Parcelas.Replace(" = ", "|")
				Dim Parcelas As String = Parcelas.Replace(" & ", "|")
				
				Dim ListaParcelas As List = Regex.Split("\|",Parcelas)
								
				If TesteCondicao.Contains(" & ") Then
					
					Dim Parcela1 As Double = calculate.Eval(ListaParcelas.Get(0))
					Dim Parcela2 As Double = ListaParcelas.Get(1)
					Dim Parcela3 As Double = calculate.Eval(ListaParcelas.Get(2))
					Dim Parcela4 As Double = ListaParcelas.Get(3)
					
					Dim AndPosition As Int = TesteCondicao.IndexOf("&")
					If AndPosition <> -1 Then
						Dim FirstCondition As String = TesteCondicao.SubString2(0,AndPosition).trim
						Dim SecondCondition As String = TesteCondicao.SubString2(AndPosition+1,TesteCondicao.Length).Trim
						If FirstCondition.Contains (" <= ") Then
							Dim Res1 As Boolean = (Parcela1 <= Parcela2)
						Else If FirstCondition.Contains (" < ") Then
							Dim Res1 As Boolean = (Parcela1 < Parcela2)
						Else If FirstCondition.Contains (" >= ") Then
							Dim Res1 As Boolean = (Parcela1 >= Parcela2)
						Else If FirstCondition.Contains (" > ") Then
							Dim Res1 As Boolean = (Parcela1 > Parcela2)
						Else If FirstCondition.Contains (" = ") Then
							Dim Res1 As Boolean = (Parcela1 = Parcela2)
						End If
						
						If SecondCondition.Contains (" <= ") Then
							Dim Res2 As Boolean = (Parcela3 <= Parcela4)
						Else If SecondCondition.Contains (" < ") Then
							Dim Res2 As Boolean = (Parcela3 < Parcela4)
						Else If SecondCondition.Contains (" >= ") Then
							Dim Res2 As Boolean = (Parcela3 >= Parcela4)
						Else If SecondCondition.Contains (" > ") Then
							Dim Res2 As Boolean = (Parcela3 > Parcela4)
						Else If SecondCondition.Contains (" = ") Then
							Dim Res2 As Boolean = (Parcela3 = Parcela4)
						End If
					End If
					
					Dim ResultadoTeste As Boolean = (Res1 = True And Res2 = True)
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						FormulaResult = Val2Return
						Exit
					End If
				
				else If TesteCondicao.Contains(" <= ") Then
					Dim Parcela1 As Double = calculate.Eval(ListaParcelas.Get(0))
					Dim Parcela2 As Double = ListaParcelas.Get(1)
					Dim ResultadoTeste As Boolean = (Parcela1 <= Parcela2)
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						FormulaResult = Val2Return
						Exit
					End If
				
				Else If TesteCondicao.Contains(" < ") Then
					Dim Parcela1 As Double = calculate.Eval(ListaParcelas.Get(0))
					Dim Parcela2 As Double = ListaParcelas.Get(1)
					Dim ResultadoTeste As Boolean = (Parcela1 < Parcela2)
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						FormulaResult = Val2Return
						Exit
					End If
				
				Else If TesteCondicao.Contains(" >= ") Then
					Dim Parcela1 As Double = calculate.Eval(ListaParcelas.Get(0))
					Dim Parcela2 As Double = ListaParcelas.Get(1)
					Dim ResultadoTeste As Boolean = (Parcela1 >= Parcela2)
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						FormulaResult = Val2Return
						Exit
					End If
				
				Else If TesteCondicao.Contains(" > ") Then
					Dim Parcela1 As Double = calculate.Eval(ListaParcelas.Get(0))
					Dim Parcela2 As Double = ListaParcelas.Get(1)
					Dim ResultadoTeste As Boolean = (Parcela1 > Parcela2)
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						FormulaResult = Val2Return
						Exit
					End If
					
				Else If TesteCondicao.Contains(" = ") Then
					Dim Parcela1 As Double = calculate.Eval(ListaParcelas.Get(0))
					Dim Parcela2 As Double = ListaParcelas.Get(1)
					Dim ResultadoTeste As Boolean = (Parcela1 = Parcela2)
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						FormulaResult = Val2Return
						Exit
					End If

				End If
			Next

			FormulaResult = Val2Return
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		FormulaResult = Parcela1 & " - " & FormulaResult
		
	else if Formula.ToUpperCase.StartsWith("__FNCEVALREL2ABSIDX") Then

		Try

			FormulaResult = FormulaResult.Replace("__FNCEVALREL2ABSIDX(","")
			If FormulaResult.EndsWith(")") Then
				FormulaResult = FormulaResult.SubString2(0,FormulaResult.Length-1)
			End If
			Dim ListaCondicoes As List = Regex.Split(";",FormulaResult)
			
			Dim Val2Return As String = ""
			
			For x = 0 To ListaCondicoes.Size -1
				
				Dim ElementoListaCondicoes As String = ListaCondicoes.Get(x)
				Dim ListaCondicao As List = Regex.Split("\|",ElementoListaCondicoes)
				Dim TesteCondicao As String = ListaCondicao.Get(0)
				'SO PARA TESTAR O OR
				TesteCondicao = TesteCondicao.Replace ("&","or")
				TesteCondicao = TesteCondicao.Replace("or", "#")
				TesteCondicao = TesteCondicao.Trim
				Dim ResultadoCondicao As String = ListaCondicao.Get(1)
				Dim Parcelas As String = TesteCondicao
				Dim Parcelas As String = Parcelas.Replace("<=", "|")
				Dim Parcelas As String = Parcelas.Replace("<", "|")
				Dim Parcelas As String = Parcelas.Replace(">=", "|")
				Dim Parcelas As String = Parcelas.Replace(">", "|")
				Dim Parcelas As String = Parcelas.Replace("=", "|")
				Dim Parcelas As String = Parcelas.Replace("&", "|")
				Dim Parcelas As String = Parcelas.Replace("#", "|")
				
				Dim ListaParcelas As List = Regex.Split("\|",Parcelas)
				
				If TesteCondicao.Contains("&") Then
					
					Dim FirstCondition As String = ""
					Dim SecondCondition As String = ""
					
					Dim AndPosition As Int = TesteCondicao.IndexOf("&")
					If AndPosition <> -1 Then
						FirstCondition  = TesteCondicao.SubString2(0,AndPosition).trim
						SecondCondition = TesteCondicao.SubString2(AndPosition+1,TesteCondicao.Length).Trim
						
						If FirstCondition.Contains("<") And Not(FirstCondition.Contains("=")) Then
							Dim OperPos As Int = FirstCondition.IndexOf("<")
							Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
							Dim Res1 As Boolean = (Pc1 < Pc2)
						Else If FirstCondition.Contains(">") And Not(FirstCondition.Contains("=")) Then
							Dim OperPos As Int = FirstCondition.IndexOf(">")
							Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
							Dim Res1 As Boolean = (Pc1 > Pc2)
						Else If FirstCondition.Contains("=") Then
							Dim OperPos As Int = FirstCondition.IndexOf("=")
							Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
							Dim Res1 As Boolean = (Pc1 = Pc2)
						Else If FirstCondition.Contains("<>") Then
							Dim OperPos As Int = FirstCondition.IndexOf("<>")
							Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
							Dim Res1 As Boolean = (Pc1 = Pc2)
						Else If FirstCondition.Contains("<=") Then
							Dim OperPos As Int = FirstCondition.IndexOf("<=")
							Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
							Dim Res1 As Boolean = (Pc1 <= Pc2)
						Else If FirstCondition.Contains(">=") Then
							Dim OperPos As Int = FirstCondition.IndexOf(">=")
							Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
							Dim Res1 As Boolean = (Pc1 >= Pc2)
						End If
						
						If SecondCondition.Contains("<") And Not(SecondCondition.Contains("=")) Then
							Dim OperPos As Int = SecondCondition.IndexOf("<")
							Dim Pc1 As String = SecondCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = SecondCondition.SubString2(OperPos+1,SecondCondition.Length).Trim
							Dim Res2 As Boolean = (Pc1 < Pc2)
						Else If SecondCondition.Contains(">") And Not(SecondCondition.Contains("=")) Then
							Dim OperPos As Int = SecondCondition.IndexOf(">")
							Dim Pc1 As String = SecondCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = SecondCondition.SubString2(OperPos+1,SecondCondition.Length).Trim
							Dim Res2 As Boolean = (Pc1 > Pc2)
						Else If SecondCondition.Contains("=") Then
							Dim OperPos As Int = SecondCondition.IndexOf("=")
							Dim Pc1 As String = SecondCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = SecondCondition.SubString2(OperPos+1,SecondCondition.Length).Trim
							Dim Res2 As Boolean = (Pc1 = Pc2)
						Else If SecondCondition.Contains("<>") Then
							Dim OperPos As Int = SecondCondition.IndexOf("<>")
							Dim Pc1 As String = SecondCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = SecondCondition.SubString2(OperPos+1,SecondCondition.Length).Trim
							Dim Res2 As Boolean = (Pc1 = Pc2)
						Else If SecondCondition.Contains("<=") Then
							Dim OperPos As Int = SecondCondition.IndexOf("<=")
							Dim Pc1 As String = SecondCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = SecondCondition.SubString2(OperPos+1,SecondCondition.Length).Trim
							Dim Res2 As Boolean = (Pc1 <= Pc2)
						Else If SecondCondition.Contains(">=") Then
							Dim OperPos As Int = SecondCondition.IndexOf(">=")
							Dim Pc1 As String = SecondCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = SecondCondition.SubString2(OperPos+1,SecondCondition.Length).Trim
							Dim Res2 As Boolean = (Pc1 >= Pc2)
						End If
											
					End If
						
					Dim ResultadoTeste As Boolean = (Res1 = True And Res2 = True)
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						Return Val2Return
					Else
						Val2Return = "0"
					End If
	
				else if TesteCondicao.ToLowerCase.Contains("#") Then
					
					Dim OrPosition As Int = TesteCondicao.IndexOf("#")
					
					If OrPosition <> -1 Then
						FirstCondition  = TesteCondicao.SubString2(0,OrPosition).trim
						SecondCondition = TesteCondicao.SubString2(OrPosition+1,TesteCondicao.Length).Trim
						
						If FirstCondition.Contains("<") And Not(FirstCondition.Contains("=")) Then
							Dim OperPos As Int = FirstCondition.IndexOf("<")
							Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
							Dim Res1 As Boolean = (Pc1 < Pc2)
						Else If FirstCondition.Contains(">") And Not(FirstCondition.Contains("=")) Then
							Dim OperPos As Int = FirstCondition.IndexOf(">")
							Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
							Dim Res1 As Boolean = (Pc1 > Pc2)
						Else If FirstCondition.Contains("=") Then
							Dim OperPos As Int = FirstCondition.IndexOf("=")
							Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
							Dim Res1 As Boolean = (Pc1 = Pc2)
						Else If FirstCondition.Contains("<>") Then
							Dim OperPos As Int = FirstCondition.IndexOf("<>")
							Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
							Dim Res1 As Boolean = (Pc1 = Pc2)
						Else If FirstCondition.Contains("<=") Then
							Dim OperPos As Int = FirstCondition.IndexOf("<=")
							Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
							Dim Res1 As Boolean = (Pc1 <= Pc2)
						Else If FirstCondition.Contains(">=") Then
							Dim OperPos As Int = FirstCondition.IndexOf(">=")
							Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
							Dim Res1 As Boolean = (Pc1 >= Pc2)
						End If
						
						If SecondCondition.Contains("<") And Not(SecondCondition.Contains("=")) Then
							Dim OperPos As Int = SecondCondition.IndexOf("<")
							Dim Pc1 As String = SecondCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = SecondCondition.SubString2(OperPos+1,SecondCondition.Length).Trim
							Dim Res2 As Boolean = (Pc1 < Pc2)
						Else If SecondCondition.Contains(">") And Not(SecondCondition.Contains("=")) Then
							Dim OperPos As Int = SecondCondition.IndexOf(">")
							Dim Pc1 As String = SecondCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = SecondCondition.SubString2(OperPos+1,SecondCondition.Length).Trim
							Dim Res2 As Boolean = (Pc1 > Pc2)
						Else If SecondCondition.Contains("=") Then
							Dim OperPos As Int = SecondCondition.IndexOf("=")
							Dim Pc1 As String = SecondCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = SecondCondition.SubString2(OperPos+1,SecondCondition.Length).Trim
							Dim Res2 As Boolean = (Pc1 = Pc2)
						Else If SecondCondition.Contains("<>") Then
							Dim OperPos As Int = SecondCondition.IndexOf("<>")
							Dim Pc1 As String = SecondCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = SecondCondition.SubString2(OperPos+1,SecondCondition.Length).Trim
							Dim Res2 As Boolean = (Pc1 = Pc2)
						Else If SecondCondition.Contains("<=") Then
							Dim OperPos As Int = SecondCondition.IndexOf("<=")
							Dim Pc1 As String = SecondCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = SecondCondition.SubString2(OperPos+1,SecondCondition.Length).Trim
							Dim Res2 As Boolean = (Pc1 <= Pc2)
						Else If SecondCondition.Contains(">=") Then
							Dim OperPos As Int = SecondCondition.IndexOf(">=")
							Dim Pc1 As String = SecondCondition.SubString2(0,OperPos).trim
							Dim Pc2 As String = SecondCondition.SubString2(OperPos+1,SecondCondition.Length).Trim
							Dim Res2 As Boolean = (Pc1 >= Pc2)
						End If
											
					End If
					
					Dim ResultadoTeste As Boolean = (Res1 = True Or Res2 = True)
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						Return Val2Return
					Else
						Val2Return = "0"
					End If
					
				Else
						
					FirstCondition  = TesteCondicao
											
					If FirstCondition.Contains("<") And Not(FirstCondition.Contains("=")) Then
						Dim OperPos As Int = FirstCondition.IndexOf("<")
						Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
						Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
						Dim Res1 As Boolean = (Pc1 < Pc2)
					Else If FirstCondition.Contains(">") And Not(FirstCondition.Contains("=")) Then
						Dim OperPos As Int = FirstCondition.IndexOf(">")
						Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
						Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
						Dim Res1 As Boolean = (Pc1 > Pc2)
					Else If FirstCondition.Contains("=") Then
						Dim OperPos As Int = FirstCondition.IndexOf("=")
						Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
						Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
						Dim Res1 As Boolean = (Pc1 = Pc2)
					Else If FirstCondition.Contains("<>") Then
						Dim OperPos As Int = FirstCondition.IndexOf("<>")
						Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
						Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
						Dim Res1 As Boolean = (Pc1 = Pc2)
					Else If FirstCondition.Contains("<=") Then
						Dim OperPos As Int = FirstCondition.IndexOf("<=")
						Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
						Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
						Dim Res1 As Boolean = (Pc1 <= Pc2)
					Else If FirstCondition.Contains(">=") Then
						Dim OperPos As Int = FirstCondition.IndexOf(">=")
						Dim Pc1 As String = FirstCondition.SubString2(0,OperPos).trim
						Dim Pc2 As String = FirstCondition.SubString2(OperPos+1,FirstCondition.Length).Trim
						Dim Res1 As Boolean = (Pc1 >= Pc2)
					End If
					
					Dim ResultadoTeste As Boolean = Res1
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						Return Val2Return
					Else
						Val2Return = "0"
					End If
					
				End If
			Next
		
			FormulaResult = Val2Return
		Catch
		
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try

	else if Formula.ToUpperCase.StartsWith("__FNCCALCHOURS") Then
				
		Try
			Dim OldDF As String = DateTime.DateFormat
			Dim OldTF As String = DateTime.TimeFormat
			
			DateTime.DateFormat = "yyyy-MM-dd"
			DateTime.TimeFormat  = "HH:mm:ss"
			Dim Val2Return As String = ""
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Hours2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Dim LstHours As List = Regex.Split(";",Hours2process)
			
			If LstHours.Size = 2 Then
				Dim H1 As String = LstHours.Get(0)
				Dim H2 As String = LstHours.Get(1)
				If H1.Length = 5 Then H1 = $"${H1}:00"$
				If H2.Length = 5 Then H2 = $"${H2}:00"$
				
'				H1 = $"${Utils.GetCurrentDate} ${H1}"$
'				H2 = $"${Utils.GetCurrentDate} ${H2}"$
				
				Dim Hour1 As Long = DateTime.TimeParse(H1)
				Dim Hour2 As Long = DateTime.TimeParse(H2)
				
				Dim DiffHours As Period
				DiffHours.Initialize
				
				DiffHours = DateUtils.PeriodBetweenInDays(Hour1, Hour2)
				Dim Horas As String = DiffHours.Hours
				Dim Minutos As String = DiffHours.Minutes
				Horas = Horas.Replace("-","")
				Minutos = Minutos.Replace("-","")
				Horas = NumberFormat(Horas,2,0)
				Minutos = NumberFormat(Minutos,2,0)
				
				Val2Return = $"${Horas}:${Minutos}"$
			
				FormulaResult = Val2Return
			End If
		Catch
			Val2Return = "0:00"
			FormulaResult = Val2Return
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
	else if Formula.ToUpperCase.StartsWith("__FNCCALCTIMESTAMPS") Then
				
		Try
			Dim OldDF As String = DateTime.DateFormat
			Dim OldTF As String = DateTime.TimeFormat
			
			DateTime.DateFormat = "yyyy-MM-dd"
			DateTime.TimeFormat  = "HH:mm:ss"
			Dim Val2Return As String = ""
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim TimeStamp2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Dim LstTimeStamp As List = Regex.Split(";", TimeStamp2process)
			
			If LstTimeStamp.Size = 2 Then
				
				Dim TS1 As String = LstTimeStamp.Get(0)
				Dim TS2 As String = LstTimeStamp.Get(1)
				
				Dim D1 As String = TS1.SubString2(0,10)
				Dim H1 As String = TS1.SubString2(11,TS1.Length)
				
				Dim D2 As String = TS2.SubString2(0,10)
				Dim H2 As String = TS2.SubString2(11,TS2.Length)
				
				Dim DateTime1 As Long = DateTime.DateTimeParse(D1,H1)
				Dim DateTime2 As Long = DateTime.DateTimeParse(D2,H2)
				
				
				Dim DiffHours As Period
				DiffHours.Initialize
				
				DiffHours = DateUtils.PeriodBetweenInDays(DateTime1, DateTime2)
				Dim Horas As String = DiffHours.Hours
				Dim Minutos As String = DiffHours.Minutes
				Horas = Horas.Replace("-","")
				Minutos = Minutos.Replace("-","")
				Horas = NumberFormat(Horas,2,0)
				Minutos = NumberFormat(Minutos,2,0)
				
				Val2Return = $"${Horas}:${Minutos}"$
			
				FormulaResult = Val2Return
			End If
		Catch
			Val2Return = "0:00"
			FormulaResult = Val2Return
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
	else if Formula.ToUpperCase.StartsWith("__FNCCALCTIMESTAMPS2") Then
				
		Try
			Dim OldDF As String = DateTime.DateFormat
			Dim OldTF As String = DateTime.TimeFormat
			
			DateTime.DateFormat = "yyyy-MM-dd"
			DateTime.TimeFormat  = "HH:mm:ss"
			Dim Val2Return As String = ""
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim TimeStamp2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Dim LstTimeStamp As List = Regex.Split(";", TimeStamp2process)
			
			If LstTimeStamp.Size = 4 Then
				
				Dim DT1 As String = LstTimeStamp.Get(0)
				Dim TM1 As String = LstTimeStamp.Get(1)
				
				Dim DT2 As String = LstTimeStamp.Get(2)
				Dim TM2 As String = LstTimeStamp.Get(3)
				
				Dim DateTime1 As Long = DateTime.DateTimeParse(DT1,TM1)
				Dim DateTime2 As Long = DateTime.DateTimeParse(DT2,TM2)
				
				
				Dim DiffHours As Period
				DiffHours.Initialize
				
				DiffHours = DateUtils.PeriodBetweenInDays(DateTime1, DateTime2)
				Dim Horas As String = DiffHours.Hours
				Dim Minutos As String = DiffHours.Minutes
				Horas = Horas.Replace("-","")
				Minutos = Minutos.Replace("-","")
				Horas = NumberFormat(Horas,2,0)
				Minutos = NumberFormat(Minutos,2,0)
				
				Val2Return = $"${Horas}:${Minutos}"$
			
				FormulaResult = Val2Return
			End If
		Catch
			Val2Return = "0:00"
			FormulaResult = Val2Return
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
	else if Formula.ToUpperCase.StartsWith("__FNCEVALTRUE") Then
		'vai haver novo parametro de tolerancia
		
		Dim OldDtFmt As String = DateTime.DateFormat
		Dim OldTmFtm As String = DateTime.TimeFormat
		DateTime.DateFormat = "dd/MM/yyyy"
		DateTime.TimeFormat = "HH:mm:ss"
		
		Try
			Dim ResExpression As Boolean = False
			Formula = Formula.Replace("__FNCEVALTRUE(","")
			Formula = Formula.SubString2(0,Formula.Length - 1)
			Formula = Formula.Replace(";=;","|=|")
			Formula = Formula.Replace(";<;","|<|")
			Formula = Formula.Replace(";<=;","|<=|")
			Formula = Formula.Replace(";>;","|>|")
			Formula = Formula.Replace(";>=;","|>=|")
			Formula = Formula.Replace(";<>;","|<>|")
			Formula = Formula.Replace(";T:","|") ' Tolerancia, se existir
			Formula = Formula.Replace(";t:","|") ' Tolerancia, se existir
			
'			Dim PStart As Int = FormulaResult.IndexOf("(")
'			Dim PEnd As Int = FormulaResult.IndexOf(")")
'			Dim expression2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Dim expression_parametes As List = Regex.Split("\|",Formula)
			
			Dim sParcel1 As String = expression_parametes.Get(0)
			Dim sParcel2 As String = expression_parametes.Get(2)
			Dim Parcel1 As Long = 0
			Dim Parcel2 As Long = 0
			Dim DateParcel As String = DateTime.Date(DateTime.Now)
			
			Try
				Dim Tolerance As String = expression_parametes.Get(3)
				Dim HasTolerance As Boolean = True
			Catch
				Dim HasTolerance As Boolean = False
			End Try
			
			If sParcel1.StartsWith("__FNCCALCHOURS") Then
				
				Dim fncFormula1 As ResumableSub = FNCFormulasRecursive(request_tagcode, task_tagcode, _
								item_tagcode,  repeatcounter,repeatitemcounter, repeatfieldcounter, sParcel1, thisText)
				Wait For(fncFormula1) Complete (FormulaResultFnc1 As String)
				sParcel1 = FormulaResultFnc1
				Dim sepPos As Int = sParcel1.IndexOf(":")
				Dim Horas As String = sParcel1.SubString2(0,sepPos)
				If Horas.Length  = 1 Then Horas = $"0${Horas}"$
				Dim Minutos As String = sParcel1.SubString2(sepPos+1,sParcel1.Length)
				If Minutos.Length = 1 Then
					Minutos = $"0${Minutos}"$
				End If
				sParcel1 =  $"${Horas}:${Minutos}:00"$
				Parcel1 = DateTime.TimeParse(sParcel1)
			Else
				Parcel1 = sParcel1
			End If
			
			If sParcel2.StartsWith("__FNCCALCHOURS") Then
				Dim fncFormula2 As ResumableSub = FNCFormulasRecursive(request_tagcode, task_tagcode, _
								item_tagcode,  repeatcounter,repeatitemcounter, repeatfieldcounter, sParcel2, thisText)
				Wait For(fncFormula2) Complete (FormulaResultFnc2 As String)
				sParcel2 = FormulaResultFnc2
				Dim sepPos As Int = sParcel2.IndexOf(":")
				Dim Horas As String = sParcel2.SubString2(0,sepPos)
				If Horas.Length  = 1 Then Horas = $"0${Horas}"$
				Dim Minutos As String = sParcel2.SubString2(sepPos+1,sParcel2.Length)
				If Minutos.Length = 1 Then
					Minutos = $"0${Minutos}"$
				End If
								
				sParcel2 = $"${Horas}:${Minutos}:00"$
				Parcel2 = DateTime.TimeParse(sParcel2)
			Else
				Parcel2 = sParcel2
			End If
			
			If expression_parametes.Get(1) = "<" Then
				
				If HasTolerance Then
					Dim p As Period
					p.Minutes = Tolerance
					Dim newtime As Long = DateUtils.AddPeriod(Parcel1, p)
					Parcel1 = newtime
				End If
				Log($"Entrada : ${DateTime.Time(Parcel1)} Saida : ${DateTime.Time(Parcel2)}"$)
				ResExpression  = ( Parcel1 < Parcel2)
				
			Else If expression_parametes.Get(1) = "<=" Then
				
				If HasTolerance Then
					Dim p As Period
					p.Minutes = Tolerance
					Dim newtime As Long = DateUtils.AddPeriod(Parcel1, p)
					Parcel1 = newtime
				End If
				Log($"Entrada : ${DateTime.Time(Parcel1)} Saida : ${DateTime.Time(Parcel2)}"$)
				ResExpression  = ( Parcel1 <= Parcel2)
				
			Else If expression_parametes.Get(1) = ">" Then
				
				If HasTolerance Then
					Dim p As Period
					p.Minutes = Tolerance
					Dim newtime As Long = DateUtils.AddPeriod(Parcel2, p)
					Parcel2 = newtime
				End If
				Log($"Entrada : ${DateTime.Time(Parcel1)} Saida : ${DateTime.Time(Parcel2)}"$)
				ResExpression  = ( Parcel1 > Parcel2)
				
			Else If expression_parametes.Get(1) = ">=" Then
				
				If HasTolerance Then
					Dim p As Period
					p.Minutes = Tolerance
					Dim newtime As Long = DateUtils.AddPeriod(Parcel2, p)
					Parcel2 = newtime
				End If
				Log($"Entrada : ${DateTime.Time(Parcel1)} Saida : ${DateTime.Time(Parcel2)}"$)
				ResExpression  = ( Parcel1 >= Parcel2)
				
			Else If expression_parametes.Get(1) = "=" Then
				ResExpression = ( Parcel1 = Parcel2)
			Else If expression_parametes.Get(1) = "<>" Then
				ResExpression  = ( Parcel1 <> Parcel2)
			End If
			
			If ResExpression = True Then
				FormulaResult = "1"
			Else
				FormulaResult = "0"
			End If
			
			DateTime.DateFormat = OldDtFmt
			DateTime.TimeFormat = OldTmFtm
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		
	Else If Formula.ToUpperCase.StartsWith("__FNCVIEWCHGONCONDITION") Then
		Dim ResExpression As Boolean = False
		Dim PStart As Int = FormulaResult.IndexOf("(")
		Dim PEnd As Int = FormulaResult.IndexOf(")")
		Dim expression2process As String = FormulaResult.SubString2(PStart+1, PEnd)
		Dim expression_parametes As List = Regex.Split(";",expression2process)
		Dim Condition2change As String = expression_parametes.Get(0)
		Dim TagcodesList As List = Regex.Split(";",expression_parametes.Get(1))
		Dim parameter2change As String = expression_parametes.Get(2)
		
		Dim resCalc As Boolean = Condition2change
		
		If resCalc Then
		
			If parameter2change.ToUpperCase = "ENABLED" Then
				Dim Param2set As String = "ENABLE"
				Dim ParamStrVal As String = "TRUE"
				Dim ParamIntVal As Int = 1
			else if parameter2change.ToUpperCase = "DISABLED" Then
				Dim Param2set As String = "ENABLE"
				Dim ParamStrVal As String = "FALSE"
				Dim ParamIntVal As Int = 0
			else if parameter2change.ToUpperCase.StartsWith("COLOR") Then
				Dim Param2set As String = "COLOR"
				Dim ParamStrVal As String = ""
				Dim ColorName As String = parameter2change.ToUpperCase.Replace("COLOR","")
			
				If ColorName.ToUpperCase = "BLACK" Then
					Dim ParamIntVal As Int = Colors.Black
				else If ColorName.ToUpperCase = "BLUE" Then
					Dim ParamIntVal As Int = Colors.Blue
				else If ColorName.ToUpperCase = "RED" Then
					Dim ParamIntVal As Int = Colors.Red
				else If ColorName.ToUpperCase = "GREEN" Then
					Dim ParamIntVal As Int = Colors.Green
				else If ColorName.ToUpperCase = "WHITE" Then
					Dim ParamIntVal As Int = Colors.White
				else If ColorName.ToUpperCase = "YELLOW" Then
					Dim ParamIntVal As Int = Colors.Yellow
				End If
			
			End If
		
			If TagcodesList.Size > 0 Then
				For i = 0 To TagcodesList
					Dim ITC As String = TagcodesList.Get(i)
					Dim Chg As ResumableSub = ChangeComponent(ITC, Param2set, ParamStrVal, ParamIntVal)
					wait for (Chg) Complete (Finished As Boolean)
				Next
			End If
		
		End If
	End If
	
	Return FormulaResult
	
End Sub
	
Sub FNCFormulasRecursive(request_tagcode As String, task_tagcode As String, item_tagcode As String,  _
	repeatcounter As Int, repeatitemcounter As Int, repeatfieldcounter As Int, Formula As String, thisText As String) As ResumableSub
	
	Dim FormulaResult As String = Formula
	
	If Formula.ToUpperCase.Contains("__FNCCALCAGE") Then
		
		Try
			Dim OldDTF As String = DateTime.DateFormat
			DateTime.DateFormat  = "dd-MM-yyyy"
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Var2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			DateTime.DateFormat = OldDTF
			Var2process = Var2process.Replace("/","-")
			Dim TstSep As String = Var2process.SubString2(2,3)
			If TstSep = "-" Then
				Dim YearRef As String = Var2process.SubString2(6,10)
			Else
				Dim YearRef As String = Var2process.SubString2(0,4)
			End If
			
			Dim YearNow As String = DateTime.GetYear(DateTime.Now)
			
			FormulaResult = FormulaResult.Replace($"__FNCCALCAGE(${Var2process})"$, Abs(YearNow - YearRef))
			Log("FormulaResult : " & FormulaResult)
		Catch
		
		End Try
		
	else If Formula.ToUpperCase.Contains("__FNCCALCAGEBETWEEN") Then
		
		' ESTA ERRADO, TEM DE SER ALTERADO, E SO PAR AAO DAR ERRO AGORA
		Dim getResultValor As String = Utils.GetCurrentDate
		
		Try
			Dim OldDTF As String = DateTime.DateFormat
			DateTime.DateFormat  = "dd-MM-yyyy"
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Var2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Var2process = Var2process.Replace("/","-")
			Dim TstSep As String = Var2process.SubString2(2,3)
			If TstSep = "-" Then
				Dim YearRef As String = Var2process.SubString2(6,10)
			Else
				Dim YearRef As String = Var2process.SubString2(0,4)
			End If
			Dim YearNow As String = DateTime.GetYear(DateTime.DateParse(getResultValor))
			
			Dim ResultOperInt As Int = Abs(YearNow - YearRef)
			FormulaResult = FormulaResult.Replace($"_FNCCALCAGEBETWEEN(${Var2process})"$, ResultOperInt)
			DateTime.DateFormat = OldDTF
		Catch
		
		End Try
		
		
	else If Formula.ToUpperCase.Contains("__FNCYEAR") Then
		
		Try
			Dim OldDTF As String = DateTime.DateFormat
			DateTime.DateFormat  = "dd-MM-yyyy"
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Var2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Var2process = Var2process.Replace("/","-")
			Dim TstSep As String = Var2process.SubString2(2,3)
			If TstSep = "-" Then
				Dim ResultOperStr As String = Var2process.SubString2(6,10)
			Else
				Dim ResultOperStr As String = Var2process.SubString2(0,4)
			End If
		
			FormulaResult = FormulaResult.Replace($"__FNCYEAR(${Var2process})"$, ResultOperStr)
			DateTime.DateFormat = OldDTF
		Catch
		
		End Try

	else If Formula.ToUpperCase.Contains("__FNCMONTH") Then
		
		Try
			Dim OldDTF As String = DateTime.DateFormat
			DateTime.DateFormat  = "dd-MM-yyyy"
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Var2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Var2process = Var2process.Replace("/","-")
			Dim TstSep As String = Var2process.SubString2(2,3)
			If TstSep = "-" Then
				Dim ResultOperStr As String = Var2process.SubString2(6,10)
			Else
				Dim ResultOperStr As String = Var2process.SubString2(0,4)
			End If
			
			FormulaResult = FormulaResult.Replace($"__FNCMONTH(${Var2process})"$, ResultOperStr)
			DateTime.DateFormat = OldDTF
		Catch
		
		End Try
		
	else If Formula.ToUpperCase.Contains("__FNCDAY") Then
		
		Try
			Dim OldDTF As String = DateTime.DateFormat
			DateTime.DateFormat  = "dd-MM-yyyy"
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Var2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Var2process = Var2process.Replace("/","-")
			Dim TstSep As String = Var2process.SubString2(2,3)
			If TstSep = "-" Then
				Dim ResultOperStr As String = Var2process.SubString2(6,10)
			Else
				Dim ResultOperStr As String = Var2process.SubString2(0,4)
			End If
			
			FormulaResult = FormulaResult.Replace($"__FNCDAY(${Var2process})"$, ResultOperStr)
			DateTime.DateFormat = OldDTF
		Catch
		
		End Try
		
	else If Formula.ToUpperCase.Contains("__FNCWEEK") Then
		
		Try
			Dim OldDTF As String = DateTime.DateFormat
			DateTime.DateFormat  = "dd-MM-yyyy"
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Var2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Var2process = Var2process.Replace("/","-")
			Dim Date2ticks As Long = DateTime.DateParse(Var2process)
			Dim offset As Int = DateTime.GetDayOfWeek(DateUtils.SetDate( DateTime.GetYear(Date2ticks), 1, 1))
			Dim ResultOperInt As Int = Floor((DateTime.GetDayOfYear(Date2ticks) + offset) / 7) + 1
						
			FormulaResult = FormulaResult.Replace($"__FNCWEEK(${Var2process})"$, ResultOperInt)
			DateTime.DateFormat = OldDTF
		Catch
		
		End Try
		
	else If Formula.ToUpperCase.Contains("__FNCDAYWEEK") Then
		
		Try
			Dim OldDTF As String = DateTime.DateFormat
			DateTime.DateFormat  = "dd-MM-yyyy"
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Var2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Var2process = Var2process.Replace("/","-")
			Dim ResultOperStr As String = DateTime.GetDayOfWeek(DateTime.DateParse(Var2process))
			If ResultOperStr.Trim = "1" Then
				ResultOperStr = "domingo"
			else If ResultOperStr.Trim = "2" Then
				ResultOperStr = "segunda-feira"
			else If ResultOperStr.Trim = "3" Then
				ResultOperStr = "terça-feira"
			else If ResultOperStr.Trim = "4" Then
				ResultOperStr = "quarta-feira"
			else If ResultOperStr.Trim = "5" Then
				ResultOperStr = "quinta-feira"
			else If ResultOperStr.Trim = "6" Then
				ResultOperStr = "sexta-feira"
			else If ResultOperStr.Trim = "7" Then
				ResultOperStr = "sábado"
			End If
			FormulaResult = FormulaResult.Replace($"__FNCDAYWEEK(${Var2process})"$, ResultOperStr)
			DateTime.DateFormat = OldDTF
		Catch
		
		End Try
		
	else if Formula.ToUpperCase.Contains("__FNCEVALGEL2ABSEXT") Then

		Try
			FormulaResult = FormulaResult.Replace("__FNCEVALGEL2ABSEXT(","")
			If FormulaResult.EndsWith(")") Then
				FormulaResult = FormulaResult.SubString2(0,FormulaResult.Length-1)
			End If
			Dim ListaCondicoes As List = Regex.Split(";",FormulaResult)
			
			Dim Val2Return As String = ""
			
			For x = 0 To ListaCondicoes.Size -1
				Dim ElementoListaCondicoes As String = ListaCondicoes.Get(x)
				Dim ListaCondicao As List = Regex.Split("\|",ElementoListaCondicoes)
				Dim TesteCondicao As String = ListaCondicao.Get(0)
				Dim ResultadoCondicao As String = ListaCondicao.Get(1)
				Dim Parcelas As String = TesteCondicao
				Dim Parcelas As String = Parcelas.Replace(" <= ", "|")
				Dim Parcelas As String = Parcelas.Replace(" < ", "|")
				Dim Parcelas As String = Parcelas.Replace(" >= ", "|")
				Dim Parcelas As String = Parcelas.Replace(" > ", "|")
				Dim Parcelas As String = Parcelas.Replace(" = ", "|")
				Dim Parcelas As String = Parcelas.Replace(" & ", "|")
				
				Dim ListaParcelas As List = Regex.Split("\|",Parcelas)
								
				If TesteCondicao.Contains(" & ") Then
					
					Dim Parcela1 As Double = calculate.Eval(ListaParcelas.Get(0))
					Dim Parcela2 As Double = ListaParcelas.Get(1)
					Dim Parcela3 As Double = calculate.Eval(ListaParcelas.Get(2))
					Dim Parcela4 As Double = ListaParcelas.Get(3)
					
					Dim AndPosition As Int = TesteCondicao.IndexOf("&")
					If AndPosition <> -1 Then
						Dim FirstCondition As String = TesteCondicao.SubString2(0,AndPosition).trim
						Dim SecondCondition As String = TesteCondicao.SubString2(AndPosition+1,TesteCondicao.Length).Trim
						If FirstCondition.Contains (" <= ") Then
							Dim Res1 As Boolean = (Parcela1 <= Parcela2)
						Else If FirstCondition.Contains (" < ") Then
							Dim Res1 As Boolean = (Parcela1 < Parcela2)
						Else If FirstCondition.Contains (" >= ") Then
							Dim Res1 As Boolean = (Parcela1 >= Parcela2)
						Else If FirstCondition.Contains (" > ") Then
							Dim Res1 As Boolean = (Parcela1 > Parcela2)
						Else If FirstCondition.Contains (" = ") Then
							Dim Res1 As Boolean = (Parcela1 = Parcela2)
						End If
						
						If SecondCondition.Contains (" <= ") Then
							Dim Res2 As Boolean = (Parcela3 <= Parcela4)
						Else If SecondCondition.Contains (" < ") Then
							Dim Res2 As Boolean = (Parcela3 < Parcela4)
						Else If SecondCondition.Contains (" >= ") Then
							Dim Res2 As Boolean = (Parcela3 >= Parcela4)
						Else If SecondCondition.Contains (" > ") Then
							Dim Res2 As Boolean = (Parcela3 > Parcela4)
						Else If SecondCondition.Contains (" = ") Then
							Dim Res2 As Boolean = (Parcela3 = Parcela4)
						End If
					End If
					
					Dim ResultadoTeste As Boolean = (Res1 = True And Res2 = True)
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						FormulaResult = Val2Return
						Exit
					End If
				
				else If TesteCondicao.Contains(" <= ") Then
					Dim Parcela1 As Double = calculate.Eval(ListaParcelas.Get(0))
					Dim Parcela2 As Double = ListaParcelas.Get(1)
					Dim ResultadoTeste As Boolean = (Parcela1 <= Parcela2)
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						FormulaResult = Val2Return
						Exit
					End If
				
				Else If TesteCondicao.Contains(" < ") Then
					Dim Parcela1 As Double = calculate.Eval(ListaParcelas.Get(0))
					Dim Parcela2 As Double = ListaParcelas.Get(1)
					Dim ResultadoTeste As Boolean = (Parcela1 < Parcela2)
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						FormulaResult = Val2Return
						Exit
					End If
				
				Else If TesteCondicao.Contains(" >= ") Then
					Dim Parcela1 As Double = calculate.Eval(ListaParcelas.Get(0))
					Dim Parcela2 As Double = ListaParcelas.Get(1)
					Dim ResultadoTeste As Boolean = (Parcela1 >= Parcela2)
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						FormulaResult = Val2Return
						Exit
					End If
				
				Else If TesteCondicao.Contains(" > ") Then
					Dim Parcela1 As Double = calculate.Eval(ListaParcelas.Get(0))
					Dim Parcela2 As Double = ListaParcelas.Get(1)
					Dim ResultadoTeste As Boolean = (Parcela1 > Parcela2)
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						FormulaResult = Val2Return
						Exit
					End If
					
				Else If TesteCondicao.Contains(" = ") Then
					Dim Parcela1 As Double = calculate.Eval(ListaParcelas.Get(0))
					Dim Parcela2 As Double = ListaParcelas.Get(1)
					Dim ResultadoTeste As Boolean = (Parcela1 = Parcela2)
					
					If ResultadoTeste Then
						Val2Return = ResultadoCondicao
						FormulaResult = Val2Return
						Exit
					End If

				End If
			Next

			FormulaResult = Val2Return
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		FormulaResult = Parcela1 & " - " & FormulaResult
	else if Formula.ToUpperCase.Contains("__FNCCALCHOURS") Then
				
		Try
			Dim OldDF As String = DateTime.DateFormat
			Dim OldTF As String = DateTime.TimeFormat
			
			DateTime.DateFormat = "yyyy-MM-dd"
			DateTime.TimeFormat  = "HH:mm:ss"
			Dim Val2Return As String = ""
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim Hours2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Dim LstHours As List = Regex.Split(";",Hours2process)
			
			If LstHours.Size = 2 Then
				Dim H1 As String = LstHours.Get(0)
				Dim H2 As String = LstHours.Get(1)
				If H1.Length = 5 Then H1 = $"${H1}:00"$
				If H2.Length = 5 Then H2 = $"${H2}:00"$
				
'				H1 = $"${Utils.GetCurrentDate} ${H1}"$
'				H2 = $"${Utils.GetCurrentDate} ${H2}"$
				
				Dim Hour1 As Long = DateTime.TimeParse(H1)
				Dim Hour2 As Long = DateTime.TimeParse(H2)
				
				Dim DiffHours As Period
				DiffHours.Initialize
				
				DiffHours = DateUtils.PeriodBetweenInDays(Hour1, Hour2)
				Val2Return = $"${Abs(DiffHours.Hours)}:${Abs(DiffHours.Minutes)}"$
				FormulaResult = Val2Return
			End If
		Catch
			Val2Return = "0:00"
			FormulaResult = Val2Return
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
	else if Formula.ToUpperCase.Contains("__FNCEVALTRUE") Then
		Try
			Dim ResExpression As Boolean = False
			Dim PStart As Int = FormulaResult.IndexOf("(")
			Dim PEnd As Int = FormulaResult.IndexOf(")")
			Dim expression2process As String = FormulaResult.SubString2(PStart+1, PEnd)
			Dim expression_parametes As List = Regex.Split(";",expression2process)
			
			Dim Parcel1 As String = expression_parametes.Get(0)
			Dim Parcel2 As String = expression_parametes.Get(2)
			Dim EvalParcel As Boolean = True
			Try
				If Parcel1.Contains(":") Then Parcel1 = DateTime.TimeParse(Parcel1)
				If Parcel2.Contains(":") Then Parcel2 = DateTime.TimeParse(Parcel2)
			Catch
				EvalParcel = False
			End Try
			
			If (EvalParcel) Then
					
				If expression_parametes.Get(1) = "<" Then
					ResExpression  = ( Parcel1 < Parcel2)
				Else If expression_parametes.Get(1) = "<=" Then
					ResExpression  = ( Parcel1 <= Parcel2)
				Else If expression_parametes.Get(1) = ">" Then
					ResExpression  = ( Parcel1 > Parcel2)
				Else If expression_parametes.Get(1) = ">=" Then
					ResExpression  = ( Parcel1 >= Parcel2)
				Else If expression_parametes.Get(1) = "=" Then
					ResExpression = ( Parcel1 = Parcel2)
				Else If expression_parametes.Get(1) = "<>" Then
					ResExpression  = ( Parcel1 <> Parcel2)
				End If
				
				If ResExpression = True Then
					FormulaResult = "1"
				Else
					FormulaResult = "0"
				End If
			End If
			
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		
	Else If Formula.ToUpperCase.Contains("__FNCVIEWCHGONCONDITION") Then
		Dim ResExpression As Boolean = False
		Dim PStart As Int = FormulaResult.IndexOf("(")
		Dim PEnd As Int = FormulaResult.IndexOf(")")
		Dim expression2process As String = FormulaResult.SubString2(PStart+1, PEnd)
		Dim expression_parametes As List = Regex.Split(";",expression2process)
		Dim Condition2change As String = expression_parametes.Get(0)
		Dim TagcodesList As List = Regex.Split(";",expression_parametes.Get(1))
		Dim parameter2change As String = expression_parametes.Get(2)
		
		Dim resCalc As Boolean = Condition2change
		
		If resCalc Then
		
			If parameter2change.ToUpperCase = "ENABLED" Then
				Dim Param2set As String = "ENABLE"
				Dim ParamStrVal As String = "TRUE"
				Dim ParamIntVal As Int = 1
			else if parameter2change.ToUpperCase = "DISABLED" Then
				Dim Param2set As String = "ENABLE"
				Dim ParamStrVal As String = "FALSE"
				Dim ParamIntVal As Int = 0
			else if parameter2change.ToUpperCase.StartsWith("COLOR") Then
				Dim Param2set As String = "COLOR"
				Dim ParamStrVal As String = ""
				Dim ColorName As String = parameter2change.ToUpperCase.Replace("COLOR","")
			
				If ColorName.ToUpperCase = "BLACK" Then
					Dim ParamIntVal As Int = Colors.Black
				else If ColorName.ToUpperCase = "BLUE" Then
					Dim ParamIntVal As Int = Colors.Blue
				else If ColorName.ToUpperCase = "RED" Then
					Dim ParamIntVal As Int = Colors.Red
				else If ColorName.ToUpperCase = "GREEN" Then
					Dim ParamIntVal As Int = Colors.Green
				else If ColorName.ToUpperCase = "WHITE" Then
					Dim ParamIntVal As Int = Colors.White
				else If ColorName.ToUpperCase = "YELLOW" Then
					Dim ParamIntVal As Int = Colors.Yellow
				End If
			
			End If
		
			If TagcodesList.Size > 0 Then
				For i = 0 To TagcodesList
					Dim ITC As String = TagcodesList.Get(i)
					Dim Chg As ResumableSub = ChangeComponent(ITC, Param2set, ParamStrVal, ParamIntVal)
					wait for (Chg) Complete (Finished As Boolean)
				Next
			End If
		
		End If
	End If
	
	Return FormulaResult
	
End Sub
	
Sub CalculaFormula(InStr As String) As Double
	Dim ret As Double = 0.00
	Dim Posis As Int = -1
	Dim sVal As String = ""
	If (InStr <> "") Then
		Posis = InStr.IndexOf("*")
		If (Posis >= 0) Then
			sVal = InStr.SubString2(Posis+1, InStr.Length)
			Log(sVal)
		End If
	End If
	
	Try
		sVal = InStr
		Dim ListaValues As List : ListaValues.Initialize
		Dim ListaChars As List : ListaChars.Initialize
		Dim Lista As List : Lista.Initialize
		If (InStr <> "") Then
			sVal = sVal.Replace("+", " ")
			sVal = sVal.Replace("-", " ")
			sVal = sVal.Replace("*", " ")
			sVal = sVal.Replace("/", " ")
			sVal = sVal.Replace("(", " ")
			sVal = sVal.Replace(")", " ")
			sVal = sVal.Replace(",", ".")
			Log(sVal)
			Lista = Regex.Split("\ ", sVal )
			For n = 0 To Lista.Size-1
				Dim ss As String = Lista.Get(n)
				If (ss.Trim <> "") Then
					ListaValues.add( ss.Trim )
				End If
			Next
		End If
		
		sVal = InStr
		Dim Lista2 As List : Lista2.Initialize
		If (InStr <> "") Then
			sVal = sVal.Replace("0", " ")
			sVal = sVal.Replace("1", " ")
			sVal = sVal.Replace("2", " ")
			sVal = sVal.Replace("3", " ")
			sVal = sVal.Replace("4", " ")
			sVal = sVal.Replace("5", " ")
			sVal = sVal.Replace("6", " ")
			sVal = sVal.Replace("7", " ")
			sVal = sVal.Replace("8", " ")
			sVal = sVal.Replace("9", " ")
			sVal = sVal.Replace("(", " ")
			sVal = sVal.Replace(")", " ")
			sVal = sVal.Replace(".", " ")
			sVal = sVal.Replace(",", " ")
			Log(sVal)
			Lista2 = Regex.Split("\ ", sVal )
			Log(Lista2.Size)
			For n = 0 To Lista2.Size-1
				Dim ss As String = Lista2.Get(n)
				If (ss.Trim <> "") Then
					ListaChars.add( ss.Trim )
				End If
				
			Next
			Log(ListaChars.Size)
		End If
		Log("*******************************")
		
		Dim newVals As List : newVals.initialize
		Do While ListaChars.IndexOf("*")>=0
			Dim Posis As Int = ListaChars.IndexOf("*")
			Dim val1 As Double = ListaValues.Get(Posis)
			Dim Val2 As Double = ListaValues.Get(Posis+1)
			newVals.add(val1*Val2)
			Log($"${Posis} : val1*Val2 => ${val1}*${Val2}=${val1*Val2}"$)
			ListaValues.RemoveAt(Posis+1)
			ListaValues.Set(Posis,val1*Val2)
			ListaChars.RemoveAt(Posis)
		Loop
		Do While ListaChars.IndexOf("/")>=0
			Dim Posis As Int = ListaChars.IndexOf("/")
			Dim val1 As Double = ListaValues.Get(Posis)
			Dim Val2 As Double = ListaValues.Get(Posis+1)
			newVals.add(val1/Val2)
			Log($"${Posis} : val1/Val2 => ${val1}/${Val2}=${val1/Val2}"$)
			ListaValues.RemoveAt(Posis+1)
			ListaValues.Set(Posis,val1/Val2)
			ListaChars.RemoveAt(Posis)
		Loop
		Do While ListaChars.IndexOf("+")>=0
			Dim Posis As Int = ListaChars.IndexOf("+")
			Dim val1 As Double = ListaValues.Get(Posis)
			Dim Val2 As Double = ListaValues.Get(Posis+1)
			newVals.add(val1+Val2)
			Log($"${Posis} : val1+Val2 => ${val1}+${Val2}=${val1+Val2}"$)
			ListaValues.RemoveAt(Posis+1)
			ListaValues.Set(Posis,val1+Val2)
			ListaChars.RemoveAt(Posis)
		Loop
		Do While ListaChars.IndexOf("-")>=0
			Dim Posis As Int = ListaChars.IndexOf("-")
			Dim val1 As Double = ListaValues.Get(Posis)
			Dim Val2 As Double = ListaValues.Get(Posis+1)
			newVals.add(val1-Val2)
			Log($"${Posis} : val1-Val2 => ${val1}-${Val2}=${val1-Val2}"$)
			ListaValues.RemoveAt(Posis+1)
			ListaValues.Set(Posis,val1-Val2)
			ListaChars.RemoveAt(Posis)
		Loop
		
		Log(newVals)
		Log(ListaValues)
		Log(ListaChars)
		If (ListaValues.Size>=1) Then
			ret = ListaValues.Get(0)
		End If
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	Log($"resultado :${InStr} = "$ & ret)
	Return ret
End Sub


' *************************************************************
' TIP: EVENTOS DE TRIGGERS SEM FORM
' *************************************************************
Sub ForceAddActionNoForm(CLAItem As RequestCLAItem, evtvalue As String, evtformula As String)As ResumableSub
	ProgressDialogShow2(ShareCode.Pg2MsgProcessar, False)
	Sleep(150)
	Dim asTagcode As String = Utils.GenerateTagcode("AS0")
	Dim Request As String = CLAItem.Request, _
		Action As String = CLAItem.Action, _
		Task As String = CLAItem.Task, _
		Item As String = CLAItem.Item, _
		UniqueKey As String = CLAItem.UniqueKey, _
		Tagcode As String = CLAItem.Tagcode, _
		repeatcounter As Int = CLAItem.RepeatCounter, _
		repeatitemcounter As Int = CLAItem.RepeatItemCounter, _
		repeatfieldcounter As Int = CLAItem.repeatfieldcounter, _
		DateTimecreation As String = Utils.GetCurrDatetimeext, _
		SESS_OPER_User As String = ShareCode.SESS_OPER_User, _
		dlgASSubject As String = "", _
		dlgASDetails1 As String = "", _
		dlgASPriority As String = "", _
		dlgASUrgency As String = "", _
		dlgASStatus As String = "", _
		emailsentdate As String = "", _
		EmailSentOnNewAS As String = "", _
		dlgASEmails1 As String = "", _
		dlgASDueDate As String = "", _
		tagcodeTPA As String = "", _
		groupTPA As String = "", _
		obs As String = "", _
		sendTheEmail As Int = 0
	
	If (Utils.NE(evtvalue)) Then
		evtvalue = "TACTTT_001"
	End If
	If (Utils.NE(evtformula)) Then
		evtformula = "TOPERT_01"
	Else
		Dim FindParams As String = $"select a.tagcode, a.title, b.default_title, b.default_details, b.default_priority,
				b.default_gravity, b.assign_typerequest, b.typerequest_tagcode, b.operation_type 
				from dta_actiontypes as a 
				inner join dta_actiontypes_items as b on (b.actiontype_tagcode=a.tagcode) 
				where a.tagcode='${evtvalue}' and b.operation_type='${evtformula}'"$
		Dim localData As ResultSet = Starter.LocalSQLEVC.ExecQuery(FindParams)
		Do While localData.NextRow
			dlgASSubject  = localData.GetString("default_title")
			dlgASDetails1  = localData.GetString("default_details")
			dlgASPriority  = localData.GetString("default_priority")
			dlgASUrgency  = localData.GetString("default_gravity")
			Exit
		Loop
		localData.Close
	End If
	
	DBStructures.InsertRequestASEVC(asTagcode, Request, Action, Task, Item, UniqueKey, _
					Tagcode, dlgASSubject, dlgASDetails1, dlgASPriority, _
					dlgASUrgency, SESS_OPER_User, _
					dlgASStatus, emailsentdate, EmailSentOnNewAS, _
					dlgASEmails1, dlgASDueDate, _
					repeatcounter, repeatitemcounter, repeatfieldcounter, DateTimecreation, _
					tagcodeTPA , groupTPA, obs, sendTheEmail)
	Sleep(250)
	
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLRequest", Request.Trim)
	params.Put("ACLAction", Action.Trim)
	params.Put("ACLTask", Task.Trim)
	params.Put("ACLItem", Item.Trim)
	params.Put("ACLUniqueKey", UniqueKey.Trim)
	params.Put("ACLTagcode", Tagcode)
	params.Put("ACLATitle", dlgASSubject)
	params.Put("ACLAObs", dlgASDetails1)
	params.Put("ACLAASNC", asTagcode)
	params.Put("ACLAASNCTYPE", evtvalue)
	params.Put("ACLAASNCOPER", evtformula)
	params.Put("ACLADatetime", DateTimecreation)
	params.Put("ACLSessUser", SESS_OPER_User)
	params.Put("ACLAReqCounter", repeatcounter)
	params.Put("ACLARepeatItem", repeatitemcounter)
	params.Put("ACLARepeatField", repeatfieldcounter)
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/event/new/asnc"$
	If Not(ShareCode.APP_WORKING_LOCAL) Then
		Dim GODR As ResumableSub = GetOfflineDataRec(1, Request.Trim, Task.Trim, Item.Trim)
		Wait For (GODR) Complete (HasResults As Boolean)
		If HasResults Then
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, Request.Trim, Task.Trim, Item.Trim)
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		Else
			Utils.CallApi(0, params, Me, Url, "", Request.Trim)
		End If
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, Request.Trim, Task.Trim, Item.Trim)
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If
	Sleep(550)
	
	ProgressDialogHide
	Sleep(50)
	
	Return True
End Sub

' *************************************************************
' TIP: EVENTO CLICK DE BOTÃO DE ESTADO X (B4XSTATEBUTTON)
' *************************************************************
Sub CLAItemButtonX_StateClick (State As Int)
	
	Dim this As B4XStateButton = Sender
	
'	Dim ReqFocus As ResumableSub = HiddenEditRequestFocus  '(this.Parent)
'	Wait For(ReqFocus) Complete (OkRequest As Boolean)
	
	If (LoadingProcess = False) Then
		
		If Not(Utils.isNullOrEmpty(this.tag)) Then
			Dim Columns As List = Regex.Split("\|", this.tag )
			If (Columns.Size >= 1) Then
				Try
					Dim New As String = this.Text
		
					Dim request_tagcode As String = Columns.Get(0)
					Dim action_tagcode As String = Columns.Get(1)
					Dim task_tagcode As String = Columns.Get(2)
					Dim item_tagcode As String = Columns.Get(3)
					Dim uniquekey As String = Columns.Get(4)
					Dim tagcode As String = Columns.Get(5)
'					Dim val As Int = Columns.Get(6)
'					Dim StatusIcon As Int = Columns.Get(7)
'					Dim Multi As Int = 0
'					Try
'						Dim Multi As Int = Columns.Get(8)
'					Catch
'						Log(LastException)
'					End Try
					Dim repeatcounter As Int = Columns.Get(9)
					Dim repeatitemcounter As Int = Columns.Get(10)
					Dim repeatfieldcounter As Int = Columns.Get(11)
					PressedAnswerTagCode = tagcode
			
					Dim sACLADatetime As String = Utils.GetCurrDatetime
					Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
					Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
					
					Dim ThisItemValue As String = New

					Dim sSQL As String = $"update dta_requests_values set execute_value='${New}', execute_status='${this.State}', execute_datetime='${sACLADatetime}', execute_latitude='${sACLALatitude}',
							execute_longitude='${sACLALongitude}' where request_tagcode='${request_tagcode.trim}' and
							task_tagcode='${task_tagcode.trim}' and item_tagcode='${item_tagcode.trim}' and 
							unique_key='${uniquekey.trim}' and tagcode='${tagcode.trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
										
					Log(sSQL)
					Utils.SaveSQLToLog("CLAItemButtonX_StateClick",sSQL, request_tagcode)
					'Starter.LocalSQLEVC.ExecNonQuery(sSQL)

	
					Dim params As Map
					params.Initialize
					params.Clear
					params.Put("_token", ShareCode.APP_TOKEN)
					params.Put("ACLARequest", request_tagcode)
					params.Put("ACLAAction", action_tagcode)
					params.Put("ACLATask", task_tagcode)
					params.Put("ACLAItem", item_tagcode)
					params.Put("ACLAUniqueKey", uniquekey)
					params.Put("ACLATagcode", tagcode)
					params.Put("ACLAValue", New)
					params.Put("ACLAReqCounter", repeatcounter)
					params.Put("ACLARepeatItem", repeatitemcounter)
					params.Put("ACLARepeatField", repeatfieldcounter)
					params.Put("ACLAInner", 0)
			
					params.Put("ACLADatetime", sACLADatetime)
					params.Put("ACLALatitude", sACLALatitude)
					params.Put("ACLALongitude", sACLALongitude)
					
					Dim ACLSessUser As String = ShareCode.SESS_OPER_User
					Dim ACLClear As Int = 0
					params.Put("ACLSessUser", ACLSessUser)
					params.Put("ACLClear", ACLClear)
					params.Put("versionTagcode", Main.VersionTagcode)
					params.Put("_authorization", Main.DeviceAuthorization)
					params.Put("_instance", Main.DeviceInstance)
					params.put("_deviceBrand", Main.DeviceBrand)
					params.put("_deviceModel", Main.DeviceModel)
					params.put("_deviceMacAddress", Main.DeviceMacAddress)
					params.Put("_user", ShareCode.SESS_User)
					Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
					If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
						If Not(ShareCode.APP_WORKING_LOCAL) Then
							Dim GODR As ResumableSub = GetOfflineDataRec(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
							Wait For (GODR) Complete (HasResults As Boolean)
							If HasResults Then
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							Else
								Utils.CallApi(0, params, Me, Url, "", request_tagcode)
							End If
						Else
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						End If
						Sleep(250)
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
			
					Dim ppar As Panel = this.Parent
					Dim bb As Button
					Try
						Dim bb As Button = ppar.GetView(3)
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
					End Try
			
			
					'******************************************************************************
					'	CONTROLO DE EVENTOS
					'******************************************************************************
					If (this.State = 1) And (bb.IsInitialized) Then
			
						Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
										$"select distinct paramters 
										from dta_tasks_items_adds where 1=1
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${item_tagcode.trim}'
										And unique_key='${uniquekey.trim}'"$, "paramters")	

						Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${item_tagcode.trim}'
										And unique_key='${uniquekey.trim}'
										And tagcode='${tagcode.trim}'
										Order by position"$  
						Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
						If Eventos.RowCount >= 1 Then
							For n=0 To Eventos.RowCount-1
								Eventos.Position = n
								Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
								If (evt.type_item = 9) Then
									ControlUpdateRequestField(bb.Tag, evt.value, New)
								Else
									If (Utils.Int2Bool(evt.is_status)) Then   							' TERMINA
										ForceTerminateChecklist(evt.value)
									else if (Utils.Int2Bool(evt.is_foto)) Then
										ForceTakePicture(bb.Tag)
									else if (Utils.Int2Bool(evt.is_more)) Then
										ForceAddMore(bb.Tag)
									else if (Utils.Int2Bool(evt.is_action)) Then
										'ForceAddAction(bb.Tag)
										If Utils.NNE(evt.value) Then
											ForceAddActionTPA(bb.Tag, evt.value, "",0)
										Else
											ForceAddAction(bb.Tag)
										End If
									else if (Utils.Int2Bool(evt.is_jump)) Then
										ForceAddJump(evt.value)
									else if ((Utils.Int2Bool(evt.is_alert)) Or (Utils.Int2Bool(evt.is_email))) Then
									else if ((Utils.Int2Bool(evt.request_signature)) Or ((evt.event_tagcode = "EVENTTASK_SIGNATURE") And (evt.type_item = 4))) Then
										ForceAddSignature(bb.Tag)
									else if (Utils.Int2Bool(evt.have_formula) And (evt.type_item = 2)) Then
										Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
										Wait For(res) Complete (retAPI As ExternalDocsInfo)
										If(retAPI.status = 1) Then
											Log($"Missing File downloaded"$)
										End If
									else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
										Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
										Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
										SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, False)
									else if ((evt.event_tagcode = "EVENTTASK_MANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
										Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
										Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
										SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, True)
									else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYALLDOWN") And (evt.type_item = 7)) Then
										SetMandatoryStateAfterItem(item_tagcode.trim, False)
									else if ((evt.event_tagcode = "EVENTTASK_MANDATORYALLDOWN") And (evt.type_item = 7)) Then
										SetMandatoryStateAfterItem(item_tagcode.trim, True)
									else if ((evt.event_tagcode = "EVENTTASK_INTEGRATION") And (evt.type_item = 8)) Then
										Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
										Wait For(res) Complete (retAPI As ExternalDocsInfo)
										If(retAPI.status = 1) Then
											Log($"Missing File downloaded"$)
										End If
									else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTER") And (evt.type_item = 30)) Then
'										Dim ItemTagCode As String = item_tagcode.Trim
'										Dim valorVerificar As String = ""
'										If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
'											ItemTagCode = evt.value.Trim
'										End If
'										Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
'										Wait For(res) Complete (retval As Int)
'										valorVerificar = retval
'			
'										Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
'										repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
'										Wait For(res1) Complete (retbool As Boolean)
'			
'										If (this Is B4XStateButton) And (evt.have_condition=9) Then
'											Dim b4xsb_this As B4XStateButton = this
'											b4xsb_this.Text = valorVerificar
'										End If
										
										Dim ContinuarCheck As Boolean = True
										If (Utils.NNE(ThisItemValue) And Utils.isNumeric(ThisItemValue) And Utils.Int2Bool(evt.have_status)) Then
											ContinuarCheck = False ' JÁ TEM VALOR
										End If
			
										If (ContinuarCheck) Then
											Dim ItemTagCode As String = item_tagcode.Trim
											Dim valorVerificar As String = ""
											If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
												ItemTagCode = evt.value.Trim
											End If
											Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
											Wait For(res) Complete (retval As Int)
											valorVerificar = retval
				
											ThisItemValue = valorVerificar
			
											Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
										repeatcounter, repeatitemcounter, repeatitemcounter, ThisItemValue)
											Wait For(res1) Complete (retbool As Boolean)
										End If
			
										If (Utils.NNE(ThisItemValue)) Then
											If (this Is B4XStateButton) And (evt.have_condition=9) Then
												Dim b4xsb_this As B4XStateButton = this
												b4xsb_this.Text = ThisItemValue
											End If
										End If
									else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTEROTHER") And (evt.type_item = 31)) Then
										'*******************************************************************************************************
										' NOTE: A MESMA FUNCIONALIDADE SÓ QUE PERMITE INDICAR OUTRO ITEM_TAGCODE QUE VAI RECEBER O RESULTADO
										'*******************************************************************************************************
										Dim ItemTagCode As String = item_tagcode.Trim
										Dim OtherValue As String = ""
										Dim valorVerificar As String = ""
										If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
											ItemTagCode = evt.value.Trim
										End If
										If (Utils.NNE(evt.formula)) Then
											OtherValue = evt.formula.Trim
										End If
										Dim res As ResumableSub = CLAIGetSetExternalCounterOther(task_tagcode, ItemTagCode, ThisItemValue, OtherValue, evt)
										Wait For(res) Complete (retval As Int)
										valorVerificar = retval
			
										Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, OtherValue, uniquekey, PressedAnswerTagCode, _
										repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
										Wait For(res1) Complete (retbool As Boolean)
			
									End If
								End If
							Next
						End If
					End If
			
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
			End If
			

		End If
	End If
End Sub

Sub FINSignatures_Click
	If(ShareCode.ISPHONE) Then
		If(PanelSignature.Visible = True) Then
			PanelSignature.Visible = False
			Return
		End If	
	End If
	
	Dim CurrentSign As Int = 0
	MakeSignatureTo(CurrentCLA, CurrentSign, SignatureRequestList.Get(CurrentSign))
End Sub

' *************************************************************
' TIP: PROCEDIMENTO DE CRIAÇÃO/ALTERAÇÃO DE ASSINATURA
' *************************************************************
Sub MakeSignatureTo(CCLA As RequestCLA, CurrentSign As Int, signTitle As String)
	CurrentSignature = CurrentSign
	PanelSignature.Visible = True
	SignPerson.Text = signTitle
	
	SignatureCapture.Clear(Signature)
	If File.Exists(Starter.InternalFolder, $"P${CurrentSignature}_${CCLA.Request}_${CCLA.Task}_Sign.png"$) Then
		Dim bg As Bitmap = LoadBitmapResize(Starter.InternalFolder, $"P${CurrentSignature}_${CCLA.Request}_${CCLA.Task}_Sign.png"$, SignPanel.Width, SignPanel.Height, True)
		SignPanel.SetBackgroundImage(bg)
	End If
		
	SignCanvas.Initialize(SignPanel)
	Signature.Initialize
	Signature.Canvas = SignCanvas
	Signature.Panel = SignPanel
	Signature.SignatureColor = Colors.Black
	Signature.SignatureWidth = 3dip
End Sub

Sub SignPanel_Touch (Action As Int, X As Float, Y As Float)
	SignatureCapture.Panel_Touch(Signature, x, y, Action)
End Sub

' *************************************************************
' TIP: PROCEDIMENTO DE GRAVAÇÃO DE ASSINATURA
' *************************************************************
Sub btnSaveSign_Click
	'CurrentCLA
	'${CurrentCLA.Task}
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(150)
	Dim thisFile As String = ""
'	Dim fromWho As Int = 0
'	If (CurrentSignature = 0) Then
'		
		Dim thisFile As String = $"P${CurrentSignature}_${CurrentCLA.Request}_${CurrentCLA.Task}_Sign.png"$  
		'$"fisrt_${CurrentCLA.Request.trim}${CurrentCLA.Task.trim}_Signature.png"$
		SignatureCapture.Save(Signature, Starter.InternalFolder, thisFile)
		
		Dim Base64Con As Base64Convert
		Base64Con.Initialize
		Dim ImgB64 As String = Base64Con.EncodeFromImage(Starter.InternalFolder, thisFile)
		
		Dim DoUpdate As Boolean = (CurrentSignature <= SignatureRequestListPosis.Size-1)
		If (DoUpdate) Then
			DoUpdate = (SignatureRequestListPosis.get(CurrentSignature) = CurrentSignature)
		End If
		
''		If (SignatureExists=1) Or (SignatureExists=3) Then
'		If (DoUpdate) Then
'			Dim sSQL As String = $"update dta_requests_signatures set image='${ImgB64}', filename='${thisFile}'
'					where from_who=${fromWho} and request_tagcode='${CurrentCLA.Request.trim}' and inner_request_tagcode='${CurrentCLA.Action.trim}'"$
'		Else
'			Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_signatures", "id", "") +1 
'			Dim sSQL As String = $"insert into dta_requests_signatures (id, request_tagcode, inner_request_tagcode, task_tagcode, image, filename, from_who) values
'								(${maxid}, '${CurrentCLA.Request.trim}', '${CurrentCLA.Action.trim}', '${CurrentCLA.Task.trim}', '${ImgB64}', '${thisFile}', ${fromWho})"$				
'		End If
		If (DoUpdate) Then
			Dim sSQL As String = $"update dta_requests_signatures set image='${ImgB64}', filename='${thisFile}'
					where from_who=${CurrentSignature} and request_tagcode='${CurrentCLA.Request.trim}' and inner_request_tagcode='${CurrentCLA.Action.trim}'"$
		Else
			Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_signatures", "id", "") +1 + 1000000
			Dim sSQL As String = $"insert into dta_requests_signatures (id, request_tagcode, inner_request_tagcode, task_tagcode, image, filename, from_who) values
								(${maxid}, '${CurrentCLA.Request.trim}', '${CurrentCLA.Action.trim}', '${CurrentCLA.Task.trim}', '${ImgB64}', '${thisFile}', ${CurrentSignature})"$				
		End If
		Utils.SaveSQLToLog("btnSaveSign_Click",sSQL, CurrentCLA.Request)
		'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
'		
'		CurrentSignature = 1
'		SignPerson.Text = "Técnico"
'		Dim newFile As String = $"second_${CurrentCLA.Request.trim}${CurrentCLA.Task.trim}_Signature.png"$
'		
'		SignatureCapture.Clear(Signature)
'		If File.Exists(Starter.InternalFolder, newFile) Then
'			Dim bg As Bitmap = LoadBitmapResize(Starter.InternalFolder, newFile, SignPanel.Width, SignPanel.Height, True)
'			SignPanel.SetBackgroundImage(bg)
'		End If
'		
'		SignCanvas.Initialize(SignPanel)
'		Signature.Initialize
'		Signature.Canvas = SignCanvas
'		Signature.Panel = SignPanel
'		Signature.SignatureColor = Colors.Black
'		Signature.SignatureWidth = 3dip
'	Else
'		Dim fromWho As Int = 1
'		Dim thisFile As String = $"second_${CurrentCLA.Request.trim}${CurrentCLA.Task.trim}_Signature.png"$
'		SignatureCapture.Save(Signature, Starter.InternalFolder, thisFile)
'		
'		Dim Base64Con As Base64Convert
'		Base64Con.Initialize
'		Dim ImgB64 As String = Base64Con.EncodeFromImage(Starter.InternalFolder, thisFile)
'		If (SignatureExists=2) Or (SignatureExists=3) Then
'			Dim sSQL As String = $"update dta_requests_signatures set image='${ImgB64}', filename='${thisFile}'
'					where from_who=${fromWho} And request_tagcode='${CurrentCLA.Request.trim}' and inner_request_tagcode='${CurrentCLA.Action.trim}'"$
'		Else
'			Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_signatures", "id", "") +1 + 100000
'			Dim sSQL As String = $"insert into dta_requests_signatures (id, request_tagcode, inner_request_tagcode, task_tagcode, image, filename, from_who) values
'								(${maxid}, '${CurrentCLA.Request.trim}', '${CurrentCLA.Action.trim}', '${CurrentCLA.Task.trim}', '${ImgB64}', '${thisFile}', ${fromWho})"$
'		End If
'			
'		Utils.SaveSQLToLog("btnSaveSign_Click",sSQL)
'		'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
'		
'		PanelSignature.Visible = False
'		CurrentSignature = 0
'	End If
	
	
	Dim sACLADatetime As String = Utils.GetCurrDatetime
	Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
	Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
	Dim params As Map : params.Initialize
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLARequest", CurrentCLA.Request.trim)
	params.Put("ACLAAction", CurrentCLA.Action.trim)
	params.Put("ACLATask", CurrentCLA.Task.trim)
	
	params.Put("ACLAB64", ImgB64)
	params.Put("ACLAFilename", thisFile)
	params.Put("ACLAFromWho", CurrentSignature)
	params.Put("ACLAReqCounter", CurrentCLA.RepeatCounter)
					
	params.Put("ACLADatetime", sACLADatetime)
	params.Put("ACLALatitude", sACLALatitude)
	params.Put("ACLALongitude", sACLALongitude)
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	If (params.IsInitialized) Then
		Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/cla/sign/update"$
		If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
			If Not(ShareCode.APP_WORKING_LOCAL) Then 
				Utils.CallApi(0, params, Me, Url, "", CurrentCLA.Request.trim)
			Else
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,CurrentCLA.Request.Trim,CurrentCLA.Task.Trim,"")
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			End If
			Sleep(500)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,CurrentCLA.Request.Trim,CurrentCLA.Task.Trim,"")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
	End If
	ProgressDialogHide
	
	If (CurrentSignature < SignatureRequest-1) Then
		MakeSignatureTo(CurrentCLA, CurrentSignature +1, SignatureRequestList.Get(CurrentSignature +1))
	Else
		PanelSignature.Visible = False
	End If
	
End Sub

Sub btnClearSign_Click
	SignatureCapture.Clear(Signature)
'	Dim Signature As SignatureData
'	Dim SignCanvas
'	SignPanel
End Sub

Sub btnCancelSign_Click
	SignatureCapture.Clear(Signature)
	PanelSignature.Visible = False
End Sub

' *************************************************************
' TIP: PROCEDIMENTO DE CRIAÇÃO/ALTERAÇÃO DE AS DA CHECKLIST
' *************************************************************
Sub FINActionButton_Click
	Dim Btn As Button = Sender 
	
	Dim CLA As RequestCLA = Btn.Tag
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(CLA.Request, CLA.Action, CLA.Task, "", "", "", 0,0,0, cl_FinaltopTitle.Text, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
							
	Dim theScript As String = $"select title from dta_tasks
							WHERE tagcode IN (SELECT DISTINCT relation_tagcode FROM dta_requests_relations 
							WHERE request_tagcode='${CLA.Request.Trim}' AND relation_tagcode='${CLA.Action.Trim}' AND repeatcounter=${CLA.RepeatCounter}) "$
						
	CLAItem.Title = DBStructures.GetScriptColumnStrEVC(theScript, "title")
	
	If  (ShareCode.APP_DOMAIN.ToLowerCase = "acail") And (CLA.Task.Trim = "TSKS_20191030_114247") Then
		Dim asTagcode As String = Utils.GenerateTagcode("AS0")
		Dim dtupd As String = Utils.GetCurrDatetimeExt
		Dim val As Double = DBStructures.GetScriptColumnDoubleEVC($"select sum(execute_value) as total from dta_requests_values
						where unique_key='c0e6a6ef-399d-555a-be31-b9163ebe09ca' and request_tagcode='${CLA.Request.trim}'"$, "total")
		
		Dim subject As String = $"Aprovação de Despesas - ${ShareCode.SESS_OPER_UserName}"$
		Dim detail As String = $"Aprovação de despesas de ${ShareCode.SESS_OPER_UserName} no valor total de ${val}€."$
		
		asTagcode = DBStructures.InsertRequestASEVC(asTagcode, CLA.Request.trim, CLA.Action.trim, CLA.Task.trim, "", "", _
					"", subject, detail, _
					Utils.getASPriority(0), _
					Utils.getASUrgency(0), _
					ShareCode.SESS_OPER_User, _
					Utils.getASStatus(1), Utils.GetCurrDatetime, Utils.Bool2Int(False), _
					"", "", CLA.RepeatCounter, 0, 0, dtupd, "", "", "", 0)
					
		Dim params As Map
		params.Initialize
		params.Put("_token", ShareCode.APP_TOKEN)
		params.Put("ACLARequest", CLA.Request)
		params.Put("ACLAAction", CLA.Action)
		params.Put("ACLATask", CLA.Task)
		params.Put("ACLAItem", "")
		params.Put("ACLAUniqueKey", "")
		params.Put("ASUITagcode", "")
		params.Put("ACLAExecuteAction", asTagcode)
		params.Put("ACLAReqCounter", CLA.RepeatCounter)
		params.Put("ACLARepeatItem", 0)
		params.Put("ACLARepeatField", 0)
		params.Put("versionTagcode", Main.VersionTagcode)
		params.Put("_authorization", Main.DeviceAuthorization)
		params.Put("_instance", Main.DeviceInstance)
		params.put("_deviceBrand", Main.DeviceBrand)
		params.put("_deviceModel", Main.DeviceModel)
		params.put("_deviceMacAddress", Main.DeviceMacAddress)
		params.Put("_user", ShareCode.SESS_User)
		Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai-more/as/update"$
		If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
			Utils.CallApi(0, params, "Checklist3", Url, "", CLA.Request)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,CLA.Request.Trim,CLA.Task.Trim,"")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(500)
		
		Dim actiondatetime As String = Utils.GetCurrDatetime
		Dim emailsentdate As String = actiondatetime
		Dim params As Map
		params.Initialize
		params.Put("_token", ShareCode.APP_TOKEN)
		params.Put("ASRequest", CLA.Request)
		params.Put("ASAction", CLA.Action)
		params.Put("ASTask", CLA.Task)
		params.Put("ASItem", "")
		params.Put("ASUniqueKey", "")
		params.Put("ASUITagcode", "")
		params.Put("ASTagcode", asTagcode)
		params.Put("ASTitle", subject)
		params.Put("ASDetails", detail)
		params.Put("ASPriority", Utils.getASPriority(0))
		params.Put("ASUrgency", Utils.getASUrgency(0))
		params.Put("ASAssigned", ShareCode.SESS_OPER_User)
		params.Put("ASAssignedType", 0)
		params.Put("ASStatus", Utils.getASStatus(0))
		params.Put("ASEmailDatetime", emailsentdate)
		params.Put("ASEmailSent", Utils.Bool2Int(False)) 
		params.Put("ASEmailTo", "")
		params.Put("ASEmailRelatedTask", "")
		params.Put("ASEmailRelatedAction", "")
		params.Put("ASDueDate", "")
		params.Put("ACLAReqCounter", CLA.RepeatCounter)
		params.Put("ACLARepeatItem", 0)
		params.Put("ACLARepeatField", 0)
		params.Put("ACLACreation", dtupd)
		params.Put("ACLANew", Utils.Bool2Int(True))
		params.Put("versionTagcode", Main.VersionTagcode)
		params.Put("_authorization", Main.DeviceAuthorization)
		params.Put("_instance", Main.DeviceInstance)
		params.put("_deviceBrand", Main.DeviceBrand)
		params.put("_deviceModel", Main.DeviceModel)
		params.put("_deviceMacAddress", Main.DeviceMacAddress)
		params.Put("_user", ShareCode.SESS_User)
		Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai-more/as/insert"$
		If Not(ShareCode.APP_WORKING_LOCAL) Then
			Utils.CallApi(0, params, "Checklist3", Url, "", CLA.Request)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(2,asTagcode.trim,"","")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(500)
		
		CLA_TERMINATE_CLICK = 1
		CloseExecution
	else If  (ShareCode.APP_DOMAIN.ToLowerCase = "acail") And ((CLA.Task.Trim = "TSKS_20191008_184329") Or (CLA.Task.Trim = "TSKS_20191111_103046")) Then
	Else
		Dim Filter As AppActionDialogs
		Filter.Initialize
		Filter.GetMoreActionsDialog(Activity, "CheckList3", CLAItem, 0, "", MainObservations, 0, "", "", "",0)
	End If
	
	'CallSubDelayed3(MoreActions, "StartCLA_Activity", Types.MakeActivityParams(Activity, "requests3", 0, "", ""), CLAItem)
End Sub

' *************************************************************
' TIP: EVENTO DE CHAMADA DE CAMARA
' *************************************************************
Sub CamImage(CLAItem As RequestCLAItem, CamShots As List)
	StopService(Comms)
	
'	If (Utils.Int2Bool(ShareCode.DEVICE_CHECKLIST_SVRIMGUDP_ONCLOSE) Or Utils.Int2Bool(ShareCode.DEVICE_CHECKLIST_SVRIMGUDP_WIDTH_TRIGGER)) Then
'		Dim finish As Boolean = True
'		Dim makeDelay As Boolean = False
'	Else
'		Dim makeDelay As Boolean = True
'		Dim tCam  As ResumableSub = CameraReturnShots(CamShots, CLAItem)
'		Wait For(tCam) Complete (finish As Boolean)
'	End If

	Dim makeDelay As Boolean = True
	Dim tCam  As ResumableSub = CameraReturnShots(CamShots, CLAItem)
	Wait For(tCam) Complete (finish As Boolean)
	If finish Then
		If (makeDelay) Then
			ProgressDialogShow2(ShareCode.Pg2MsgProcessFotos, True)
			Sleep(5000)
			ProgressDialogHide
		End If
		
		'ShareCode.DEVICE_CHECKLIST_AUTORETURN_AFTER_FOTOSHOT=0
		If Not(Utils.Int2Bool(ShareCode.DEVICE_CHECKLIST_AUTORETURN_AFTER_FOTOSHOT)) Then
			Dim Filter As AppActionDialogs
			Sleep(250)
			Log("FECHOU!!!")
			Try
				Filter.Initialize
				Filter.GetMoreActionsDialog(Activity, "CheckList3", CLAItem, 0, "", MainObservations, 0, GetPressedAnswerTagCode(CLAItem), "", "",0)
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
		End If
	Else
		Log("FECHOU 2!!!")
		
	End If
End Sub

Sub CamImage2(CLAItem As RequestCLAItem)
		StopService(Comms)
		Dim Filter As AppActionDialogs
		Sleep(250)
		Log("FECHOU!!!")
		Try
			Filter.Initialize
			Filter.GetMoreActionsDialog(Activity, "CheckList3", CLAItem, 0, "", MainObservations, 0, GetPressedAnswerTagCode(CLAItem), "", "",0)
			'CallSubDelayed3(MoreActions, "StartCLA_Activity", Types.MakeActivityParams(Activity, "requests3", 0, "", ""), CLAItem)
		Catch
			Log(LastException.Message)
		End Try
End Sub


' *************************************************************
' TIP: PROCEDIMENTO DE RETORNO DE CAMARA
' *************************************************************
Sub CameraReturnShots(FileList As List, this As RequestCLAItem) As ResumableSub
	
	'CurrentCLAItem
	Dim obj As String = this.TagObject
	Dim params As Map
	Dim params33 As Map
	If (FileList.Size >= 1) Then
		ProgressDialogShow2(ShareCode.Pg2MsgProcessFotos, False)
		Sleep(150)
		For nFile=0 To FileList.Size-1
			Dim theFoto  As ShotFoto = FileList.Get(nFile) 'Types.MakeShotFoto(ShotFileName, DateTimeName, la, lo, NewDateTimeName)
			Dim FileName As String = theFoto.FileName
			If Not(Utils.isNullOrEmpty(FileName)) Then
				If Not(FileName.IndexOf(".png") >= 0) Then
					FileName = $"${FileName}.png"$
				End If
				Dim Base64Con As Base64Convert
				Base64Con.Initialize
				Dim ImgB64 As String = Base64Con.EncodeFromImage(Starter.InternalFolder, $"${FileName}"$)
				'imageb64|imagename
				
				Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_values_images", "id", "") +3 + 1000000
				Dim sSQL As String = $"insert into dta_requests_values_images
						(id, request_tagcode, inner_request_tagcode, task_tagcode, item_tagcode, unique_key, tagcode, imageb64, 
						imagename, on_report, repeatcounter, repeatitemcounter, repeatfieldcounter, 
						execute_datetime, execute_latitude, execute_longitude)
						values (${maxid}, '${this.Request}', '${this.Action}', '${this.Task}', '${this.Item}', '${this.UniqueKey}', '${this.Tagcode}',
				'${ImgB64}', '${FileName}', 1, ${this.RepeatCounter}, ${this.RepeatItemCounter}, ${this.repeatfieldcounter},
				'${Utils.IfNullOrEmpty(theFoto.DateNTime, "")}',
				'${Utils.IfNullOrEmpty(theFoto.Latitude, "")}',
				'${Utils.IfNullOrEmpty(theFoto.Longitude, "")}')"$
						
				Utils.SaveSQLToLog("CameraReturn",sSQL, this.Request)
		
				If (Utils.NNE(obj)) Then
					Dim v As Int = Utils.DBDataCount(Starter.LocalSQLEVC, $"select count(0) as COUNTER from dta_objects_images "$) +1
					Dim sSQL As String = $"insert into dta_objects_images (id, object_tagcode, image, filename)
					values (${v}, '${obj}', '${ImgB64}', '${FileName}')"$
					Utils.SaveSQLToLog("CameraReturn",sSQL, this.Request)
					'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
			
					params33.Initialize
					params33.Clear
					params33.Put("_token", ShareCode.APP_TOKEN)
					params33.Put("ACLATagcode", obj)
					params33.Put("ACLAValueImage", ImgB64)
					params33.Put("ACLAValueFileImage", FileName)
			
				End If
		
				Private sACLADatetime As String = Utils.GetCurrDatetime
				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")

				params.Initialize
				params.Clear
				params.Put("_token", ShareCode.APP_TOKEN)
				params.Put("ACLARequest", this.Request)
				params.Put("ACLAAction", this.Action)
				params.Put("ACLATask", this.Task)
				params.Put("ACLAItem", this.Item)
				params.Put("ACLAUniqueKey", this.UniqueKey)
				params.Put("ACLATagcode", this.Tagcode)
				params.Put("ACLAValueImage", ImgB64)
				params.Put("ACLAValueFileImage", FileName)
				params.Put("ACLAOnReport", 1)
				params.Put("ACLAReqCounter", this.RepeatCounter)
				params.Put("ACLARepeatItem", this.RepeatItemCounter)
				params.Put("versionTagcode", Main.VersionTagcode)
				params.Put("_authorization", Main.DeviceAuthorization)
				params.Put("_instance", Main.DeviceInstance)
				params.put("_deviceBrand", Main.DeviceBrand)
				params.put("_deviceModel", Main.DeviceModel)
				params.put("_deviceMacAddress", Main.DeviceMacAddress)
				params.Put("_user", ShareCode.SESS_User)
				params.Put("ACLADatetime", sACLADatetime)
				Try
					params.Put("ACLALatitude", sACLALatitude)
					params.Put("ACLALongitude", sACLALongitude)
				Catch
					params.Put("ACLALatitude", "")
					params.Put("ACLALongitude", "")
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
			
			End If
			
			If (Utils.Int2Bool(ShareCode.DEVICE_CHECKLIST_SVRIMGUDP_ONCLOSE) Or Utils.Int2Bool(ShareCode.DEVICE_CHECKLIST_SVRIMGUDP_WIDTH_TRIGGER)) Then
				
				If (params.IsInitialized) Then
					Dim dt As String = $"REQUES_IMAGE_${Utils.GetCurrDatetimeT2("_")}_${nFile}.reqsvr"$
					File.WriteMap(Starter.InternalFolder, dt, params)
				End If
				If (params33.IsInitialized) Then
					Dim dt As String = $"OBJECT_IMAGE_${Utils.GetCurrDatetimeT2("_")}_${nFile}.objsvr"$
					File.WriteMap(Starter.InternalFolder, dt, params33)
				End If
			Else
				'Dim params As Map
				If (params.IsInitialized) Then
					Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai-more/img/update"$
					If Not(ShareCode.APP_WORKING_LOCAL) Then
						Dim GODR As ResumableSub = GetOfflineDataRec(1,this.Request.Trim,this.Task.Trim,this.Item.trim)
						Wait For (GODR) Complete (HasResults As Boolean)
						If HasResults Then
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,this.Request.Trim,this.Task.Trim,this.Item.trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						Else
							Utils.CallApi(0, params, Me, Url, "", this.Request)
						End If
						
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,this.Request.Trim,this.Task.Trim,this.Item.trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
					Sleep(250)
		
		
					If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
						Try
							Dim upl As ResumableSub = UploadFilesWithFTPCamImage(FileName)
							Wait For(upl) Complete (finish As Boolean)
							If finish Then
								Log("UploadFilesWithFTP finish " & finish )
							End If

						Catch
							Log(LastException)
							Utils.WriteErrors2Log(LastException)
							Dim ServerLocation As String = $"/${ShareCode.APP_DOMAIN}/docs/"$
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,this.Request.Trim,this.Task.Trim,this.Item.trim)
							Utils.save2update(ServerLocation, FileName, 1, WorkerND)
						End Try
					Else
						Dim ServerLocation As String = $"/${ShareCode.APP_DOMAIN}/docs/"$
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,this.Request.Trim,this.Task.Trim,this.Item.trim)
						Utils.save2update(ServerLocation, FileName, 1, WorkerND)
					End If
					Sleep(250)
				End If
	
				If (params33.IsInitialized) Then
					Log(Url)
					Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai-more2/img/update"$
					If Not(ShareCode.APP_WORKING_LOCAL) Then
						Dim GODR As ResumableSub = GetOfflineDataRec(1,this.Request.Trim,this.Task.Trim,this.Item.trim)
						Wait For (GODR) Complete (HasResults As Boolean)
						If HasResults Then
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,this.Request.Trim,this.Task.Trim,this.Item.trim)
							Utils.save2update(Url, Utils.MapToJson(params33), 0, WorkerND)
						Else
							Utils.CallApi(0, params33, Me, Url, "", this.Request)
						End If
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,this.Request.Trim,this.Task.Trim,this.Item.trim)
						Utils.save2update(Url, Utils.MapToJson(params33), 0, WorkerND)
					End If
					Sleep(250)
				End If
			End If
			'CallSub(CameraActivity, "CloseActivity")
			
		Next
		ProgressDialogHide
	End If
	Sleep(500)
	Return True
End Sub


' *************************************************************
' TIP: PROCEDIMENTO DE ATUALIZAÇÃO DE IMAGENS NO SERVIDOR
' *************************************************************
Sub UploadFilesWithFTPCamImage(filename As String )  As ResumableSub
	Dim ret As Boolean = False
	Dim myFTP As FTP
	myFTP.Initialize("ftp", $"${ShareCode.APPL_ACCOUNT.ToLowerCase}.${ShareCode.APPL_HOST}"$, 21, $"${ShareCode.APP_FTP_USER}@${ShareCode.APPL_HOST}"$, "..VRCG@EvolutionCheck20!9")
	myFTP.PassiveMode = True
'	Dim ctm As CustomTrustManager
'	ctm.InitializeAcceptAll
'	myFTP.SetCustomSSLTrustManager(ctm)
	myFTP.TimeoutMs =240000
	Log(filename)
	Dim sf As Object = myFTP.UploadFile(Starter.InternalFolder, filename, False, "/" & ShareCode.APP_DOMAIN & "/docs/" & filename)
	Wait For (sf) ftp_UploadCompleted (ServerPath As String, Success As Boolean)
	If Success Then
		Log("file was uploaded successfully")
		ret = True
	Else
		Log("Error uploading file")
		ret = False
	End If
	myFTP.Close
	Sleep(250)
	
	Log("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU")
	Log("upload")
	Log("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU")
	Return ret
End Sub


' *************************************************************
' TIP: EVENTO: ONTOUCH DE LISTA DE SELEÇÃO
' *************************************************************
Sub CLAItemSelectValue_onTouch(V As Object, Action As Int, X As Float, Y As Float, MotionEvent As Object) As Boolean
	Dim this As Spinner = Sender
	Log("CLAItemSelectValue_onTouch")
	
	If (LoadingProcess = False) Then

		
		
		Dim request_tagcode As String = ""
'		Dim action_tagcode As String = ""
'		Dim task_tagcode As String = ""
'		Dim item_tagcode As String = ""
		Dim uniquekey As String = ""
'		Dim tagcode As String = ""
		'		Dim val As Int = 0
		'		Dim StatusIcon As Int = 0
		Dim repeatcounter As Int = 0
		Dim repeatitemcounter As Int = 0
'		Log(this.Tag)
'		Dim ThisContinua As Boolean = True
		If Not(Utils.isNullOrEmpty(this.Tag)) Then
			Dim Columns As List = Regex.Split("\|", this.tag )
			If (Columns.Size >= 1) Then
					
				Dim request_tagcode As String = Columns.Get(0)
'				Dim action_tagcode As String = Columns.Get(1)
'				Dim task_tagcode As String = Columns.Get(2)
'				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
'				Dim tagcode As String = Columns.Get(5)
				Dim repeatcounter As Int = Columns.Get(9)
				Dim repeatitemcounter As Int = Columns.Get(10)
				
				Dim doSQL As String = $"select a.execute_value, b.do_origin,
											c.level3_table, c.level3_level, c.level3_tagcode, c.level3_parent, c.level3_child
											from dta_requests_values as a
											inner join dta_tasks_items as b on (b.task_tagcode=a.task_tagcode
													and b.item_tagcode=a.item_tagcode
													and b.unique_key=a.unique_key)
											inner join dta_tasks_items_adds as c on (c.task_tagcode=b.task_tagcode
													and c.item_tagcode=b.item_tagcode
													and c.unique_key=b.unique_key)
											where a.request_tagcode='${request_tagcode.trim}' 
											and a.unique_key='${uniquekey.trim}'
											and a.repeatcounter=${repeatcounter}
											and a.repeatitemcounter=${repeatitemcounter}"$
'				Log(doSQL)
				Private doRecord As Cursor = Starter.LocalSQLEVC.ExecQuery(doSQL)
				If doRecord.RowCount > 0 Then
					doRecord.Position = 0
					Dim do_origin As String = Utils.IfNullOrEmpty(doRecord.GetString("do_origin"), "")
					Dim level3_table As Int = Utils.IfNullOrEmpty(doRecord.GetInt("level3_table"), "0")
					Dim level3_level As Int = Utils.IfNullOrEmpty(doRecord.GetInt("level3_level"), "1")
					Dim level3_tagcode As String = Utils.IfNullOrEmpty(doRecord.GetString("level3_tagcode"), "")
					Dim level3_child As String = Utils.IfNullOrEmpty(doRecord.GetString("level3_child"), "")
					Dim level3_parent As String = Utils.IfNullOrEmpty(doRecord.GetString("level3_parent"), "")
					
					If Utils.NNE(do_origin) And Utils.Int2Bool(level3_table) And Utils.NNE(level3_parent) Then
										
						If (do_origin="TOBJNATT_007")  Then ' Tabela de 3 níves  type_level3types + type_level3mastertypes + type_level3childtypes
							
							If (level3_level = 0) Then
								Dim tablepar As String = ""
								Dim tablename As String = "type_level3types"
								Dim tabcond As String = ""
							else If (level3_level = 1) Then
								Dim tablepar As String = "type_level3types"
								Dim tablename As String = "type_level3mastertypes"
								Dim tabcond As String = "level3_tagcode"
							else If (level3_level = 2) Then
								Dim tablepar As String = "type_level3mastertypes"
								Dim tablename As String = "type_level3childtypes"
								Dim tabcond As String = "level3_tagcode"
							End If
							If (Utils.NNE(tabcond)) Then
							
								If Utils.NNE(level3_tagcode) Then
									tabcond = $" and ${tabcond}='${level3_tagcode}'"$
								Else
									
									Log($"level: ${level3_level}, tagcode: ${level3_tagcode}, table: ${tablepar} "$)
									If Utils.NNE(level3_parent) And Utils.NNE(tablepar) Then
										
										Dim tvl As Int = DBStructures.GetScriptColumnIntEVC($"select execute_value from dta_requests_values
														where request_tagcode='${CurrentCLA.Request.Trim}'
														and unique_key='${level3_parent}'
														and repeatcounter=${CurrentCLA.RepeatCounter}
														and repeatitemcounter=${repeatitemcounter}"$, "execute_value")
										Log($"TVL: ${tvl}"$)
										Log($"Script: select execute_value from dta_requests_values
														where request_tagcode='${CurrentCLA.Request.Trim}'
														and unique_key='${level3_parent}'
														and repeatcounter=${CurrentCLA.RepeatCounter}
														and repeatitemcounter=${repeatitemcounter}"$)
													
										Dim tgc As String = DBStructures.GetScriptColumnStrEVC($"SELECT tagcode FROM ${tablepar} LIMIT ${tvl-1},1"$, "tagcode")
										tabcond = $" and ${tabcond}='${tgc}'"$
									End If
								End If
							End If
							Dim gScript As String = $"select tagdesc from ${tablename} where 1=1 ${tabcond}"$
							
							'select tagdesc from type_level3childtypes where 1=1  and level3_tagcode='TL3M1T_006'
							Log(gScript)
						
							Dim gList As List : gList.Initialize
							
							Private RecordOri As Cursor = Starter.LocalSQLEVC.ExecQuery(gScript)
							If RecordOri.rowcount > 0 Then
								gList.Add("(Sem seleção)")
								For n1=0 To RecordOri.RowCount-1
									RecordOri.Position = n1
									gList.Add(RecordOri.GetString("tagdesc"))
								Next
							Else
								gList.Add("(Sem seleção)")
							End If
							
							Dim haveValues As Boolean = gList.Size > 0
							If haveValues Then
								CLAItemSelectValue.Clear
								CLAItemSelectValue.AddAll(gList)
							End If
						End If

					
					End If
				End If
			End If
		End If
	End If

	'Starter.LocalSQLEVC.ExecNonQuery(sSQL)

	Return False
End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW (OUTROS) - NAO USADO
' *************************************************************
Sub DialogoOutros
	Dim p As B4XView = xui.CreatePanel("")
	p.SetLayoutAnimated(0, 0, 0, 600dip, 300dip)
	p.LoadLayout("CustomDialog")
	dialog.PutAtTop = True 'put the dialog at the top of the screen
	Wait For (dialog.ShowCustom(p, "OK", "", "CANCEL")) Complete (Result As Int)
End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE NOVA VIEW (OUTROS) 
' *************************************************************
Sub BoxEditListOther (title As String, ReceivedFrom As Spinner, pos As Int, thisTag As String ) As ResumableSub
	Dim resultado As String = ""
	Dim sf As Object = ApplDialog.ShowAsync(title, "Confirmar", "Cancelar", "", Null, False)
	Utils.SetDialogColors(sf, Consts.ColorWhite, Consts.ColorGray, 3, 5)
	If Not(ShareCode.ISPHONE) Then
		ApplDialog.SetSize(60%x, 50%y)
	Else
		ApplDialog.SetSize(70%x, 50%y)
	End If
	
	Wait For (sf) Dialog_Ready(pnl As Panel)
	pnl.LoadLayout("dialog_list_others")
	Wait For (sf) Dialog_Result(res As Int)
	If res = DialogResponse.POSITIVE Then
		Dim data  As OtherReturnValues = Types.MakeOtherReturnValues(txtDialogoOutros.Text, chkDialogoOutrosBD.Checked, thisTag)
		
		Dim request_tagcode As String = ""
		Dim action_tagcode As String = ""
		Dim task_tagcode As String = ""
		Dim item_tagcode As String = ""
		Dim uniquekey As String = ""
		Dim tagcode As String = ""
	
		Try' CHAMA O ENDPOINT PARA GRAVAR NA BD O VALOR NOVO DA LISTA
			Dim Columns As List = Regex.Split("\|", data.RetTag )
			If (Columns.Size >= 1) Then
				Dim request_tagcode As String = Columns.Get(0)
				Dim action_tagcode As String = Columns.Get(1)
				Dim task_tagcode As String = Columns.Get(2)
				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
				Dim tagcode As String = Columns.Get(5)
			End If
			
			If data.RetSave Then
				Dim params As Map
				params.Initialize
				params.Clear
				params.Put("_token", ShareCode.APP_TOKEN)
				params.Put("ACLARequest", request_tagcode)
				params.Put("ACLAAction", action_tagcode)
				params.Put("ACLATask", task_tagcode)
				params.Put("ACLAItem", item_tagcode)
				params.Put("ACLAUniqueKey",uniquekey)
				params.Put("ACLAValue", data.RetValue)
				params.Put("ACLSessUser", ShareCode.SESS_OPER_User)
				params.Put("ACLAIsLocal",Lista_ACLAIsLocal) ' Se é da pergunta (campo data_list do dta_tasks_items_answers) = 1 chama endpoint
				params.Put("ACLAIsLevel", Lista_ACLAIsLevel) ' Se é de tabela auxiliar ' tobiniaut 007 = 1 ' chama endpoint
				params.Put("ACLALevel", Lista_ACLALevel) ' O nível da tabela auxiliar
				params.Put("versionTagcode", Main.VersionTagcode)
				params.Put("_authorization", Main.DeviceAuthorization)
				params.Put("_instance", Main.DeviceInstance)
				params.put("_deviceBrand", Main.DeviceBrand)
				params.put("_deviceModel", Main.DeviceModel)
				params.put("_deviceMacAddress", Main.DeviceMacAddress)
				params.Put("_user", ShareCode.SESS_User)
				Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/fieldtable/update"$
				If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
					If Not(ShareCode.APP_WORKING_LOCAL) Then
						Dim GODR As ResumableSub = GetOfflineDataRec(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
						Wait For (GODR) Complete (HasResults As Boolean)
						If HasResults Then
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						Else
							Utils.CallApi(0, params, Me, Url, "", request_tagcode)
						End If
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
					Sleep(250)
				Else
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
				End If
			End If
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		Dim resultado As String = data.RetValue
	End If
	Return resultado
End Sub

Sub AddValue2List (title As String, ReceivedFrom As Spinner, pos As Int, thisTag As String ) As ResumableSub
	
	Dim pthis As Panel = ReceivedFrom.Parent 'painel
	Dim ppthis As Panel = pthis.Parent 'celula
	Dim lthis As Panel = ppthis.Parent 'lista
	dialog.Initialize(Activity)
	Dim p As B4XView = xui.CreatePanel("")
	p.SetLayoutAnimated(0, 0, 0, 600dip, 300dip)
	p.LoadLayout("DialogoOutros")
	dialog.PutAtTop = True 'put the dialog at the top of the screen
	dialog.ButtonsColor = Colors.Red
	dialog.ButtonsTextColor = Colors.White
	dialog.ButtonsOrder = Array As Int(xui.DialogResponse_Negative, xui.DialogResponse_Cancel, xui.DialogResponse_Positive)

	Wait For (dialog.ShowCustom(p, "Confirmar", "", "Cancelar")) Complete (Result As Int)
		
	If Result = xui.DialogResponse_Positive Then
		Dim resultado As String = txtDialogoOutros.Text
		
		If chkDialogoOutrosBD.Checked Then
			
			' ******************************************************************************
			' OBS: INICIALIZAR SEMPRE AS VARIÁVEIS FORA DE LOOPS OU CONDIÇÕES QUE POSSAM
			' PROVOCAR ERROS!
			' ******************************************************************************
			Dim request_tagcode As String = ""
			Dim action_tagcode As String = ""
			Dim task_tagcode As String = ""
			Dim item_tagcode As String = ""
			Dim uniquekey As String = ""
			Dim tagcode As String = ""
			
			Try' CHAMA O ENDPOINT PARA GRAVAR NA BD O VALOR NOVO DA LISTA
				Dim Columns As List = Regex.Split("\|", thisTag )
				If (Columns.Size >= 1) Then
					Dim request_tagcode As String = Columns.Get(0)
					Dim action_tagcode As String = Columns.Get(1)
					Dim task_tagcode As String = Columns.Get(2)
					Dim item_tagcode As String = Columns.Get(3)
					Dim uniquekey As String = Columns.Get(4)
					Dim tagcode As String = Columns.Get(5)
				End If
			
				Dim params As Map
				params.Initialize
				params.Clear
				params.Put("_token", ShareCode.APP_TOKEN)
				params.Put("ACLARequest", request_tagcode)
				params.Put("ACLAAction", action_tagcode)
				params.Put("ACLATask", task_tagcode)
				params.Put("ACLAItem", item_tagcode)
				params.Put("ACLAUniqueKey",uniquekey)
				params.Put("ACLAValue", resultado)
				params.Put("ACLSessUser", ShareCode.SESS_OPER_User)
				params.Put("ACLAIsLocal",Lista_ACLAIsLocal) ' Se é da pergunta (campo data_list do dta_tasks_items_answers) = 1 chama endpoint
				params.Put("ACLAIsLevel", Lista_ACLAIsLevel) ' Se é de tabela auxiliar ' tobiniaut 007 = 1 ' chama endpoint
				params.Put("ACLALevel", Lista_ACLALevel) ' O nível da tabela auxiliar
				params.Put("versionTagcode", Main.VersionTagcode)
				params.Put("_authorization", Main.DeviceAuthorization)
				params.Put("_instance", Main.DeviceInstance)
				params.put("_deviceBrand", Main.DeviceBrand)
				params.put("_deviceModel", Main.DeviceModel)
				params.put("_deviceMacAddress", Main.DeviceMacAddress)
				params.Put("_user", ShareCode.SESS_User)
				Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/fieldtable/update"$
				If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
					If Not(ShareCode.APP_WORKING_LOCAL) Then
						Dim GODR As ResumableSub = GetOfflineDataRec(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
						Wait For (GODR) Complete (HasResults As Boolean)
						If HasResults Then
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						Else
							Utils.CallApi(0, params, Me, Url, "", request_tagcode)
						End If
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
					Sleep(250)
				Else
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
				End If
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
		End If
	Else
		Dim resultado As String = ""
	End If
	
	Return resultado
	
End Sub

' *************************************************************
' TIP: EVENTO: SELECÇÃO DE ITEM DE LISTA
' *************************************************************
Sub CLAItemSelectValue_ItemClick (Position As Int, Value As Object)

	Dim this As Spinner = Sender
	Dim pthis As Panel = this.Parent
	Dim val As String = this.GetItem(Position)
'	Log(this.Tag)
'	Log(pthis.Tag)
	If (LoadingProcess = False) Then
		
		Dim ReqFocus As ResumableSub = HiddenEditRequestFocus( this )
		Wait For(ReqFocus) Complete (RetSender As Object)
		
		Dim pan As Panel = this.Parent
		Dim New As Int = this.SelectedIndex
		Dim Newtitle As String = this.SelectedItem
		Dim params As Map
		Dim  ThisItemValue As String = New
		
		Dim request_tagcode As String = ""
		Dim action_tagcode As String = ""
		Dim task_tagcode As String = ""
		Dim item_tagcode As String = ""
		Dim uniquekey As String = ""
		Dim tagcode As String = ""
'		Dim val As Int = 0
'		Dim StatusIcon As Int = 0
		Dim repeatcounter As Int = 0
		Dim repeatitemcounter As Int = 0
		
		Dim ThisContinua As Boolean = True
		If Not(Utils.isNullOrEmpty(this.Tag)) Then
			Dim Columns As List = Regex.Split("\|", this.tag )
			If (Columns.Size >= 1) Then
				
				Dim request_tagcode As String = Columns.Get(0)
				Dim action_tagcode As String = Columns.Get(1)
				Dim task_tagcode As String = Columns.Get(2)
				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
				Dim tagcode As String = Columns.Get(5)
'				Dim val As Int = Columns.Get(6)
'				Dim StatusIcon As Int = Columns.Get(7)
				Dim repeatcounter As Int = Columns.Get(9)
				Dim repeatitemcounter As Int = Columns.Get(10)
				Dim repeatfieldcounter As Int = Columns.Get(11)
				Dim sACLADatetime As String = Utils.GetCurrDatetime
				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
				Dim SelectScript As String = ""
				Dim SelectScriptTagcode As String = ""
				Try
					SelectScript = Columns.Get(12)
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
					Dim SelectScript As String = ""
				End Try
				
				task_tagcode = task_tagcode.trim
				
				If Utils.NE(task_tagcode) Then
					task_tagcode = action_tagcode.trim
				End If
				
				Dim CTI As CLATaskItem
				CTI.Initialize
				Dim thisTag As RequestCLAItem = Types.MakeRequestCLAItem(request_tagcode,action_tagcode,task_tagcode,item_tagcode,uniquekey,tagcode,repeatcounter,repeatitemcounter,repeatfieldcounter,"", Position,Value,0,0,0,"",CTI,"")
			
				Dim OtherReturn As String = ""
				
				If val = "(Outros)" Then ' FOI SELECCIONADA A OPCAO DE OUTROS - VERIFICAR AS CONDICOES E MOSTRAR O DIALOGO
					' Apanhar o do_origin do dta_tasks_items
					Dim test_do_origin As String = DBStructures.GetScriptColumnStrEVC($"SELECT do_origin from dta_tasks_items 
						WHERE task_tagcode = '${action_tagcode}' AND item_tagcode = '${item_tagcode}'"$,"do_origin")
					
					Dim test_level As String = DBStructures.GetScriptColumnStrEVC($"SELECT level3_level from dta_tasks_items_adds
						WHERE task_tagcode = '${action_tagcode}' AND item_tagcode = '${item_tagcode}'"$,"level3_level")
					
					If Utils.NNE(test_do_origin) And test_do_origin <> "TOBJNATT_007" Then
						Lista_ACLAIsLevel = 0
						Lista_ACLAIsLocal= 1
						Lista_ACLALevel= 0
					else if test_do_origin = "TOBJNATT_007" Then
						Lista_ACLAIsLevel = 1
						Lista_ACLAIsLocal= 0
						Lista_ACLALevel= Utils.IfNotNullOrEmpty(test_level,"0")
					Else
						Lista_ACLAIsLevel = 0
						Lista_ACLAIsLocal= 0
						Lista_ACLALevel= 0
					End If
					
					Lista_Save2BD = False
					If Lista_ACLAIsLevel = 0 And Lista_ACLAIsLocal = 0 Then
						Lista_Save2BD = True
					End If
		
'					Dim Res2 As ResumableSub = AddValue2List("", this, Position, this.Tag) ' DIALOGO PARA ADICIONAR (Outros)
'					Wait For(Res2) Complete (ValAddedd As String)
					
					' ******************************************************************************
					' OBS: NOVO MÉTODO COM CAIXA DE DIALOGO PADRÃO
					' ******************************************************************************
					Dim Res2 As ResumableSub = BoxEditListOther("Adicionar valor", this, Position, this.Tag) ' DIALOGO PARA ADICIONAR (Outros)
					Wait For(Res2) Complete (ValAddedd As String)
					
					' ******************************************************************************
					' OBS: VARIÁVEL "VALADDEDD" ESTÁ DECLARADA DENTRO DA CONDIÇÃO IF. SE A MESMA 
					' NÃO FOR INICIALIZADA, O CÓDIGO ABAIXO (IF UTILS.NNE(VALADDEDD) THEN) PODERÁ
					' PROVOCAR ERRO!!!
					' ******************************************************************************
					OtherReturn = ValAddedd
				End If
	
				'If Utils.NNE(ValAddedd) Then
				If Utils.NNE(OtherReturn) Then
					this.RemoveAt(Position)
					this.Add(OtherReturn)
'					this.Add("(Outros)")
					If ListBoxExtendedFormat Then CLAItemSelectValue.Add("(Outros)")
					this.SelectedIndex = Position
					Dim Newtitle As String = OtherReturn
				End If
				
				Dim lot As Int = Utils.IfNullOrEmpty( _
						DBStructures.GetScriptColumnStrEVCJSON($"select distinct paramters from dta_tasks_items_adds 
							where task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and unique_key='${uniquekey.Trim}'"$, _
							"paramters", "level_object_tagcode"), "0")

				Dim SetInner As Int = 0
				Try
					Dim panpar As Panel = pan.Parent
					Dim lbl As Label = panpar.GetView(0)
					If (Utils.NNE(lbl.Text)) Then
						If (lbl.Tag = 1) Then
							Dim sSQLw As String = $"update dta_requests_relations set inner_title='${Newtitle}'
									where request_tagcode='${request_tagcode.trim}' 
									and relation_tagcode='${task_tagcode.trim}' 
									and repeatcounter=${repeatcounter}"$
							Utils.SaveSQLToLog("CLAItemSelectValue_ItemClick",sSQLw, request_tagcode)
							'Starter.LocalSQLEVC.ExecNonQuery(sSQLw)
							SetInner = 1
						End If
					End If
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
				PressedAnswerTagCode = tagcode

				'execute_status='${status}',
				Dim status As Int = 0
				If Utils.NNE(New) Then
					status = 1
				End If
				Log(SelectScript)
				
				If Utils.NNE(SelectScript) And Utils.NNE(New) Then
					Try
						SelectScriptTagcode = DBStructures.getSelectScriptField(SelectScript, "tagcode", Position, True) 'SelectScript, True)
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
					End Try
				Else
					
				End If
											
				SetMandatoryValue(item_tagcode.Trim, Utils.Int2Bool(status))
				Dim sSQL As String = $"update dta_requests_values set execute_value='${New}',
								execute_status='${status}',
								execute_datetime='${sACLADatetime}', 
								execute_value_title='${Newtitle}',
								execute_latitude='${sACLALatitude}', 
								execute_longitude='${sACLALongitude}', 
								object_tagcode='${SelectScriptTagcode}' 
								where request_tagcode='${request_tagcode.trim}' 
									and task_tagcode='${task_tagcode.trim}' 
									and item_tagcode='${item_tagcode.trim}' 
									and unique_key='${uniquekey.trim}' 
									and tagcode='${tagcode.trim}'
									and repeatcounter=${repeatcounter}
									and repeatitemcounter=${repeatitemcounter}
									and repeatfieldcounter=${repeatfieldcounter}"$
				Log(sSQL)
				ThisContinua = Utils.SaveSQLToLog("CLAItemSelectValue_ItemClick",sSQL, request_tagcode)
				
				If (lot = 1) And Utils.NNE(SelectScriptTagcode) Then
					Dim parenttag As String =  DBStructures.GetScriptColumnStrEVC($"select parent_tagcode from dta_tasks_items
							where task_tagcode='${task_tagcode.trim}' and item_tagcode='${item_tagcode.trim}' and unique_key='${uniquekey.trim}'"$, _
							"parent_tagcode")
					If Utils.NNE(parenttag) Then
						Dim sSQL As String = $"update dta_requests_values set object_tagcode='${SelectScriptTagcode}'
								where request_tagcode='${request_tagcode.trim}' 
									and task_tagcode='${task_tagcode.trim}'  
									and unique_key='${parenttag.trim}' 
									and repeatcounter=${repeatcounter}
									and repeatitemcounter=${repeatitemcounter}"$
						Dim thisOK As Boolean = Utils.SaveSQLToLog("CLAItemSelectValue_ItemClick",sSQL, request_tagcode.Trim)
					End If
				End If
				
				params.Initialize
				If (ThisContinua) Then
					'params.Clear
					params.Put("_token", ShareCode.APP_TOKEN)
					params.Put("ACLARequest", request_tagcode)
					params.Put("ACLAAction", action_tagcode)
					params.Put("ACLATask", task_tagcode)
					params.Put("ACLAItem", item_tagcode)
					params.Put("ACLAUniqueKey", uniquekey)
					params.Put("ACLATagcode", tagcode.trim)
					params.Put("ACLAValue", New)
					params.Put("ACLAValuetitle", Newtitle)
					params.Put("ACLAReqCounter", repeatcounter)
					params.Put("ACLARepeatItem", repeatitemcounter)
					params.Put("ACLARepeatField", repeatfieldcounter)
					params.Put("ACLAInner", SetInner)
					params.Put("ACLAObjectTag", SelectScriptTagcode)
					
					params.Put("ACLADatetime", sACLADatetime)
					params.Put("ACLALatitude", sACLALatitude)
					params.Put("ACLALongitude", sACLALongitude)
					
					
					Dim ACLSessUser As String = ShareCode.SESS_OPER_User
					Dim ACLClear As Int = 0
					params.Put("ACLSessUser", ACLSessUser)
					params.Put("ACLClear", ACLClear)
					params.Put("versionTagcode", Main.VersionTagcode)
					params.Put("_authorization", Main.DeviceAuthorization)
					params.Put("_instance", Main.DeviceInstance)
					params.put("_deviceBrand", Main.DeviceBrand)
					params.put("_deviceModel", Main.DeviceModel)
					params.put("_deviceMacAddress", Main.DeviceMacAddress)
					params.Put("_user", ShareCode.SESS_User)
				End If

			End If
		Else
			ThisContinua = False
		End If
		
		If (ThisContinua) Then
			If (New = 0) Then
				pan.Color = Consts.ColorSelecNotSelected
			Else
				pan.Color = Consts.ColorSelecSelected
			End If
			
			If (POINTS_RESULT) Then
				If Not(Utils.isNullOrEmpty(pan.tag)) Then
					Dim PanCols As List = Regex.Split("\|", pan.tag )
					If Not(PanCols.Get(0) = New) Then
						Dim panval As Float = PanCols.Get(1)
						If (New = 0) Then
							TOTAL_POINTS  = TOTAL_POINTS - panval
						Else
							TOTAL_POINTS  = TOTAL_POINTS + panval
						End If
					End If
				End If
				FINPoints.Text = TOTAL_POINTS
				
				params.Put("ACLATotalPoints", TOTAL_POINTS)
				
				Dim sSQL As String = $"update dta_requests_relations set points=${TOTAL_POINTS} where request_tagcode='${request_tagcode.trim}' and
								relation_tagcode='${action_tagcode.trim}' and repeatcounter=${repeatcounter}"$
				Utils.SaveSQLToLog("CLAItemSelectValue_ItemClick",sSQL, request_tagcode)
				'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
				If (CHILD_OPERATION = False) Then
					Dim sSQL As String = $"update dta_requests set points=${TOTAL_POINTS} where tagcode='${request_tagcode.trim}'"$
					Utils.SaveSQLToLog("CLAItemSelectValue_ItemClick",sSQL, request_tagcode)
					'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
				End If
			End If

			If (params.IsInitialized) Then
				Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
				If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
					If Not(ShareCode.APP_WORKING_LOCAL) Then
						Dim GODR As ResumableSub = GetOfflineDataRec(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
						Wait For (GODR) Complete (HasResults As Boolean)
						If HasResults Then
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						Else
							Utils.CallApi(0, params, Me, Url, "", request_tagcode)
							Log(params)
						End If
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
					Sleep(250)
				Else
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_tagcode.Trim)
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
				End If
			End If
			
			
			Dim sSQLObj As String = $"select ifnull(a.object_tagcode, '') as object_tagcode
									from dta_requests_values as a
									inner join dta_tasks_items as b on (b.task_tagcode=a.task_tagcode 
									and b.item_tagcode=a.item_tagcode 
									and b.unique_key=a.unique_key
									and b.do_associate_type=1)
									where a.request_tagcode='${request_tagcode.trim}' 
									and a.task_tagcode='${task_tagcode.trim}' 
									and a.item_tagcode='${item_tagcode.trim}' 
									and a.unique_key='${uniquekey.trim}' 
									and a.tagcode='${tagcode.trim}'
									and a.repeatcounter=${repeatcounter}
									and a.repeatitemcounter=${repeatitemcounter}"$
									
			Dim ObjChange As String = Utils.IfNullOrEmpty( DBStructures.GetScriptColumnStrEVC(sSQLObj, "object_tagcode"), "")
			If Utils.NNE(ObjChange) Then
				Dim sSQLChange As String = $"update dta_requests set object_tagcode='${ObjChange}' where tagcode='${request_tagcode.trim}'"$
				Log(sSQLChange)
				Dim ThisContinuaChange As Boolean = Utils.SaveSQLToLog("CLAItemSelectValue_ItemClick", sSQLChange, request_tagcode)
				
				Dim params11 As Map
				params11.Initialize
				If (ThisContinuaChange) Then
					params11.Put("_token", ShareCode.APP_TOKEN)
					params11.Put("ACLARequest", request_tagcode)
					params11.Put("ACLAObject", ObjChange)
					params11.Put("ACLADatetime", sACLADatetime)
					params11.Put("ACLALatitude", sACLALatitude)
					params11.Put("ACLALongitude", sACLALongitude)
					params11.Put("ACLSessUser", ShareCode.SESS_OPER_User)
					
					Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/cla/change/object"$
					If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
						If Not(ShareCode.APP_WORKING_LOCAL) Then
							Utils.CallApi(0, params11, Me, Url, "", request_tagcode)
						Else
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(3,request_tagcode.Trim,"","")
							Utils.save2update(Url, Utils.MapToJson(params11), 0,WorkerND)
						End If
						Sleep(250)
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(3,request_tagcode.Trim,"","")
						Utils.save2update(Url, Utils.MapToJson(params11), 0,WorkerND)
					End If
				End If
			End If

			'******************************************************************************
			'	CONTROLO DE EVENTOS
			'******************************************************************************
			
			Dim resEvt2 As ResumableSub = InputControlParameter("SPINNER", item_tagcode.trim, Position, thisTag)
			Wait For(resEvt2) Complete (resbool2 As Boolean)
			If(resbool2) Then
				Log("sucesso!")
			End If
			
			Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
										$"select distinct paramters 
										from dta_tasks_items_adds where 1=1
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${item_tagcode.trim}'
										And unique_key='${uniquekey.trim}'"$, "paramters")	

			Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
									And task_tagcode='${task_tagcode.trim}'
									And item_tagcode='${item_tagcode.trim}'
									And unique_key='${uniquekey.trim}'
									And tagcode='${tagcode.trim}'
									Order by position"$  
			Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)

			If Eventos.RowCount >= 1 Then
				For n=0 To Eventos.RowCount-1
					Eventos.Position = n
					
					Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
					If (evt.type_item = 9) Then
						ControlUpdateRequestField(pan.Tag, evt.value, New)
					Else
						If (Utils.Int2Bool(evt.is_status)) Then
							If (Utils.Int2Bool(evt.have_condition) And Utils.Int2Bool(evt.have_status)) Then
								ForceTerminateChecklistAndCreate(evt.value)
							Else
								ForceTerminateChecklist(evt.value)
							End If
						else if (Utils.Int2Bool(evt.is_foto)) Then
							ForceTakePicture(pan.Tag)
						else if (Utils.Int2Bool(evt.is_more)) Then
							Try
								ForceAddMore(pan.Tag)
							Catch
							
							End Try
						else if ((Utils.Int2Bool(evt.is_action)) Or (evt.event_tagcode = "EVENTTASK_ACTIONNOFORM")) Then
							If (evt.event_tagcode = "EVENTTASK_ACTIONNOFORM") Then
								Dim resEvt As ResumableSub = ForceAddActionNoForm(pan.Tag, evt.value, evt.formula)  'Value=Tagcode Tipo AS,  Formula=Tagcode Tipo Operação
								Wait For(resEvt) Complete (retEvt As Boolean)
							Else
								If Utils.NNE(evt.value) Then
									ForceAddActionTPA(pan.Tag, evt.value, "",0)
								Else
									ForceAddAction(pan.Tag)
								End If
							End If
						else if (Utils.Int2Bool(evt.is_jump)) Then
							ForceAddJump(evt.value)
						else if ((Utils.Int2Bool(evt.is_alert)) Or (Utils.Int2Bool(evt.is_email))) Then
						else if ((Utils.Int2Bool(evt.request_signature)) Or ((evt.event_tagcode = "EVENTTASK_SIGNATURE") And (evt.type_item = 4))) Then
							ForceAddSignature(pan.Tag)
						else if ((Utils.Int2Bool(evt.have_formula) And (evt.type_item = 2)) Or ((evt.event_tagcode = "EVENTTASK_FORMULA") And (evt.type_item = 2))) Then
							If ((ShareCode.APPL_ACCOUNT.ToUpperCase = "ERGUELOP")) Then
								Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
								Wait For(res) Complete (retAPI As ExternalDocsInfo)
								If(retAPI.status = 1) Then
									Log($"Missing File downloaded"$)
								End If
							Else
'								PressedAnswerTagCode
								ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
								Sleep(150)
								Dim resFormula As ResumableSub = CalcFormulaTrigger(request_tagcode, task_tagcode.trim, item_tagcode, uniquekey, _
									PressedAnswerTagCode.trim, repeatcounter, repeatitemcounter, 0, _
									evt.value, evt.Formula, this.SelectedItem,this)
								Wait For(resFormula) Complete (result As Boolean)
								ProgressDialogHide
							End If
						else if ((evt.event_tagcode = "EVENTTASK_CHECKTABLE") And (evt.type_item = 15)) Then
							' ---
						else if ((evt.event_tagcode = "EVENTTASK_CHECKTABLE_ADVANCE") And (evt.type_item = 15)) Then
							' EDP TESTE
							ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
							
							Sleep(150)
							Dim CLA As RequestCLA = Types.MakeRequestCLA(request_tagcode, task_tagcode, task_tagcode,repeatcounter,0,Types.MakeInterv(0,"",0,0), _
													Types.MakeRequestTaskInfoClear,Types.MakeOtherCLA("", "", ""))
			
							Dim resFormula As ResumableSub = TableValueCheck(CLA, task_tagcode, item_tagcode, uniquekey)
							Wait For(resFormula) Complete (result As Boolean)
							ProgressDialogHide
							Sleep(50)
							
						else if ((evt.event_tagcode = "EVENTTASK_AUTODUPLICATE_CHAPTER") And (evt.type_item = 25)) Then
							
							' PASSAR PARA AQUI O CODIGO DEPOIS DE CONCLUIDO NO EDITTEXT
						else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
							ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
							Sleep(150)
							Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
							Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
							SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, False)
							ProgressDialogHide
							Sleep(50)
						else if ((evt.event_tagcode = "EVENTTASK_MANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
							ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
							Sleep(150)
							Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
							Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
							SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, True)
							ProgressDialogHide
							Sleep(50)
						else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYALLDOWN") And (evt.type_item = 7)) Then
							ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
							Sleep(150)
							SetMandatoryStateAfterItem(item_tagcode.trim, False)
							ProgressDialogHide
							Sleep(50)
						else if ((evt.event_tagcode = "EVENTTASK_MANDATORYALLDOWN") And (evt.type_item = 7)) Then
							ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
							Sleep(150)
							SetMandatoryStateAfterItem(item_tagcode.trim, True)
							ProgressDialogHide
							Sleep(50)
						else if ((evt.event_tagcode = "EVENTTASK_INTEGRATION") And (evt.type_item = 8)) Then
							Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
							Wait For(res) Complete (retAPI As ExternalDocsInfo)
							If(retAPI.status = 1) Then
								Log($"Missing File downloaded"$)
							End If
						else if ((evt.event_tagcode = "EVENTTASK_ADDCHECKLISTNEW") And (evt.type_item = 0)) Then
						else if ((evt.event_tagcode = "EVENTTASK_ADDCHECKLISTNEWPARM") And (evt.type_item = 1)) Then
							If (status = 1) Then
								ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
								Sleep(150)
								Dim typerequest As String = DBStructures.GetScriptColumnStrEVC($"select typerequest_tagcode as valor from dta_requests where 1=1 and tagcode='${request_tagcode}'"$, "valor")
								Dim object_tagcode As String = DBStructures.GetScriptColumnStrEVC( $"select distinct object_tagcode from dta_requests_values where 1=1
													And request_tagcode='${request_tagcode.trim}'
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'
													And repeatcounter='${repeatcounter}'
													And repeatitemcounter='${repeatitemcounter}'
													And repeatfieldcounter='0'
													"$, "object_tagcode")
								Dim res As ResumableSub = CheckTypeRequestTaskParamters4(request_tagcode, task_tagcode, typerequest, object_tagcode, 0, "")
								Wait For(res) Complete (Ended As Boolean)
								ProgressDialogHide
								Sleep(50)
							End If
			
						else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTER") And (evt.type_item = 30)) Then
'							Dim ItemTagCode As String = item_tagcode.Trim
'							Dim valorVerificar As String = ""
'							If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
'								ItemTagCode = evt.value.Trim
'							End If
'							Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
'							Wait For(res) Complete (retval As Int)
'							valorVerificar = retval
'			
'							Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
'										repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
'							Wait For(res1) Complete (retbool As Boolean)
							
							Dim ContinuarCheck As Boolean = True
							If (Utils.NNE(ThisItemValue) And Utils.isNumeric(ThisItemValue) And Utils.Int2Bool(evt.have_status)) Then
								ContinuarCheck = False ' JÁ TEM VALOR
							End If
			
							If (ContinuarCheck) Then
								Dim ItemTagCode As String = item_tagcode.Trim
								Dim valorVerificar As String = ""
								If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
									ItemTagCode = evt.value.Trim
								End If
								Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
								Wait For(res) Complete (retval As Int)
								valorVerificar = retval
				
								ThisItemValue = valorVerificar
			
								Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
										repeatcounter, repeatitemcounter, repeatitemcounter, ThisItemValue)
								Wait For(res1) Complete (retbool As Boolean)
							End If
			
'							If (Utils.NNE(ThisItemValue)) Then
'								If (this Is B4XStateButton) And (evt.have_condition=9) Then
'									Dim b4xsb_this As B4XStateButton = this
'									b4xsb_this.Text = ThisItemValue
'								End If
'							End If

						else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTEROTHER") And (evt.type_item = 31)) Then
							'*******************************************************************************************************
							' NOTE: A MESMA FUNCIONALIDADE SÓ QUE PERMITE INDICAR OUTRO ITEM_TAGCODE QUE VAI RECEBER O RESULTADO
							'*******************************************************************************************************
							Dim ItemTagCode As String = item_tagcode.Trim
							Dim OtherValue As String = ""
							Dim valorVerificar As String = ""
							If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
								ItemTagCode = evt.value.Trim
							End If
							If (Utils.NNE(evt.formula)) Then
								OtherValue = evt.formula.Trim
							End If
							Dim res As ResumableSub = CLAIGetSetExternalCounterOther(task_tagcode, ItemTagCode, ThisItemValue, OtherValue, evt)
							Wait For(res) Complete (retval As Int)
							valorVerificar = retval
			
							Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, OtherValue, uniquekey, PressedAnswerTagCode, _
										repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
							Wait For(res1) Complete (retbool As Boolean)
			
						End If
					End If
					
				Next
			End If
			
		
		End If
	End If
End Sub


'**************************************************************************
'	ACÇÕES/EVENTOS DE RESPOSTA
'**************************************************************************
' Action = 0
' Picture = 1
' Obs = 2
' AS = 3
' Signature = 4
'

' *************************************************************
' TIP: UPDATE: ATUALIZAÇÃO DE DADOS DA INTERVENÇÃO NO SERVIDOR
' *************************************************************
Sub ControlUpdateRequestField(CLAItem As RequestCLAItem, field As String, value As String)
	Dim sSQLw As String = $"update dta_requests set ${field}='${value}'
									where tagcode='${CLAItem.Request.trim}' "$
	Utils.SaveSQLToLog("ControlUpdateRequestField",sSQLw, CLAItem.Request)
	
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLARequest", CLAItem.Request.trim)
	params.Put("ACLAField", field)
	params.Put("ACLAValue", value)
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/field/update"$
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
			Utils.CallApi(0, params, Me, Url, "", CLAItem.Request.trim)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,CLAItem.Request.Trim,"","")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(500)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,CLAItem.Request.Trim,"","")
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If
End Sub


' *************************************************************
' TIP: EVENTO TRIGGER DE INTEGRAÇÃO COM ERPS
' *************************************************************
Sub ForceExternalRequest2(request_tagcode As String, task_tagcode As String, _
						item_tagcode As String, uniquekey As String, repeatcounter As Int, _
						repeatitemcounter As Int, formula As String, QuestParams As Map) As ResumableSub
						
	Dim RetornaRes As ExternalDocsInfo = Types.MakeExternalDocsInfo(0, "", "", "", "")
	If (QuestParams.Size > 0) Then
		Try
			Dim have_integration As Int = QuestParams.Get("have_integration")
		Catch
			Dim have_integration As Int = 0
		End Try
		
		If (Utils.Int2Bool(have_integration)) Then
			Dim integration_settings As Map = QuestParams.Get("integration_settings")

			Dim ENTIDADE As String = ""
			Dim OBJECTO As String = ""
			Dim PedidoSQL As String = $"select * from dta_requests where tagcode='${request_tagcode.trim}'"$
			Private Record As Cursor = Starter.LocalSQLEVC.ExecQuery(PedidoSQL)
			If Record.RowCount > 0 Then
				Record.Position = 0
				Dim ENTIDADE As String = Utils.IfNullOrEmpty(Record.GetString("entity_tagcode"), "")
				Dim OBJECTO As String = Utils.IfNullOrEmpty(Record.GetString("object_tagcode"), "")
			End If
			Record.Close
	
			'If Utils.NNE(OBJECTO) And Not(OBJECTO = "__NONE__") Then
			If (Utils.NE(OBJECTO) Or (OBJECTO = "__NONE__")) Then
				MsgboxAsync(ShareCode.noObjectForceExternalRequest, ShareCode.GeneralAlertTitle)
			Else
				ProgressDialogShow2(ShareCode.Pg2MsgProcessDocs, False)
			
				Dim ACCOUNT As String = integration_settings.Get("account")
				Dim TIPODOC As String = integration_settings.Get("documenttype")
				Dim success_message As String = integration_settings.Get("success_message")
				Dim rejected_message As String = integration_settings.Get("rejected_message")
				Dim error_message As String = integration_settings.Get("error_message")
				Dim Continuar As Boolean = True
			
				If (Continuar) Then
					If (formula = "SEND:GT:ERGUELOP") Then
						TIPODOC = "GT"
					Else If (formula = "SEND:GR:ERGUELOP") Then
						TIPODOC = "GR"
					End If
					'===========================================================================
					' INICIALIZA ARRAYS DE DADOS A PASSAR PARA O URL DA API
					'===========================================================================
					Dim ChecklistDataFields As List : ChecklistDataFields.initialize
					Dim ObjectDataFields As List : ObjectDataFields.initialize
					Dim EntityDataFields As List : EntityDataFields.initialize
					Dim RequestDataFields As List : RequestDataFields.initialize
					Dim LocalDataFields As List : LocalDataFields.initialize
					Dim ContactDataFields As List : ContactDataFields.initialize
					'===========================================================================
					' IDENTIFICA SE EXISTEM CAMPOS DE PREENCHIMENTO OBRIGATÓRIO
					'===========================================================================
					Dim AlertMandatory As Boolean = False
					
					Dim checklist_fields As List = integration_settings.Get("checklist_fields")
					For Each colchecklist_fields As Map In checklist_fields
						
						Dim this_item_tagcode As String = colchecklist_fields.Get("item_tagcode")
						Dim column_return As String = Utils.IfNullOrEmpty(colchecklist_fields.Get("column_return"), "execute_value")
						Dim mandatory As Int = colchecklist_fields.Get("mandatory")
						If Utils.NNE(this_item_tagcode) Then
							Dim valorstr As String = DBStructures.GetScriptColumnStrEVC($"select ${column_return} as valorstr from dta_requests_values
												where request_tagcode='${request_tagcode.trim}' and item_tagcode='${this_item_tagcode}'"$, _
												"valorstr")
					
							Dim thisMAP As Map : thisMAP.Initialize
'							thisMAP.Put(this_item_tagcode, valorstr)
							thisMAP.Put("key", this_item_tagcode)
							thisMAP.Put("value", valorstr)
							ChecklistDataFields.Add(thisMAP)
							If (Utils.Int2Bool(mandatory) And (Utils.NE(valorstr))) Then
								AlertMandatory = True
							End If
						End If
					Next
					
					If Utils.NNE(OBJECTO) And Not(OBJECTO = "__NONE__") Then
						Dim object_fields As List = integration_settings.Get("object_fields")
						For Each colobject_fields As Map In object_fields
							Dim this_field_name As String = colobject_fields.Get("field_name")
							Dim is_additional As Int = colobject_fields.Get("is_additional")
							Dim mandatory As Int = colobject_fields.Get("mandatory")
							If Utils.NNE(this_field_name) Then
								If (Utils.Int2Bool(is_additional)) Then
									Dim valorstr As String = DBStructures.GetScriptColumnStrEVC($"select value as valorstr from dta_objects_fields
												where object_tagcode='${OBJECTO}' and field_tagcode='${this_field_name}'"$, _
												"valorstr")
								Else
									Dim valorstr As String = DBStructures.GetScriptColumnStrEVC($"select ${this_field_name} as valorstr from dta_objects
												where tagcode='${OBJECTO}'"$, _
												"valorstr")
								End If
					
								Dim thisMAP As Map : thisMAP.Initialize
'								thisMAP.Put(this_field_name, valorstr)
								thisMAP.Put("key", this_field_name)
								thisMAP.Put("value", valorstr)
								ObjectDataFields.Add(thisMAP)
								If (Utils.Int2Bool(mandatory) And (Utils.NE(valorstr))) Then
									AlertMandatory = True
								End If
							End If
						Next
					End If
					
					If Utils.NNE(ENTIDADE) Then
						Dim entity_fields As List = integration_settings.Get("entity_fields")
						For Each colentity_fields As Map In entity_fields
							Dim this_field_name As String = colentity_fields.Get("field_name")
							Dim is_additional As Int = colentity_fields.Get("is_additional")
							Dim mandatory As Int = colentity_fields.Get("mandatory")
							If Utils.NNE(this_field_name) Then
								If (Utils.Int2Bool(is_additional)) Then
									Dim valorstr As String = DBStructures.GetScriptColumnStrEVC($"select value as valorstr from dta_objects_fields
												where object_tagcode='${ENTIDADE}' and field_tagcode='${this_field_name}'"$, _
												"valorstr")
								Else
									Dim valorstr As String = DBStructures.GetScriptColumnStrEVC($"select ${this_field_name} as valorstr from dta_objects
												where tagcode='${OBJECTO}'"$, _
												"valorstr")
								End If
					
								Dim thisMAP As Map : thisMAP.Initialize
'								thisMAP.Put(this_field_name, valorstr)
								thisMAP.Put("key", this_field_name)
								thisMAP.Put("value", valorstr)
								EntityDataFields.Add(thisMAP)
								If (Utils.Int2Bool(mandatory) And (Utils.NE(valorstr))) Then
									AlertMandatory = True
								End If
							End If
						Next
					End If
					
					If Utils.NNE(request_tagcode) Then
						Dim request_fields As List = integration_settings.Get("request_fields")
						For Each colrequest_fields As Map In request_fields
							Dim this_field_name As String = colrequest_fields.Get("field_name")
							Dim is_additional As Int = colrequest_fields.Get("is_additional")
							Dim mandatory As Int = colrequest_fields.Get("mandatory")
							If Utils.NNE(this_field_name) Then
								If (Utils.Int2Bool(is_additional)) Then
									Dim valorstr As String = DBStructures.GetScriptColumnStrEVC($"select value as valorstr from dta_requests_fields
												where request_tagcode='${request_tagcode.Trim}' and field_tagcode='${this_field_name}'"$, _
												"valorstr")
								Else
									Dim valorstr As String = DBStructures.GetScriptColumnStrEVC($"select ${this_field_name} as valorstr from dta_requests
												where tagcode='${request_tagcode.Trim}'"$, _
												"valorstr")
								End If
					
								Dim thisMAP As Map : thisMAP.Initialize
'								thisMAP.Put(this_field_name, valorstr)
								thisMAP.Put("key", this_field_name)
								thisMAP.Put("value", valorstr)
								RequestDataFields.Add(thisMAP)
								If (Utils.Int2Bool(mandatory) And (Utils.NE(valorstr))) Then
									AlertMandatory = True
								End If
							End If

						Next
					End If
					
					Dim use_local_fields As Int = integration_settings.Get("use_local_fields")
					'===========================================================================
					' IDENTIFICA A ORIGEM DO LOCAL_TAGCODE 0-REQUESTS, 1-OBJECTS, 2-ENTITIES
					'===========================================================================
					Dim local_fields_origin As Int = integration_settings.Get("local_fields_origin")
					If (Utils.Int2Bool(use_local_fields)) Then
						Dim DataTagCode As String = ""
						If (local_fields_origin = 0) Then
							DataTagCode = DBStructures.GetScriptColumnStrEVC($"select local_tagcode as valorstr from dta_requests
												where tagcode='${request_tagcode.trim}'"$, _
												"valorstr")
						else if (local_fields_origin = 1) Then
							DataTagCode = DBStructures.GetScriptColumnStrEVC($"select local_tagcode as valorstr from dta_objects
												where tagcode='${OBJECTO}'"$, _
												"valorstr")
						Else
							DataTagCode = DBStructures.GetScriptColumnStrEVC($"select local_tagcode as valorstr from dta_objects
												where tagcode='${ENTIDADE}'"$, _
												"valorstr")
						End If
					
						If Utils.NNE(DataTagCode) Then
							Dim local_fields As List = integration_settings.Get("local_fields")
							For Each collocal_fields As Map In local_fields
								Dim mandatory As Int = collocal_fields.Get("mandatory")
								Dim field_name As String = collocal_fields.Get("field_name")
							
								Dim valorstr As String = DBStructures.GetScriptColumnStrEVC($"select ${field_name} as valorstr from dta_locations
													where tagcode='${DataTagCode}'"$, _
													"valorstr")
					
								Dim thisMAP As Map : thisMAP.Initialize
'								thisMAP.Put(field_name, valorstr)
								thisMAP.Put("key", field_name)
								thisMAP.Put("value", valorstr)
								LocalDataFields.Add(thisMAP)
								If (Utils.Int2Bool(mandatory) And (Utils.NE(valorstr))) Then
									AlertMandatory = True
								End If
							Next
							
						End If
					End If
				
					Dim use_contact_fields As Int = integration_settings.Get("use_contact_fields")
					'===========================================================================
					' IDENTIFICA A ORIGEM DO CONTACTO 0-REQUESTS, 1-OBJECTS, 2-ENTITIES
					'===========================================================================
					Dim contact_fields_origin As Int = integration_settings.Get("contact_fields_origin")
					If (Utils.Int2Bool(use_contact_fields)) Then
						Dim DataTagCode As String = ""
						If (contact_fields_origin = 0) Then
							DataTagCode = DBStructures.GetScriptColumnStrEVC($"select contact_tagcode as valorstr from dta_requests_contacts
												where request_tagcode='${request_tagcode.trim}' limit 1"$, _
												"valorstr")
						else if (contact_fields_origin = 1) Then
							DataTagCode = DBStructures.GetScriptColumnStrEVC($"select contact_tagcode as valorstr from dta_objects_contacts
												where object_tagcode='${OBJECTO}' limit 1"$, _
												"valorstr")
						Else
							DataTagCode = DBStructures.GetScriptColumnStrEVC($"select contact_tagcode as valorstr from dta_objects_contacts
												where object_tagcode='${ENTIDADE}' limit 1"$, _
												"valorstr")
						End If

						If Utils.NNE(DataTagCode) Then
							Dim contact_fields As List = integration_settings.Get("contact_fields")
							For Each colcontact_fields As Map In contact_fields
								Dim mandatory As Int = colcontact_fields.Get("mandatory")
								Dim field_name As String = colcontact_fields.Get("field_name")
							
								Dim valorstr As String = DBStructures.GetScriptColumnStrEVC($"select ${field_name} as valorstr from dta_contacts
													where tagcode='${DataTagCode}'"$, _
													"valorstr")
					
								Dim thisMAP As Map : thisMAP.Initialize
'								thisMAP.Put(field_name, valorstr)
								thisMAP.Put("key", field_name)
								thisMAP.Put("value", valorstr)
								ContactDataFields.Add(thisMAP)
								If (Utils.Int2Bool(mandatory) And (Utils.NE(valorstr))) Then
									AlertMandatory = True
								else If (Utils.Int2Bool(mandatory) And (Utils.NNE(valorstr))) Then
									If (valorstr = "0") Then
										AlertMandatory = True
									End If
								End If
							Next
							
						End If
					End If

					If (AlertMandatory) Then
						MsgboxAsync(ShareCode.noMandatoryDataForceExternalRequest, ShareCode.GeneralAlertTitle)
					Else
						If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
							Dim params As Map
							params.Initialize
							params.Clear
							params.Put("_token", ShareCode.APP_TOKEN)
							params.Put("ACLARequest",request_tagcode.trim)
							params.Put("ACLAAction", task_tagcode)
							params.Put("ACLARepeatCounter", repeatcounter)
							params.Put("ACLAEntity", ENTIDADE)
							params.Put("ACLAObject", OBJECTO)
							params.Put("ACLADataHora", Utils.GetCurrDatetime)
							params.Put("ACLAUser", ShareCode.SESS_OPER_User)
							params.Put("ACLATipoDoc", TIPODOC)
							params.Put("ACLAAccount", ACCOUNT)
							params.Put("ACLAFLDSChecklist", ChecklistDataFields)
							params.Put("ACLAFLDSObject", ObjectDataFields)
							params.Put("ACLAFLDSEntity", EntityDataFields)
							params.Put("ACLAFLDSRequest", RequestDataFields)
							params.Put("ACLAFLDSLocal", LocalDataFields)
							params.Put("ACLAFLDSContact", ContactDataFields)
							params.Put("versionTagcode", Main.VersionTagcode)
							params.Put("_authorization", Main.DeviceAuthorization)
							params.Put("_instance", Main.DeviceInstance)
							params.put("_deviceBrand", Main.DeviceBrand)
							params.put("_deviceModel", Main.DeviceModel)
							params.put("_deviceMacAddress", Main.DeviceMacAddress)
							params.Put("_user", ShareCode.SESS_User)
							Dim request_url As String = Utils.IfNullOrEmpty(integration_settings.Get("request_url"), "orion/external/get/doc2")
							Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/${request_url}"$
							Dim data As String
							Try
								Dim JSON As JSONGenerator
								JSON.Initialize(params)
								
								data =   JSON.ToPrettyString(1)
								Dim Job As HttpJob
								Job.Initialize("",Me)
								Dim addr As String = Url
								
								Job.PostString(addr, data )
								Job.GetRequest.Timeout=40000
								Job.GetRequest.SetContentType("application/json")

								Dim success_message As String = integration_settings.Get("success_message")
								Dim rejected_message As String = integration_settings.Get("rejected_message")
								Dim error_message As String = integration_settings.Get("error_message")
								
								Wait For (Job) JobDone(Job As HttpJob)
								If Job.Success Then
									Log(Job.GetString)
									Dim m As Map =  Utils.JobAPIMAP(Job)
									Log(m)
									Dim status As Int = m.Get("status")
									If (status = 1) Then
										Dim does_return_values As Int = integration_settings.Get("does_return_values")
										If Utils.Int2Bool(does_return_values) Then
											
											Dim ACLAFieldsValues As List : ACLAFieldsValues.initialize
											
											Dim sACLADatetime As String = Utils.GetCurrDatetime
											Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
											Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
											Dim returned_values As List = integration_settings.Get("returned_values")
											
											
											Dim dataFields As List = m.Get("data")
											For Each coldata As Map In dataFields
												Dim field As String = coldata.Get("field")
												Dim value As String = coldata.Get("value")
												
												For Each colreturned_values As Map In returned_values
													Dim return_to_checklist_field As Int = colreturned_values.Get("return_to_checklist_field")
													Dim return_to_object_field As Int = colreturned_values.Get("return_to_object_field")
													Dim return_to_request_field As Int = colreturned_values.Get("return_to_request_field")
												
													Dim return_value As String = colreturned_values.Get("return_value")
													Dim return_field As String = colreturned_values.Get("return_field")
													
													If (field=return_field) Then
														value = Utils.IfNullOrEmpty(value, return_value)
														If Utils.Int2Bool(return_to_checklist_field) Then
															Dim sSQLw As String = $"update dta_requests_values set execute_status=1,
																		execute_value='${value.trim}',
																		execute_datetime='${sACLADatetime}',
																		execute_latitude='${sACLALatitude}', 
																		execute_longitude='${sACLALongitude}'
																		where request_tagcode='${request_tagcode.trim}' 
																		and task_tagcode='${task_tagcode.Trim}'
																		and item_tagcode='${return_field.trim}'
																		and repeatcounter=0
																		And repeatitemcounter=0"$
															Utils.SaveSQLToLog("ControlUpdateRequestField",sSQLw, request_tagcode)
														End If
												
														If Utils.Int2Bool(return_to_request_field) Then
															Dim sSQLw As String = $"update dta_requests_fields set value='${value.trim}'
																where request_tagcode='${request_tagcode.trim}' and field_tagcode='${return_field.trim}'"$
															Utils.SaveSQLToLog("ControlUpdateRequestField",sSQLw, request_tagcode)
														End If
												
														If (Utils.Int2Bool(return_to_object_field) And Utils.NNE(OBJECTO)) Then
															Dim sSQLw As String = $"update dta_objects_fields set value='${value.trim}'
																where object_tagcode='${OBJECTO}' and field_tagcode='${return_field.trim}'"$
															Utils.SaveSQLToLog("ControlUpdateRequestField",sSQLw, request_tagcode)
														End If
												
														Try
															For nz = 0 To UPDATED_INNER_FIELDS.Size-1
																Dim rrr As FieldReference = UPDATED_INNER_FIELDS.Get(nz)
																If (rrr.tagname=return_field.Trim) Then
																	Dim thisLabel As Label = rrr.tagobject
																	thisLabel.Text = value.Trim
																End If
															Next
														Catch
															Log(LastException)
															Utils.WriteErrors2Log(LastException)
														End Try
												
														Dim thisMAP As Map : thisMAP.Initialize
														thisMAP.Put(return_field, value)
														ACLAFieldsValues.Add(thisMAP)
													End If
													
												Next
											Next

											Dim paramsRR As Map
											paramsRR.Initialize
											paramsRR.Put("_token", ShareCode.APP_TOKEN)
											paramsRR.Put("ACLARequest", request_tagcode)
											paramsRR.Put("ACLAAction", task_tagcode)
											paramsRR.Put("ACLATask", task_tagcode)
											paramsRR.Put("ACLAItem", item_tagcode)
											paramsRR.Put("ACLAUniqueKey", uniquekey)
											paramsRR.Put("ACLAReqCounter", repeatcounter)
											paramsRR.Put("ACLARepeatItem", 0)
											paramsRR.Put("ACLARepeatField", 0)
											paramsRR.Put("ACLAFieldsValues", ACLAFieldsValues)
											paramsRR.Put("ACLADatetime", sACLADatetime)
											paramsRR.Put("ACLALatitude", sACLALatitude)
											paramsRR.Put("ACLALongitude", sACLALongitude)
											paramsRR.Put("ACLSessUser", ShareCode.SESS_OPER_User)
					
											Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/force/external/update"$
											If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
												If Not(ShareCode.APP_WORKING_LOCAL) Then
													Dim GODR As ResumableSub = GetOfflineDataRec(1,request_tagcode.trim,task_tagcode.trim,item_tagcode.trim)
													Wait For (GODR) Complete (HasResults As Boolean)
													If HasResults Then
														Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.trim,task_tagcode.trim,item_tagcode.trim)
														Utils.save2update(Url, Utils.MapToJson(paramsRR), 0, WorkerND)
													Else
														Utils.CallApi(0, paramsRR, Me, Url, "", request_tagcode)
													End If
												Else
													Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.trim,task_tagcode.trim,item_tagcode.trim)
													Utils.save2update(Url, Utils.MapToJson(paramsRR), 0, WorkerND)
												End If
												Sleep(250)
											Else
												Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.trim,task_tagcode.trim,item_tagcode.trim)
												Utils.save2update(Url, Utils.MapToJson(paramsRR), 0, WorkerND)
											End If
										End If
										
										
										Try
											Dim lock_fields_success As Int = integration_settings.Get("lock_fields_success")
										Catch
											Dim lock_fields_success As Int = 0
										End Try
		
										If (Utils.Int2Bool(lock_fields_success)) Then
											Dim lock_fields As List = integration_settings.Get("lock_fields")
											For Each rowlock_fields As Map In lock_fields
												Dim return_field_name As String = rowlock_fields.Get("field_name")
												Dim ItemTagCodeValue As String = DBStructures.GetScriptColumnStrEVC($"select execute_value as valor
														from dta_requests_values where 1=1
														and request_tagcode='${request_tagcode.Trim}' 
														and task_tagcode='${task_tagcode.Trim}' 
														and item_tagcode='${return_field_name.Trim}'  
														And repeatcounter=${repeatcounter}
														and repeatitemcounter=${repeatitemcounter} limit 1"$, "valor")
												
												Dim ExisteAdds As Int = DBStructures.GetScriptColumnIntEVC($"select count(0) as total 
														from dta_requests_values_adds where 1=1
														and request_tagcode='${request_tagcode.Trim}' 
														and task_tagcode='${task_tagcode.Trim}' 
														and item_tagcode='${return_field_name.Trim}' 
														And repeatcounter=${repeatcounter}
														and repeatitemcounter=${repeatitemcounter}"$, "total")
														
												If (ExisteAdds >= 1) Then
													Dim sRunSQL As String = $"update dta_requests_values_adds
														set fieldval_03='1',
														fieldlast_execute_value='${ItemTagCodeValue}' 
														where 1=1
														and request_tagcode='${request_tagcode.Trim}' 
														and task_tagcode='${task_tagcode.Trim}' 
														and item_tagcode='${return_field_name.Trim}' 
														and repeatcounter=${repeatcounter}
														and repeatitemcounter=${repeatitemcounter}"$
												Else
													Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_values_adds", "id", "") +1 + 1000000
													Dim sRunSQL As String = $"insert into dta_requests_values_adds
														(id, request_tagcode, inner_request_tagcode, task_tagcode, item_tagcode, unique_key, tagcode,
														repeatcounter, repeatitemcounter, repeatfieldcounter, fieldval_03, fieldlast_execute_value) values 
														(${maxid}, '${request_tagcode.Trim}', '${task_tagcode.Trim}', '${task_tagcode.Trim}', 
													'${return_field_name.Trim}', '', '', '${repeatcounter}', '${repeatitemcounter}', '0', '1', '${ItemTagCodeValue}')"$
												End If
												Utils.SaveSQLToLog("CLAItemEditValueAdd_FocusChanged",sRunSQL, request_tagcode)
											Next
										End If
										
'										Dim call_event_triggers As Int = integration_settings.Get("call_event_triggers")
'										Dim event_triggers As List = integration_settings.Get("event_triggers")
'										For Each colevent_triggers As Map In event_triggers
'											Dim event_type As Int = colevent_triggers.Get("event_type")
'											Dim status_tagcode As String = colevent_triggers.Get("status_tagcode")
'											Dim run_on As Int = colevent_triggers.Get("run_on")
'										Next

										If Utils.NNE(success_message) Then
											MsgboxAsync(success_message, ShareCode.GeneralNoteTitle)
										End If
									Else
										Dim MessageThis As String = Utils.IfNullOrEmpty(rejected_message, ShareCode.LoginResetMessage_REJECTED)
										MsgboxAsync(MessageThis, ShareCode.GeneralAlertTitle)
									End If
								Else
									If Utils.NNE(error_message) Then
										MsgboxAsync(error_message, ShareCode.GeneralErrorTitle)
									End If
								End If
								Job.Release
							Catch
								Dim theData As String = $"${LastException}, ${data}"$
								MsgboxAsync(theData, ShareCode.GeneralErrorTitle)
							End Try
						End If
					End If
				End If
				ProgressDialogHide
			End If

		End If

	End If
	Return RetornaRes
End Sub

Sub ForceTakePicture(CLAItem As RequestCLAItem)
'	MsgboxAsync("teste","teste")
	Sleep(1500)
	CLAItem.Origin = 3
	CallSubDelayed2(CameraActivity2, "StartCamera3", CLAItem)
End Sub

Sub ForceAddMore(CLAItem As RequestCLAItem)
	Try
		CLAButtonOptions4(CLAItem, 2)
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
End Sub

Sub ForceAddAction(CLAItem As RequestCLAItem)
	Try
'		CLAButtonOptions2(CLAItem, 3)
		CLAButtonOptions3(CLAItem, 3, "", "", 0)
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
End Sub

Sub ForceAddActionTPA(CLAItem As RequestCLAItem, tagcode As String, group As String, actionforce As Int)
	Try
		CLAButtonOptions3(CLAItem, 3, tagcode, group, actionforce)
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
End Sub

Sub ForceAddSignature(CLAItem As RequestCLAItem)
	Try
		CLAButtonOptions4(CLAItem, 4)
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
End Sub

Sub ForceAddJump(unique_key As String )
	JumpToThisUKey(unique_key)
End Sub

Sub JumpToThisUKey(uKey As String)
	
	For n=0 To clListView.Size-1
		clListView.CollapseItem(n)
		Dim p As Panel = clListView.GetPanel(n)
		Dim doExit As Boolean = False
		For Each v As View In p.GetAllViewsRecursive
			Dim thisCLAItem As RequestCLAItem
			thisCLAItem.Initialize
			Dim Continuar As Boolean = True
			Try
				Dim thisCLAItem As RequestCLAItem = v.tag
			Catch
				Continuar = False
			End Try
			Dim uKey1 As String = ""
			If (Continuar) Then
				Try
					Dim uKey1 As String = thisCLAItem.UniqueKey
				Catch
					Continuar = False
				End Try
			End If
			
			If (Continuar) Then
				If (uKey1=uKey) Then
					clListView.JumpToItem(n)
					clListView.ExpandItem(n)
					doExit = True
					Exit
				End If
			End If
		Next
		If doExit Then Exit
	Next
End Sub

' *************************************************************
' TIP: EVENTO TRIGGER DE FECHO DE INTERVEÇÃO FORÇADA
' *************************************************************
Sub ForceTerminateChecklist(status As String)
	ProgressDialogShow2(ShareCode.Pg2MsgTerminarChk, False)
	Sleep(150)
	Dim SelStatus As Int = DBStructures.GetEVCIDFrom("type_statustypes", "tagcode", status)
	If SelStatus=0 Then SelStatus=3
	
	Dim UpdateDate As String = $", updated_at='${Utils.GetCurrDatetimeExt}'"$
	Dim sSQL As String = $"update dta_requests_relations set status_id=${SelStatus}${UpdateDate}, request_obs='Termino forçado' where request_tagcode='${CurrentCLA.Request.trim}' and
							relation_tagcode='${CurrentCLA.Action}' and repeatcounter=${CurrentCLA.RepeatCounter}"$
	Utils.SaveSQLToLog("ForceTerminateChecklist",sSQL, CurrentCLA.Request)
	'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
	
	If (CHILD_OPERATION = False) Then
		If Utils.NNE(UpdateDate) Then
			UpdateDate = $"${UpdateDate}, execdate_type=0 "$
		End If
			
		Dim sSQL As String = $"update dta_requests set status_id=${SelStatus}${UpdateDate}, request_obs='Termino forçado' where tagcode='${CurrentCLA.Request.Trim}'"$
		Utils.SaveSQLToLog("ForceTerminateChecklist",sSQL, CurrentCLA.Request)
		'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
	End If
	
	Private sACLALatitude As String = Utils.ifNullOrEmpty(LocationService.GeoLocal.lat, "")
	Private sACLALongitude As String = Utils.ifNullOrEmpty(LocationService.GeoLocal.lon, "")
	
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLARequest", CurrentCLA.Request)
	params.Put("ACLAState", SelStatus)
	params.Put("ACLAUser", ShareCode.SESS_OPER_User)
	params.Put("ACLAFirst", 0)
	If Utils.NNE(UpdateDate) Then
		params.Put("ACLAExecDate", Utils.GetCurrentDate)
	End If
	params.Put("ACLADatetime", Utils.GetCurrDatetime)
	Try
		params.Put("ACLALatitude", sACLALatitude)
		params.Put("ACLALongitude", sACLALongitude)
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
		params.Put("ACLALatitude", "")
		params.Put("ACLALongitude", "")
	End Try
	params.Put("ACLAChild", Utils.Bool2Int(CHILD_OPERATION))
	
	params.Put("ACLAAction", CurrentCLA.Action.trim)
	params.Put("ACLAReqCounter", CurrentCLA.RepeatCounter)
	params.Put("ACLAObs", "Termino forçado")
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clarel-satus/update"$
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
			Utils.CallApi(0, params, Me, Url, "", CurrentCLA.Request)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0,CurrentCLA.Request.trim,"","")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(500)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0,CurrentCLA.Request.trim,"","")
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If
	
	If (CHILD_OPERATION = False) Then
		Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/cla-satus/update"$
		If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
			If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
				Utils.CallApi(0, params, Me, Url, "", CurrentCLA.Request)
			Else
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0,CurrentCLA.Request.trim,"","")
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			End If
			Sleep(500)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0,CurrentCLA.Request.trim,"","")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
	End If
	Sleep(1000)
	
	If (ShareCode.APP_DOMAIN.ToLowerCase = "vfdsegp") Then
		Log("Enviar email: Estado=" & SelStatus)
		If ((SelStatus = 3) Or (SelStatus = 4)) Then
			SendBCCEmailAlert(CurrentCLA)
			Sleep(1500)
		End If
	Else
		Log("Não enviou email")
	End If
	
	ProgressDialogHide
	
	Dim valor As String = FinalObs.Text
	Dim rr As RequestCLAOBS = Types.MakeRequestCLAOBS(CHILD_OPERATION, CurrentCLA, valor)
	CallSubDelayed2(requests3, "ListReturn2", rr)
	
	Activity.Finish
	ShareCode.SetAnimation("zoom_enter", "zoom_exit")
End Sub


' ****************************************************************************
' TIP: EVENTO TRIGGER DE FECHO DE INTERVEÇÃO FORÇADA COM CRIAÇÃO ADICIONAL
' ****************************************************************************
Sub ForceTerminateChecklistAndCreate(value As String)
	ProgressDialogShow2(ShareCode.Pg2MsgTerminarChk, False)
	Sleep(150)
	Dim SelStatus As Int = DBStructures.GetEVCIDFrom("type_statustypes", "tagcode", "STUT_FINISHED")
	If SelStatus=0 Then SelStatus=3
	
	'forcar nestes casos o execute_datetime com o timestamp
	Dim UpdateDate As String = $", updated_at='${Utils.GetCurrDatetimeExt}'"$
	Dim sSQL As String = $"update dta_requests_relations set status_id=${SelStatus}${UpdateDate}, request_obs='Fecho de Intervenção' where request_tagcode='${CurrentCLA.Request.trim}' and
							relation_tagcode='${CurrentCLA.Action}' and repeatcounter=${CurrentCLA.RepeatCounter}"$
	Utils.SaveSQLToLog("ForceTerminateChecklistAndCreate",sSQL, CurrentCLA.Request)
	'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
	
	If (CHILD_OPERATION = False) Then
		If Utils.NNE(UpdateDate) Then
			UpdateDate = $"${UpdateDate}, execdate_type=0 "$
		End If
			
		Dim sSQL As String = $"update dta_requests set status_id=${SelStatus}${UpdateDate}, request_obs='Fecho de Intervenção' where tagcode='${CurrentCLA.Request.Trim}'"$
		Utils.SaveSQLToLog("ForceTerminateChecklistAndCreate",sSQL, CurrentCLA.Request)
		'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
	End If
	
	Private sACLALatitude As String = Utils.ifNullOrEmpty(LocationService.GeoLocal.lat, "")
	Private sACLALongitude As String = Utils.ifNullOrEmpty(LocationService.GeoLocal.lon, "")
	
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLARequest", CurrentCLA.Request)
	params.Put("ACLAState", SelStatus)
	params.Put("ACLAUser", ShareCode.SESS_OPER_User)
	params.Put("ACLAFirst", 0)
	If Utils.NNE(UpdateDate) Then
		params.Put("ACLAExecDate", Utils.GetCurrentDate)
	End If
	params.Put("ACLADatetime", Utils.GetCurrDatetime)
	Try
		params.Put("ACLALatitude", sACLALatitude)
		params.Put("ACLALongitude", sACLALongitude)
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
		params.Put("ACLALatitude", "")
		params.Put("ACLALongitude", "")
	End Try
	params.Put("ACLAChild", Utils.Bool2Int(CHILD_OPERATION))
	
	params.Put("ACLAAction", CurrentCLA.Action.trim)
	params.Put("ACLAReqCounter", CurrentCLA.RepeatCounter)
	params.Put("ACLAObs", "Fecho de Intervenção")
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clarel-satus/update"$
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
			Utils.CallApi(0, params, Me, Url, "", CurrentCLA.Request)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0,CurrentCLA.Request.trim,"","")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(500)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0,CurrentCLA.Request.trim,"","")
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If
	
	If (CHILD_OPERATION = False) Then
		Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/cla-satus/update"$
		If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
			If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
				Utils.CallApi(0, params, Me, Url, "", CurrentCLA.Request)
			Else
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.Request.trim, "", "")
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			End If
			Sleep(500)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0,CurrentCLA.Request.trim,"","")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
	End If
	Sleep(1000)
	
	Dim status As Int = 3
	If (ShareCode.APP_DOMAIN.ToLowerCase = "vfdsegp") Then
		Log("Enviar email: Estado=" & status)
		If ((status = 3) Or (status = 4)) Then
			SendBCCEmailAlert(CurrentCLA)
			Sleep(1500)
		End If
	Else
		Log("Não enviou email")
	End If
	
	ProgressDialogHide
	
	Dim rr As RequestCLAOBS = Types.MakeRequestCLAOBS(CHILD_OPERATION, CurrentCLA, value)
	CallSubDelayed3(requests3, "ListReturn4", rr, value)
	
	Activity.Finish
	ShareCode.SetAnimation("zoom_enter", "zoom_exit")
End Sub

Sub ButtonActionPause_Click
	If (ShareCode.SESS_IN_PAUSE = 1) Then
		Dim i As Int = Msgbox2(ShareCode.AvisoPararPausa, ShareCode.GeneralAlertTitle, ShareCode.Option_YES, ShareCode.Option_NO, "", Null)
		If (i=DialogResponse.POSITIVE) Then
			ShareCode.SESS_IN_PAUSE = 0
			Starter.AppState.WriteInteger("APP_START", "SESS_IN_PAUSE", ShareCode.SESS_IN_PAUSE)
			Starter.AppState.Flush
		End If
	End If
	WindowStatusUpdate
End Sub

Sub TabButtonChangeTerminate_Click
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(100)
	listsTabPanelExec.Visible = False
	listsTabPanelObject.Visible = False
	listsTabPanelTerminate.Visible = True
	'Private CLA_CURRENT_STATE As Int = 0
	CLA_CURRENT_PAGE = 2
	butChecklistRunEnd.Visible = True
	
	If (REPORT_GENERATED) Then
		'**************************************************************************************
		' SITUAÇÃO A VALIDAR!!!
		'**************************************************************************************
		butChecklistSendReport.Visible = False 'True
	Else
		butChecklistSendReport.Visible = False
	End If

	butChecklistReport.Visible = Utils.Int2Bool(ShareCode.DEVICE_PARAM_GENERATEREPORT)
	butChecklistPrinter.Visible = Utils.Int2Bool(ShareCode.DEVICE_PARAM_ACTIVATE_PRINTMODULE)
	
	If (CurrentCLA.Status.status < 3) Then
		butChecklistRunEnd.Visible = True
		butChecklistRunEnd.Text = ShareCode.checklistTabButtonChangeTerminate
	Else
		butChecklistRunEnd.Visible = False
		butChecklistRunEnd.Text = ShareCode.mainlayoutButtonLoginExit
	End If
	Try
		LoadExecution
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	ProgressDialogHide
End Sub

Sub TabButtonChangeObject_Click
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(150)
	listsTabPanelExec.Visible = False
	listsTabPanelObject.Visible = True
	listsTabPanelTerminate.Visible = False
	'Private CLA_CURRENT_STATE As Int = 0
	CLA_CURRENT_PAGE = 1
	butChecklistRunEnd.Visible = False
	butChecklistSendReport.Visible = False
	butChecklistReport.Visible = False
	butChecklistPrinter.Visible = False
	ProgressDialogHide
End Sub

Sub TabButtonChangeChecklist_Click
	ManageFocus("")
	TerminateButtonClick
End Sub

Sub ManageFocus(calledfrom As B4XView)
	
	If calledfrom Is EditText Then
		' PARA JÁ NAO FAZ NADA
	else if calledfrom Is FloatLabeledEditText Then
		' PARA JÁ NAO FAZ NADA
	Else
		MainEditFocusComponent.RequestFocus
	End If
	
End Sub

Sub TerminateButtonClick
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(100)
	CLA_TERMINATE_CLICK = 0
	listsTabPanelExec.Visible = True
	listsTabPanelObject.Visible = False
	listsTabPanelTerminate.Visible = False
	'Private CLA_CURRENT_STATE As Int = 0
	CLA_CURRENT_PAGE = 0
	butChecklistSendReport.Visible = False
	butChecklistReport.Visible = False
	butChecklistPrinter.Visible = False
	If (CurrentCLA.Status.status<3) Then
		butChecklistRunEnd.Visible = True
		butChecklistRunEnd.Text = ShareCode.checklistbutChecklistRunEnd
	Else
		butChecklistRunEnd.Visible = False
		'butChecklistRunEnd.Text = "Terminar"
	End If
	ProgressDialogHide
End Sub


Sub CLAItemRulerValue_ValueChanged (Value As Int, UserChanged As Boolean)

	Dim this As SeekBar = Sender
	Dim pan As Panel = this.Parent
	Dim Columns As List = Regex.Split("\|", this.tag )
	
	If (Columns.Size >= 1) Then
		Try
			Dim doContinua As Boolean = True
			Try
				Dim request_tagcode As String = Columns.Get(0)
				Dim action_tagcode As String = Columns.Get(1)
				Dim task_tagcode As String = Columns.Get(2)
				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
				Dim tagcode As String = Columns.Get(5)
				Dim val As String = Value 'Columns.Get(6)
'				Dim State As Int = Columns.Get(7)
'				Dim Multi As Int = Columns.Get(8)
				Dim repeatcounter As Int = Columns.Get(9)
				Dim repeatitemcounter As Int = Columns.Get(10)
				Dim repeatfieldcounter As Int = Columns.Get(11)
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				doContinua = False
			End Try
	
			If (doContinua) Then
				Dim lbl As Label = pan.GetView(3)
				lbl.Text = Value
		
				Dim status As Int = 0
				If Utils.NNE(val) Then
					If (val <> "0") Then
						status = 1
					End If
				End If
				
				If SeekBarHasNA And Value > 0 Then
					Dim act As Panel = pan.parent
					Dim v As B4XView = act.GetView(6)
					If v Is Button Then
						Dim btn As Button = v
						btn.TextColor = Colors.Gray
						CurrentButtonNA = False
					End If
					
				End If
				
				Dim sACLADatetime As String = Utils.GetCurrDatetime
				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
				
				If SeekBarHasNA And CurrentButtonNA Then
					Dim act As Panel = pan.parent
					Dim v As B4XView = act.GetView(6)
					If v Is Button Then
						Dim btn As Button = v
						btn.TextColor = Colors.Red
						val = "NA"
					End If
				End If
				
				Dim sSQL As String = $"update dta_requests_values set execute_value='${val}',
							execute_status='${status}',
							execute_datetime='${sACLADatetime.Trim}', 
							execute_latitude='${sACLALatitude.Trim}',
							execute_longitude='${sACLALongitude.Trim}' where request_tagcode='${request_tagcode.Trim}' and
							task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
							unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
				Log(sSQL)
				Utils.SaveSQLToLog("CLAItemRulerValue_ValueChanged",sSQL, request_tagcode)
				'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
			
				
		
				Dim params As Map
				params.Initialize
				params.Clear
				params.Put("_token", ShareCode.APP_TOKEN)
				params.Put("ACLARequest", request_tagcode)
				params.Put("ACLAAction", action_tagcode)
				params.Put("ACLATask", task_tagcode.trim)
				params.Put("ACLAItem", item_tagcode)
				params.Put("ACLAUniqueKey", uniquekey)
				params.Put("ACLATagcode", tagcode.trim)
				params.Put("ACLAValue", val)
				params.Put("ACLAReqCounter", repeatcounter)
				params.Put("ACLARepeatItem", repeatitemcounter)
				params.Put("ACLARepeatField", repeatfieldcounter)
				params.Put("ACLAInner", 0)
				
				params.Put("ACLADatetime", sACLADatetime)
				params.Put("ACLALatitude", sACLALatitude)
				params.Put("ACLALongitude", sACLALongitude)
					
				Dim ACLSessUser As String = ShareCode.SESS_OPER_User
				Dim ACLClear As Int = 0
				params.Put("ACLSessUser", ACLSessUser)
				params.Put("ACLClear", ACLClear)
				params.Put("versionTagcode", Main.VersionTagcode)
				params.Put("_authorization", Main.DeviceAuthorization)
				params.Put("_instance", Main.DeviceInstance)
				params.put("_deviceBrand", Main.DeviceBrand)
				params.put("_deviceModel", Main.DeviceModel)
				params.put("_deviceMacAddress", Main.DeviceMacAddress)
				params.Put("_user", ShareCode.SESS_User)
				Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
				If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
					If Not(ShareCode.APP_WORKING_LOCAL) Then
						Dim GODR As ResumableSub = GetOfflineDataRec(1,request_tagcode.trim,task_tagcode.trim,item_tagcode.trim)
						Wait For (GODR) Complete (HasResults As Boolean)
						If HasResults Then
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.trim,task_tagcode.trim,item_tagcode.trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						Else
							Utils.CallApi(0, params, Me, Url, "", request_tagcode)
						End If
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.trim,task_tagcode.trim,item_tagcode.trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
					Sleep(250)
				Else
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.trim,task_tagcode.trim,item_tagcode.trim)
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
				End If
				
				
				If SeekBarHasNA Then
					
				
					'******************************************************************************
					'	CONTROLO DE EVENTOS E ENTRADA DE DADOS POR PARAMTERS
					'******************************************************************************
					Dim paramters As String = Utils.IfNullOrEmpty( _
													DBStructures.GetScriptColumnStrEVC( _
														$"select paramters from dta_tasks_items_adds
														where task_tagcode='${task_tagcode.Trim}' 
															and item_tagcode='${item_tagcode.Trim}' 
															and unique_key='${uniquekey.Trim}'"$, "paramters"), "")
						
					If Utils.NNE(paramters) Then
						Dim parser As JSONParser
						parser.Initialize(paramters)
						Dim root As Map = parser.NextObject
							
						Dim inputcontrol As List = root.Get("inputcontrol")
						For Each colinputcontrol As Map In inputcontrol
							Dim actiontype As Int = colinputcontrol.Get("actiontype")
							Dim strmaxvalue As String = colinputcontrol.Get("maxvalue")
							Dim typecontrol As Int = colinputcontrol.Get("typecontrol")
							Dim actiontagcode As String = colinputcontrol.Get("actiontagcode")
							Dim formula As String = colinputcontrol.Get("formula")
							Dim actiongroup As String = colinputcontrol.Get("actiongroup")
							Dim actiononout As Int = colinputcontrol.Get("actiononout")
							Dim strminvalue As String = colinputcontrol.Get("minvalue")
								
							Dim actionresult As Int = Utils.IfNullOrEmpty(colinputcontrol.Get("actionresult"), "0")
							Dim actionforce As Int = Utils.IfNullOrEmpty(colinputcontrol.Get("actionforce"), "0")
								
							Dim respNC As Boolean = False
							If (typecontrol >= 1) Then
								If (typecontrol=1) Then
									Dim minvalue As Double = strminvalue.Replace(",",".")
									Dim maxvalue As Double = strmaxvalue.Replace(",",".")
									Dim form1 As String = $"[tv]>=${minvalue}&&[tv]<=${maxvalue}"$
									respNC = Not(SeekbarChangeColor(val, form1, this))
								else if (typecontrol=2) Then
									respNC = Not(SeekbarChangeColor(val, formula, this))
								End If
									
'							"conformity": 0, so execute se 1
'							"conformity_settings": {
'							"conformity_on": 0, se for 1 e respNC = true entao : Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC)
'							"nonconformity_on": 0 se for 1 e respNC = false entao : Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC) + 1


								Try
									Dim conformity As Int = colinputcontrol.Get("conformity")
									If Utils.Int2Bool(conformity) Then
										Dim conformity_settings As Map = colinputcontrol.Get("conformity_settings")
										Dim conformity_on As Int = conformity_settings.Get("conformity_on")
										Dim nonconformity_on As Int = conformity_settings.Get("nonconformity_on")
										
										If Utils.Int2Bool(conformity_on) And respNC Then
											Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC)
										else if Utils.Int2Bool(nonconformity_on) And Not(respNC) Then
											Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC) + 1
										End If
									End If
								Catch
									Log(LastException)
									Utils.WriteErrors2Log(LastException)
									Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC) + 1
								End Try
									
								Try
									Dim active_inactive As Int = colinputcontrol.Get("active_inactive")
									Dim active_inactive_settings As List = colinputcontrol.Get("active_inactive_settings")
									For Each col_active_inactive As Map In active_inactive_settings
										Dim item_tagcode As String = col_active_inactive.Get("item_tagcode")
										Dim active_color As String = col_active_inactive.Get("active_color")
										Dim inactive_color As String = col_active_inactive.Get("inactive_color")
													
										For i =0 To ComponentList.Size -1
											Dim ClItem As ComponentRecords = ComponentList.Get(i)
											If ClItem.item_tagcode = item_tagcode Then
												Dim View2Process As B4XView = ClItem.component
												If View2Process Is Panel Then
													Dim pnlB4x As Panel = View2Process
													Dim res As ResumableSub = ChangeComponent(item_tagcode,"ENABLE","",active_inactive)
													wait for (res) Complete (Finished As Boolean)
													If active_inactive = 1 Then
														If Utils.NNE(active_color) Then
															Dim ColorACTIVE As Int = Utils.ColorString(active_color.ToUpperCase)
														Else
															Dim ColorACTIVE As Int = Colors.White
														End If
														Dim res As ResumableSub = ChangeComponent(item_tagcode, "COLOR","", ColorACTIVE)
														wait for (res) Complete (Finished As Boolean)
													else If active_inactive = 0 Then
														If Utils.NNE(inactive_color) Then
															Dim ColorINACTIVE As Int = Utils.ColorString(inactive_color.ToUpperCase)
														Else
															Dim ColorINACTIVE As Int = Colors.LightGray
														End If
														Dim res As ResumableSub = ChangeComponent(item_tagcode, "ENABLE","", ColorACTIVE)
														wait for (res) Complete (Finished As Boolean)
													End If
												End If
											End If
										Next
									Next
								Catch
									Log(LastException)
									Utils.WriteErrors2Log(LastException)
								End Try
									
								
									
								Dim Req2Pass As RequestCLAItem = Types.MakeRequestCLAItem(request_tagcode,action_tagcode,task_tagcode,item_tagcode,uniquekey, _
								tagcode, repeatcounter,repeatitemcounter,repeatfieldcounter,"","","",0,0,0,"",DBStructures.DB2CLATaskItem("", ""),"")
 
								Dim RSub As ResumableSub = InputControlNextEval(pan,Req2Pass,fieldconfirm_nc,sACLADatetime,sACLALatitude,sACLALongitude, _
								actiononout,actiontype,respNC,actionresult,actiontagcode,actiongroup,actionforce)
								wait for (RSub) Complete (ReturnVal As Boolean)
								
							End If
						Next
					End If
				End If
		
			End If
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
	End If
	
End Sub

Sub InputControlNextEval(pan As Panel, PRequest As RequestCLAItem , fieldconfirm_nc As String,sACLADatetime As String,sACLALatitude As String,sACLALongitude As String, _
	actiononout As Int, actiontype As Int, respNC As Boolean, actionresult As Int,actiontagcode As String, actiongroup As String, actionforce As Int ) As ResumableSub
	
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(150)
'	Log("chegou ao InputControlNextEval")
	If Utils.NNE(PRequest) Then
		
	End If
	'**************************************************************************************
	' REGISTAR O VALOR OBTIDO COMO SENDO UMA NÃO CONFORMIDADE
	' TRANSFORMAR O RESULTADO DE RESPNC NUM INTEIRO E ADICIONAR 1 UNIDADE PARA
	' VALIDAR/PREENCHER O CAMPO "fieldconfirm_nc" DA TABELA "dta_requests_values_adds"
	'**************************************************************************************
'								Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC) + 1
									
	'**************************************************************************************
	' VERIFICA SE O REGISTO EXISTE NA TABELA  "dta_requests_values_adds" PARA FAZER UPDATE
	' CASO CONTRÁRIO FAZER UM INSERT
	'**************************************************************************************
	Dim sSQL As String = $"select fieldconfirm_nc from dta_requests_values_adds where request_tagcode='${PRequest.Request.Trim}' and
											task_tagcode='${PRequest.Task.Trim}' and item_tagcode='${PRequest.Item.Trim}' and 
											unique_key='${PRequest.UniqueKey.Trim}' and tagcode='${PRequest.Tagcode.Trim}'
											and repeatcounter=${PRequest.RepeatCounter}
											and repeatitemcounter=${PRequest.RepeatItemCounter}
											and repeatfieldcounter=${PRequest.repeatfieldcounter}"$
	Dim CursorRecItem As Cursor
	CursorRecItem = Starter.LocalSQLEVC.ExecQuery(sSQL)
									
	If CursorRecItem.RowCount <= 0 Then 'Record does not exists, Insert
		'**************************************************************************************
		Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_values_adds", "id", "") +1 + 1000000 'apanha o novo ID
										
		Dim sSQL As String = $"insert into dta_requests_values_adds (id,request_tagcode,inner_request_tagcode,task_tagcode,item_tagcode,
														unique_key,tagcode, repeatcounter,repeatitemcounter,repeatfieldcounter,fieldconfirm_nc) values
														(${maxid}, '${PRequest.Request.Trim}', '${PRequest.Task.Trim}', '${PRequest.Task.Trim}', '${PRequest.Item.Trim}', 
		'${PRequest.UniqueKey.Trim}', '${PRequest.Tagcode.Trim}', ${PRequest.RepeatCounter}, ${PRequest.RepeatItemCounter},
														${PRequest.repeatfieldcounter}, '${fieldconfirm_nc}');"$																					
														
		Utils.SaveSQLToLog("CLAItemEditValue_NonConformity",sSQL, PRequest.Request.Trim)
	Else ' Record Exists, Update
		'**************************************************************************************
		Dim sSQL As String = $"update dta_requests_values_adds set fieldconfirm_nc='${fieldconfirm_nc}'
											where request_tagcode='${PRequest.Request.Trim}' and
											task_tagcode='${PRequest.Task.Trim}' and item_tagcode='${PRequest.Item.Trim}' and 
											unique_key='${PRequest.UniqueKey.Trim}' and tagcode='${PRequest.Tagcode.Trim}'
											and repeatcounter=${PRequest.RepeatCounter}
											and repeatitemcounter=${PRequest.RepeatItemCounter}
											and repeatfieldcounter=${PRequest.repeatfieldcounter}"$						
											
		Utils.SaveSQLToLog("CLAItemEditValue_NonConformity",sSQL, PRequest.Request.Trim)
	End If
	
	CursorRecItem.Close
									
	Dim ACLSessUser As String = ShareCode.SESS_OPER_User
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLARequest", PRequest.Request.Trim)
	params.Put("ACLAAction", PRequest.Task.Trim)
	params.Put("ACLATask", PRequest.Task.Trim)
	params.Put("ACLAItem", PRequest.Item.Trim)
	params.Put("ACLAUniqueKey", PRequest.UniqueKey.Trim)
	params.Put("ACLATagcode",PRequest.Tagcode.Trim)
	params.Put("ACLAReqCounter", PRequest.RepeatCounter)
	params.Put("ACLARepeatItem", PRequest.RepeatItemCounter)
	params.Put("ACLARepeatField", PRequest.repeatfieldcounter)
	params.Put("ACLSessUser", ACLSessUser.Trim)
	params.Put("ACLADatetime", sACLADatetime.Trim)
	params.Put("ACLALatitude", sACLALatitude.Trim)
	params.Put("ACLALongitude", sACLALongitude.Trim)
	params.Put("ACLAFieldConfirmNC", fieldconfirm_nc)
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/ncadds"$
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then
			Dim GODR As ResumableSub = GetOfflineDataRec(1,PRequest.request.trim,PRequest.task.trim,PRequest.item.trim)
			Wait For (GODR) Complete (HasResults As Boolean)
			If HasResults Then
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,PRequest.request.trim,PRequest.task.trim,PRequest.item.trim)
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			Else
				Utils.CallApi(0, params, Me, Url, "", PRequest.Request.Trim)
			End If
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,PRequest.request.trim,PRequest.task.trim,PRequest.item.trim)
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(250)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,PRequest.request.trim,PRequest.task.trim,PRequest.item.trim)
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If
	Sleep(500)
								
	''' dentro do try
	
	
'	ForceAddMore(bbTag) '50
'	ForceTakePicture(bbTag) '51
'	ForceAddSignature(bbTag) '52
'	ForceAddAction(bbTag) '53

	If (actiononout = 1) Then
		'Alteracao solicitada pelo Celso. Só abre se respNC for diferente de actionresult e nao igual
		Try
			If (actiontype=3) And (respNC <> Utils.Int2Bool(actionresult)) And (respNC = True) Then
				ForceAddActionTPA(pan.Tag, actiontagcode, actiongroup, actionforce)
			else if (actiontype=50) And (respNC <> Utils.Int2Bool(actionresult)) And (respNC = True) Then
				ForceAddMore(pan.Tag)
			else if (actiontype=51) And (respNC <> Utils.Int2Bool(actionresult)) And (respNC = True) Then
				ForceTakePicture(pan.Tag)
			else if (actiontype=52) And (respNC <> Utils.Int2Bool(actionresult)) And (respNC = True) Then
				ForceAddSignature(pan.Tag)
			else if (actiontype=53) And (respNC <> Utils.Int2Bool(actionresult)) And (respNC = True) Then
				ForceAddAction(pan.Tag)
			End If
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		
										
	End If
	ProgressDialogHide
	Return True
End Sub

Sub GetFirstObjectType(rCLA As RequestCLA) As String
	Dim res As String = ""
	Dim theObj As String = DBStructures.GetScriptColumnStrEVC($"SELECT distinct c.connect2data FROM dta_requests_values AS a
								INNER JOIN dta_tasks_items AS b ON (b.task_tagcode=a.task_tagcode AND b.item_tagcode=a.item_tagcode AND b.unique_key=a.unique_key)
								INNER JOIN dta_tasks AS c ON (c.tagcode=b.task_tagcode)
								WHERE a.execute_status>=1
								AND a.request_tagcode='${rCLA.Request.Trim}'
								AND a.task_tagcode='${rCLA.Action.Trim}'
								AND a.repeatcounter='${rCLA.RepeatCounter}'
								AND c.connect2data <> ''
								AND b.do_name <> ''
								AND b.do_field <> '' limit 1"$, "connect2data")
	If Utils.NNE(theObj) Then
		Dim ColObj As List = Regex.Split("\|", theObj )
		Try
			res = ColObj.Get(0)
		Catch
			res = ""
		End Try
	End If
	Return res
End Sub

' *************************************************************
' TIP: CRIA E ASSOCIA OBJECTO À INTERVENÇÃO OU CHECKLIST
' *************************************************************
Sub CreateOrChangeObject(mm As MNOWTU) As ResumableSub
	Dim MAKE_New_Object As Int = mm.MAKE_New_Object
	Dim UPD_Existing_Object As Int = mm.UPD_Existing_Object
	Dim WHERE_To_Update As Int = mm.WHERE_To_Update
	Dim cl_is_father As Int = mm.cl_is_father	
	Dim RequestTypeGroup As Int = mm.RequestTypeGroup
	Dim objectTagValue As String = mm.objectTagValue
	Dim object_type As String = mm.object_type
	Dim objectTagRelValue As String = mm.objectTagRelValue
	Dim object_type_rel As String = mm.object_type_rel
	Dim RealObjectRelationToChange As String = mm.RealObjectRelationToChange
	Dim RealObjectToChange As String = mm.RealObjectToChange

	' *************************************************************************************************************
	' É INTERVENÇÃO? / É Checklist?
	' ---------------------------------
	' É AGRUPADORA E É PRINCIPAL? CRIA OU ACTUALIZA OBJECTO INTERVENÇÃO - PRIMEIRO
	' É AGRUPADORA E NÃO É PRINCIPAL? CRIA OU ACTUALIZA OBJECTO CHECKLIST - SEGUNDO
	' NÃO É AGRUPADORA? CRIA OU ACTUALIZA OBJECTO INTERVENÇÃO - PRIMEIRO
	' *************************************************************************************************************
	Dim WHERE_To_Update As Int = 0
	If ((Utils.Int2Bool(RequestTypeGroup)) And (Utils.Int2Bool(cl_is_father))) Or Not(Utils.Int2Bool(RequestTypeGroup)) Then ' - PRIMEIRO
		WHERE_To_Update = 1
		Dim MAKE_New_Object As Int = 0
		Dim UPD_Existing_Object As Int = 1
				
		If Utils.NE(objectTagValue) Or (objectTagValue = "__NONE__") Then
			objectTagValue = Utils.MakeTagcode("OBJECT")
			Dim MAKE_New_Object As Int = 1
			Dim UPD_Existing_Object As Int = 0
		End If
		If Utils.NE(object_type) Then
			object_type = GetFirstObjectType(CurrentCLA)
		End If
				
		If Utils.NNE(objectTagValue) And Utils.NNE(object_type) Then
			RealObjectToChange = objectTagValue
			RealObjectRelationToChange = object_type
		Else
			WHERE_To_Update = 0
		End If
	else If (Utils.Int2Bool(RequestTypeGroup)) And Not(Utils.Int2Bool(cl_is_father)) Then ' - SEGUNDO
		WHERE_To_Update = 2
		Dim MAKE_New_Object As Int = 0
		Dim UPD_Existing_Object As Int = 1
		If Utils.NE(objectTagRelValue) Or objectTagRelValue ="__NONE__" Then
			objectTagRelValue = Utils.MakeTagcode("OBJECT")
			Dim MAKE_New_Object As Int = 1
			Dim UPD_Existing_Object As Int = 0
		End If
		If Utils.NE(RealObjectToChange) Then
			object_type_rel = GetFirstObjectType(CurrentCLA)
			If Utils.NNE(objectTagRelValue) And Utils.NNE(object_type_rel) Then
				RealObjectToChange = objectTagRelValue
				RealObjectRelationToChange = object_type_rel
			Else
				WHERE_To_Update = 0
			End If
		End If
	End If
	
	mm.MAKE_New_Object = MAKE_New_Object
	mm.UPD_Existing_Object = UPD_Existing_Object
	mm.WHERE_To_Update = WHERE_To_Update
	mm.objectTagValue = objectTagValue
	mm.objectTagRelValue = objectTagRelValue
	mm.object_type_rel = object_type_rel
	mm.RealObjectRelationToChange = RealObjectRelationToChange
	mm.RealObjectToChange = RealObjectToChange
			
	If Utils.Int2Bool(WHERE_To_Update) Then
		If Utils.Int2Bool(MAKE_New_Object) And Not(Utils.Int2Bool(UPD_Existing_Object)) Then
			' OBJECTO A CRIAR
			Dim res As ResumableSub = InsertObjectsInChecklist(CurrentCLA.Request.Trim, CurrentCLA.Action.Trim, CurrentCLA.RepeatCounter, RealObjectToChange, RealObjectRelationToChange, WHERE_To_Update)
			Wait For(res) complete (ResInsert As NewObjectTags)
			mm.ResInsert = ResInsert
		else if Not(Utils.Int2Bool(MAKE_New_Object)) And Utils.Int2Bool(UPD_Existing_Object) Then
			' OBJECTO A ACTUALIZAR
'					Dim res As ResumableSub = UpdateObjetsInChecklist(CurrentCLA.Request.Trim, CurrentCLA.Action.Trim, CurrentCLA.RepeatCounter, RealObjectToChange, RealObjectRelationToChange)
'					Wait For(res) complete (finished As Boolean)
					
			Dim res As ResumableSub = UpdateObjetsInChecklist2(CurrentCLA.Request.Trim, CurrentCLA.Action.Trim, CurrentCLA.RepeatCounter, RealObjectToChange, RealObjectRelationToChange)
			Wait For(res) complete (ResInsert As NewObjectTags)
			mm.ResInsert = ResInsert
		End If
	End If
	Return mm
End Sub



' *************************************************************************
' TIP: PROCEDIMENTO DE FECHO DE INTERVENÇÃO/CHECKLIST  - CLOSE EXECUTION
' *************************************************************************
Sub CloseExecution
	
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(150)
	Dim Continuar As Boolean = True
	If ((ShareCode.APPL_ACCOUNT.ToUpperCase = "ERGUELOP") And (CurrentCLA.Action.Trim = "TSKS_20200514_021013")) Then
		
		Dim Total As Int = 0
		Dim sss As String = $"select count(execute_value) total
							from dta_requests_values
							where item_tagcode in ('FIELD_PHC_NUMBER', 'FIELD_DOCUMENTO')
							and request_tagcode='${CurrentCLA.Request.Trim}'
							and task_tagcode='${CurrentCLA.Action.Trim}'
							and (execute_value<>'' and execute_value is not null and execute_value<>'0')"$
		Private sssTotal As Cursor = Starter.LocalSQLEVC.ExecQuery(sss)
		
		If (sssTotal.RowCount >=1) Then
			sssTotal.Position = 0
			Dim Total As Int = sssTotal.GetInt("total")
		End If
		
		sssTotal.Close
		Continuar = Total >= 1
	End If
	
	'**************************************************************************************
	' TODAS AS QUE NAO SAO DA ERGUELOP CAEM AQUI
	'**************************************************************************************
	
	If Continuar Then
		Dim RequestType As String = DBStructures.GetScriptColumnStrEVC($"select typerequest_tagcode from
											dta_requests where tagcode='${CurrentCLA.Request.Trim}'"$, _
											"typerequest_tagcode")
		Log("VERIFICAÇÃO DE ASSINATURAS OBRIGATORIAS")
		' TIP: PARAMETROS DE OBRIGATORIEDADE DE ASSINTATURA NO FECHO DA CL
		'**************************************************************************************
		
		Dim AssinaturasObrigatorias2 As String = DBStructures.GetScriptColumnIntEVC($"Select count(0) As total from dta_typerequests_signature
											where typerequest_tagcode='${RequestType.Trim}' and 
											(task_tagcode='' or task_tagcode is null)"$, "total")
											
			Dim AssinaturasObrigatorias As String = DBStructures.GetScriptColumnIntEVC($"Select ifnull(count(0),0) As total from dta_typerequests_signature
											where typerequest_tagcode='${RequestType.Trim}' and
											task_tagcode='${CurrentCLA.Action.Trim}'"$, "total")
											
		If (AssinaturasObrigatorias = 0) Then
			AssinaturasObrigatorias = AssinaturasObrigatorias2
		End If
				
			Dim SignatureExistsCount As String = DBStructures.GetScriptColumnIntEVC($"select count(0) as total from dta_requests_signatures
											where request_tagcode='${CurrentCLA.Request.Trim}' 
											and inner_request_tagcode='${CurrentCLA.Action.Trim}'"$, "total")
											
		If (SignatureExistsCount < AssinaturasObrigatorias) And Utils.Int2Bool(ShareCode.DEVICE_CHECKLIST_SIGANTUREMANDATORY_ONEND) Then
				MsgboxAsync(ShareCode.checklistassinaturasobrigatorias,ShareCode.GeneralInfoTitle)
				Continuar = False
			End If
		
		'**************************************************************************************
	End If
	
	
	If (Continuar) Then
		
		Dim MAKE_New_Object As Int = 0
		Dim UPD_Existing_Object As Int = 0
		Dim WHERE_To_Update As Int = 0   ' 1-Intervenção,  2-Checklist, 3-Ambos
		
		Dim cl_is_father As Int = DBStructures.GetScriptColumnIntEVC($"select cl_is_father from dta_typerequests_tasks_adds
											where typerequest_tagcode='${RequestType.Trim}'
											And task_tagcode='${CurrentCLA.Action.Trim}'"$, _
											"cl_is_father")
											
		Dim RequestTypeGroup As Int = DBStructures.GetScriptColumnIntEVC($"select tr_is_model from
											dta_typerequests where tagcode='${RequestType.Trim}'"$, _
											"tr_is_model")
			
		'apanha o object_tagcode da intervencao
		Dim objectTagValue As String = Utils.IfNullOrEmpty(DBStructures.GetScriptColumnStrEVC($"select object_tagcode from
											dta_requests where tagcode='${CurrentCLA.Request.Trim}'"$, _
											"object_tagcode"), "")
		Dim object_type As String = Utils.IfNullOrEmpty(DBStructures.GetScriptColumnStrEVC($"select object_type from
											dta_objects where tagcode='${objectTagValue.Trim}'"$, _
											"object_type"), "")			

		Dim objectTagRelValue As String = Utils.IfNullOrEmpty(DBStructures.GetScriptColumnStrEVC($"select object_tagcode from
											dta_requests_relations where request_tagcode='${CurrentCLA.Request.Trim}'
											and relation_tagcode='${CurrentCLA.Action.Trim}' AND repeatcounter='${CurrentCLA.RepeatCounter}'"$, _
											"object_tagcode"), "")
										
		Dim object_type_rel As String = Utils.IfNullOrEmpty(DBStructures.GetScriptColumnStrEVC($"select object_type from
											dta_objects where tagcode='${objectTagRelValue.Trim}'"$, _
											"object_type"), "")

		Dim can_change_object As Boolean = Utils.Int2Bool(DBStructures.GetScriptColumnIntEVC($"select ifnull(can_change_object, 0) as valor
																							from dta_typerequests_tasks_adds where 1=1
																							and typerequest_tagcode='${RequestType.trim}'
																							and task_tagcode='${CurrentCLA.action.Trim}'"$, "valor"))
																							
		Dim create_new_object As Boolean = Utils.Int2Bool(DBStructures.GetScriptColumnIntEVC($"select ifnull(create_new_object, 0) as valor
																							from dta_typerequests_tasks_adds where 1=1
																							and typerequest_tagcode='${RequestType.trim}'
																							and task_tagcode='${CurrentCLA.action.Trim}'"$, "valor"))									
			
		Dim RealObjectRelationToChange As String = ""
		Dim RealObjectToChange As String = ""
		
		' PARAMETROS DE OBRIGATORIEDADE DE RELATORIO NO FECHO DA CL
		'**************************************************************************************
		Dim RequestReport As String = DBStructures.GetScriptColumnStrEVC($"select file_report from
											dta_requests where tagcode='${CurrentCLA.Request.Trim}'"$, _
											"file_report")

		Dim HaveReport As Int = Utils.IfNullOrEmpty( DBStructures.GetScriptColumnIntEVC( $"select have_report from dta_typerequests
											where tagcode='${RequestType.Trim}'"$, "have_report"), 0)
											
		If (Utils.Int2Bool(HaveReport) And Utils.NE(RequestReport)) Then
			Dim i As Int = Msgbox2(ShareCode.checklistavisogeracaorelatorio, ShareCode.GeneralNoteTitle, _
									ShareCode.Option_YES, ShareCode.Option_NO, "", Null)
			If (i=DialogResponse.POSITIVE) Then
				butChecklistReport_Click
			End If
		Else
			Dim NewObjectTagcodes As NewObjectTags
			ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
			Sleep(100)
			If (CLA_TERMINATE_CLICK = 0) And (CurrentCLA.Status.status <=2) Then
				Dim i As Int = Msgbox2(ShareCode.checklistavisonaoterminada, ShareCode.GeneralNoteTitle, _
								ShareCode.Option_YES, ShareCode.Option_NO, "", Null)
				'ProgressDialogShow("Aguarde por favor...")
				If (i=DialogResponse.POSITIVE) Then
					TabButtonChangeChecklist_Click
					butChecklistRunEnd_Click
				Else
					ProgressDialogHide
					Return
				End If
			Else
				
				' *************************************************************
				' CALL: CRIA E ASSOCIA OBJECTO À INTERVENÇÃO OU CHECKLIST
				' *************************************************************
				If can_change_object Or create_new_object Then
					Dim mm As MNOWTU = Types.MakeMNOWTU( MAKE_New_Object, UPD_Existing_Object, WHERE_To_Update, cl_is_father, _
						RequestTypeGroup,  objectTagValue, object_type, objectTagRelValue, _
						object_type_rel, RealObjectRelationToChange, RealObjectToChange, _
						Types.MakeNewObjectTagsClear)
			
					Dim rUU As ResumableSub = CreateOrChangeObject(mm)
					Wait For(rUU) complete (RetResInsert As MNOWTU)
				
					Dim MAKE_New_Object As Int = RetResInsert.MAKE_New_Object
					Dim UPD_Existing_Object As Int = RetResInsert.UPD_Existing_Object
					Dim WHERE_To_Update As Int = RetResInsert.WHERE_To_Update
					Dim RealObjectRelationToChange As String = RetResInsert.RealObjectRelationToChange
					Dim RealObjectToChange As String = RetResInsert.RealObjectToChange
				End If
				
				
			End If		
'			ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
'			Sleep(100)
			'''
			Private Record2 As Cursor
			Dim status As Int = 3
			Dim Total As Int = 0
			Dim sSQL As String = $"select count(0) as total from requests_actions as a where
			a.request_tagcode='${CurrentCLA.Request.Trim}' and a.action_tagcode='${CurrentCLA.Action.Trim}'
			and a.repeatcounter=${CurrentCLA.RepeatCounter}"$
			Record2 = Starter.LocalSQL.ExecQuery(sSQL)
			If Record2.RowCount > 0 Then
				Record2.Position = 0
				Total = Record2.GetInt("total")
			End If
			Record2.Close
		
			Dim sSQL121 As String = $"select distinct count(0) as total
						from  dta_requests_values as a where 1=1 
						and a.request_tagcode='${CurrentCLA.Request.Trim}' 
						and a.task_tagcode='${CurrentCLA.Task.Trim}'
						and a.repeatcounter=${CurrentCLA.RepeatCounter} 
						and ((unique_key in ('ad997355-0c5c-57a1-86ab-16aea41a974c', 
						'fe883a15-4df5-50b6-8eba-31b15564cddc', '3c335a96-fc34-5bc8-b286-d61730eafe7c')
						and execute_value<90) or 
						(unique_key in ('0f89b48e-9214-560d-a056-77aa23e5e90c') and ((execute_value>=5) and (execute_value<=7)) ))"$
			Dim acailval As Int = DBStructures.GetScriptColumnIntEVC(sSQL121, "total")
						
			'******************************************************************************
			'	CONTROLO DE ACAIL
			'******************************************************************************

			If ((Total >=1) Or (NONCONFORMITIES >=1) Or (acailval >= 1)) Then status = 4
			Dim ACLAExecDate As String = ""
			Dim ACLADatetime As String = Utils.GetCurrDatetimeExt
			Dim UpdateDate As String = $", updated_at='${ACLADatetime}'"$
			Dim SQLCheck As String = $"select distinct execdate_type from dta_requests where tagcode='${CurrentCLA.Request.trim}'"$
			Private Record2 As Cursor = Starter.LocalSQLEVC.ExecQuery(SQLCheck)
			If Record2.RowCount > 0 Then
				Record2.Position = 0
				Dim execdate_type As Int = Record2.GetInt("execdate_type")
				If (execdate_type >= 1) Then
					ACLAExecDate = Utils.GetCurrentDate
					UpdateDate = $", execute_date='${ACLAExecDate}'"$
				End If
			End If
			Record2.Close
			
			If (Utils.NNE(RealObjectToChange) And (WHERE_To_Update=2)) Then
				Dim sSQL As String = $"update dta_requests_relations set object_tagcode='${RealObjectToChange}', status_id=${status}${UpdateDate} where request_tagcode='${CurrentCLA.Request.trim}' and
							relation_tagcode='${CurrentCLA.Action}' and repeatcounter=${CurrentCLA.RepeatCounter}"$
			Else
				Dim sSQL As String = $"update dta_requests_relations set status_id=${status}${UpdateDate} where request_tagcode='${CurrentCLA.Request.trim}' and
							relation_tagcode='${CurrentCLA.Action}' and repeatcounter=${CurrentCLA.RepeatCounter}"$
			End If
			
			Utils.SaveSQLToLog("CloseExecution",sSQL, CurrentCLA.Request)

				
			If (CHILD_OPERATION = False) Then
				If Utils.NNE(UpdateDate) Then
					UpdateDate = $"${UpdateDate}, execdate_type=0 "$
				End If
'				ANALISAR ISTO - ESTA A ESCREVER UM OBJECTO QUE NAO EXISTE
				If (Utils.NNE(RealObjectToChange) And (WHERE_To_Update=1)) Then
					Dim sSQL As String = $"update dta_requests set object_tagcode='${RealObjectToChange}', status_id=${status}${UpdateDate} where tagcode='${CurrentCLA.Request.Trim}'"$
				Else
					Dim sSQL As String = $"update dta_requests set status_id=${status}${UpdateDate} where tagcode='${CurrentCLA.Request.Trim}'"$
				End If
			
				Utils.SaveSQLToLog("CloseExecution",sSQL, CurrentCLA.Request)
				'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
			End If
	
			Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
			Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
				
			Dim params As Map
			params.Initialize
			params.Clear
			params.Put("_token", ShareCode.APP_TOKEN)
			params.Put("ACLARequest", CurrentCLA.Request)
			params.Put("ACLAState", status)
			params.Put("ACLAUser", ShareCode.SESS_OPER_User)
			params.Put("ACLAFirst", 0)
			
			If Utils.NNE(ACLAExecDate) Then
				params.Put("ACLAExecDate", ACLAExecDate)
			End If
			params.Put("ACLADatetime", ACLADatetime)
			Try
				params.Put("ACLALatitude", sACLALatitude)
				params.Put("ACLALongitude", sACLALongitude)
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				params.Put("ACLALatitude", "")
				params.Put("ACLALongitude", "")
			End Try
			params.Put("ACLAChild", Utils.Bool2Int(CHILD_OPERATION))
	
			params.Put("ACLAAction", CurrentCLA.Action.trim)
			params.Put("ACLAReqCounter", CurrentCLA.RepeatCounter)
			
			params.Put("ACLAObject", "") 'getTagcode)   ' SE != VAZIO ENTÃO ASSOCIA OBJECTO À INTERVENÇÃO
			params.Put("ACLATypeObject", "") 'firstName)   ' SE != VAZIO ENTÃO ASSOCIA OBJECTO À INTERVENÇÃO
			params.Put("ACLAAddress", "") 'NewObjectTagcodes.AddressTag) 'getAdrTagcode)   ' SE != VAZIO ENTÃO ASSOCIA OBJECTO À INTERVENÇÃO
			
			params.Put("ACLAMAKE_New_Object", MAKE_New_Object)
			params.Put("ACLAUPD_Existing_Object", UPD_Existing_Object)
			params.Put("ACLAWHERE_To_Update", WHERE_To_Update)
			params.Put("ACLAObjectChange", RealObjectToChange)
			params.Put("ACLAObjectRelationChange", RealObjectRelationToChange)
			params.Put("versionTagcode", Main.VersionTagcode)
			params.Put("_authorization", Main.DeviceAuthorization)
			params.Put("_instance", Main.DeviceInstance)
			params.put("_deviceBrand", Main.DeviceBrand)
			params.put("_deviceModel", Main.DeviceModel)
			params.put("_deviceMacAddress", Main.DeviceMacAddress)
			params.Put("_user", ShareCode.SESS_User)
			'******************************************************************************************
			' CODIGO NOVO
			'******************************************************************************************
			
			If (NewObjectTagcodes.IsInitialized) Then
				Try
					params.Put("ACLANewAddress", NewObjectTagcodes.AddressTag)
					params.Put("ACLANewContact", NewObjectTagcodes.ContactTag)
					If (NewObjectTagcodes.FieldsTag.IsInitialized) Then
						Dim rs As String = ""
						For iis=0 To NewObjectTagcodes.FieldsTag.Size-1
							If Utils.NNE(rs) Then rs = $"${rs}|"$
							'*****************************************************
							' ALTERACAO PC - ERRO REPORTADO 11/05/2020
							'*****************************************************
							If (NewObjectTagcodes.FieldsTag.Size) = 1 Then
								rs = $"${rs}${NewObjectTagcodes.FieldsTag.Get(0)}"$
							Else
								rs = $"${rs}${NewObjectTagcodes.FieldsTag.Get(0)}:${NewObjectTagcodes.FieldsTag.Get(1)}"$
							End If
						
						Next
						params.Put("ACLANewFields", rs)
					Else
						params.Put("ACLANewFields", "")
					End If
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
			Else
				params.Put("ACLANewAddress", "")
				params.Put("ACLANewContact", "")
				params.Put("ACLANewFields", "")
			End If
			ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
			Sleep(100)

				Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clarel-satus/update"$
				If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
					If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
					Utils.CallApi(0, params, Me, Url, "", CurrentCLA.Request)
					Else
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.request.trim, "", "")
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
					Sleep(1500)
				Else
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.request.trim, "", "")
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
				End If
				Sleep(1500)
	
			If (CHILD_OPERATION = False) Then
			
					Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/cla-satus/update"$
					If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
						If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
						Utils.CallApi(0, params, Me, Url, "", CurrentCLA.Request)
						Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.Request.trim, "", "")
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						End If
						Sleep(1500)
					Else
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.request.trim, "", "")
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
			
				End If
				Sleep(1000)
		
			Log("A enviar email")
			If (ShareCode.APP_DOMAIN.ToLowerCase = "vfdsegp") Then
				Log("Enviar email: Estado=" & status)
				If ((status = 3) Or (status = 4)) Then
					SendBCCEmailAlert(CurrentCLA)
					Sleep(1500)
				End If
			Else
				Log("Não enviou email")
			End If
			
			
			'**********************************************************
			' VENDA / CARREGAMENTO
			'**********************************************************
			If ((RequestType = "TSKS_20200513_193055") And (CurrentCLA.Action = "TSKS_20200513_191407")) Or _
			((RequestType = "TSKS_20200514_113923") And (CurrentCLA.Action = "TSKS_20200513_191407")) Then
				Dim sNewSQL As String = $"select ifnull(execute_value, 0) as qtd,
							object_tagcode from dta_requests_values where 1=1
							and request_tagcode='${CurrentCLA.Request}'
							and task_tagcode ='TSKS_20200513_191407'"$
				Dim rRecord As Cursor = Starter.LocalSQLEVC.ExecQuery(sNewSQL)
				If rRecord.RowCount > 0 Then
					For Row = 0 To rRecord.RowCount-1
						rRecord.Position = Row
						
						Dim Qtd As Int = rRecord.Getint("qtd")
						Dim RObject As String = rRecord.GetString("object_tagcode")
						
						If (RequestType = "TSKS_20200513_193055") Then
							Dim ss1 As String = $"update dta_warehouses_articles set
									qtd=(qtd-${Qtd})
									where article_tagcode='${RObject}' and warehouse_tagcode in (select tagcode from dta_warehouses 
										where object_tagcode in (select tagcode from dta_objects 
											where tagcode in (select vehicle_tagcode from dta_technicals where tagcode='${ShareCode.SESS_User}')))"$
							Utils.SaveSQLToLog("getTaskDetailsDialog",ss1, CurrentCLA.Request)
						Else
							Dim ss1 As String = $"update dta_warehouses_articles set
									qtd=(qtd+${Qtd})
									where article_tagcode='${RObject}' and warehouse_tagcode in (select tagcode from dta_warehouses 
										where object_tagcode in (select tagcode from dta_objects 
											where tagcode in (select vehicle_tagcode from dta_technicals where tagcode='${ShareCode.SESS_User}')))"$
							Utils.SaveSQLToLog("getTaskDetailsDialog",ss1, CurrentCLA.Request)
						End If
						
					Next
				End If
				rRecord.Close
			End If
		
			
			listsButtonClose_Click
'			Sleep(500)
'			ProgressDialogHide
		End If
	End If
'	Else
'		MsgboxAsync(ShareCode.noMandatorySignaturesRequest, ShareCode.GeneralAlertTitle)
'	End If
'	
	ProgressDialogHide
End Sub

' ********************************************************************
' TIP: PROCEDIEMNTO (2) DE ATUALIZAÇÃO DE DADOS DE OBJECTO NA CHECKLIST
' ********************************************************************
Sub UpdateObjetsInChecklist2(CurrentClaRequest As String, CurrentCLAAction As String, RepeatCounter As Int, ObjectTag2Pass As String, object_type As String) As ResumableSub
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(150)
	'**********************************************************************************
	' VERIFICA ITENS LIGADOS À BASE DE DADOS PARA ATUALIZAÇÃO
	'**********************************************************************************
	Dim fields As List : fields.initialize
	Dim values As List : values.initialize
	Dim addfields As List : addfields.initialize
	Dim addvalues As List : addvalues.initialize
	Dim adrfields As List : adrfields.initialize
	Dim adrvalues As List : adrvalues.initialize
	
	Dim cntfields As List : cntfields.initialize
	Dim cntvalues As List : cntvalues.initialize
	
	Dim getTagcode As String = ObjectTag2Pass
	Dim getAdrTagcode As String = ""
	Dim getCntTagcode As String = ""
	
	Private Record9 As Cursor
	Dim sSQL As String = $"SELECT d.object_tagcode, c.connectmode, c.connect2data, b.do_name, b.do_field, b.do_is_additional, a.execute_value
	FROM dta_requests_values AS a
	INNER JOIN dta_tasks_items AS b ON (b.task_tagcode=a.task_tagcode AND b.item_tagcode=a.item_tagcode AND b.unique_key=a.unique_key)
	INNER JOIN dta_tasks AS c ON (c.tagcode=b.task_tagcode)
	INNER JOIN dta_requests AS d ON (d.tagcode=a.request_tagcode)
	WHERE a.execute_status>=1 and ((d.object_tagcode is not null) and (d.object_tagcode <> '__NONE__'))
								AND a.request_tagcode='${CurrentClaRequest}'
								AND a.task_tagcode='${CurrentCLAAction}'
								AND a.repeatcounter='${RepeatCounter}'
								AND c.connect2data <> ''
								And c.connectmode in (1,3)
								AND b.do_name <> ''
								AND b.do_field <> ''"$	
	
	Record9 = Starter.LocalSQLEVC.ExecQuery(sSQL)
	If Record9.RowCount > 0 Then
		For ni = 0 To Record9.RowCount-1
			Record9.Position = ni
			Dim object_tagcode As String = ObjectTag2Pass
			Dim do_is_additional As Int = Record9.GetInt("do_is_additional")
			Dim do_field As String = Record9.GetString("do_field")
			Dim execute_value As String = Record9.GetString("execute_value")
			Dim do_name As String = Record9.GetString("do_name")
			
			If (do_name = object_type) Then
				Dim execute_value As String = Utils.IfNullOrEmpty(Record9.GetString("execute_value"), "")
				If (do_is_additional = 1) Then
					addfields.Add(do_field)
					addvalues.Add(execute_value)
				Else
					'If ((do_field.Trim = "address") Or (do_field.Trim = "address2") Or (do_field.Trim = "postalcode") Or (do_field.Trim = "local")) Then
					If Utils.FieldInList(do_field, "address|address2|postalcode|local|latitude|longitude|block|floor|door") Then
						adrfields.Add(do_field)
						adrvalues.Add(execute_value)
					Else If Utils.FieldInList(do_field, "name|phone|email|mobile") Then
						cntfields.Add(do_field)
						cntvalues.Add(execute_value)
					Else
						fields.Add(do_field)
						values.Add(execute_value)
					End If
				End If
			End If
		Next
		
		If fields.Size >= 1 Then
			Dim strfields As String = ""
			For n2=0 To fields.Size-1
				If Utils.NNE(strfields) Then
					strfields = $"${strfields},"$
				End If
				If Utils.NNE(fields.Get(n2)) Then
					strfields = $"${strfields}${fields.Get(n2)}='${Utils.IfNullOrEmpty(values.Get(n2),"")}'"$
				End If
			Next
			If Utils.NNE(strfields) Then
				Dim sSQLin As String = $"update dta_objects set ${strfields} where tagcode='${object_tagcode}'"$
				Utils.SaveSQLToLog("CloseExecutionUpdateObject",sSQLin, "")
				Log(sSQLin)
			End If
			' REVER PARA IR BUSCAR O INOUNT
		End If
		
		If adrfields.Size >= 1 Then
			Dim strfields As String = ""
			For n2=0 To adrfields.Size-1
				If Utils.NNE(strfields) Then
					strfields = $"${strfields},"$
				End If
				If Utils.NNE(adrfields.Get(n2)) Then
					strfields = $"${strfields}${adrfields.Get(n2)}='${Utils.IfNullOrEmpty(adrvalues.Get(n2),"")}'"$
				End If
			Next
			If Utils.NNE(strfields) Then
				Dim sSQLin As String = $"update dta_locations set ${strfields} where tagcode in
										(select local_tagcode from dta_objects where tagcode='${object_tagcode}')"$
				Utils.SaveSQLToLog("CloseExecutionUpdateObject",sSQLin, "")
				Log(sSQLin)
			End If
			' REVER PARA IR BUSCAR O INOUNT
		End If
		
		If cntfields.Size >= 1 Then
			Dim strfields As String = ""
			For n2=0 To cntfields.Size-1
				If Utils.NNE(strfields) Then
					strfields = $"${strfields},"$
				End If
				If Utils.NNE(cntfields.Get(n2)) Then
					strfields = $"${strfields}${cntfields.Get(n2)}='${Utils.IfNullOrEmpty(cntvalues.Get(n2),"")}'"$
				End If
			Next
			If Utils.NNE(strfields) Then
				Dim sSQLin As String = $"update dta_contacts set ${strfields} where tagcode in
											(select contact_tagcode from dta_objects_contacts where object_tagcode='${object_tagcode}' limit 1)"$
				Utils.SaveSQLToLog("CloseExecutionUpdateObject",sSQLin, "")
				Log(sSQLin)
			End If
			' REVER PARA IR BUSCAR O INOUNT
		End If
		
		addfields.Add(do_field)
		addvalues.Add(execute_value)
		
		If addfields.Size >= 1 Then
			Dim strfields As String = ""
			For n2=0 To addfields.Size-1
				If Utils.NNE(addfields.Get(n2)) Then
					Dim sSQLin As String = $"update dta_objects_fields set value='${Utils.IfNullOrEmpty(addvalues.Get(n2),"")}'
												where object_tagcode='${object_tagcode}' and field_tagcode='${addfields.Get(n2)}'"$
					Utils.SaveSQLToLog("CloseExecutionUpdateObject",sSQLin, "")
					Log(sSQLin)
				End If
			Next
		End If

	End If
	Record9.Close
		' DEVERIA IR ACTUALIZAR O ENDPOINT PARA ACTUALIZAR O OBJECTO
	ProgressDialogHide
	Dim ResResult As NewObjectTags = Types.MakeNewObjectTags(getTagcode, getAdrTagcode, getCntTagcode, addfields)
	
	Return ResResult 'True
End Sub

'Sub UpdateObjetsInChecklist(CurrentClaRequest As String, ObjectTag2Pass As String, object_type As String) 

' ********************************************************************
' TIP: PROCEDIEMNTO DE ATUALIZAÇÃO DE DADOS DEOBJECTO NA CHECKLIST
' ********************************************************************
Sub UpdateObjetsInChecklist(CurrentClaRequest As String, CurrentCLAAction As String, RepeatCounter As Int, ObjectTag2Pass As String, object_type As String) As ResumableSub
	'**********************************************************************************
	' VERIFICA ITENS LIGADOS À BASE DE DADOS DO OBJECTO PARA ACTUALIZAÇÃO
	'**********************************************************************************
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(150)
	Private Record9 As Cursor
	Dim sSQL As String = $"SELECT d.object_tagcode, c.connectmode, c.connect2data, b.do_name, b.do_field, b.do_is_additional, a.execute_value
								FROM dta_requests_values AS a
								INNER JOIN dta_tasks_items AS b ON (b.task_tagcode=a.task_tagcode AND b.item_tagcode=a.item_tagcode AND b.unique_key=a.unique_key)
								INNER JOIN dta_tasks AS c ON (c.tagcode=b.task_tagcode)
								INNER JOIN dta_requests AS d ON (d.tagcode=a.request_tagcode)
								WHERE a.execute_status>=1
								AND a.request_tagcode='${CurrentClaRequest}'
								AND a.task_tagcode='${CurrentCLAAction}'
								AND a.repeatcounter='${RepeatCounter}'
								AND c.connect2data <> ''
								AND b.do_name <> ''
								AND b.do_field <> ''"$
	Record9 = Starter.LocalSQLEVC.ExecQuery(sSQL)
	If Record9.RowCount > 0 Then
		For ni = 0 To Record9.RowCount-1
			Record9.Position = ni
			Dim object_tagcode As String = ObjectTag2Pass
			Dim do_is_additional As Int = Record9.GetInt("do_is_additional")
			'Dim connectmode As Int = Record9.GetInt("connectmode")
			Dim do_name As String = Record9.GetString("do_name")
			Dim do_field As String = Record9.GetString("do_field")
			Dim execute_value As String = Record9.GetString("execute_value")
			
			If (do_name = object_type) Then
				If (do_is_additional = 1) Then
					Dim sSQLin As String = $"update dta_objects_fields set value='${execute_value}'
												where object_tagcode='${object_tagcode}' and field_tagcode='${do_field}'"$
				Else
						
					If Utils.FieldInList(do_field, "address|address2|postalcode|local|latitude|longitude|block|floor|door") Then
						Dim sSQLin As String = $"update dta_locations set ${do_field}='${execute_value}' where tagcode in
													(select local_tagcode from dta_objects where tagcode='${object_tagcode}')"$
					Else If Utils.FieldInList(do_field, "name|phone|email|mobile") Then
						Dim sSQLin As String = $"update dta_contacts set ${do_field}='${execute_value}' where tagcode in
																(select contact_tagcode from dta_objects_contacts where object_tagcode='${object_tagcode}' limit 1)"$
					Else
						Dim sSQLin As String = $"update dta_objects set ${do_field}='${execute_value}' where tagcode='${object_tagcode}'"$
					End If
									
				End If
				
				Log(sSQLin)
				If (Utils.NNE(object_tagcode)) Then
					Utils.SaveSQLToLog("CloseExecution",sSQLin, "")
					'Starter.LocalSQLEVC.ExecNonQuery(sSQLin)
				End If
			End If
		Next
	End If
	Record9.Close

	ProgressDialogHide
	Return True

End Sub

'Sub InsertObjectsInChecklist(CurrentClaRequest As String, CurrentCLAAction As String, RepeatCounter As Int, ObjectTag2Pass As String, object_type As String) As ResumableSub

' ***************************************************************************
' TIP: PRECEDIMENTO DE CRIAÇÃO/ASSOCIAÇÃO DE OBJECTO E DADOS RELACIONADOS
' ***************************************************************************
Sub InsertObjectsInChecklist(CurrentClaRequest As String, CurrentCLAAction As String, RepeatCounter As Int, ObjectTag2Pass As String, object_type As String, WHERE_To_Update As Int) As ResumableSub
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(100)
	'**********************************************************************************
	' VERIFICA ITENS LIGADOS À BASE DE DADOS PARA CRIAÇÃO DE NOVO
	'**********************************************************************************
	Dim fields As List : fields.initialize
	Dim values As List : values.initialize
	Dim addfields As List : addfields.initialize
	Dim addvalues As List : addvalues.initialize
	Dim adrfields As List : adrfields.initialize
	Dim adrvalues As List : adrvalues.initialize
	
	Dim cntfields As List : cntfields.initialize
	Dim cntvalues As List : cntvalues.initialize
	
	Dim getTagcode As String = ObjectTag2Pass
	Dim getAdrTagcode As String = ""
	Dim getCntTagcode As String = ""
	
	Private Record9 As Cursor
	
	If (WHERE_To_Update=1) Then
		Dim sSQL As String = $"SELECT d.object_tagcode, c.connectmode, c.connect2data, b.do_name, b.do_field, b.do_is_additional, a.execute_value
		FROM dta_requests_values AS a
		INNER JOIN dta_tasks_items AS b ON (b.task_tagcode=a.task_tagcode AND b.item_tagcode=a.item_tagcode AND b.unique_key=a.unique_key)
		INNER JOIN dta_tasks AS c ON (c.tagcode=b.task_tagcode)
		INNER JOIN dta_requests AS d ON (d.tagcode=a.request_tagcode)
							WHERE a.execute_status>=1 and ((d.object_tagcode is null) or (d.object_tagcode = '__NONE__'))
							AND a.request_tagcode='${CurrentClaRequest}'
							and a.task_tagcode='${CurrentCLAAction}'
							AND a.repeatcounter='${RepeatCounter}'
							And c.connect2data <> ''
							And c.connectmode in (2,3)
							And b.do_name <> ''
							And b.do_field <> ''"$
	Else
		Dim sSQL As String = $"SELECT d.object_tagcode, c.connectmode, c.connect2data, b.do_name, b.do_field, b.do_is_additional, a.execute_value
							FROM dta_requests_values AS a
							INNER JOIN dta_tasks_items AS b ON (b.task_tagcode=a.task_tagcode AND b.item_tagcode=a.item_tagcode AND b.unique_key=a.unique_key)
							INNER JOIN dta_tasks AS c ON (c.tagcode=b.task_tagcode)
							INNER JOIN dta_requests AS d ON (d.tagcode=a.request_tagcode)
							WHERE a.execute_status>=1 
							AND a.request_tagcode='${CurrentClaRequest}'
							and a.task_tagcode='${CurrentCLAAction}'
							AND a.repeatcounter='${RepeatCounter}'
							And c.connect2data <> ''
							And c.connectmode in (2,3)
							And b.do_name <> ''
							And b.do_field <> ''"$
	End If

	Dim Inicio As Boolean = True
	Record9 = Starter.LocalSQLEVC.ExecQuery(sSQL)
	If Record9.RowCount > 0 Then
		For ni = 0 To Record9.RowCount-1
			Record9.Position = ni
			Dim do_is_additional As Int = Record9.GetInt("do_is_additional")
			'Dim connectmode As Int = Record9.GetInt("connectmode")
			If (Inicio) Then
				Dim do_name As List = Utils.Str2List( Utils.IfNullOrEmpty( Record9.GetString("do_name"), "" ), "|")
				Inicio = False
			End If
			
			Dim do_field As String = Record9.GetString("do_field")
			Dim execute_value As String = Utils.IfNullOrEmpty(Record9.GetString("execute_value"), "")
			If (do_is_additional = 1) Then
				addfields.Add(do_field)
				addvalues.Add(execute_value)
			Else
				'If ((do_field.Trim = "address") Or (do_field.Trim = "address2") Or (do_field.Trim = "postalcode") Or (do_field.Trim = "local")) Then
				If Utils.FieldInList(do_field, "address|address2|postalcode|local|latitude|longitude|block|floor|door") Then
					adrfields.Add(do_field)
					adrvalues.Add(execute_value)
				Else If Utils.FieldInList(do_field, "name|phone|email|mobile") Then
					cntfields.Add(do_field)
					cntvalues.Add(execute_value)
				Else
					fields.Add(do_field)
					values.Add(execute_value)
				End If
			End If
		Next
		
		If fields.Size >= 1 Then
			Dim getAdrTagcode As String = Utils.MakeTagcode("ADRSS")
			
			Dim strfields As String = ""
			Dim strvalues As String = ""
			
			If (do_name.Size > 0) Then
				Dim firstName As String = do_name.Get(0)
			Else
				Dim firstName As String = "OBJECT_ENTCLIENTS"
			End If
			
			If (Utils.NNE(firstName)) Then
				' **************************************************************
				' CRIA O NOVO OBJECTO
				' **************************************************************
				For n2=0 To fields.Size-1
					If Utils.NNE(strfields) Then
						strfields = $"${strfields},"$
					End If
					strfields = $"${strfields}${fields.Get(n2)}"$
					
					If Utils.NNE(strvalues) Then
						strvalues = $"${strvalues},"$
					End If
					strvalues = $"${strvalues}'${values.Get(n2)}'"$
				Next
				Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_objects", "id", "") + 1+ 1000000
				Dim scriptMaster As String = $"insert into dta_objects (id, tagcode, object_type, local_tagcode, ${strfields}) values ('${maxID}','${getTagcode}', '${firstName}', '${getAdrTagcode}', ${strvalues})"$
				Utils.SaveSQLToLog("CloseExecutionNewObject",scriptMaster, "")
				Log(scriptMaster)
				
				If (WHERE_To_Update = 1) Then
					Dim scriptMaster As String = $"update  dta_requests set object_tagcode='${getTagcode}' where tagcode='${CurrentClaRequest}';"$
					Utils.SaveSQLToLog("CloseExecutionNewObject",scriptMaster, "")
				End If
				' **************************************************************
				' CRIA O REGISTO DA MORADA DO OBJECTO
				' **************************************************************
				Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_locations", "id", "") + 1+ 1000000
				Dim scriptMaster As String = $"insert into dta_locations (id, tagcode, address) values ('${maxID}','${getAdrTagcode}', '')"$
				Utils.SaveSQLToLog("CloseExecutionNewObject",scriptMaster, "")
				Log(scriptMaster)
								
				' **************************************************************
				' ACTUALIZA OS CAMPOS DA MORADA SE EXISTIR
				' **************************************************************
				If adrfields.Size >= 1 Then
					'adrvalues
					Dim stradrfields As String = ""
					For n3=0 To adrfields.Size-1
						If Utils.NNE(stradrfields) Then
							stradrfields = $"${stradrfields},"$
						End If
						stradrfields = $"${stradrfields}${adrfields.Get(n3)}='${adrvalues.Get(n3)}'"$
					Next
					If Utils.NNE(stradrfields) Then
						Dim sAddSQLin As String = $"update dta_locations set ${stradrfields} where tagcode='${getAdrTagcode}'"$
						Utils.SaveSQLToLog("CloseExecutionNewObject",sAddSQLin, "")
						Log(sAddSQLin)
					End If
				End If
					
				' **************************************************************
				' CRIA OS CAMPOS ADICIONAIS
				' **************************************************************
				If addfields.Size >= 1 Then
					For n3=0 To addfields.Size-1
						Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_objects_fields", "id", "") + 1+ 1000000
						Dim sAddSQLin As String = $"insert into dta_objects_fields (id, object_tagcode, field_tagcode, value) values ('${maxID}','${getTagcode}', '${addfields.Get(n3)}', '${addvalues.Get(n3)}')"$
						Utils.SaveSQLToLog("CloseExecutionNewObject",sAddSQLin, "")
						Log(sAddSQLin)
					Next
				End If
					

				' **************************************************************
				' CRIA OS CONTACTOS CASO EXISTAM
				' **************************************************************
				If cntfields.Size >= 1 Then
					Dim getCntTagcode As String = Utils.MakeTagcode("CNTCTS")
					Dim strfields As String = ""
					Dim strvalues As String = ""
					
					For n3=0 To cntfields.Size-1
						If Utils.NNE(strfields) Then
							strfields = $"${strfields},"$
						End If
						strfields = $"${strfields}${cntfields.Get(n3)}"$
					
						If Utils.NNE(strvalues) Then
							strvalues = $"${strvalues},"$
						End If
						strvalues = $"${strvalues}'${cntvalues.Get(n3)}'"$
					
					Next
					Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_contacts", "id", "") + 1+ 1000000
					Dim scriptCNTMaster As String = $"insert into dta_contacts (id, tagcode, ${strfields}) values ('${maxID}','${getCntTagcode}', ${strvalues})"$
					Utils.SaveSQLToLog("CloseExecutionNewObject",scriptCNTMaster, "")
					Log(scriptCNTMaster)
					
					Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_objects_contacts", "id", "") + 1+ 1000000
					Dim scriptCNTMaster As String = $"insert into dta_objects_contacts (id, object_tagcode, contact_tagcode) values ('${maxID}','${getTagcode}', '${getCntTagcode}')"$
					Utils.SaveSQLToLog("CloseExecutionNewObject",scriptCNTMaster, "")
					Log(scriptCNTMaster)
					
					
				End If
			End If

		End If
	End If
	Record9.Close
		
	ProgressDialogHide
	Dim ResResult As NewObjectTags = Types.MakeNewObjectTags(getTagcode, getAdrTagcode, getCntTagcode, addfields)
	
	Return ResResult 'True

End Sub

' *************************************************************
' TIP: ENVIO DE EMAIL DE ALERTA EM BCC
' *************************************************************
Sub SendBCCEmailAlert(CLA As RequestCLA)
	Dim FIELD_WORK_ORDER As String = Utils.IfNullOrEmpty(DBStructures.GetScriptColumnStrEVC($"select ifnull(value, '') as valor
						from dta_requests_fields where request_tagcode='${CLA.Request.trim}' and field_tagcode='FIELD_WORK_ORDER'"$, "valor"), "")
	Dim ENTITY_NAME As String = Utils.IfNullOrEmpty(DBStructures.GetScriptColumnStrEVC($"select ifnull(title_import, '') as valor
						from dta_objects where tagcode in (select entity_tagcode from dta_requests where tagcode='${CLA.Request.trim}')"$, "valor"), "")
	Dim REPORT_FILE As String = Utils.IfNullOrEmpty(DBStructures.GetScriptColumnStrEVC($"select ifnull(file_report, '') as valor
						from dta_requests where tagcode='${CLA.Request.trim}'"$, "valor"), "")
	
	Log($"WORK_ORDER: ${FIELD_WORK_ORDER}"$)
	If Utils.NNE(FIELD_WORK_ORDER) Then
		
		Dim sSQL As String = $"select x.atype, x.title, x.unique_key, x.conform_type, x.status  from
					(select distinct a.unique_key, b.id as conform_type, a.execute_status as status, c.title, c.bullet_master, c.bullet_child,
					(select title from dta_actiontypes where tagcode in
						(select action_type from dta_actions_adds where actions_tagcode=a.execute_action)) as atype
					from  dta_requests_values as a
					inner join dta_tasks_items_answers as b on (b.task_tagcode=a.task_tagcode and b.item_tagcode=a.item_tagcode and b.unique_key=a.unique_key and b.tagcode=a.tagcode)
					inner join dta_tasks_items as c on (c.task_tagcode=b.task_tagcode and c.item_tagcode=b.item_tagcode and c.unique_key=b.unique_key)
					inner join type_conformitytypes as d on (d.tagcode=b.type_conformity and (d.id=2 or (d.id=1 and a.execute_action is not null)))
					where 1=1 and a.execute_status>=1 and
					a.request_tagcode='${CLA.Request.Trim}' and a.task_tagcode='${CLA.Task.Trim}' and a.repeatcounter=${CLA.RepeatCounter}) as x
					group by x.atype, x.title"$
					
		Dim TextoToShow As String = $""$
		Dim Record As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
		Log($"Total NC: ${Record.RowCount}"$)
		If Record.RowCount > 0 Then
			Dim lastGrp As String = ""
			Dim sentence As String = ""
			For Row = 0 To Record.RowCount-1
				Record.Position = Row
				Dim textoNC As String = Utils.IfNullOrEmpty(Record.GetString("atype"), "")
				If Utils.NNE(textoNC) Then
					'SE LASTGRP É VAZIO E É DIFERENTE DE TEXTONC - É A PRIMEIRA VEZ - IGUALAR LASTGRP COM TEXTONC
					If Utils.NE(lastGrp) Then
						lastGrp = textoNC
					End If
					
					'SE LASTGRP NÃO É VAZIO E É DIFERENTE DE TEXTONC - GRAVAR DADOS E IGUALAR LASTGRP COM TEXTONC
					If Not(lastGrp = textoNC) Then
						TextoToShow = $"${TextoToShow}#PEND-${lastGrp} ${sentence}<br>"$
						lastGrp = textoNC
						sentence = ""
					End If
					If Utils.NNE(sentence) Then
						sentence = $"${sentence};"$
					End If
					sentence = $"${sentence} ${Record.GetString("title")}"$
					Log(sentence)
				End If
			Next

			TextoToShow = $"${TextoToShow}#PEND-${textoNC} ${sentence}<br>"$
		Else
			TextoToShow = $"#NPEND (Não existem pendências)<br>"$
		End If
		Record.Close
		Sleep(100)
			
		Dim Subject As String = $"[${FIELD_WORK_ORDER}] - Deslocação Cliente ${ENTITY_NAME}"$
		Dim Details As String = $"${TextoToShow}"$
		Log(Details)
	End If

		'inverter no produtivo
'		**********************************************************************************************
'		Dim ListaBcc As String = $"alertas@${ShareCode.APPL_HOST}; nuno.silva@vodafone.com; surveys.galp@cilnet.pt; surveys.galp@wondercom.pt; palpedrinha@xevolution.pt"$
'		Dim res As ResumableSub = RequestEmailFromBO(CLA.Request, "wowemail@vodafone.com", "", Subject, Details, ListaBcc)
'		**********************************************************************************************	
	
'		Dim ListaBcc As String = "gchagas@xevolution.pt; pcaldeira@xevolution.pt; aferreira@xevolution.pt"
'		Dim res As ResumableSub = RequestEmailFromBO(CLA.Request, "cnunes@xevolution.pt", "", Subject, Details, ListaBcc)
'		
'		Wait For(res) Complete (Completed As Boolean)

'		Dim eSMTP As SMTP
''		eSMTP.Initialize($"mail.${ShareCode.APPL_HOST}"$, 587, $"webmaster@${ShareCode.APPL_HOST}"$, "..We6Master@20!8", "")
'		eSMTP.Initialize($"mail.${ShareCode.APPL_HOST}"$, 587, $"alertas@${ShareCode.APPL_HOST}"$, "..Alertas@VRCG_20!9", "eSMTPAlert")
''		eSMTP.MailFrom = $"alertas@${ShareCode.APPL_HOST}"$
'		eSMTP.StartTLSMode = True
'		eSMTP.HtmlBody = True
'		eSMTP.To.AddAll(Regex.Split("\;", "wowemail@vodafone.com" ))
''		eSMTP.To.AddAll(Regex.Split("\;", "cnunes@xevolution.pt;aferreira@xevolution.pt;palpedrinha@xevolution.pt" ))
'''		eSMTP.BCC.AddAll(Regex.Split("\;",  $"alertas@${ShareCode.APPL_HOST};nuno.silva@vodafone.com;surveys.galp@cilnet.pt;surveys.galp@wondercom.pt"$ ))
'		eSMTP.BCC.AddAll(Array As String($"alertas@${ShareCode.APPL_HOST}"$, "nuno.silva@vodafone.com", "surveys.galp@cilnet.pt", "surveys.galp@wondercom.pt", "palpedrinha@xevolution.pt"))
'		eSMTP.Subject = Subject
'		eSMTP.Body = Details
'		If Utils.NNE(REPORT_FILE) Then
'			eSMTP.AddAttachment(Starter.SharedFolder, REPORT_FILE)
'		End If
'		eSMTP.Send
'	End If
	
End Sub

Sub eSMTPAlert_MessageSent(Success As Boolean)
	Log("SMTP send: " & Success )
End Sub


' *************************************************************
' TIP: PROCEDIMENTO DE VERIFICAR MANDATÓRIOS 
' *************************************************************
Sub CheckForMandatoryWithRep(request As String, task As String) As Int
	
	Dim ListaMandatory As List
	ListaMandatory.Initialize
	Dim RsTasksItems As ResultSet = Starter.LocalSQLEVC.ExecQuery($"select * from dta_tasks_items where 1=1
																	and task_tagcode = '${task.trim}' and mandatory = 1 and level > 0"$)
	Do While RsTasksItems.NextRow
		Dim ITC As String = RsTasksItems.GetString("item_tagcode")
		If Utils.NNE(ITC) Then
			ListaMandatory.Add($"'${ITC}'"$)
		End If
	Loop
	RsTasksItems.Close
	Dim ListOfRec As Int = 0
	Dim retCounter As Int = 0
	Dim ArrayOfITC As String = Utils.List2Str(ListaMandatory,",")
	Dim RsReqVal As ResultSet = Starter.LocalSQLEVC.ExecQuery($"select item_tagcode, repeatitemcounter, tagcode from dta_requests_values where 1=1
																and request_tagcode = '${request.trim}'
																and task_tagcode = '${task.Trim}' 
																and item_tagcode in (${ArrayOfITC}) 
																and execute_status = 0"$)
	
	Dim TmpLista As List
	TmpLista.Initialize
	
	Do While RsReqVal.NextRow
		Dim M_ITC As String = RsReqVal.GetString("item_tagcode")
		Dim M_RIC As Int= RsReqVal.GetInt("repeatitemcounter")
		Dim M_TC As String = RsReqVal.GetString("tagcode")
		Log($"${M_ITC}-${M_RIC} - ${M_TC}"$)
		
		If Utils.NNE(M_ITC) Then
				
			'Check If is enabled
			Dim CountLocked As Int = DBStructures.GetScriptColumnIntEVC($"select count(request_tagcode) as countlocked from dta_requests_values_adds where 1=1
				and request_tagcode = '${request.trim}'
				And task_tagcode = '${task.trim}'
				And item_tagcode = '${M_ITC}'
				and repeatitemcounter = ${M_RIC}
				and fieldconfirm_ignore_mandatory = 1"$,"countlocked")
				
			If CountLocked = 0 Then
				TmpLista.Add($"${M_ITC}|${M_RIC}"$)
			End If
				
		End If
		
	Loop
	
	For x=0 To TmpLista.Size -1
		Dim exists As Boolean = False
		Dim Item2Insert As String = TmpLista.Get(x)
		For t=0 To ListOfMandatoryItems.Size -1
			Dim CmpStr As String = ListOfMandatoryItems.Get(t)
			If Item2Insert = CmpStr Then
				exists = True
			End If
		Next
		If Not(exists) Then
			Dim ItemOfLista As List = Regex.split("\|",Item2Insert)
			Dim C_M_ITC As String = ItemOfLista.get(0)
			Dim C_M_RIC As Int = ItemOfLista.get(1)
			Dim cntAnswered As Int = DBStructures.GetScriptColumnIntEVC($"select count(item_tagcode) as cntAnswered from dta_requests_values where 1=1
																and request_tagcode = '${request.trim}'
																and task_tagcode = '${task.Trim}' 
																and item_tagcode = '${C_M_ITC}' 
																and repeatitemcounter = ${C_M_RIC}
																and execute_status = 1"$,"cntAnswered")
			If cntAnswered = 0 Then
				ListOfMandatoryItems.Add(Item2Insert)
			End If
			
		End If
	Next
	
	
	
	retCounter = ListOfMandatoryItems.Size
	Return retCounter
	
	
End Sub

Sub CheckForMandatory(request As String, task As String) As Int
	Dim retCounter As Int = 0
	Dim sSQL As String = $"select x.request_tagcode, x.inner_request_tagcode, x.task_tagcode, x.item_tagcode,
			x.unique_key, x.title, x.statusval, x.statusval2, x.itagcode
			from (select distinct a.request_tagcode, a.inner_request_tagcode, a.task_tagcode, a.item_tagcode,
			a.unique_key, c.title, sum(a.execute_status) as statusval, a1.fieldval_05 As statusval2, a1.request_tagcode as itagcode
			from dta_requests_values as a
			left join dta_requests_values_adds As a1 on (a1.request_tagcode=a.request_tagcode 
				And a1.inner_request_tagcode=a.inner_request_tagcode
				And a1.task_tagcode=a.task_tagcode
				And a1.item_tagcode=a.item_tagcode
				And a1.unique_key=a.unique_key)
			inner join dta_tasks_items_answers as b on (b.task_tagcode=a.task_tagcode and b.tagcode=a.tagcode)
			inner join dta_tasks_items as c on (c.task_tagcode=b.task_tagcode and c.unique_key=b.unique_key)
			where a.request_tagcode='${request.Trim}'  AND a.inner_request_tagcode='${task.Trim}' and c.mandatory=1
			group by a.request_tagcode, a.inner_request_tagcode, a.task_tagcode, a.item_tagcode,
			a.unique_key, c.title) as x
			where x.statusval=0  and ((x.itagcode is not null And x.statusval2<3) or (x.itagcode is null)) "$
			
	'update dta_requests_values_adds
	Log(sSQL)
	
	
	
	Dim RecordRow As Cursor
	RecordRow = Starter.LocalSQLEVC.ExecQuery(sSQL)
	retCounter = RecordRow.RowCount
	If RecordRow.RowCount > 0 Then
		For m = 0 To RecordRow.RowCount -1
			RecordRow.Position = m
			Dim ItemTC_Mandatory As String  = RecordRow.Getstring("item_tagcode")
			
			If Utils.NNE(ItemTC_Mandatory) Then
				
				'Check If is enabled
				Dim CountLocked As Int = DBStructures.GetScriptColumnIntEVC($"select count(request_tagcode) as countlocked from dta_requests_values_adds where 1=1
				and request_tagcode = '${request.trim}'
				And task_tagcode = '${task.trim}'
				And item_tagcode = '${ItemTC_Mandatory}'
				and fieldconfirm_ignore_mandatory = 0"$,"countlocked")
				
				If CountLocked = 0 Then
					ListOfMandatoryItems.Add(ItemTC_Mandatory)
				End If
				
			End If
		Next
	End If
	RecordRow.Close
	retCounter = ListOfMandatoryItems.Size
	Return retCounter
End Sub

Sub CLAItemEditValueMINUS_Click
	Dim this As Button = Sender
	Log("Clicou MINUS")
	If (LoadingProcess = False) Then
		
		Dim pan As Panel = this.Parent
		
		Dim edit As EditText = pan.GetView(0)
		
		edit.Text = Utils.IfNullOrEmpty(edit.Text, "0")
	
		Log(edit.InputType)
		If (edit.InputType = edit.INPUT_TYPE_DECIMAL_NUMBERS) Or _
			(edit.InputType = edit.INPUT_TYPE_NUMBERS) Then
			
			If (edit.InputType = edit.INPUT_TYPE_DECIMAL_NUMBERS) Then
				Dim vd As Double = edit.Text
				vd = vd - 1
				edit.Text = vd
			else If (edit.InputType = edit.INPUT_TYPE_NUMBERS) Then
				Dim vi As Int = edit.Text
				vi = vi - 1
				edit.Text = vi
			End If
			Log(edit.Text)
			
			ManageCLAItemEditValueStk(edit)
		Else
			Log("Não é do tipo numero")
		End If
	End If
End Sub

Sub CLAItemEditValuePLUS_Click
	Dim this As Button = Sender
	Log("Clicou PLUS")
	If (LoadingProcess = False) Then
		
		Dim pan As Panel = this.Parent
		
		Dim edit As EditText = pan.GetView(0)
		
		edit.Text = Utils.IfNullOrEmpty(edit.Text, "0")
	
		Log(edit.InputType)
		If (edit.InputType = edit.INPUT_TYPE_DECIMAL_NUMBERS) Or _
			(edit.InputType = edit.INPUT_TYPE_NUMBERS) Then
			
			If (edit.InputType = edit.INPUT_TYPE_DECIMAL_NUMBERS) Then
				Dim vd As Double = edit.Text
				vd = vd + 1
				edit.Text = vd
			else If (edit.InputType = edit.INPUT_TYPE_NUMBERS) Then
				Dim vi As Int = edit.Text
				vi = vi + 1
				edit.Text = vi
			End If
			Log(edit.Text)
			
			ManageCLAItemEditValueStk(edit)
		Else
			Log("Não é do tipo numero")
		End If
	End If
End Sub

Sub CalcPoints(request As String, action As String, task As String, RepeatCounter As Int) As Double
	Dim RetDouble As Double = 0
	Dim sSQL11 As String = $"Select distinct sum(b.points) as Points 
		from dta_requests_values As a
		inner join dta_tasks_items_answers As b on (b.task_tagcode=a.task_tagcode 
			And b.item_tagcode=a.item_tagcode 
			and b.unique_key=a.unique_key 
			and b.tagcode=a.tagcode)
		where a.request_tagcode='${request.Trim}' and a.inner_request_tagcode='${action.trim}' and b.task_tagcode='${task.Trim}'
		And a.execute_status>=1 And (a.execute_value<>'null' And a.execute_value<>'') 
		And a.repeatcounter=${RepeatCounter}"$
		Log(sSQL11)
	Dim RecordRow As Cursor
	RecordRow = Starter.LocalSQLEVC.ExecQuery(sSQL11)
	If RecordRow.RowCount > 0 Then
		RecordRow.Position = 0
		RetDouble = RecordRow.GetDouble("Points")
	End If
	RecordRow.Close
	Return RetDouble
End Sub

' *************************************************************
' TIP: EVENTO: NA PREPARAÇÃO PARA FECHO DE INTERVENÇÃO 
' *************************************************************
Sub PrepareToEndExecution
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(150)
	
	Dim Continuar As Boolean = True
	Dim CurrentObjectRequest As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(object_tagcode, '') as object_tagcode
											from dta_requests where tagcode='${CurrentCLA.Request.Trim}'"$, "object_tagcode")
	
	If (Utils.Int2Bool(ShareCode.DEVICE_CHECKLIST_OBJECTMANDATORY_ONEND)) Then
		If Utils.NE(CurrentObjectRequest) Or (CurrentObjectRequest = "__NONE__") Then
			Continuar = False
		End If
	End If
	
	If Continuar = True Then
		ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
		Dim updSQL As String = $"select distinct * from  dta_requests_values_adds WHERE request_tagcode='${CurrentCLA.Request}'
													And inner_request_tagcode='${CurrentCLA.Action}'
													And task_tagcode='${CurrentCLA.Task}'"$ 
		Dim zRecord As Cursor = Starter.LocalSQLEVC.ExecQuery(updSQL)
		If zRecord.RowCount > 0 Then
			For n=0 To zRecord.RowCount-1
				zRecord.Position = n
				Dim uKey As String = zRecord.GetString("unique_key")
				Dim fld5 As String = zRecord.GetString("fieldval_05")
				Log($"${uKey}: ${fld5}"$)
			Next
		End If
	
		Dim mandatory As Int = 0
		Try
			
			ListOfMandatoryItems.Initialize
			mandatory = CheckForMandatoryWithRep(CurrentCLA.Request, CurrentCLA.Action)
			
'			ListOfMandatoryItems.Initialize
'			mandatory = CheckForMandatory(CurrentCLA.Request, CurrentCLA.Action)
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		Log(mandatory)

		' *************************************************************************
		' NOTE: VERIFICA MANDATÓRIOS
		' *************************************************************************
		If (mandatory > 0) Then
			
			Try
				Dim LineMandatory As String = ""
				Dim Capitulo As String = ""
				For n=0 To ListOfMandatoryItems.Size -1
					Dim ItemOfList As List = Regex.split("\|",ListOfMandatoryItems.Get(n))
					Dim M_ITC As String = ItemOfList.get(0)
					Dim M_RIC As Int = ItemOfList.get(1)
					Dim BMaster As String = DBStructures.GetScriptColumnStrEVC($"select bullet_master from dta_tasks_items where 1=1
																			and task_tagcode = '${CurrentCLA.Action}' 
																			and item_tagcode = '${M_ITC}'"$,"bullet_master")
					Dim BChild As String = DBStructures.GetScriptColumnStrEVC($"select bullet_child from dta_tasks_items where 1=1
																			and task_tagcode = '${CurrentCLA.Action}' 
																			and item_tagcode = '${M_ITC}'"$,"bullet_child")
					Dim title As String = DBStructures.GetScriptColumnStrEVC($"select title from dta_tasks_items where 1=1
																			and task_tagcode = '${CurrentCLA.Action}' 
																			and item_tagcode = '${M_ITC}'"$,"title")
					If M_RIC > 0 Then
						 Capitulo = $" Capitulo: ${M_RIC+1}"$
					Else
						Capitulo = ""
					End If
					
					LineMandatory = LineMandatory & $"${BMaster}.${BChild} - ${title} ${Capitulo} ${CRLF}"$
				Next
			
				MsgboxAsync($"Existem perguntas mandatórias por responder!${CRLF}Por favor preencha-as e tente novamente.${CRLF}${CRLF}${LineMandatory}"$, "Alerta!")

				For n=0 To ListOfMandatoryItems.Size -1
					Dim ItemOfList As List = Regex.split("\|",ListOfMandatoryItems.Get(n))
					Dim M_ITC As String = ItemOfList.get(0)
					Dim M_RIC As Int = ItemOfList.get(1)
					For i =0 To ComponentList.Size -1
						Dim ClItem As ComponentRecords = ComponentList.Get(i)
						If ClItem.item_tagcode = M_ITC Then
							If ClItem.RepeatItemCounter = M_RIC Then
								Dim View2Process As B4XView = ClItem.component
								If View2Process Is Panel Then
									Dim pnlB4x As Panel = View2Process
									Dim res As ResumableSub = ChangeComponent(M_ITC,"COLOR","",Consts.ColorLightRed)
									wait for (res) Complete (Finished As Boolean)
								End If
							End If
							
						End If
					Next
				
				Next
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				MsgboxAsync($"Existem perguntas mandatórias por responder!${CRLF}Por favor preencha-as e tente novamente."$, "Alerta!")
			End Try
			
		Else
			
			ProgressDialogShow2(ShareCode.checklistavisoterminarchecklist,False)
			Try
				For i =0 To ComponentList.Size -1
					Dim ClItem As ComponentRecords = ComponentList.Get(i)
					Dim View2Process As B4XView = ClItem.component
					If View2Process.Color = Consts.ColorLightRed Then
						View2Process.Color = Colors.White
					End If
				Next
				
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
			
			If Utils.NNE(CurrentCLA.Other.Filter) Then
				CurrentCLA.Other.Filter = ""
				StartCLA_Filter(CurrentCLA, CurrentEntity)
			End If
			Dim sSQL As String = DBStructures.EVC_SQL_GETREQUESTS_CURRENT
			sSQL = $"${sSQL} And (a.tagcode='${CurrentCLA.Request}') and (n.relation_tagcode='${CurrentCLA.Action.trim}')"$
	
			Dim Row As Int = 0
			Dim Record As Cursor
			Record = Starter.LocalSQLEVC.ExecQuery(sSQL)
			If Record.RowCount > 0 Then
				Record.Position = 0
				'Dim Points As Double = Record.GetDouble("points")
				Dim results As String = Record.GetString("result_values") 'result_type
				Dim resulttype As Int = Record.GetInt("result_type")
		
				'Dim MRO As ResultOptions
				Dim MROList As List
				MROList.Initialize
				If Not(Utils.isNullOrEmpty(results)) Then
					Dim resCols As List = Regex.Split("\|", results )
					If (resCols.Size >= 1) Then
						For Row = 0 To resCols.Size-1
							Dim innerList As List = Regex.Split("\;", resCols.Get(Row) )
							MROList.Add(Types.MakeResultOptions(innerList.Get(0), innerList.Get(2), innerList.Get(3)))
						Next
					End If
				End If
		
				Dim Points As Double =0
				Try
					Dim Points As Double = CalcPoints(CurrentCLA.Request, CurrentCLA.Action, CurrentCLA.Task, CurrentCLA.RepeatCounter)
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
		
				' ************************************************************************
				' NOTE: PEGA NA LISTA DE VALORES E VERIFICA AS POSSIBILIDADES
				' 		DE NÃO CONFORMIDADES
				' ************************************************************************
				'Dim CurrentResult As String = ""
				NONCONFORMITIESTYPE = (resulttype = 1)
				CurrentResult = ""
				If (NONCONFORMITIESTYPE) Then
			
'					Dim sSQL11 As String = $"select distinct count(0) as total
'								from  dta_requests_values as a 
'								left join dta_requests_values_adds as a1 on 
'									(a1.request_tagcode=a.request_tagcode 
'										and a1.task_tagcode=a.task_tagcode 
'										and a1.item_tagcode=a.item_tagcode 
'										and a1.unique_key=a.unique_key
'										and a1.tagcode=a.tagcode 
'										and a1.repeatcounter=a.repeatcounter
'										and a1.repeatitemcounter=a.repeatitemcounter )
'								inner join dta_tasks_items_answers as b on 
'									(b.task_tagcode=a.task_tagcode 
'										and b.item_tagcode=a.item_tagcode 
'										and b.unique_key=a.unique_key 
'										and b.tagcode=a.tagcode ) 
'								where 1=1 
'								and (
'									 ((b.type_conformity in (select tagcode from type_conformitytypes where id=2))
'									 and (a1.fieldconfirm_nc=1 and (a1.fieldconfirm_state not in (0,1)))) 
'									 or 
'									 ((b.type_conformity in (select tagcode from type_conformitytypes where id=1))
'									 and (a1.fieldconfirm_nc=1 and (a1.fieldconfirm_state in (2))))
'									 )
'								and a.execute_status>=1 
'								and a.request_tagcode='${CurrentCLA.Request.Trim}' 
'								and a.task_tagcode='${CurrentCLA.Task.Trim}'
'								and a.repeatcounter=${CurrentCLA.RepeatCounter}"$
					
					Dim sSQL11 As String = $"SELECT count(0) AS total
									from (select distinct  a.unique_key, a.execute_status as status, c.title, c.bullet_master, c.bullet_child
									from  dta_requests_values as a 
									left join dta_requests_values_adds as a1 on 
										(a1.request_tagcode=a.request_tagcode 
											and a1.task_tagcode=a.task_tagcode 
											and a1.item_tagcode=a.item_tagcode 
											and a1.unique_key=a.unique_key
											and a1.tagcode=a.tagcode 
											and a1.repeatcounter=a.repeatcounter
											and a1.repeatfieldcounter=a.repeatfieldcounter )
									inner join dta_tasks_items_answers as b on 
										(b.task_tagcode=a.task_tagcode 
											and b.item_tagcode=a.item_tagcode 
											and b.unique_key=a.unique_key 
											and b.tagcode=a.tagcode ) 
									inner join dta_tasks_items as c on 
										(c.task_tagcode=b.task_tagcode 
											and c.item_tagcode=b.item_tagcode 
											and c.unique_key=b.unique_key)
									where 1=1 
									and (( (b.type_conformity in (select tagcode from type_conformitytypes where id=2)) 
											and ( (ifnull(fieldconfirm_state,0)=2 and ifnull(a1.fieldconfirm_nc,0)=1)
												or (ifnull(fieldconfirm_nc,0)=0) ) )
												 or
		        							((b.type_conformity in (select tagcode from type_conformitytypes where id!=2)) 
											and ( (ifnull(fieldconfirm_state,0)=2 and ifnull(a1.fieldconfirm_nc,0)=1) )
		        							))
									and a.execute_status>=1 and a.request_tagcode='${CurrentCLA.Request.Trim}' 
									and a.task_tagcode='${CurrentCLA.Task.Trim}'
									and a.repeatcounter=${CurrentCLA.RepeatCounter}) as x"$
					
					Log("=================================================")
					Log(sSQL11)
					Log("=================================================")
					
					Dim NCs As Int = DBStructures.GetScriptColumnIntEVC(sSQL11, "total")
					
					'and ((b.type_conformity in (select tagcode from type_conformitytypes where id=2)) or (ifnull(a1.fieldconfirm_nc,0)=2))
			
			
'					Dim RecordRow As Cursor
'					Dim NCs As Int = 0
'					RecordRow = Starter.LocalSQLEVC.ExecQuery(sSQL11)
'					If RecordRow.RowCount > 0 Then
'						RecordRow.Position = 0
'						NCs = RecordRow.GetInt("total")
'					End If
'					RecordRow.Close
				
				
					Log($"Total NC: ${NCs}"$)
					Log("=================================================")
						
					If (NCs >=1) Then
						Dim ret As ResultOptions = MROList.Get(1)
						CurrentResult = ret.ValTitle
					Else if (NCs = 0) Then
					
						Dim sSQL121 As String = $"select distinct count(0) as total
						from  dta_requests_values as a where 1=1 
						and a.request_tagcode='${CurrentCLA.Request.Trim}' 
						and a.task_tagcode='${CurrentCLA.Task.Trim}'
						and a.repeatcounter=${CurrentCLA.RepeatCounter} 
						and ((unique_key in ('ad997355-0c5c-57a1-86ab-16aea41a974c', 
						'fe883a15-4df5-50b6-8eba-31b15564cddc', '3c335a96-fc34-5bc8-b286-d61730eafe7c')
						and execute_value<90) or 
						(unique_key in ('0f89b48e-9214-560d-a056-77aa23e5e90c') and ((execute_value>=5) and (execute_value<=7)) ))"$
						Dim acailval As Int = DBStructures.GetScriptColumnIntEVC(sSQL121, "total")
						
						'******************************************************************************
						'	CONTROLO DE ACAIL
						'******************************************************************************

						If acailval >= 1 Then
							Dim ret As ResultOptions = MROList.Get(1)
						Else
							Dim ret As ResultOptions = MROList.Get(0)
						End If
					
						CurrentResult = ret.ValTitle
					End If
			
					NONCONFORMITIES = NCs
			
				else If ((resulttype = 3) And (CurrentCLA.Action = "TSKS_2019_221630")) Then
					If (Points = 0) Then
						CurrentResult = "Excelente"
					else if ((Points > 0) And (Points <=5)) Then
						CurrentResult = "Bom com melhorias"
					else if ((Points > 5) And (Points <=45)) Then
						CurrentResult = "Redefinição das condições"
					Else
						CurrentResult = "Fora de questão"
					End If
				Else If ((resulttype = 3) And (CurrentCLA.Action = "TSKS_2019_002843")) Then
					If (Points < 20) Then
						CurrentResult = "Muito Mau"
					else if ((Points >= 20) And (Points <35)) Then
						CurrentResult = "Mau"
					else if ((Points >= 35) And (Points <60)) Then
						CurrentResult = "Razoável"
					else if ((Points >= 60) And (Points <85)) Then
						CurrentResult = "Bom"
					Else
						CurrentResult = "Muito bom"
					End If
				Else
					CurrentResult = "Concluído"
				End If
				FINGroups.Clear
				If (NONCONFORMITIES > 0) Then
					CreateNonConformities(CurrentCLA)
				End If
			
			
				' *****************************************************************
				' VERIFICA SE EXISTEM CAMPOS A ACTUALIZAR A TABELA
				' *****************************************************************
				Dim sSQLzz As String = $"select distinct case when (b.execute_value_title is null) or (b.execute_value_title = '') then b.execute_value
										else b.execute_value_title
										end as execute_value, a.do_field, b.object_tagcode
										from dta_requests_values as b
										inner join dta_tasks_items as a on (a.task_tagcode=b.task_tagcode
										and a.item_tagcode=b.item_tagcode
										and a.unique_key=b.unique_key)
										where a.do_name='__TYPEREQUEST__' and b.request_tagcode='${CurrentCLA.Request.Trim}'"$
				Private Record9z As ResultSet = Starter.LocalSQLEVC.ExecQuery(sSQLzz)
				
				'***********************************************************************
				' QUANDO SE UTILIZA O RESULTSET EM VEZ DO CURSOR, A ITERAÇÃO É FEITA 
				' COM "DO WHILE ... LOOP" E NÃO COM "FOR N TO ... NEXT" E NÃO TEM 
				' ROWCOUNT E NÃO TEM POSITION
				'***********************************************************************
				Do While Record9z.NextRow
					Dim execute_value As String = Record9z.GetString("execute_value")
					Dim do_field As String = Record9z.GetString("do_field")
					
					If do_field = "FIELD_EDPC_CONTRACT_MANAGER" Then
						Dim execute_value As String = Record9z.GetString("object_tagcode")
					End If
					
					
					Dim updSQL As String = $"update dta_requests_fields set value='${execute_value}'
										where request_tagcode='${CurrentCLA.Request.Trim}' and field_tagcode='${do_field}'"$
					Utils.SaveSQLToLog("UpdFieldsRequest", updSQL, CurrentCLA.Request.Trim)
					Sleep(100)
					
					Dim ResSvr As ResumableSub = UpdateFieldsInSVR(CurrentCLA,do_field, execute_value )
					Wait For (ResSvr) Complete (Finished As Boolean)
					
				Loop
				Record9z.Close
				
'				If (Record9z.RowCount >=1) Then
'					For nnn=0 To Record9z.RowCount-1
'						Record9z.Position = nnn
'						Dim execute_value As String = Record9z.GetString("execute_value")
'						Dim do_field As String = Record9z.GetString("do_field")
'						Dim updSQL As String = $"update dta_requests_fields set value='${execute_value}'
'										where request_tagcode='${CurrentCLA.Request.Trim}' and field_tagcode='${do_field}'"$
'						Utils.SaveSQLToLog("UpdFieldsRequest", updSQL, CurrentCLA.Request.Trim)
'					Next
'				End If
'				Record9z.Close
			
			
				Dim StartedDate As String = Utils.IfNullOrEmpty(Record.GetString("run_date"), Utils.GetCurrentDate)
				Dim EndedDate As String = Utils.IfNullOrEmpty(Record.GetString("run_enddate"), Utils.GetCurrentDate)
				Dim sSTime As String = Utils.IfNullOrEmpty(Record.GetString("run_start"), "")
				Dim sETime As String = Utils.IfNullOrEmpty(Record.GetString("run_end"), "")
				Dim sRTime As String = Utils.IfNullOrEmpty(Record.GetString("run_time"), "")
				Dim AlreadyEnded As Boolean = Utils.NNE(sRTime) And Not(sRTime.Contains("-"))
		
				FINPoints.Text = Points
				FINResult.Text = CurrentResult
			
				'Dim StartTime As String = Utils.isNullOrEmpty(sSTime, Utils.GetCurrDatetimeFrom(StartedDate, Utils.GetCurrentTimeExt))
				Dim StartTime As String = Utils.IfNullOrEmpty(sSTime, Utils.GetCurrentTimeExt)

				If Not(AlreadyEnded) Then
					FINStart.Text = StartTime
					sETime = Utils.GetCurrentTimeExt
'				FINEnd.Text = sETime 'Record.GetString("run_end")
				
'				Dim sTime As Long = StartTime 'DateTime.TimeParse(Utils.GetCurrDatetimeFrom(StartedDate, StartTime))  'FINStart.Text)
'				Dim eTime As Long = FINEnd.Text 'DateTime.TimeParse(Utils.GetCurrDatetimeFrom(EndedDate, FINEnd.Text))  'FINEnd.Text)
				
					Dim sDateTime As Long = DateTime.DateTimeParse(StartedDate, StartTime)  'FINStart.Text)
					Dim eDateTime As Long = DateTime.DateTimeParse(EndedDate, sETime)  'FINEnd.Text)
		
'				Dim PeriodTime As Period = DateUtils.PeriodBetween(sTime, eTime)
					Dim PeriodTime As Period = DateUtils.PeriodBetween(sDateTime, eDateTime)
					sRTime = $"${PeriodTime.Hours}:${PeriodTime.Minutes}:${PeriodTime.Seconds}"$
'				FINDuration.Text = sRTime
				End If
			
				FINStart.Text = Utils.IfNullOrEmpty(sSTime, Utils.GetCurrentTimeExt)
				FINEnd.Text = Utils.IfNullOrEmpty(sETime, Utils.GetCurrentTimeExt)
				FINDuration.Text = sRTime
'			FINStart.Text = StartTime
'			FINEnd.Text = Utils.GetCurrentTimeExt 'Record.GetString("run_end")
'			Dim sTime As Long = DateTime.TimeParse(FINStart.Text)
'			Dim eTime As Long = DateTime.TimeParse(FINEnd.Text)
'		
'			Dim PeriodTime As Period = DateUtils.PeriodBetween(sTime, eTime)
'			FINDuration.Text = $"${PeriodTime.Hours}:${PeriodTime.Minutes}:${PeriodTime.Seconds}"$
		
		
				Dim sSQL As String = $"update dta_requests_relations set points='${FINPoints.Text}', run_enddate='${EndedDate}', run_end='${sETime}', run_time='${sRTime}'
							where request_tagcode='${CurrentCLA.Request.Trim}' and
							relation_tagcode='${CurrentCLA.Action.Trim}' and repeatcounter=${CurrentCLA.RepeatCounter}"$
				Utils.SaveSQLToLog("PrepareToEndExecution",sSQL, CurrentCLA.Request)
				'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
		
				If (CHILD_OPERATION = False) Then
					Dim sSQL As String = $"update dta_requests set points='${FINPoints.Text}', run_enddate='${EndedDate}', run_end='${sETime}', run_time='${sRTime}'
									where tagcode='${CurrentCLA.Request.Trim}'"$
					Utils.SaveSQLToLog("PrepareToEndExecution",sSQL, CurrentCLA.Request)
					'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
				End If
			
				Dim params As Map
				params.Initialize
				params.Put("_token", ShareCode.APP_TOKEN)
				params.Put("ACLARequest", CurrentCLA.Request)
				params.Put("ACLAAction", CurrentCLA.Action)
				params.Put("ACLADateEnd", EndedDate)
				params.Put("ACLAStart", sSTime)
				params.Put("ACLAEnd", sETime)
				params.Put("ACLATime", sRTime)
				params.Put("ACLAPoints", Points)
				params.Put("ACLAChild", Utils.Bool2Int(CHILD_OPERATION))
				params.Put("ACLAReqCounter", CurrentCLA.RepeatCounter)
				params.Put("versionTagcode", Main.VersionTagcode)
				params.Put("_authorization", Main.DeviceAuthorization)
				params.Put("_instance", Main.DeviceInstance)
				params.put("_deviceBrand", Main.DeviceBrand)
				params.put("_deviceModel", Main.DeviceModel)
				params.put("_deviceMacAddress", Main.DeviceMacAddress)
				params.Put("_user", ShareCode.SESS_User)
				FINItemImages.Clear
				
		
				' ************************************************************************
				' PEGA NA LISTA DE VALORES DE IMAGENS TIRADAS
				' ************************************************************************
				Dim sSQL As String = $"select ifnull(b.title, ifnull(a.imagename,'')) as title, a.* from dta_requests_values_images as a
				left join dta_tasks_items as b on (b.task_tagcode=a.task_tagcode and 
				b.item_tagcode=a.item_tagcode and b.unique_key=a.unique_key)
				where a.request_tagcode='${CurrentCLA.Request.Trim}' and a.inner_request_tagcode='${CurrentCLA.Action.Trim}'
				and a.repeatcounter=${CurrentCLA.RepeatCounter}"$
				
				Private Record2a As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
				If Record2a.RowCount >= 1 Then
					For npos=0 To Record2a.RowCount-1
						
						Record2a.Position = npos
						Dim ContinuaEste As Boolean = True
						Try
							Dim title As String = Record2a.GetString("title")
							Dim filename As String = Record2a.GetString("imagename")
						Catch
							Log(LastException)
							Utils.WriteErrors2Log(LastException)
							ContinuaEste = False
						End Try
						
						If (ContinuaEste) Then
							If Not(Utils.isNullOrEmpty(filename)) Then
								Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record2a.GetString("request_tagcode"), _
							Record2a.GetString("inner_request_tagcode"), _
							Record2a.GetString("task_tagcode"), _
							Record2a.GetString("item_tagcode"), _
							Record2a.GetString("unique_key"), _
							Record2a.GetString("tagcode"), _
							Record2a.GetInt("repeatcounter"),0, 0, "", "", "", 3, 0, Record2a.GetInt("on_report"), "", _
								DBStructures.DB2CLATaskItem(Record2a.GetString("task_tagcode"), Record2a.GetString("unique_key")), "")
								Try
									FINItemImages.Add(CreateImagePanel(CLAItem, filename, "", 0, title), "")
								Catch
									Log(LastException)
									Utils.WriteErrors2Log(LastException)
								End Try
						
							End If
						
					End If
						
					Next
				End If
				Record2a.Close
		
				If (params.IsInitialized) Then
					Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/cla-times/update"$
					If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
						If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
							Utils.CallApi(0, params, Me, Url, "", CurrentCLA.Request)
						Else
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.request.trim, "", "")
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						End If
						Sleep(250)
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.request.trim, "", "")
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
				End If
		
			End If
			Record.Close
			TabButtonChangeTerminate_Click
			ProgressDialogHide
		End If
		ProgressDialogHide
	Else
		MsgboxAsync(ShareCode.noObjectForceExternalRequest, ShareCode.GeneralAlertTitle)
		TabButtonChangeObject_Click
	End If
	ProgressDialogHide
End Sub

Sub UpdateFieldsInSVR(RCLA As RequestCLA,Fld As String, Val As String) As ResumableSub
	
	
	Dim sACLADatetime As String = Utils.GetCurrDatetime
	Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
	Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
	
	Dim params As Map
	params.Initialize
	params.Put("_token", ShareCode.APP_TOKEN)
	
	params.Put("ACLAChild", Utils.Bool2Int(CHILD_OPERATION))
	params.Put("ACLARequest", RCLA.Request)
	params.Put("ACLAAction", RCLA.Action)
	params.Put("ACLATask", RCLA.Task)
	params.Put("ACLAItem", "")
	params.Put("ACLAUniqueKey", "")
	params.Put("ACLAField",Fld )
	params.Put("ACLAValue", Val)
	params.Put("ACLADatetime",sACLADatetime )
	params.Put("ACLALatitude",sACLALatitude)
	params.Put("ACLALongitude", sACLALongitude)
	params.Put("ACLAReqCounter", RCLA.RepeatCounter )
	params.Put("ACLARepeatItem", 0)
	params.Put("ACLARepeatField",0 )
	params.Put("ACLSessUser", ShareCode.SESS_OPER_User)
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update/fields/request"$
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
			Utils.CallApi(0, params, Me, Url, "", RCLA.Request)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, RCLA.request.trim, RCLA.Task.trim, "")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(250)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, RCLA.request.trim, RCLA.Task.trim, "")
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If
	
	Return True
	
End Sub


Sub updateThisImageFile2DB(filename As String, id As Int)
	Dim sSQL As String = $"update dta_requests_values_images set imagename='${filename}' where id=${id}"$
	Starter.LocalSQLEVC.ExecNonQuery(sSQL)
End Sub

Sub updateThisB64ImageFile2DB(image As String, id As Int)
	Dim sSQL As String = $"update dta_requests_values_images set imageb64='${image}' where id=${id}"$
	Log(sSQL)
'	Starter.LocalSQLEVC.ExecNonQuery(sSQL)
End Sub

' *************************************************************
' TIP: EVENTO: NA LEITURA DA EXECUÇÃO
' *************************************************************
Sub LoadExecution
'	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
		
	Dim sSQL As String = DBStructures.EVC_SQL_GETREQUESTS_CURRENT
	sSQL = $"${sSQL} And (a.tagcode='${CurrentCLA.Request}') and (n.relation_tagcode='${CurrentCLA.Action}')"$
	
	Dim Row As Int = 0
'	Dim Row2 As Int = 0
	Dim Record As Cursor
	Record = Starter.LocalSQLEVC.ExecQuery(sSQL)
	If Record.RowCount > 0 Then
		Record.Position = 0
		'Dim Points As Double = Record.GetDouble("points")
		Dim results As String = Record.GetString("result_values") 'result_type
		Dim resulttype As Int = Record.GetInt("result_type")
		
		Dim Points As Double =0
		Try
			Dim Points As Double = CalcPoints(CurrentCLA.Request, CurrentCLA.Action, CurrentCLA.Task, CurrentCLA.RepeatCounter)
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		
'		Dim MRO As ResultOptions
		Dim MROList As List
		MROList.Initialize
		If Not(Utils.isNullOrEmpty(results)) Then
			Dim resCols As List = Regex.Split("\|", results )
			If (resCols.Size >= 1) Then
				For Row = 0 To resCols.Size-1
					Dim innerList As List = Regex.Split("\;", resCols.Get(Row) )
					MROList.Add(Types.MakeResultOptions(innerList.Get(0), innerList.Get(2), innerList.Get(3)))
				Next
			End If
		End If
		
		
		' ************************************************************************
		' NOTE: PEGA NA LISTA DE VALORES E VERIFICA AS POSSIBILIDADES
		' 		DE NÃO CONFORMIDADES
		' ************************************************************************
		'Dim CurrentResult As String = ""
		NONCONFORMITIESTYPE = (resulttype = 1) 
		Dim CurrentResult As String = ""
		If (NONCONFORMITIESTYPE) Then
			
'			Dim sSQL11 As String = $"select distinct count(0) as total
'								from  dta_requests_values as a 
'								left join dta_requests_values_adds as a1 on 
'									(a1.request_tagcode=a.request_tagcode 
'										and a1.task_tagcode=a.task_tagcode 
'										and a1.item_tagcode=a.item_tagcode 
'										and a1.unique_key=a.unique_key
'										and a1.tagcode=a.tagcode 
'										and a1.repeatcounter=a.repeatcounter
'										and a1.repeatitemcounter=a.repeatitemcounter )
'								inner join dta_tasks_items_answers as b on 
'									(b.task_tagcode=a.task_tagcode 
'										and b.item_tagcode=a.item_tagcode 
'										and b.unique_key=a.unique_key 
'										and b.tagcode=a.tagcode ) 
'								where 1=1 
'								and (
'									 ((b.type_conformity in (select tagcode from type_conformitytypes where id=2))
'									 and (a1.fieldconfirm_nc=1 and (a1.fieldconfirm_state not in (0,1)))) 
'									 or 
'									 ((b.type_conformity in (select tagcode from type_conformitytypes where id=1))
'									 and (a1.fieldconfirm_nc=1 and (a1.fieldconfirm_state in (2))))
'									 )
'								and a.execute_status>=1 
'								and a.request_tagcode='${CurrentCLA.Request.Trim}' 
'								and a.task_tagcode='${CurrentCLA.Task.Trim}'
'								and a.repeatcounter=${CurrentCLA.RepeatCounter}"$
					
			Dim sSQL11 As String = $"SELECT count(0) AS total
									from (select distinct  a.unique_key, a.execute_status as status, c.title, c.bullet_master, c.bullet_child
									from  dta_requests_values as a 
									left join dta_requests_values_adds as a1 on 
										(a1.request_tagcode=a.request_tagcode 
											and a1.task_tagcode=a.task_tagcode 
											and a1.item_tagcode=a.item_tagcode 
											and a1.unique_key=a.unique_key
											and a1.tagcode=a.tagcode 
											and a1.repeatcounter=a.repeatcounter
											and a1.repeatfieldcounter=a.repeatfieldcounter )
									inner join dta_tasks_items_answers as b on 
										(b.task_tagcode=a.task_tagcode 
											and b.item_tagcode=a.item_tagcode 
											and b.unique_key=a.unique_key 
											and b.tagcode=a.tagcode ) 
									inner join dta_tasks_items as c on 
										(c.task_tagcode=b.task_tagcode 
											and c.item_tagcode=b.item_tagcode 
											and c.unique_key=b.unique_key)
									where 1=1 
									and (( (b.type_conformity in (select tagcode from type_conformitytypes where id=2)) 
											and ( (ifnull(fieldconfirm_state,0)=2 and ifnull(a1.fieldconfirm_nc,0)=1)
												or (ifnull(fieldconfirm_nc,0)=0) ) )
												 or
		        							((b.type_conformity in (select tagcode from type_conformitytypes where id!=2)) 
											and ( (ifnull(fieldconfirm_state,0)=2 and ifnull(a1.fieldconfirm_nc,0)=1) )
		        							))
									and a.execute_status>=1 and a.request_tagcode='${CurrentCLA.Request.Trim}' 
									and a.task_tagcode='${CurrentCLA.Task.Trim}'
									and a.repeatcounter=${CurrentCLA.RepeatCounter}) as x"$
					
			Log("=================================================")
			Log(sSQL11)
			Log("=================================================")
					
			Dim NCs As Int = DBStructures.GetScriptColumnIntEVC(sSQL11, "total")
					
			'and ((b.type_conformity in (select tagcode from type_conformitytypes where id=2)) or (ifnull(a1.fieldconfirm_nc,0)=2))
			
			
'					Dim RecordRow As Cursor
'					Dim NCs As Int = 0
'					RecordRow = Starter.LocalSQLEVC.ExecQuery(sSQL11)
'					If RecordRow.RowCount > 0 Then
'						RecordRow.Position = 0
'						NCs = RecordRow.GetInt("total")
'					End If
'					RecordRow.Close
				
				
			Log($"Total NC: ${NCs}"$)
			Log("=================================================")
						
			If (NCs >=1) Then
				Dim ret As ResultOptions = MROList.Get(1)
				CurrentResult = ret.ValTitle
			Else if (NCs = 0) Then
					
				Dim sSQL121 As String = $"select distinct count(0) as total
								from  dta_requests_values as a where 1=1 
								and a.request_tagcode='${CurrentCLA.Request.Trim}' 
								and a.task_tagcode='${CurrentCLA.Task.Trim}'
								and a.repeatcounter=${CurrentCLA.RepeatCounter} 
								and ((unique_key in ('ad997355-0c5c-57a1-86ab-16aea41a974c', 
									'fe883a15-4df5-50b6-8eba-31b15564cddc', '3c335a96-fc34-5bc8-b286-d61730eafe7c')
								and execute_value<90) or 
								(unique_key in ('0f89b48e-9214-560d-a056-77aa23e5e90c') and ((execute_value>=5) and (execute_value<=7)) ))"$
				Dim acailval As Int = DBStructures.GetScriptColumnIntEVC(sSQL121, "total")
						
				'******************************************************************************
				'	CONTROLO DE ACAIL
				'******************************************************************************

				If acailval >= 1 Then
					Dim ret As ResultOptions = MROList.Get(1)
				Else
					Dim ret As ResultOptions = MROList.Get(0)
				End If
				CurrentResult = ret.ValTitle
			End If
			
			NONCONFORMITIES = NCs
			
		else If ((resulttype = 3) And (CurrentCLA.Action = "TSKS_2019_221630")) Then
			If (Points = 0) Then
				CurrentResult = "Excelente"
			else if ((Points > 0) And (Points <=5)) Then
				CurrentResult = "Bom com melhorias"
			else if ((Points > 5) And (Points <=45)) Then
				CurrentResult = "Redefinição das condições"
			Else
				CurrentResult = "Fora de questão"
			End If
		Else If ((resulttype = 3) And (CurrentCLA.Action = "TSKS_2019_002843")) Then
			If (Points < 20) Then
				CurrentResult = "Muito Mau"
			else if ((Points >= 20) And (Points <35)) Then
				CurrentResult = "Mau"
			else if ((Points >= 35) And (Points <60)) Then
				CurrentResult = "Razoável"
			else if ((Points >= 60) And (Points <85)) Then
				CurrentResult = "Bom"
			Else
				CurrentResult = "Muito bom"
			End If
		Else
			CurrentResult = "Concluído"
		End If
		FINGroups.Clear
		If (NONCONFORMITIES > 0) Then
			CreateNonConformities(CurrentCLA)
		End If
		
'		' PEGA NA LISTA DE VALORES E VERIFICA AS POSSIBILIDADES
'		NONCONFORMITIESTYPE = (resulttype = 1)
'		Dim CurrentResult As String = ""
'		If (NONCONFORMITIESTYPE) Then
'			
'			Dim sSQL11 As String = $"select distinct count(0) as total
'					from  dta_requests_values as a inner join dta_tasks_items_answers as b on 
'					(b.task_tagcode=a.task_tagcode and b.item_tagcode=a.item_tagcode and b.unique_key=a.unique_key and b.tagcode=a.tagcode) 
'					where 1=1 and b.type_conformity in (select tagcode from type_conformitytypes where id=2) 
'					and a.execute_status>=1 and a.request_tagcode='${CurrentCLA.Request.Trim}' 
'					and a.task_tagcode='${CurrentCLA.Task.Trim}'
'					and a.repeatcounter=${CurrentCLA.RepeatCounter}"$
'					
'			Log(sSQL11)
'			
'			Dim RecordRow As Cursor
'			'Dim NCs As Int = 0
'			RecordRow = Starter.LocalSQLEVC.ExecQuery(sSQL11)
'			If RecordRow.RowCount > 0 Then
'				RecordRow.Position = 0
'				NONCONFORMITIES = RecordRow.GetInt("total")
'			End If
'						
'			If (NONCONFORMITIES>=1) Then
'				Dim ret As ResultOptions = MROList.Get(1)
'				CurrentResult = ret.ValTitle
'			Else
''				Dim ret As ResultOptions = MROList.Get(0)
''				CurrentResult = ret.ValTitle
'				
'				Dim sSQL121 As String = $"select distinct count(0) as total
'						from  dta_requests_values as a where 1=1 
'						and a.request_tagcode='${CurrentCLA.Request.Trim}' 
'						and a.task_tagcode='${CurrentCLA.Task.Trim}'
'						and a.repeatcounter=${CurrentCLA.RepeatCounter} 
'						and ((unique_key in ('ad997355-0c5c-57a1-86ab-16aea41a974c', 
'				'fe883a15-4df5-50b6-8eba-31b15564cddc', '3c335a96-fc34-5bc8-b286-d61730eafe7c')
'						and execute_value<90) or 
'						(unique_key in ('0f89b48e-9214-560d-a056-77aa23e5e90c') and ((execute_value>=5) and (execute_value<=7)) ))"$
'				Dim acailval As Int = DBStructures.GetScriptColumnIntEVC(sSQL121, "total")
'						
'				'******************************************************************************
'				'	CONTROLO DE ACAIL
'				'******************************************************************************
'
'				If acailval >= 1 Then
'					Dim ret As ResultOptions = MROList.Get(1)
'				Else
'					Dim ret As ResultOptions = MROList.Get(0)
'				End If
'				CurrentResult = ret.ValTitle
'			End If
'			
'			
'			
'			
'		else If ((resulttype = 3) And (CurrentCLA.Action = "TSKS_2019_221630")) Then
'			If (Points = 0) Then
'				CurrentResult = "Excelente"
'			else if ((Points > 0) And (Points <=5)) Then
'				CurrentResult = "Bom com melhorias"
'			else if ((Points > 5) And (Points <=45)) Then
'				CurrentResult = "Redefinição das condições"
'			Else
'				CurrentResult = "Fora de questão"
'			End If
'		Else If ((resulttype = 3) And (CurrentCLA.Action = "TSKS_2019_002843")) Then
'			If (Points < 20) Then
'				CurrentResult = "Muito Mau"
'			else if ((Points >= 20) And (Points <35)) Then
'				CurrentResult = "Mau"
'			else if ((Points >= 35) And (Points <60)) Then
'				CurrentResult = "Razoável"
'			else if ((Points >= 60) And (Points <85)) Then
'				CurrentResult = "Bom"
'			Else
'				CurrentResult = "Muito bom"
'			End If
'		Else
'			CurrentResult = "Concluído"
'		End If
'		
'		CreateNonConformities(CurrentCLA)
		
		FINPoints.Text = Points
		FINResult.Text = CurrentResult
		Dim StartTime As String = Record.GetString("run_start")
		If (Utils.isNullOrEmpty(StartTime)) Then
			StartTime = Utils.GetCurrentTimeExt
		End If
		FINStart.Text = StartTime
		FINEnd.Text = Utils.IfNullOrEmpty(Record.GetString("run_end"), "")
		FINDuration.Text = Utils.IfNullOrEmpty(Record.GetString("run_time"), "")
		
		FINItemImages.Clear
		Private Record2 As Cursor
'		Dim Status As Int = 0
		' ************************************************************************
		' PEGA NA LISTA DE VALORES DE IMAGENS TIRADAS
		' ************************************************************************
'		Dim sSQL As String = $"select ifnull(b.title, ifnull(a.imagename,'')) as title, a.* from dta_requests_values_images as a
'				left join dta_tasks_items as b on (b.task_tagcode=a.task_tagcode and 
'				b.item_tagcode=a.item_tagcode and b.unique_key=a.unique_key)
'				where a.request_tagcode='${CurrentCLA.Request.Trim}' and a.inner_request_tagcode='${CurrentCLA.Action.Trim}'
'							and a.repeatcounter=${CurrentCLA.RepeatCounter}"$
							
		Dim sSQL As String = $"select ifnull(b.title, ifnull(a.imagename,'')) as title, a.id, a.imagename,
				a.request_tagcode, a.inner_request_tagcode, a.task_tagcode, a.item_tagcode, a.unique_key, 
				a.tagcode, a.repeatcounter, a.on_report from dta_requests_values_images as a
				left join dta_tasks_items as b on (b.task_tagcode=a.task_tagcode and 
				b.item_tagcode=a.item_tagcode and b.unique_key=a.unique_key)
				where a.request_tagcode='${CurrentCLA.Request.Trim}' and a.inner_request_tagcode='${CurrentCLA.Action.Trim}'
							and a.repeatcounter=${CurrentCLA.RepeatCounter}"$
							
		
		
		Record2 = Starter.LocalSQLEVC.ExecQuery(sSQL)
		Try
		If Record2.RowCount > 0 Then
'			Dim a1 As Int = 0
			For n=0 To Record2.RowCount-1
				Record2.Position = n
				Dim Continua2 As Boolean = True
'				Try
'					Record2.Position = a1
'				Catch
'					Log(LastException)
'					Continua2 = False
'				End Try
'				a1 = a1+1
				If (Continua2) Then
					Dim image As String = ""
'					Dim image As String = Record2.GetString("imageb64")
					Dim title As String = Record2.GetString("title")
					Dim filename As String = Record2.GetString("imagename")
					Dim id As Int = Record2.GetInt("id")
'					Try
'						image = TryImage2FileCheck(image, filename, id)
'					Catch
'						Log(LastException)
'					End Try
			
			
					If Not(Utils.isNullOrEmpty(image)) Then
'						image = image.Replace("data:image/png;base64,", "")
						Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record2.GetString("request_tagcode"), _
							Record2.GetString("inner_request_tagcode"), _
							Record2.GetString("task_tagcode"), _
							Record2.GetString("item_tagcode"), _
							Record2.GetString("unique_key"), _
							Record2.GetString("tagcode"), _
							Record2.GetInt("repeatcounter"),0, 0, "", "", "", 3, 0, Record2.GetInt("on_report"), "", _
							DBStructures.DB2CLATaskItem(Record2.GetString("task_tagcode"), Record2.GetString("unique_key")), "")
						Try
							FINItemImages.Add(CreateImagePanel(CLAItem, filename, image, 0, title), "")
						Catch
							Log(LastException)
							Utils.WriteErrors2Log(LastException)
						End Try
							
							
					else if Not(Utils.isNullOrEmpty(filename)) Then
						If (File.Exists(Starter.InternalFolder,$"${filename}"$)) Then
							Try
'								Dim Base64Con As Base64Convert
'								Base64Con.Initialize
'								Dim image As String = Base64Con.EncodeFromImage(Starter.InternalFolder, filename)
								Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record2.GetString("request_tagcode"), _
										Record2.GetString("inner_request_tagcode"), _
										Record2.GetString("task_tagcode"), _
										Record2.GetString("item_tagcode"), _
										Record2.GetString("unique_key"), _
										Record2.GetString("tagcode"), _
										Record2.GetInt("repeatcounter"),0, 0, "", "", "", 3, 0, Record2.GetInt("on_report"), "", _
										DBStructures.DB2CLATaskItem(Record2.GetString("task_tagcode"), Record2.GetString("unique_key")), "")
								
								Try
									FINItemImages.Add(CreateImagePanel(CLAItem, filename, image, 0, ""), "")
								Catch
									Log(LastException)
									Utils.WriteErrors2Log(LastException)
								End Try
							Catch
								Log(LastException)
								Utils.WriteErrors2Log(LastException)
							End Try
						End If
					End If
				
				End If
				
			Next
			End If
					
		Catch
			Record2.Close
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		Record2.Close
		
		Private Record2 As Cursor
		Dim sSQL As String = $"select request_obs from dta_requests_relations where request_tagcode='${CurrentCLA.Request.Trim}'
				and relation_tagcode='${CurrentCLA.Action.Trim}' and repeatcounter=${CurrentCLA.RepeatCounter}"$
		Record2 = Starter.LocalSQLEVC.ExecQuery(sSQL)
		If Record2.RowCount > 0 Then
			Record2.Position = 0
			If (FinalObs.IsInitialized) Then FinalObs.Text = Utils.IfNullOrEmpty(Record2.GetString("request_obs"), "")
		End If
		Record2.Close
	End If
	Record.Close
'	ProgressDialogHide
End Sub

Sub TryImage2FileCheck(image As String, filename As String, id As Int) As String
					
	' VERIFICA SE FICHEIRO NÃO ESTÁ VAZIO. SE ESTIVER TENTA CRIA-LO
	If Utils.isNullOrEmpty(filename) Then
		' VERIFICA SE A STRING B64 ESTÁ PREENCHIDA. SE SIM TENTA CRIAR FICHEIRO
		If Utils.NNE(image) Then
			Dim filename As String =  $"${CurrentCLA.Request.Trim}${CurrentCLA.Action.Trim}_${Utils.MakeFileName}.png"$
			Utils.SaveImageFromB64ToFile(image, filename, ShareCode.DEVICE_DEF_IMG_FILETYPE)
			updateThisImageFile2DB(filename, id)
		Else
			image = ""
		End If
	Else
		' FICHEIRO NÃO ESTÁ VAZIO. VERIFICA SE EXISTE NA LOCALIZAÇÃO INTERNA. SE N´ÃO EXISTE, TENTA CRIA-LO
		If Not(File.Exists(Starter.InternalFolder,filename)) Then
			' VERIFICA SE A STRING B64 ESTÁ PREENCHIDA. SE SIM TENTA CRIAR FICHEIRO
			If Utils.NNE(image) Then
				Utils.SaveImageFromB64ToFile(image, filename, ShareCode.DEVICE_DEF_IMG_FILETYPE)
				updateThisImageFile2DB(filename, id)
			Else
				image = ""
			End If
		Else
			' FICHEIRO NÃO ESTA VAZIO E EXISTE. VERIFICA SE B64 ESTÁ PREENCHIDO. SE NÃO, TENTA CARREGAR
			If Utils.isNullOrEmpty(image) Then
				Try
					Dim Base64Con As Base64Convert
					Base64Con.Initialize
					Dim image As String = Base64Con.EncodeFromImage(Starter.InternalFolder, filename)
					updateThisB64ImageFile2DB(image, id)
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
					image = ""
				End Try
			End If
		End If
	End If
	Return image
End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE PAINEL DE NÃO CONFORMIDADES
' *************************************************************
Sub CreateNonConformities(nc As RequestCLA)
	FINGroups.Clear
	Dim idx As Int = 0
	If idx >0 Then idx = idx-1
	
	Dim id As ItemData
	Dim t As Int = 0
	Dim h As Int = 60dip
	id.Initialize
	id.CollapsedHeight = 50dip
	Private Record As Cursor
	
	'******************************************************************************
	' CRIA LISTA DE NÃO CONFORMIDADES
	'******************************************************************************
'	Dim SQL As String = $"select  x.unique_key, x.conform_type, x.status, x.title, x.bullet_master, x.bullet_child
'			from (select distinct a.unique_key, d.id as conform_type, a.execute_status as status, c.title, c.bullet_master, c.bullet_child
'			from  dta_requests_values as a 
'			inner join dta_tasks_items_answers as b on (b.task_tagcode=a.task_tagcode and b.item_tagcode=a.item_tagcode and b.unique_key=a.unique_key and b.tagcode=a.tagcode)
'			inner join dta_tasks_items as c on (c.task_tagcode=b.task_tagcode and c.item_tagcode=b.item_tagcode and c.unique_key=b.unique_key)
'			inner join type_conformitytypes as d on (d.tagcode=b.type_conformity and d.id=2)
'			where 1=1 and a.execute_status>=1 and 
'			a.request_tagcode='${nc.Request.Trim}' and a.task_tagcode='${nc.Task.Trim}'
'			and a.repeatcounter=${nc.RepeatCounter}
'			union
'			select distinct a.unique_key, 2 as conform_type, a.execute_status as status, ifnull(a.title, ifnull(a.execute_value_title, c.title)) as title, c.bullet_master, c.bullet_child
'			from  dta_requests_values as a 
'			inner join dta_tasks_items_answers as b on (b.task_tagcode=a.task_tagcode and b.item_tagcode=a.item_tagcode and b.unique_key=a.unique_key and b.tagcode=a.tagcode)
'			inner join dta_tasks_items as c on (c.task_tagcode=b.task_tagcode and c.item_tagcode=b.item_tagcode and c.unique_key=b.unique_key)
'			inner join dta_requests_values_adds as a1 on 
'						(a1.request_tagcode=a.request_tagcode 
'							and a1.task_tagcode=a.task_tagcode 
'							and a1.item_tagcode=a.item_tagcode 
'							and a1.unique_key=a.unique_key 
'							and a1.tagcode=a.tagcode 
'							and a1.repeatcounter=a.repeatcounter
'							and a1.repeatfieldcounter=a.repeatfieldcounter )
'			where 1=1 and a.execute_status>=1 and 
'			a.request_tagcode='${nc.Request.Trim}' and a.task_tagcode='${nc.Task.Trim}'
'			and a.repeatcounter=${nc.RepeatCounter}) as x
'			"$
			
	Dim SQL As String = $"select  x.unique_key, x.status, x.title, x.bullet_master, x.bullet_child
					from (select distinct  a.unique_key, a.execute_status as status, c.title, c.bullet_master, c.bullet_child
								from  dta_requests_values as a 
								left join dta_requests_values_adds as a1 on 
									(a1.request_tagcode=a.request_tagcode 
										and a1.task_tagcode=a.task_tagcode 
										and a1.item_tagcode=a.item_tagcode 
										and a1.unique_key=a.unique_key
										and a1.tagcode=a.tagcode 
										and a1.repeatcounter=a.repeatcounter
										and a1.repeatfieldcounter=a.repeatfieldcounter )
								inner join dta_tasks_items_answers as b on 
									(b.task_tagcode=a.task_tagcode 
										and b.item_tagcode=a.item_tagcode 
										and b.unique_key=a.unique_key 
										and b.tagcode=a.tagcode ) 
								inner join dta_tasks_items as c on 
									(c.task_tagcode=b.task_tagcode 
										and c.item_tagcode=b.item_tagcode 
										and c.unique_key=b.unique_key)
								where 1=1 
								and (( (b.type_conformity in (select tagcode from type_conformitytypes where id=2)) 
										and ( (ifnull(fieldconfirm_state,0)=2 and ifnull(a1.fieldconfirm_nc,0)=1)
											or (ifnull(fieldconfirm_nc,0)=0) ) )
											 or
           							((b.type_conformity in (select tagcode from type_conformitytypes where id!=2)) 
										and ( (ifnull(fieldconfirm_state,0)=2 and ifnull(a1.fieldconfirm_nc,0)=1) )
           							))
								and a.execute_status>=1 and a.request_tagcode='${nc.Request.Trim}' 
								and a.task_tagcode='${nc.Task.Trim}'
								and a.repeatcounter=${nc.RepeatCounter}) as x"$
			
	Record = Starter.LocalSQLEVC.ExecQuery(SQL)
	If Record.RowCount > 0 Then
		id.ExpandedHeight = 50dip + (60dip * Record.RowCount)
		Dim chapter As B4XView = CreateNCChapter(Colors.Gray, ShareCode.checklistlistnaoconformidades, "ListCollapseNonConformities", id, idx, False)
		For Row = 0 To Record.RowCount-1
			Record.Position = Row
			Dim name As String = Record.GetString("title")
			If Utils.NNE(name) Then
				CreateNCLineItems(Record, t,  h)
				t = t + 60dip
			End If
		Next
		FINGroups.Add(chapter, id)
		FINGroups.ExpandItem(idx)
		idx = idx + 1
	Else
		id.ExpandedHeight = 50dip
		Dim chapter As B4XView = CreateNCChapter(Colors.Gray, ShareCode.checklistlistnaoconformidades, "ListCollapseNonConformities", id, idx, False)
		FINGroups.Add(chapter, id)
		idx = idx + 1
	End If
	Record.Close
End Sub

Sub CreateNCChapter(clr As Int, Title As String, layout As String, id As ItemData, idx As Int, Expanded As Boolean) As B4XView
	Dim p As B4XView = xui.CreatePanel("")
	p.SetLayoutAnimated(0, 0, 0, FINGroups.sv.width, id.ExpandedHeight)
	p.LoadLayout(layout)
	p.SetLayoutAnimated(0, 0, 0, p.Width,id.CollapsedHeight)
	lblGroupTitle.Text = Title
	lblGroupTitle.Tag = idx
	pnlGroupTitle.Tag = idx
	butGroupCollpseExpand.Tag = idx
	p.Tag = Expanded 'collapsed
	Return p
End Sub

Sub CreateNCLineItems(colitems As Cursor, top As Int, height As Int) 'As B4XView
	Dim p As Panel
	p.Initialize("GroupLineClickUser")
	Activity.AddView(p, 0, 0, 100%x, height)
	p.LoadLayout("ItemNonConformity")
	p.RemoveView
	Dim name As String = colitems.GetString("title")
	'************************************************************************************
	' ALTERAÇÃO PC - Incluir Master e Child antes do name na lista de não conformidades
	' Nao criar linha se name for vazio
	'************************************************************************************
	Dim Bullet_Master As String = colitems.GetString("bullet_master")
	Dim Bullet_Child As String = colitems.GetString("bullet_child")
	lblGroupLineName.Text = $"${Bullet_Master}.${Bullet_Child}${CRLF}${name}"$
	p.Tag = 0
	pnlGroupExpanded4.AddView(p, 0, top, p.Width, height)
End Sub


' *************************************************************
' TIP: VIEW: CRIAÇÃO DE PAINEL DE IMAGENS
' *************************************************************
Sub CreateImagePanel(this As RequestCLAItem, filename As String, btm As String, state As Int, title As String) As B4XView
	Dim p As Panel
	p.Initialize("") 'ImageViewEdit")
	Activity.AddView(p, 0, 0, 100%x, 130dip)
	p.LoadLayout("CLA_MORE_IMGAGE_Listview")
	p.RemoveView

	Try
		ShowImage.SetBackgroundImage(LoadBitmapSample(Starter.InternalFolder, filename, ShowImage.Width, ShowImage.Height)) '   Utils.B64ToBitmap(btm))
		ShowImage.Tag = Types.MakeImageViewData(btm, filename)	
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	ImageFilename.Text = title 'filename
	ImageFilename.Tag = filename
	ImageStateName.Text = filename
	ImageStateName.Tag = state
	imageSelected.Tag = 0
	imageSelected.TextColor = Consts.ColorLightSilver
	imageSelected.TextColor = Consts.ColorLightSilver
	imageSelectedOnReport.TextColor = Consts.ColorLightSilver
	imageSelectedOnReport.Tag = this
	If (this.OnReport = 1) Then
		imageSelectedOnReport.TextColor = Consts.ColorGreen
	End If
		
'	If (state = 1) Then
'		ImageState.Text = "Imagem alterada"
'	Else If (state = 2) Then
'		ImageState.Text = "Nova imagem"
'	End If
	
	p.Tag = this
	Return p
End Sub

' *************************************************************
' TIP: PROCEDIMENTO DE ADICIONAR IMAGEM AO RELATÓRIO (OU NÃO)
' *************************************************************
Sub imageSelectedOnReport_Click
	'imageSelectedOnReport
	Dim thisBut As Label = Sender
	Dim thisPanel As Panel = thisBut.Parent
	Dim this As RequestCLAItem = thisBut.Tag
	If (this.OnReport = 1) Then
		this.OnReport = 0
		thisBut.TextColor = Consts.ColorLightSilver
	Else
		this.OnReport = 1
		thisBut.TextColor = Consts.ColorGreen
	End If
	thisBut.Tag = this
	Dim fname As Label = thisPanel.GetView(1)
	Dim filename As String = fname.Text
	If Not(Utils.isNullOrEmpty(fname.Tag)) Then
		filename = fname.tag
	End If
	
	' ***********************************************************
	' VERIFICAR NECESSIDADE DE CONTROLO DE REPETIÇÃO, SE EXISTIR
	Dim sSQL As String = $"update dta_requests_values_images set on_report=${this.OnReport} 
							where request_tagcode='${this.Request.Trim}' and task_tagcode='${this.Task.Trim}' and
							item_tagcode='${this.Item.Trim}' and unique_key='${this.UniqueKey.Trim}' 
							and tagcode='${this.Tagcode.Trim}' and imagename='${filename}'
							and repeatcounter=${this.RepeatCounter}"$
	Utils.SaveSQLToLog("imageSelectedOnReport_Click",sSQL, this.Request)
	'Starter.LocalSQLEVC.ExecNonQuery($"${sSQL}"$)
	
	Dim params As Map
	params.Initialize
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLARequest", this.Request)
	params.Put("ACLAAction", this.Action)
	params.Put("ACLATask", this.Task)
	params.Put("ACLAItem", this.Item)
	params.Put("ACLAUniqueKey", this.UniqueKey)
	params.Put("ACLATagcode", this.Tagcode)
	params.Put("ACLAValueFileImage", filename)
	params.Put("ACLAOnReport", this.OnReport)
	params.Put("ACLAReqCounter", this.RepeatCounter)
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	If (params.IsInitialized) Then
		
		Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai-more/img/update2"$
		If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
			If Not(ShareCode.APP_WORKING_LOCAL) Then
				Dim GODR As ResumableSub = GetOfflineDataRec(1, this.request.trim, this.Task.trim, this.Item.trim)
				Wait For (GODR) Complete (HasResults As Boolean)
				If HasResults Then
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, this.request.trim, this.Task.trim, this.Item.trim)
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
				Else
					Utils.CallApi(0, params, Me, Url, "", this.Request)
				End If
			Else
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, this.request.trim, this.Task.trim, this.Item.trim)
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			End If
			Sleep(250)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, this.request.trim, this.Task.trim, this.Item.trim)
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
	End If
End Sub

Sub butChecklistRunEnd_Click
	NONCLICK = 1
	TerminateChecklistButtonClick
End Sub

' *************************************************************
' TIP: PROCEDIMENTO DE EVENTO TERMINAR - CLOSE EXECUTION
' *************************************************************
Sub TerminateChecklistButtonClick
'	Dim total As Int = CountMandatoryState
'	MsgboxAsync($"${total}"$, "alerta")
	Log("CONCLUIR CHECKLIST")
'	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
'	Sleep(100)
	Dim SaveObs As ResumableSub = saveFinalObs
	wait for (SaveObs) Complete (Finished As Boolean)
	If (FastCloseAction) Then
		CloseExecution
	Else
'		Private CLA_CURRENT_STATE As Int = 0
'		Private CLA_CURRENT_PAGE As Int = 0
'		If (CurrentTab <=1) Then
'			listsTabPanel.ScrollTo(2, True)
'		Else
'			listsButtonClose_Click
'		End If
		If (CLA_CURRENT_PAGE = 0) Then
			If (CurrentCLA.Status.status<=2) Then
				CLA_TERMINATE_CLICK = 1
				PrepareToEndExecution
			Else
				TabButtonChangeTerminate_Click
			End If
		Else If (CLA_CURRENT_PAGE = 1) Then
			TabButtonChangeObject_Click
		Else If (CLA_CURRENT_PAGE = 2) Then
			If (CurrentCLA.Status.status<=2) Then
				CloseExecution
				ProgressDialogHide
			Else
				TabButtonChangeTerminate_Click
			End If
		End If
	End If
'	ProgressDialogHide
End Sub

Sub butChecklistRunReport_Click
	'saveFinalObs
End Sub

Sub butChecklistRunAction_Click
	'
End Sub


Sub ButtonUserUnavailable_Click
	
End Sub

Sub butChecklistReport_Click
	Dim btn As Button = Sender
	If btn.IsInitialized Then
		ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
		Sleep(150)
		'butChecklistReport
		Dim CLA As RequestCLA = btn.Tag ' (Request As String, Action As String, Task As String, TaskType As Int, Status As Intervention, Info As RequestTaskInfo)

		Dim SQL As String = $"select * from dta_requests_relations where request_tagcode='${CurrentCLA.Request.trim}'
					and relation_tagcode='${CurrentCLA.Action.trim}' and repeatcounter=${CurrentCLA.RepeatCounter}"$
		Private Recordw As Cursor
		Recordw = Starter.LocalSQLEVC.ExecQuery(SQL)
		If Recordw.RowCount > 0 Then
			Recordw.Position = 0
			REPORT_GENERATED = Utils.NNE(Recordw.GetString("file_report")) 'Recordw.GetInt("report_generated") = 1
			REPORT_FILE_GENERATED = Recordw.GetString("file_report")
		End If
	
		'VERIFICAR SE ESTA CONDICAO PODE EXISTIR
		'SE NAO EXISTIR O RELATORIO NA DT_REQUESTS VAI A DTA_REQUESTS_RELATIONS
	
		Dim repFile As String = DBStructures.GetScriptColumnStrEVC($"select file_report from dta_requests where tagcode='${CurrentCLA.Request.trim}'"$,"file_report")
		If Utils.isNullOrEmpty(repFile) Then
			Dim theFile As String = REPORT_FILE_GENERATED
		Else
			Dim theFile As String = repFile
		End If
		'*************************************************************************************************
		'ALTERACAO PC - SE O RELATORIO VIER DO BO EM PDF, CHAMA A ROTINA QUE REGERA O RELATORIO LOCALMENTE
		'*************************************************************************************************
		Dim theFile As String = REPORT_FILE_GENERATED ' força o regerar
		
		If Not(Utils.isNullOrEmpty(theFile)) Then
		
			If Not(theFile.EndsWith("pdf")) Then
				CallSubDelayed3(ReportView, "ShowCLHTMLReport", CLA, theFile)
			Else
				CallSubDelayed2(ReportView, "RegenerateFromCL", CLA)
			End If
		
		Else
			Dim SaveObs As ResumableSub = saveFinalObs
			wait for (SaveObs) Complete (Finished As Boolean)
			Sleep(1000)
			'*********************************************
			' ERRO CORRIGIDO, REPORTADO PELO BRUNO
			' Estava CurrentValor em vez de CurrentFilter
			'*********************************************
			CLA.Other.Filter = CurrentFilter
			ProgressDialogShow2(ShareCode.GeneralLoadingMessage,False)
			Sleep(2500)
			ProgressDialogHide
			'PASSA a REGERAR AUTOMATICAMENTE
			CallSubDelayed2(ReportView, "ActivityCLGenerateReport", CLA)

		End If
		ProgressDialogHide
	End If
End Sub

Sub butChecklistSendReport_Click
	'butChecklistSendReport
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(150)
	Dim emails As String = ""
	Private Record2 As Cursor
	Dim sSQL As String = $"Select tagcode, email from dta_contacts
					where tagcode in (Select distinct contact_tagcode from dta_objects_contacts
					where object_tagcode in (Select distinct entity_tagcode from dta_requests where tagcode='${CurrentCLA.Request.Trim}'))"$
							
	Record2 = Starter.LocalSQLEVC.ExecQuery(sSQL)
	If Record2.RowCount > 0 Then
		Record2.Position = 0
		emails = Record2.GetString("email")
	End If
	Record2.Close
	
	Try
		GetReportSendEmailDialog(CurrentCLA, CHECKLIST_TITLE, emails)
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	ProgressDialogHide
End Sub

Sub UploadFilesWithFTP(filename As String )
	Dim myFTP As FTP
	myFTP.Initialize("ftp", $"${ShareCode.APPL_ACCOUNT.ToLowerCase}.${ShareCode.APPL_HOST}"$, 21, $"${ShareCode.APP_FTP_USER}@${ShareCode.APPL_HOST}"$, "..VRCG@EvolutionCheck20!9")
	myFTP.PassiveMode = True
'	Dim ctm As CustomTrustManager
'	ctm.InitializeAcceptAll
'	myFTP.SetCustomSSLTrustManager(ctm)
	myFTP.TimeoutMs =240000
	Log(filename)
	Dim sf As Object = myFTP.UploadFile(Starter.InternalFolder, filename, False, "/" & ShareCode.APP_DOMAIN & "/docs/" & filename)
	Wait For (sf) ftp_UploadCompleted (ServerPath As String, Success As Boolean)
	If Success Then
		Log("file was uploaded successfully")
	Else
		Log("Error uploading file")
	End If
	myFTP.Close
End Sub

' *************************************************************
' TIP: PROCEDIMENTO DE ENVIO DE EMAIL
' *************************************************************
Sub GetReportSendEmailDialog(this As RequestCLA, title As String, emails As String)
	
	Private ApplDialog As CustomLayoutDialog
	Dim sf As Object = ApplDialog.ShowAsync(ShareCode.Option_SENDEMAIL, ShareCode.Option_CONFIRM, ShareCode.Option_CANCEL, "", Null, False)
	Utils.SetDialogColors(sf, Consts.ColorWhite, Consts.ColorGray, 3, 5)
	If (ShareCode.ISPHONE) Then
		ApplDialog.SetSize(95%x, 80%y)
	Else
		ApplDialog.SetSize(70%x, 430dip)
	End If
	
	Wait For (sf) Dialog_Ready(pnl As Panel)
	pnl.LoadLayout("dialog_more_action_sendEmail")

	dlgASEmails.Text = Utils.IfNullOrEmpty(emails, "")
	dlgASEmailsCC.Text = $"alertas@${ShareCode.APPL_HOST}"$
	dlgASEmailsSubject.Text = $"Relatório: ${this.Request} - ${title}"$
	dlgASDetails.Text = title
	'dlgASEmails.Text = ""
	Wait For (sf) Dialog_Result(res As Int)
	If res = DialogResponse.POSITIVE Then
		ApplDialog.CloseDialog(DialogResponse.POSITIVE)

		Dim HTML As String = $"<html><body>
		<p><h4><strong>Envio de Relatório</strong></h4><br><br>
		<strong>Informação</strong><br>
		${dlgASDetails.Text}<br></p>
		<p>A equipa ${ShareCode.APP_Company_Name}</>
		</body></html>"$
		Try
			
			If Not(ShareCode.APP_WORKING_LOCAL) Then
				ProgressDialogShow2(ShareCode.checklistenviardados2BO, False)
				Log("upload from GetReportSendEmailDialog")
				Dim UpdServer As ResumableSub = UpdateData2Server
				Wait For (UpdServer) Complete (Finished As Boolean)
				ProgressDialogHide
			
				RequestEmailFromBO(this.Request,dlgASEmails.Text, dlgASEmailsCC.Text, dlgASEmailsSubject.Text,"","")
			End If
			
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try

		'CallSubDelayed3(requests, "Return2CLAI", this, 1)
	End If
End Sub

Sub objectImage_Click
	
End Sub


' *************************************************************
' TIP: VIEW - CRIAÇÃO DE VIEW DETALHES DO OBJECTO
' *************************************************************
Sub CreateobjectDetailsData(idx As Int, clear As Boolean, Record As Cursor) As Int
	
	If clear Then
		objectListView.Clear
		clListView.Clear
		ComponentList.Clear
	End If
		
	'*****************************************************************
	' ALTERACAO PC
	' A LISTVIEW TEM DE SER SEMPRE LIMPA ANTES DE CARREGAR DADOS DO OBJECTO
	' SEJA NOVO OU MUDAR O OBJECTO ASSOCIADO
	'*****************************************************************

	MakeAddressesFolder(idx, Record,ShareCode.checklistDadosObjectoMoradas) 'Moradas
	
	idx = idx + 1
	Dim sSQL As String = $"${DBStructures.EVC_SQL_CURRENT_CONTACTS}  where a.tagcode in (select contact_tagcode from dta_objects_contacts where object_tagcode='${Record.GetString("tagcode")}')"$
			
	Log(sSQL)
	Dim id As ItemData
	id.Initialize
	id.CollapsedHeight = 50dip
	Private rContact As Cursor
	rContact = Starter.LocalSQLEVC.ExecQuery(sSQL)
	If rContact.RowCount > 0 Then
		id.ExpandedHeight = 50dip + (rContact.RowCount * 200dip)
		Dim chapter1 As B4XView = CreateChapterContact(Colors.Gray, ShareCode.checklistDadosObjectoContactos, id, 1, objectListView.AsView.Width, False) 'Contactos
		idx = idx + 1
		For i=0 To rContact.RowCount-1
			rContact.Position = i
			MakeContactsFolder(1, chapter1, rContact, id, (i*200dip))
		Next
	Else
		id.ExpandedHeight = 50dip
		Dim chapter1 As B4XView = CreateChapterContact(Colors.Gray, ShareCode.checklistDadosObjectoContactos, id, 1, objectListView.AsView.Width, False)
		idx = idx + 1
	End If
	rContact.Close
	objectListView.Add(chapter1, id)
	ExpandItemObj(1)

'	MakePropertiesFolder(idx, Record, "Campos adicionais")
'	idx = idx + 1
	
	'Record.Close
	Return idx
End Sub

Sub CreateobjectDetailsDataProp(idx As Int, clear As Boolean, Tagcode As String) 'Record As Cursor)
	
	If clear Then
		objectListView.Clear
		clListView.Clear
		ComponentList.Clear
	End If
	
	MakePropertiesFolder(idx, Tagcode, ShareCode.checklistDadosObjectoCamposObjecto) 'Campos do objecto
End Sub

' *************************************************************
' TIP: VIEW - CRIAÇÃO DE VIEW MORADA DE OBJECTO
' *************************************************************
Sub MakeAddressesFolder(idx As Int, Record As Cursor, title As String)
	Dim id As ItemData
	id.Initialize
	id.CollapsedHeight = 50dip
	If(ShareCode.ISPHONE) Then
		id.ExpandedHeight = 50dip + 310dip
	Else
		id.ExpandedHeight = 50dip + 225dip
	End If	
	Dim chapter As B4XView = CreateChapterContact(Colors.Gray, title, id, idx, objectListView.AsView.Width, False)
	Dim p As Panel
	p.Initialize("objectListView")
	If(ShareCode.ISPHONE) Then
		Activity.AddView(p, 0, 0, 100%x, 360dip)
	Else
		Activity.AddView(p, 0, 0, 100%x, 275dip)
	End If
	
	p.LoadLayout("ItemAddress")
	
	ItemAddress_TipoMorada.text = ShareCode.ItemAddressTipoMorada
	ItemAddress_Endereco.text = ShareCode.ItemAddressEndereco
	ItemAddress_Continua.text = ShareCode.ItemAddressContinua
	ItemAddress_CPostal.text = ShareCode.ItemAddressCPostal
	ItemAddress_Latitude.text = ShareCode.ItemAddressLatitude
	ItemAddress_Longitude.text = ShareCode.ItemAddressLongitude
	ItemAddress_Localidade.text = ShareCode.ItemAddressLocalidade
	
	p.RemoveView
	p.Tag = idx
	lblAddressName.Text = Record.GetString("address")
	lblAddressName2.Text = Record.GetString("address2")
	lblAddressPostalCode.Text = Record.GetString("postal_code")
	lblAddressCity.Text = Record.GetString("city")
	lblAddressLatitude.Text = Record.GetString("latitude")
	lblAddressLongitude.Text = Record.GetString("longitude")
	lblAddressType.Text = "Sede/Facturação"
	butAddressEdit.Tag = Record.GetString("local")
	butAddressMap.Tag = Record.GetString("local")
	
	If(ShareCode.ISPHONE) Then
		pnlGroupExpanded.AddView(p, 0, 0, 100%x, 325dip)
	Else
		pnlGroupExpanded.AddView(p, 0, 0, 100%x, 225dip)
	End If
	
	
	objectListView.Add(chapter, id)
	ExpandItemObj(0)
	
End Sub

' *************************************************************
' TIP: VIEW - CRIAÇÃO DE FOLDER CONTACTOS DE OBJECTO
' *************************************************************
Sub MakeContactsFolder(idx As Int, chapter1 As B4XView, Record As Cursor, id As ItemData, top As Int)
	
	Dim p1 As Panel
	p1.Initialize("GroupLineClick")
	Activity.AddView(p1, 0, 0, 100%x, 200dip)
	p1.LoadLayout("ItemContact")
	p1.RemoveView
	p1.Tag = idx
	lblContactName.Text = Record.GetString("name")
	lblContactPhone.Text = Record.GetString("phone")
	lblContactEmail.Text = Record.GetString("email")
	lblTypeContact.Text = Record.GetString("typedesc")
	
	butContactEdit.Tag = Record.GetString("tagcode")
	pnlGroupExpanded.AddView(p1, 0, top, p1.Width, 200dip)
	
End Sub

Sub CollapseItemObj(index As Int)
	Dim id As ItemData = objectListView.GetValue(index)
	objectListView.ResizeItem(index, id.CollapsedHeight)
	objectListView.GetPanel(index).Tag = False
	'AnimatedArrow(index, 180, 0)
	
	If (pnlGroupCurrenIndex <> index) Then
'		objectListView.GetPanel(pnlGroupCurrenIndex).GetView(0).GetView(2).Color = Consts.NoColor
'		objectListView.GetPanel(index).GetView(0).GetView(2).Color = Consts.ColorRed
		objectListView.GetPanel(index).GetView(0).GetView(1).Text = Types.EXPAND_ICON
		pnlGroupCurrenIndex = index
'	Else
'		butGroupCollpseExpand.text = Types.EXPAND_ICON
	End If
	
End Sub

Sub ExpandItemObj (index As Int)
	Try
		Dim id As ItemData = objectListView.GetValue(index)
		objectListView.ResizeItem(index, id.ExpandedHeight)
		objectListView.GetPanel(index).Tag = True
		'AnimatedArrow(index, 0, 180)
		If (pnlGroupCurrenIndex <> index) Then
'		objectListView.GetPanel(pnlGroupCurrenIndex).GetView(0).GetView(2).Color = Consts.NoColor
'		objectListView.GetPanel(index).GetView(0).GetView(2).Color = Consts.ColorRed
			objectListView.GetPanel(index).GetView(0).GetView(1).Text = Types.COLLAPSE_ICON
			pnlGroupCurrenIndex = index
'	Else
'		objectListView.GetPanel(index).GetView(0).GetView(1).Text = Types.COLLAPSE_ICON
		End If
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	
End Sub

' *************************************************************
' TIP: VIEW - CRIAÇÃO DO FOLDER PROPRIEDADES DO OBJECTO
' *************************************************************
Sub MakePropertiesFolder(idx As Int, tagcode As String, title As String)
	Dim id As ItemData
	id.Initialize
	id.CollapsedHeight = 50dip
'	Dim ExpandThis As Boolean = False
	
	Private Record2 As Cursor
	'Dim tgobject As String = Record.GetString("tagcode")
	Dim SQL As String = $"${DBStructures.EVC_QL_CURRENT_OBJECTS_PROPERTIES} and object_tagcode='${tagcode}'"$
	Log(SQL)
	Record2 = Starter.LocalSQLEVC.ExecQuery(SQL)
	If Record2.RowCount > 0 Then
		Dim row As Int = 0
		id.ExpandedHeight = 50dip + (60dip * Record2.RowCount)
		Dim chapter As B4XView = CreateChapterProp(Colors.Gray, title, id, idx, objectListView.AsView.Width, False)
'		idx = idx +1
'		ExpandThis = True
		For i=0 To Record2.RowCount-1
			Record2.Position = row
			
			Dim p As Panel
			p.Initialize( "GroupLineClickProp")
			Activity.AddView(p, 0, 0, 100%x, id.ExpandedHeight)
			p.LoadLayout("ItemProperty")
			p.RemoveView
			p.Tag = idx
			lblPropertyValue.Text = Record2.GetString("value")
			lblPropertyName.Text = Record2.GetString("title")
			lblPropertyName.tag = Record2.GetString("object_tagcode") 		'Referência da Entidade
			butPropertyEdit.tag = Record2.GetString("field_tagcode")		'Referência do campo
			Dim Height As Int = ((i+1)*60dip)-60dip
			pnlGroupExpandedProp.AddView(p, 0, Height, 100%x, 60dip)
			row = row +1
		Next
	Else
		id.ExpandedHeight = 50dip
		Dim chapter As B4XView = CreateChapterProp(Colors.Gray, title, id, idx, objectListView.AsView.Width, False)
	End If
	Record2.Close
	
	objectListView.Add(chapter, id)
	ExpandItemObj(idx)
	'If ExpandThis Then ExpandItemProp(idx)
End Sub

' *************************************************************
' TIP: VIEW - CONTACTOS DO OBJECTO
' *************************************************************
Sub CreateChapterContact(clr As Int, Title As String, id As ItemData, idx As Int, width As Int, Expanded As Boolean) As B4XView
	Dim p As B4XView = xui.CreatePanel("")
	p.SetLayoutAnimated(0, 0, 0, width, id.ExpandedHeight) 'objectListView.AsView.Width, id.ExpandedHeight)
	p.LoadLayout("ListCollapseGroup_2")
	p.SetLayoutAnimated(0, 0, 0, p.Width,id.CollapsedHeight)
	lblGroupTitle.Text = Title
	lblGroupTitle.Tag = idx
	pnlGroupTitle.Tag = idx
	butGroupCollpseExpand.Tag = idx
	p.Tag = Expanded 'collapsed
	Return p
End Sub

' *************************************************************
' TIP: VIEW - PROPRIEDADES DO OBJECTO
' *************************************************************
Sub CreateChapterProp(clr As Int, Title As String, id As ItemData, idx As Int, width As Int, Expanded As Boolean) As B4XView
	Dim p As B4XView = xui.CreatePanel("")
	p.SetLayoutAnimated(0, 0, 0, width, id.ExpandedHeight) 'objectListView.AsView.Width, id.ExpandedHeight)
	
	p.LoadLayout("ListCollapseGroupProp")
	p.SetLayoutAnimated(0, 0, 0, p.Width,id.CollapsedHeight)
	lblGroupTitleProp.Text = Title
	lblGroupTitleProp.Tag = idx
	pnlGroupTitleProp.Tag = idx
	butGroupCollpseExpandProp.Tag = idx
	p.Tag = Expanded 'collapsed
	Return p
End Sub

Sub GroupPropCollpseExpand_Click
	'MsgboxAsync("Clicou Expand Painel", "Alerta!")
	Dim p As B4XView = objectListView.GetPanel(pnlGroupCurrenIndex)
	If p.Tag = True Then
		CollapseItemObj(pnlGroupCurrenIndex)
	Else
		ExpandItemObj(pnlGroupCurrenIndex)
	End If
End Sub


Sub GroupCollpseExpand_Click ' foi colocado um try
	'MsgboxAsync("Clicou Expand Painel", "Alerta!")
	Try
		Dim p As B4XView = objectListView.GetPanel(pnlGroupCurrenIndex)
		If p.Tag = True Then
			CollapseItemObj(pnlGroupCurrenIndex)
		Else
			ExpandItemObj(pnlGroupCurrenIndex)
		End If
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	
End Sub

' *************************************************************
' TIP: ALTERAÇÃO DE DADOS (STOCK)
' *************************************************************
Sub ManageCLAItemEditValueStk(this As B4XView)

	'****************************************************************************
	' ALTERACAO PC - O PROPOSITO DESTA SUB É NÃO SO GRAVAR AS QTD QUE O UTILIZADOR ALTEROU
	' EM CADA UM DOS ARTIGOS, SEJA UMA VENDA OU UM CARREGAMENTO, MAS GUARDAR NA DTA_REQUESTS_VALUES_ADDS
	' O STOCK ACTUAL DO ARTIGO ANTES DA MOVIMENTACAO PARA REFERENCIA FUTURA
	'****************************************************************************

	If this Is EditText Or this Is FloatLabeledEditText Then
	
		Try
			Dim sF As StringFunctions
			Log("»»»»»»»»»»»»»»»»»»»»»»»»»»  EDIT  «««««««««««««««««««««««««««")
			Dim pan As Panel = this.Parent
			Dim thisTAG As String = this.Tag
			Dim New As String = this.Text
			
			If Not(Utils.isNullOrEmpty(this.Tag)) Then
				Dim Columns As List = Regex.Split("\|", thisTAG) 'this.tag )
				If (Columns.Size > 1) Then
					
					Dim request_tagcode As String = sF.Trim(Columns.Get(0))
					Dim action_tagcode As String = sF.Trim(Columns.Get(1))
					Dim task_tagcode As String = sF.Trim(Columns.Get(2))
					Dim item_tagcode As String = sF.Trim(Columns.Get(3))
					Dim uniquekey As String = sF.Trim(Columns.Get(4))
					Dim tagcode As String = sF.Trim(Columns.Get(5))
					Dim status As Int = 0
					Dim SetInner As Int = 0
					Dim repeatcounter As Int = sF.Trim(Columns.Get(9))
					Dim repeatitemcounter As Int = sF.Trim(Columns.Get(10))
					Dim repeatfieldcounter As Int = sF.Trim(Columns.Get(11))
					Dim sACLADatetime As String = Utils.GetCurrDatetime
					Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
					Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
				End If
				
				
				Dim actStkBox As Label = pan.GetView(3)
				Dim StkValue As String  = actStkBox.Text
				
				'**********************************************************************************************
				' GRAVA A QTA ACTUAL ALTERADA EM execute_Value
				'**********************************************************************************************
				Dim sSQL As String = $"update dta_requests_values set execute_value='${New}',
								execute_status='${status}', 
								execute_datetime='${sACLADatetime}', 
								execute_latitude='${sACLALatitude}', 
								execute_longitude='${sACLALongitude}'
								where request_tagcode='${request_tagcode.Trim}' and
								task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
								unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}'
								And repeatcounter=${repeatcounter}
								and repeatitemcounter=${repeatitemcounter}
								and repeatfieldcounter=${repeatfieldcounter}"$
						
				'Log(sSQL)
				Utils.SaveSQLToLog("CLAItemEditValueStk_FocusChanged",sSQL, request_tagcode)
				
				'**********************************************************************************************
				' GRAVA O STOCK ANTES DA ALTERACAO ACIMA EM fieldval_02 da DTA_REQUESTS_VALUES_ADDS
				' VOU TEMPORARIAMENTE TESTAR TAMBEM COM O DTA_REQUESTS_VALUES ACIMA, USANDO A VAL_MIN
				' PARA GUARDAR O VALOR JA QUE NO DTA_REQUESTS_VALUES_ADDS ESTOU A TER PROBLEMAS COM O CAPITULO
				'**********************************************************************************************
							
				Log("*****************************************************************************************")
				Log("GRAVA OS STOCKS DTA_REQUESTS_VALUES_ADDS")
				Log("StkValue:" & StkValue)
				Log("*****************************************************************************************")
				Dim sSQL As String = $"update dta_requests_values_adds set fieldval_02=${StkValue}
								where request_tagcode='${request_tagcode.Trim}' and
								task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
								unique_key='${uniquekey.Trim}'
								and repeatcounter=${repeatcounter}
								and repeatitemcounter=${repeatitemcounter}
								and repeatfieldcounter=${repeatfieldcounter}"$
						
				Log(sSQL)
				Log("*****************************************************************************************")
				Utils.SaveSQLToLog("CLAItemEditValueStk_FocusChanged",sSQL, request_tagcode)
				
				Dim params As Map
				params.Initialize
				params.Clear
				params.Put("_token", ShareCode.APP_TOKEN)
				params.Put("ACLARequest", request_tagcode)
				params.Put("ACLAAction", action_tagcode)
				params.Put("ACLATask", task_tagcode)
				params.Put("ACLAItem", item_tagcode)
				params.Put("ACLAUniqueKey", uniquekey)
				params.Put("ACLATagcode", tagcode)
				params.Put("ACLAValue", New)
				params.Put("ACLAReqCounter", repeatcounter)
				params.Put("ACLARepeatItem", repeatitemcounter)
				params.Put("ACLARepeatField", repeatfieldcounter)
				params.Put("ACLAInner", SetInner)
				params.Put("ACLADatetime", sACLADatetime)
				params.Put("ACLALatitude", sACLALatitude)
				params.Put("ACLALongitude", sACLALongitude)
					
				Dim ACLSessUser As String = ShareCode.SESS_OPER_User
				Dim ACLClear As Int = 0
				params.Put("ACLSessUser", ACLSessUser)
				params.Put("ACLClear", ACLClear)
				params.Put("versionTagcode", Main.VersionTagcode)
				params.Put("_authorization", Main.DeviceAuthorization)
				params.Put("_instance", Main.DeviceInstance)
				params.put("_deviceBrand", Main.DeviceBrand)
				params.put("_deviceModel", Main.DeviceModel)
				params.put("_deviceMacAddress", Main.DeviceMacAddress)
				params.Put("_user", ShareCode.SESS_User)
				Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
				If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
					If Not(ShareCode.APP_WORKING_LOCAL) Then
						Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
						Wait For (GODR) Complete (HasResults As Boolean)
						If HasResults Then
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						Else
							Utils.CallApi(0, params, Me, Url, "", request_tagcode)
						End If
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
					Sleep(250)
				Else
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
				End If
				
				
			End If
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
	End If

End Sub

Sub CLAItemEditValueStk_EnterPressed

	Dim this As B4XView = Sender
	ManageCLAItemEditValueStk(this)

End Sub

Sub CLAItemEditValueStk_FocusChanged (HasFocus As Boolean)
	Dim this As EditText = Sender
	If (HasFocus = True) Then
		this.SelectAll
	Else
		ManageCLAItemEditValueStk(this)
	End If
End Sub

'Dim tt As TimePickerDialog
Sub CLAItemDateEditValue_FocusChanged (HasFocus As Boolean)
	Dim cCurrentDateEdit As FloatLabeledEditText = Sender
	If (HasFocus = True) Then
		Dim dd As DatePickerDialog
		DateTime.DateFormat = Consts.DateTimeFormat
		Dim dnow As Long = DateTime.Now
		Try
			CurrentEditValueFloat = cCurrentDateEdit
			If (cCurrentDateEdit.Text  <> "") Then
				dnow = DateTime.DateParse(cCurrentDateEdit.text)
			End If
			dd.Initialize("CalendarGetDate", DateTime.GetYear(dnow), DateTime.GetMonth(dnow)-1, DateTime.GetDayOfMonth(dnow))
			dd.show("CurrentDateEdit")
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
	Else
		Dim BigTag As String = cCurrentDateEdit.tag
		Dim BigText As String = cCurrentDateEdit.text
		Dim BigParent As Panel = cCurrentDateEdit.parent
		CalendarGetDateDateSet(BigTag, BigText, BigParent)
	End If
End Sub

Sub CLAItemDateEditValue_EnterPressed
	If (Sender Is EditText) Then
		Dim temp As EditText = Sender
		Dim BigTag As String = temp.tag
'		Dim BigTag As String = temp.tag
		Dim BigText As String = temp.text
		Dim BigParent As Panel = temp.parent
	else if (Sender Is FloatLabeledEditText) Then
		Dim cCurrentDateEdit As FloatLabeledEditText = Sender
		Dim BigTag As String = cCurrentDateEdit.tag
		Dim BigText As String = cCurrentDateEdit.text
		Dim BigParent As Panel = cCurrentDateEdit.parent
	Else
		Dim BigTag As String = ""
	End If
	CalendarGetDateDateSet(BigTag, BigText, BigParent)
End Sub

' *************************************************************
' TIP: PROCEDIMENTO DE RETORNO DE DATE (CAIXA DE TEXTO)
' *************************************************************
Sub CalendarGetDateDateSet(BigTag As String, BigText As String, BigParent As Panel)

	Dim ThisItemValue As String = BigText
	If Not(Utils.isNullOrEmpty(BigTag)) Then
		Dim Columns As List = Regex.Split("\|", BigTag )
		If (Columns.Size >= 1) Then
			Try
				Dim request_tagcode As String = Columns.Get(0)
				Dim action_tagcode As String = Columns.Get(1)
				Dim task_tagcode As String = Columns.Get(2)
				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
				Dim tagcode As String = Columns.Get(5)
'				Dim val As Int = Columns.Get(6)
'				Dim StatusIcon As Int = Columns.Get(7)
				Dim repeatcounter As Int = Columns.Get(9)
				Dim repeatitemcounter As Int = Columns.Get(10)
				Dim repeatfieldcounter As Int = Columns.Get(11)
				Dim sACLADatetime As String = Utils.GetCurrDatetime
				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
				
				Dim DoNotChangeValue As Boolean = (DBStructures.GetScriptColumnIntEVC($"select count(0) as total
											from dta_requests_values_adds where 1=1
											and request_tagcode='${request_tagcode.Trim}' 
											and task_tagcode='${task_tagcode.Trim}' 
											and item_tagcode='${item_tagcode.Trim}' 
											And repeatcounter=${repeatcounter}
											and repeatitemcounter=${repeatitemcounter}
											and fieldval_03='1'"$, "total") > 0)
				If Not(DoNotChangeValue) Then
					
					'execute_status='${status}',
					Dim status As Int = 0
					If Utils.NNE(BigText) Then
						status = 1
					End If
					'*****************************************
					' CONTROLAR x.repeatcounter
					'*****************************************
					Dim sSQL As String = $"update dta_requests_values set execute_value='${BigText}',
							execute_status='${status}',
							execute_datetime='${sACLADatetime}',
							execute_latitude='${sACLALatitude}', execute_longitude='${sACLALongitude}'
							where request_tagcode='${request_tagcode.Trim}' and
							task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
							unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}' 
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
					Log(sSQL)
					Utils.SaveSQLToLog("CalendarGetDate_onDateSet",sSQL, request_tagcode)
				
				
					'MainEditFocusComponent.RequestFocus
					SetMandatoryValue(item_tagcode.Trim, Utils.Int2Bool(status))
				
				
					'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
					Dim params As Map
					params.Initialize
					params.Clear
					params.Put("_token", ShareCode.APP_TOKEN)
					params.Put("ACLARequest", request_tagcode)
					params.Put("ACLAAction", action_tagcode)
					params.Put("ACLATask", task_tagcode)
					params.Put("ACLAItem", item_tagcode)
					params.Put("ACLAUniqueKey", uniquekey)
					params.Put("ACLATagcode", tagcode)
					params.Put("ACLAValue", BigText)
					params.Put("ACLAReqCounter", repeatcounter)
					params.Put("ACLARepeatItem", repeatitemcounter)
					params.Put("ACLARepeatField", repeatfieldcounter)
					params.Put("ACLAInner", 0)
		
					params.Put("ACLADatetime", sACLADatetime)
					params.Put("ACLALatitude", sACLALatitude)
					params.Put("ACLALongitude", sACLALongitude)
				
					Dim ACLSessUser As String = ShareCode.SESS_OPER_User
					Dim ACLClear As Int = 0
					params.Put("ACLSessUser", ACLSessUser)
					params.Put("ACLClear", ACLClear)
					params.Put("versionTagcode", Main.VersionTagcode)
					params.Put("_authorization", Main.DeviceAuthorization)
					params.Put("_instance", Main.DeviceInstance)
					params.put("_deviceBrand", Main.DeviceBrand)
					params.put("_deviceModel", Main.DeviceModel)
					params.put("_deviceMacAddress", Main.DeviceMacAddress)
					params.Put("_user", ShareCode.SESS_User)
					Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
					If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
						If Not(ShareCode.APP_WORKING_LOCAL) Then
							Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
							Wait For (GODR) Complete (HasResults As Boolean)
							If HasResults Then
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							Else
								Utils.CallApi(0, params, Me, Url, "", request_tagcode)
							End If
						Else
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						End If
						Sleep(250)
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
			
					'******************************************************************************
					'	CONTROLO DE EVENTOS
					'******************************************************************************
					Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
									$"select distinct paramters 
									from dta_tasks_items_adds where 1=1
									And task_tagcode='${task_tagcode.trim}'
									And item_tagcode='${item_tagcode.trim}'
									And unique_key='${uniquekey.trim}'"$, "paramters")	

					Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
								And task_tagcode='${task_tagcode.trim}'
								And item_tagcode='${item_tagcode.trim}'
								And unique_key='${uniquekey.trim}'
								And tagcode='${tagcode.trim}'
								Order by position"$  
					Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
					If Eventos.RowCount >= 1 Then
						Dim pan As Panel = BigParent
						For n=0 To Eventos.RowCount-1
							Eventos.Position = n
				
							Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
							If (evt.type_item = 9) Then
								ControlUpdateRequestField(pan.Tag, evt.value, BigText)
							Else
								If (Utils.Int2Bool(evt.is_status)) Then
									If (Utils.Int2Bool(evt.have_condition) And Utils.Int2Bool(evt.have_status)) Then
										ForceTerminateChecklistAndCreate(evt.value)
									Else
										ForceTerminateChecklist(evt.value)
									End If
								else if (Utils.Int2Bool(evt.is_foto)) Then
									ForceTakePicture(pan.Tag)
								else if (Utils.Int2Bool(evt.is_more)) Then
									ForceAddMore(pan.Tag)
								else if (Utils.Int2Bool(evt.is_action)) Then
									'ForceAddAction(pan.Tag)
									If Utils.NNE(evt.value) Then
										ForceAddActionTPA(pan.Tag, evt.value, "",0)
									Else
										ForceAddAction(pan.Tag)
									End If
								else if (Utils.Int2Bool(evt.is_jump)) Then
									ForceAddJump(evt.value)
								else if ((Utils.Int2Bool(evt.is_alert)) Or (Utils.Int2Bool(evt.is_email))) Then
								else if ((Utils.Int2Bool(evt.request_signature)) Or ((evt.event_tagcode = "EVENTTASK_SIGNATURE") And (evt.type_item = 4))) Then
									ForceAddSignature(pan.Tag)
								else if (Utils.Int2Bool(evt.have_formula) And (evt.type_item = 2)) Then
									Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
												item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
									Wait For(res) Complete (retAPI As ExternalDocsInfo)
									If(retAPI.status = 1) Then
										Log($"Missing File downloaded"$)
									End If
								else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
									Dim bullet_master As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
									Dim bullet_child As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
									SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, False)
								else if ((evt.event_tagcode = "EVENTTASK_MANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
									Dim bullet_master As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
									Dim bullet_child As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
									SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, True)
								else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYALLDOWN") And (evt.type_item = 7)) Then
									SetMandatoryStateAfterItem(item_tagcode.trim, False)
								else if ((evt.event_tagcode = "EVENTTASK_MANDATORYALLDOWN") And (evt.type_item = 7)) Then
									SetMandatoryStateAfterItem(item_tagcode.trim, True)
								else if ((evt.event_tagcode = "EVENTTASK_INTEGRATION") And (evt.type_item = 8)) Then
									Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
												item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
									Wait For(res) Complete (retAPI As ExternalDocsInfo)
									If(retAPI.status = 1) Then
										Log($"Missing File downloaded"$)
									End If
								else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTER") And (evt.type_item = 30)) Then
'									Dim ItemTagCode As String = item_tagcode.Trim
'									Dim valorVerificar As String = ""
'									If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
'										ItemTagCode = evt.value.Trim
'									End If
'									Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
'									Wait For(res) Complete (retval As Int)
'									valorVerificar = retval
'			
'									Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
'										repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
'									Wait For(res1) Complete (retbool As Boolean)
									
									Dim ContinuarCheck As Boolean = True
									If (Utils.NNE(ThisItemValue) And Utils.isNumeric(ThisItemValue) And Utils.Int2Bool(evt.have_status)) Then
										ContinuarCheck = False ' JÁ TEM VALOR
									End If
			
									If (ContinuarCheck) Then
										Dim ItemTagCode As String = item_tagcode.Trim
										Dim valorVerificar As String = ""
										If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
											ItemTagCode = evt.value.Trim
										End If
										Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
										Wait For(res) Complete (retval As Int)
										valorVerificar = retval
				
										ThisItemValue = valorVerificar
			
										Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
										repeatcounter, repeatitemcounter, repeatitemcounter, ThisItemValue)
										Wait For(res1) Complete (retbool As Boolean)
									End If
			
'									If (Utils.NNE(ThisItemValue)) Then
'										If (this Is B4XStateButton) And (evt.have_condition=9) Then
'											Dim b4xsb_this As B4XStateButton = this
'											b4xsb_this.Text = ThisItemValue
'										End If
'									End If
			
								else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTEROTHER") And (evt.type_item = 31)) Then
									'*******************************************************************************************************
									' NOTE: A MESMA FUNCIONALIDADE SÓ QUE PERMITE INDICAR OUTRO ITEM_TAGCODE QUE VAI RECEBER O RESULTADO
									'*******************************************************************************************************
									Dim ItemTagCode As String = item_tagcode.Trim
									Dim OtherValue As String = ""
									Dim valorVerificar As String = ""
									If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
										ItemTagCode = evt.value.Trim
									End If
									If (Utils.NNE(evt.formula)) Then
										OtherValue = evt.formula.Trim
									End If
									Dim res As ResumableSub = CLAIGetSetExternalCounterOther(task_tagcode, ItemTagCode, ThisItemValue, OtherValue, evt)
									Wait For(res) Complete (retval As Int)
									valorVerificar = retval
			
									Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, OtherValue, uniquekey, PressedAnswerTagCode, _
										repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
									Wait For(res1) Complete (retbool As Boolean)
			
								End If
							End If
				
						Next
					End If
				End If

			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
		End If
	End If
End Sub

Sub CalendarGetDate_onDateSet(year As Int, monthOfYear As Int, dayOfMonth As Int)

	Dim moy As String = monthOfYear+1
	If (moy.Length = 1) Then moy = "0" & moy
	Dim dom As String = dayOfMonth
	If (dom.Length = 1) Then dom = "0" & dom
	
	If (CurrentEditValueFloat.IsInitialized) Then
		CurrentEditValueFloat.Text = $"${year}-${moy}-${dom}"$
		
		Dim BigTag As String = CurrentEditValueFloat.tag
		Dim BigText As String = CurrentEditValueFloat.text
		Dim BigParent As Panel = CurrentEditValueFloat.parent
		
		CalendarGetDateDateSet(BigTag, BigText, BigParent)
	
'		If Not(Utils.isNullOrEmpty(CurrentEditValueFloat.Tag)) Then
'			Dim Columns As List = Regex.Split("\|", CurrentEditValueFloat.tag )
'			If (Columns.Size >= 1) Then
'				Try
'					Dim request_tagcode As String = Columns.Get(0)
'					Dim action_tagcode As String = Columns.Get(1)
'					Dim task_tagcode As String = Columns.Get(2)
'					Dim item_tagcode As String = Columns.Get(3)
'					Dim uniquekey As String = Columns.Get(4)
'					Dim tagcode As String = Columns.Get(5)
''					Dim val As Int = Columns.Get(6)
''					Dim StatusIcon As Int = Columns.Get(7)
'					Dim repeatcounter As Int = Columns.Get(9)
'					Dim repeatitemcounter As Int = Columns.Get(10)
'					Dim repeatfieldcounter As Int = Columns.Get(11)
'					Dim sACLADatetime As String = Utils.GetCurrDatetime
'					Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
'					Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
'
'					'execute_status='${status}',
'					Dim status As Int = 0
'					If Utils.NNE(CurrentEditValueFloat.Text) Then
'						status = 1
'					End If
'					'*****************************************
'					' CONTROLAR x.repeatcounter
'					'*****************************************
'					Dim sSQL As String = $"update dta_requests_values set execute_value='${CurrentEditValueFloat.Text}',
'								execute_status='${status}',
'								execute_datetime='${sACLADatetime}',
'								execute_latitude='${sACLALatitude}', execute_longitude='${sACLALongitude}'
'								where request_tagcode='${request_tagcode.Trim}' and
'								task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
'								unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}' 
'								and repeatcounter=${repeatcounter}
'								and repeatitemcounter=${repeatitemcounter}
'								and repeatfieldcounter=${repeatfieldcounter}"$
'					Log(sSQL)
'					Utils.SaveSQLToLog("CalendarGetDate_onDateSet",sSQL, request_tagcode)
'					'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
'					Dim params As Map
'					params.Initialize
'					params.Clear
'					params.Put("_token", ShareCode.APP_TOKEN)
'					params.Put("ACLARequest", request_tagcode)
'					params.Put("ACLAAction", action_tagcode)
'					params.Put("ACLATask", task_tagcode)
'					params.Put("ACLAItem", item_tagcode)
'					params.Put("ACLAUniqueKey", uniquekey)
'					params.Put("ACLATagcode", tagcode)
'					params.Put("ACLAValue", CurrentEditValueFloat.Text)
'					params.Put("ACLAReqCounter", repeatcounter)
'					params.Put("ACLARepeatItem", repeatitemcounter)
'					params.Put("ACLARepeatField", repeatfieldcounter)
'					params.Put("ACLAInner", 0)
'			
'					params.Put("ACLADatetime", sACLADatetime)
'					params.Put("ACLALatitude", sACLALatitude)
'					params.Put("ACLALongitude", sACLALongitude)
'					
'					Dim ACLSessUser As String = ShareCode.SESS_OPER_User
'					Dim ACLClear As Int = 0
'					params.Put("ACLSessUser", ACLSessUser)
'					params.Put("ACLClear", ACLClear)
'				
'					Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
'					If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
'						If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
'							Utils.CallApi(0, params, Me, Url, "")
'						Else
'							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
'						End If
'						Sleep(250)
'					Else
'						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
'					End If
'				
'					'******************************************************************************
'					'	CONTROLO DE EVENTOS
'					'******************************************************************************
'					Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
'										$"select distinct paramters 
'										from dta_tasks_items_adds where 1=1
'										And task_tagcode='${task_tagcode.trim}'
'										And item_tagcode='${item_tagcode.trim}'
'										And unique_key='${uniquekey.trim}'"$, "paramters")	
'
'					Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
'									And task_tagcode='${task_tagcode.trim}'
'									And item_tagcode='${item_tagcode.trim}'
'									And unique_key='${uniquekey.trim}'
'									And tagcode='${tagcode.trim}'
'									Order by position"$  
'					Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
'					If Eventos.RowCount >= 1 Then
'						Dim pan As Panel = CurrentEditValueFloat.Parent
'						For n=0 To Eventos.RowCount-1
'							Eventos.Position = n
'					
'							Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
'							If (evt.type_item = 9) Then
'								ControlUpdateRequestField(pan.Tag, evt.value, CurrentEditValueFloat.Text)
'							Else
'								If (Utils.Int2Bool(evt.is_status)) Then
'									If (Utils.Int2Bool(evt.have_condition) And Utils.Int2Bool(evt.have_status)) Then
'										ForceTerminateChecklistAndCreate(evt.value)
'									Else
'										ForceTerminateChecklist(evt.value)
'									End If
'								else if (Utils.Int2Bool(evt.is_foto)) Then
'									ForceTakePicture(pan.Tag)
'								else if (Utils.Int2Bool(evt.is_more)) Then
'									ForceAddMore(pan.Tag)
'								else if (Utils.Int2Bool(evt.is_action)) Then
'									'ForceAddAction(pan.Tag)
'									If Utils.NNE(evt.value) Then
'										ForceAddActionTPA(pan.Tag, evt.value, "",0)
'									Else
'										ForceAddAction(pan.Tag)
'									End If
'								else if (Utils.Int2Bool(evt.is_jump)) Then
'									ForceAddJump(evt.value)
'								else if ((Utils.Int2Bool(evt.is_alert)) Or (Utils.Int2Bool(evt.is_email))) Then
'								else if (Utils.Int2Bool(evt.request_signature)) Then
'									ForceAddSignature(pan.Tag)
'								else if (Utils.Int2Bool(evt.have_formula) And (evt.type_item = 2)) Then
'									Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
'													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
'									Wait For(res) Complete (retAPI As ExternalDocsInfo)
'									If(retAPI.status = 1) Then
'										Log($"Missing File downloaded"$)
'										
'									End If
'								else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
'									Dim bullet_master As Int = Utils.IfNullOrEmpty( _
'											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
'													And task_tagcode='${task_tagcode.trim}'
'													And item_tagcode='${item_tagcode.trim}'
'													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
'									Dim bullet_child As Int = Utils.IfNullOrEmpty( _
'											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
'													And task_tagcode='${task_tagcode.trim}'
'													And item_tagcode='${item_tagcode.trim}'
'													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
'									SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, False)
'								else if ((evt.event_tagcode = "EVENTTASK_MANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
'									Dim bullet_master As Int = Utils.IfNullOrEmpty( _
'											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
'													And task_tagcode='${task_tagcode.trim}'
'													And item_tagcode='${item_tagcode.trim}'
'													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
'									Dim bullet_child As Int = Utils.IfNullOrEmpty( _
'											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
'													And task_tagcode='${task_tagcode.trim}'
'													And item_tagcode='${item_tagcode.trim}'
'													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
'									SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, True)
'								else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYALLDOWN") And (evt.type_item = 7)) Then
'									SetMandatoryStateAfterItem(item_tagcode.trim, False)
'								else if ((evt.event_tagcode = "EVENTTASK_MANDATORYALLDOWN") And (evt.type_item = 7)) Then
'									SetMandatoryStateAfterItem(item_tagcode.trim, True)
'								else if ((evt.event_tagcode = "EVENTTASK_INTEGRATION") And (evt.type_item = 8)) Then
'									Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
'													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
'									Wait For(res) Complete (retAPI As ExternalDocsInfo)
'									If(retAPI.status = 1) Then
'										Log($"Missing File downloaded"$)
'									End If
'								End If
'							End If
'					
'						Next
'					End If
'				
'				Catch
'					Log(LastException)
'				End Try
'			End If
'		End If
		
	End If
	
End Sub

'Dim  As 
Sub CLAItemTimeEditValue_FocusChanged (HasFocus As Boolean)
	
	If (Sender Is EditText) Then
		Dim temp As EditText = Sender
		Dim BigTag As String = temp.tag
		Dim BigText As String = temp.text
		Dim BigParent As Panel = temp.parent
		Dim tData As Int = 0
	else if (Sender Is FloatLabeledEditText) Then
		Dim cCurrentTimeEdit As FloatLabeledEditText = Sender
		Dim BigTag As String = cCurrentTimeEdit.tag
		Dim BigText As String = cCurrentTimeEdit.text
		Dim BigParent As Panel = cCurrentTimeEdit.parent
		Dim tData As Int = 1
	Else
		Dim tData As Int = 1
		Dim BigTag As String = ""
		Dim BigText As String = ""
		Dim BigParent As Panel : BigParent.Initialize("")
	End If
	
	If (HasFocus = True) Then
		Dim tt As TimePickerDialog
'		DateTime.DateFormat = Consts.DateTimeFormat
		DateTime.TimeFormat = Consts.DateTimeFormatTime
		Dim dnow As Long = DateTime.Now
		Try
			If (tData=1) Then
				CurrentTimeValueFloat = cCurrentTimeEdit
			End If
			If (BigText  <> "") Then
				dnow = DateTime.TimeParse($"${BigText}:00"$)
			End If
			
			tt.Initialize("CalendarGetTime", DateTime.GetHour(dnow), DateTime.GetMinute(dnow), True)
			'tt.AccentColor2 = Consts.ColorRed
			tt.show("CurrentTimeEdit")
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
	Else
		CLAItemTimeEditValueChange(BigTag, BigText, BigParent)
	End If
End Sub

Sub CLAItemTimeEditValue_EnterPressed
	
	If (Sender Is EditText) Then
		Dim temp As EditText = Sender
		Dim BigTag As String = temp.tag
		Dim BigText As String = temp.text
		Dim BigParent As Panel = temp.parent
	else if (Sender Is FloatLabeledEditText) Then
		Dim cCurrentTimeEdit As FloatLabeledEditText = Sender
		Dim BigTag As String = cCurrentTimeEdit.tag
		Dim BigText As String = cCurrentTimeEdit.text
		Dim BigParent As Panel = cCurrentTimeEdit.parent
	Else
		Dim BigTag As String = ""
		Dim BigText As String = ""
		Dim BigParent As Panel : BigParent.Initialize("")
	End If
'	Dim cCurrentTimeEdit As FloatLabeledEditText = Sender
'	
'	CurrentTimeValueFloat = cCurrentTimeEdit
'	If Not(Utils.isNullOrEmpty(cCurrentTimeEdit.Tag)) Then
'		Dim Columns As List = Regex.Split("\|", cCurrentTimeEdit.tag )

	CLAItemTimeEditValueChange(BigTag, BigText, BigParent)
	
'	If Not(Utils.isNullOrEmpty(BigTag)) Then
'		Dim Columns As List = Regex.Split("\|", BigTag )
'	
'		If (Columns.Size >= 1) Then
'			Try
'				Dim request_tagcode As String = Columns.Get(0)
'				Dim action_tagcode As String = Columns.Get(1)
'				Dim task_tagcode As String = Columns.Get(2)
'				Dim item_tagcode As String = Columns.Get(3)
'				Dim uniquekey As String = Columns.Get(4)
'				Dim tagcode As String = Columns.Get(5)
''				Dim val As Int = Columns.Get(6)
''				Dim StatusIcon As Int = Columns.Get(7)
'				Dim repeatcounter As Int = Columns.Get(9)
'				Dim repeatitemcounter As Int = Columns.Get(10)
'				Dim repeatfieldcounter As Int = Columns.Get(11)
'				Dim sACLADatetime As String = Utils.GetCurrDatetime
'				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
'				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
'
'				'execute_status='${status}',
'				Dim status As Int = 0
'				If Utils.NNE(CurrentTimeEdit.Text) Then
'					status = 1
'				End If
'				'*****************************************
'				' CONTROLAR x.repeatcounter
'				'*****************************************
'				Dim sSQL As String = $"update dta_requests_values set execute_value='${BigTag}',
'									execute_status='${status}',
'									execute_datetime='${sACLADatetime}',
'									execute_latitude='${sACLALatitude}', execute_longitude='${sACLALongitude}'
'									where request_tagcode='${request_tagcode.Trim}' and
'									task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
'									unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}'
'									and repeatcounter=${repeatcounter}
'									and repeatitemcounter=${repeatitemcounter}
'									and repeatfieldcounter=${repeatfieldcounter}"$
'				Log(sSQL)
'				Utils.SaveSQLToLog("CalendarGetTime_onTimeSet",sSQL, request_tagcode)
'				'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
'				Dim params As Map
'				params.Initialize
'				params.Clear
'				params.Put("_token", ShareCode.APP_TOKEN)
'				params.Put("ACLARequest", request_tagcode)
'				params.Put("ACLAAction", action_tagcode)
'				params.Put("ACLATask", task_tagcode)
'				params.Put("ACLAItem", item_tagcode)
'				params.Put("ACLAUniqueKey", uniquekey)
'				params.Put("ACLATagcode", tagcode)
'				params.Put("ACLAValue", BigTag)
'				params.Put("ACLAReqCounter", repeatcounter)
'				params.Put("ACLARepeatItem", repeatitemcounter)
'				params.Put("ACLARepeatField", repeatfieldcounter)
'				params.Put("ACLAInner", 0)
'				
'				params.Put("ACLADatetime", sACLADatetime)
'				params.Put("ACLALatitude", sACLALatitude)
'				params.Put("ACLALongitude", sACLALongitude)
'					
'				Dim ACLSessUser As String = ShareCode.SESS_OPER_User
'				Dim ACLClear As Int = 0
'				params.Put("ACLSessUser", ACLSessUser)
'				params.Put("ACLClear", ACLClear)
'
'				Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
'				If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
'					If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
'						Utils.CallApi(0, params, Me, Url, "")
'					Else
'						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
'					End If
'					Sleep(250)
'				Else
'					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
'				End If
'				
'				'******************************************************************************
'				'	CONTROLO DE EVENTOS
'				'******************************************************************************
'				Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
'										$"select distinct paramters 
'										from dta_tasks_items_adds where 1=1
'										And task_tagcode='${task_tagcode.trim}'
'										And item_tagcode='${item_tagcode.trim}'
'										And unique_key='${uniquekey.trim}'"$, "paramters")	
'
'				Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
'									And task_tagcode='${task_tagcode.trim}'
'									And item_tagcode='${item_tagcode.trim}'
'									And unique_key='${uniquekey.trim}'
'									And tagcode='${tagcode.trim}'
'									Order by position"$  
'				Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
'				If Eventos.RowCount >= 1 Then
'					Dim pan As Panel = BigParent
'					For n=0 To Eventos.RowCount-1
'						Eventos.Position = n
'					
'						Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
'						If (evt.type_item = 9) Then
'							ControlUpdateRequestField(pan.Tag, evt.value, BigText)
'						Else
'							If (Utils.Int2Bool(evt.is_status)) Then
'								If (Utils.Int2Bool(evt.have_condition) And Utils.Int2Bool(evt.have_status)) Then
'									ForceTerminateChecklistAndCreate(evt.value)
'								Else
'									ForceTerminateChecklist(evt.value)
'								End If
'							else if (Utils.Int2Bool(evt.is_foto)) Then
'								ForceTakePicture(pan.Tag)
'							else if (Utils.Int2Bool(evt.is_more)) Then
'								ForceAddMore(pan.Tag)
'							else if (Utils.Int2Bool(evt.is_action)) Then
'								'ForceAddAction(pan.Tag)
'								If Utils.NNE(evt.value) Then
'									ForceAddActionTPA(pan.Tag, evt.value, "",0)
'								Else
'									ForceAddAction(pan.Tag)
'								End If
'							else if (Utils.Int2Bool(evt.is_jump)) Then
'								ForceAddJump(evt.value)
'							else if ((Utils.Int2Bool(evt.is_alert)) Or (Utils.Int2Bool(evt.is_email))) Then
'							else if (Utils.Int2Bool(evt.request_signature)) Then
'								ForceAddSignature(pan.Tag)
'							else if (Utils.Int2Bool(evt.have_formula) And (evt.type_item = 2)) Then
'								Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
'													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
'								Wait For(res) Complete (retAPI As ExternalDocsInfo)
'								If(retAPI.status = 1) Then
'									Log($"Missing File downloaded"$)
'								End If
'							else if ((evt.event_tagcode = "EVENTTASK_INTEGRATION") And (evt.type_item = 8)) Then
'								Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
'													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
'								Wait For(res) Complete (retAPI As ExternalDocsInfo)
'								If(retAPI.status = 1) Then
'									Log($"Missing File downloaded"$)
'								End If
'							End If
'						End If
'					
'					Next
'				End If
'				
'			Catch
'				Log(LastException)
'			End Try
'		End If
'
'	End If
End Sub

' *************************************************************
' TIP: PROCEDIMENTO DE RETORNO DE TIME (CAIXA DE TEXTO)
' *************************************************************
Sub CLAItemTimeEditValueChange(BigTag As String, BigText As String, BigParent As Panel)
	Dim ThisItemValue As String = BigText

	If Not(Utils.isNullOrEmpty(BigTag)) Then
		Dim Columns As List = Regex.Split("\|", BigTag )
	
		If (Columns.Size >= 1) Then
			Try
				Dim request_tagcode As String = Columns.Get(0)
				Dim action_tagcode As String = Columns.Get(1)
				Dim task_tagcode As String = Columns.Get(2)
				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
				Dim tagcode As String = Columns.Get(5)
'				Dim val As Int = Columns.Get(6)
'				Dim StatusIcon As Int = Columns.Get(7)
				Dim repeatcounter As Int = Columns.Get(9)
				Dim repeatitemcounter As Int = Columns.Get(10)
				Dim repeatfieldcounter As Int = Columns.Get(11)
				Dim sACLADatetime As String = Utils.GetCurrDatetime
				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
				
				Dim DoNotChangeValue As Boolean = (DBStructures.GetScriptColumnIntEVC($"select count(0) as total
											from dta_requests_values_adds where 1=1
											and request_tagcode='${request_tagcode.Trim}' 
											and task_tagcode='${task_tagcode.Trim}' 
											and item_tagcode='${item_tagcode.Trim}' 
											And repeatcounter=${repeatcounter}
											and repeatitemcounter=${repeatitemcounter}
											and fieldval_03='1'"$, "total") > 0)
				If Not(DoNotChangeValue) Then
					'execute_status='${status}',
					Dim status As Int = 0
'					If Utils.NNE(CurrentTimeEdit.Text) Then
					If Utils.NNE(BigText) Then
						status = 1
					End If
					'*****************************************
					' CONTROLAR x.repeatcounter
					'*****************************************
					SetMandatoryValue(item_tagcode.Trim, Utils.Int2Bool(status))
				
					Dim sSQL As String = $"update dta_requests_values set execute_value='${BigText}',
									execute_status='${status}',
									execute_datetime='${sACLADatetime}',
									execute_latitude='${sACLALatitude}', execute_longitude='${sACLALongitude}'
									where request_tagcode='${request_tagcode.Trim}' and
									task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
									unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}'
									and repeatcounter=${repeatcounter}
									and repeatitemcounter=${repeatitemcounter}
									and repeatfieldcounter=${repeatfieldcounter}"$
					Log(sSQL)
					Utils.SaveSQLToLog("CalendarGetTime_onTimeSet",sSQL, request_tagcode)
				
				
'				SetMandatoryValue(item_tagcode.trim, Utils.Int2Bool(status))
					'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
					Dim params As Map
					params.Initialize
					params.Clear
					params.Put("_token", ShareCode.APP_TOKEN)
					params.Put("ACLARequest", request_tagcode)
					params.Put("ACLAAction", action_tagcode)
					params.Put("ACLATask", task_tagcode)
					params.Put("ACLAItem", item_tagcode)
					params.Put("ACLAUniqueKey", uniquekey)
					params.Put("ACLATagcode", tagcode)
					params.Put("ACLAValue", BigText)
					params.Put("ACLAReqCounter", repeatcounter)
					params.Put("ACLARepeatItem", repeatitemcounter)
					params.Put("ACLARepeatField", repeatfieldcounter)
					params.Put("ACLAInner", 0)
				
					params.Put("ACLADatetime", sACLADatetime)
					params.Put("ACLALatitude", sACLALatitude)
					params.Put("ACLALongitude", sACLALongitude)
					
					Dim ACLSessUser As String = ShareCode.SESS_OPER_User
					Dim ACLClear As Int = 0
					params.Put("ACLSessUser", ACLSessUser)
					params.Put("ACLClear", ACLClear)
					params.Put("versionTagcode", Main.VersionTagcode)
					params.Put("_authorization", Main.DeviceAuthorization)
					params.Put("_instance", Main.DeviceInstance)
					params.put("_deviceBrand", Main.DeviceBrand)
					params.put("_deviceModel", Main.DeviceModel)
					params.put("_deviceMacAddress", Main.DeviceMacAddress)
					params.Put("_user", ShareCode.SESS_User)
					Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
					If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
						If Not(ShareCode.APP_WORKING_LOCAL) Then
							Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
							Wait For (GODR) Complete (HasResults As Boolean)
							If HasResults Then
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							Else
								Utils.CallApi(0, params, Me, Url, "", request_tagcode)
							End If
						Else
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						End If
						Sleep(250)
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
				
					'******************************************************************************
					'	CONTROLO DE EVENTOS
					'******************************************************************************
					Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
										$"select distinct paramters 
										from dta_tasks_items_adds where 1=1
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${item_tagcode.trim}'
										And unique_key='${uniquekey.trim}'"$, "paramters")	

					Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
									And task_tagcode='${task_tagcode.trim}'
									And item_tagcode='${item_tagcode.trim}'
									And unique_key='${uniquekey.trim}'
									And tagcode='${tagcode.trim}'
									Order by position"$  
					Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
					If Eventos.RowCount >= 1 Then
						Dim pan As Panel = BigParent
						For n=0 To Eventos.RowCount-1
							Eventos.Position = n
					
							Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
							If (evt.type_item = 9) Then
								ControlUpdateRequestField(pan.Tag, evt.value, BigText)
							Else
								If (Utils.Int2Bool(evt.is_status)) Then
									If (Utils.Int2Bool(evt.have_condition) And Utils.Int2Bool(evt.have_status)) Then
										ForceTerminateChecklistAndCreate(evt.value)
									Else
										ForceTerminateChecklist(evt.value)
									End If
								else if (Utils.Int2Bool(evt.is_foto)) Then
									ForceTakePicture(pan.Tag)
								else if (Utils.Int2Bool(evt.is_more)) Then
									ForceAddMore(pan.Tag)
								else if (Utils.Int2Bool(evt.is_action)) Then
									'ForceAddAction(pan.Tag)
									If Utils.NNE(evt.value) Then
										ForceAddActionTPA(pan.Tag, evt.value, "",0)
									Else
										ForceAddAction(pan.Tag)
									End If
								else if (Utils.Int2Bool(evt.is_jump)) Then
									ForceAddJump(evt.value)
								else if ((Utils.Int2Bool(evt.is_alert)) Or (Utils.Int2Bool(evt.is_email))) Then
								else if ((Utils.Int2Bool(evt.request_signature)) Or ((evt.event_tagcode = "EVENTTASK_SIGNATURE") And (evt.type_item = 4))) Then
									ForceAddSignature(pan.Tag)
								else if (Utils.Int2Bool(evt.have_formula) And (evt.type_item = 2)) Then
									Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
									Wait For(res) Complete (retAPI As ExternalDocsInfo)
									If(retAPI.status = 1) Then
										Log($"Missing File downloaded"$)
									End If
								else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
									Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
									Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
									SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, False)
								else if ((evt.event_tagcode = "EVENTTASK_MANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
									Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
									Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
									SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, True)
								else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYALLDOWN") And (evt.type_item = 7)) Then
									SetMandatoryStateAfterItem(item_tagcode.trim, False)
								else if ((evt.event_tagcode = "EVENTTASK_MANDATORYALLDOWN") And (evt.type_item = 7)) Then
									SetMandatoryStateAfterItem(item_tagcode.trim, True)
								else if ((evt.event_tagcode = "EVENTTASK_INTEGRATION") And (evt.type_item = 8)) Then
									Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
									Wait For(res) Complete (retAPI As ExternalDocsInfo)
									If(retAPI.status = 1) Then
										Log($"Missing File downloaded"$)
									End If
								else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTER") And (evt.type_item = 30)) Then
'									Dim ItemTagCode As String = item_tagcode.Trim
'									Dim valorVerificar As String = ""
'									If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
'										ItemTagCode = evt.value.Trim
'									End If
'									Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
'									Wait For(res) Complete (retval As Int)
'									valorVerificar = retval
'			
'									Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
'										repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
'									Wait For(res1) Complete (retbool As Boolean)
									Dim ContinuarCheck As Boolean = True
									If (Utils.NNE(ThisItemValue) And Utils.isNumeric(ThisItemValue) And Utils.Int2Bool(evt.have_status)) Then
										ContinuarCheck = False ' JÁ TEM VALOR
									End If
			
									If (ContinuarCheck) Then
										Dim ItemTagCode As String = item_tagcode.Trim
										Dim valorVerificar As String = ""
										If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
											ItemTagCode = evt.value.Trim
										End If
										Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
										Wait For(res) Complete (retval As Int)
										valorVerificar = retval
				
										ThisItemValue = valorVerificar
			
										Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
										repeatcounter, repeatitemcounter, repeatitemcounter, ThisItemValue)
										Wait For(res1) Complete (retbool As Boolean)
									End If
			
'									If (Utils.NNE(ThisItemValue)) Then
'										If (this Is B4XStateButton) And (evt.have_condition=9) Then
'											Dim b4xsb_this As B4XStateButton = this
'											b4xsb_this.Text = ThisItemValue
'										End If
'									End If
								else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTEROTHER") And (evt.type_item = 31)) Then
									'*******************************************************************************************************
									' NOTE: A MESMA FUNCIONALIDADE SÓ QUE PERMITE INDICAR OUTRO ITEM_TAGCODE QUE VAI RECEBER O RESULTADO
									'*******************************************************************************************************
									Dim ItemTagCode As String = item_tagcode.Trim
									Dim OtherValue As String = ""
									Dim valorVerificar As String = ""
									If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
										ItemTagCode = evt.value.Trim
									End If
									If (Utils.NNE(evt.formula)) Then
										OtherValue = evt.formula.Trim
									End If
									Dim res As ResumableSub = CLAIGetSetExternalCounterOther(task_tagcode, ItemTagCode, ThisItemValue, OtherValue, evt)
									Wait For(res) Complete (retval As Int)
									valorVerificar = retval
			
									Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, OtherValue, uniquekey, PressedAnswerTagCode, _
										repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
									Wait For(res1) Complete (retbool As Boolean)
			
								End If
							End If
					
						Next
					End If
				End If

			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
		End If

	End If
End Sub

Sub calendargetdate_ondismiss
	
End Sub

Sub CalendarGetTime_onTimeSet (hour As Int, minute As Int, second As Int)
	Dim Continua As Boolean = False
	If (CurrentTimeValueFloat.IsInitialized) Then
		CurrentTimeValueFloat.Text = $"$2.0{hour}:$2.0{minute}"$
	
		If Not(Utils.isNullOrEmpty(CurrentTimeValueFloat.Tag)) Then
			Continua = True
		End If
	End If
	
'	CurrentTimeEdit.Text = $"$2.0{hour}:$2.0{minute}"$
'	If Not(Utils.isNullOrEmpty(CurrentTimeValueFloat.Tag)) Then
	If (Continua) Then

		Dim BigTag As String = CurrentTimeValueFloat.tag
		Dim BigText As String = CurrentTimeValueFloat.text
		Dim BigParent As Panel = CurrentTimeValueFloat.parent
		CLAItemTimeEditValueChange(BigTag, BigText, BigParent)
	
	End If
End Sub

' *************************************************************
' TIP: PROCEDIMENTO DE AÇÃO DE ENTER DA CAIXA DE TEXTO
' *************************************************************
Sub CLAItemEditValueEnterPressed(ftemp As FloatLabeledEditText)

	'********************************************************
	'	FLE identifica se é EditText(1) ou FloatEditText(2)
	'********************************************************
	Dim fle As Int = 2
	Dim BigTag As String = ftemp.tag
	Dim BigText As String = ftemp.text
	Dim BigParent As Panel = ftemp.parent
	
	Dim ThisItemValue As String = BigText
	
'	Dim this As FloatLabeledEditText = Sender
	If (LoadingProcess = False) And (fle > 0) Then
		
		If Utils.NE(BigTag) Then
			BigTag = BigParent.Tag
		End If
		Log("»»»»»»»»»»»»»»»»»»»»»»»»»»  EDIT  «««««««««««««««««««««««««««")
'		Dim pan As Panel = this.Parent
'		Dim New As String = this.Text
		If Not(Utils.isNullOrEmpty(BigTag)) Then
			Dim Columns As List = Regex.Split("\|", BigTag) 'this.tag )
			If (Columns.Size > 1) Then
				
				Dim request_tagcode As String = Columns.Get(0)
				Dim action_tagcode As String = Columns.Get(1)
				Dim task_tagcode As String = Columns.Get(2)
				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
				Dim tagcode As String = Columns.Get(5)
'					Dim val As Int = Columns.Get(6)
'					Dim StatusIcon As Int = Columns.Get(7)
				Dim repeatcounter As Int = Columns.Get(9)
				Dim repeatitemcounter As Int = Columns.Get(10)
				Dim repeatfieldcounter As Int = Columns.Get(11)
				Dim sACLADatetime As String = Utils.GetCurrDatetime
				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
				
				Dim sqlCondition As String = $" and task_tagcode='${task_tagcode.trim}' and unique_key='${uniquekey.Trim}' "$
				Dim sqlCondition2 As String = $" and task_tagcode='${task_tagcode.trim}' and item_tagcode='${item_tagcode.trim}' and unique_key='${uniquekey.Trim}' "$
				
				Dim SetInner As Int = 0
				Try
					
					Dim BPV As B4XView =  BigParent.GetView(0) ' xxx -Alteracao para incluir types de view diferentes
					
					If BPV Is Label Then
						Dim lbl As Label = BPV
						Dim lbltxt As String = lbl.text
					else if BPV Is EditText Then
						Dim edt As EditText = BPV
						Dim lbltxt As String = edt.text
					else if BPV Is FloatLabeledEditText Then
						Dim fltedt As FloatLabeledEditText = BPV
						Dim lbltxt As String = fltedt.EditText.Text
					End If
					
					
					If (Utils.NNE(lbltxt)) Then
						If (BPV.Tag = 1) Then
							Dim sSQLw As String = $"update dta_requests_relations set inner_title='${BigText}'
							where request_tagcode='${request_tagcode.trim}' 
							and relation_tagcode='${task_tagcode.trim}' 
							and repeatcounter=${repeatcounter}"$
							Utils.SaveSQLToLog("CLAItemEditValue_FocusChanged",sSQLw, request_tagcode)
							'Starter.LocalSQLEVC.ExecNonQuery(sSQLw)
							SetInner = 1
						End If
					End If
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
				PressedAnswerTagCode = tagcode
				Dim Continuar As Boolean = True
				
'				Dim panpan As Panel = this.Parent
				Dim thisCLAItem As RequestCLAItem
				thisCLAItem.Initialize
				If (BigTag = BigParent.Tag) Then
					Dim thisCLAItem As RequestCLAItem = Types.MakeRequestCLAItem(request_tagcode, _
								action_tagcode, _
								task_tagcode, _
								item_tagcode, _
								uniquekey, _
								tagcode, _
								repeatcounter, repeatitemcounter, repeatfieldcounter,"", "", "", 3, 0, 0, "", _
								DBStructures.DB2CLATaskItem(task_tagcode, uniquekey), "")
				Else
					Try
						Dim thisCLAItem As RequestCLAItem = BigParent.tag 'panpan.tag
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
						Continuar = False
					End Try
				End If
				
				
				Continuar = (Continuar) And (thisCLAItem Is RequestCLAItem)
				
				If Not(Continuar) Then
					Continuar = True
					Dim pnn As Panel = BigParent.Parent
					Try
						Dim thisCLAItem As RequestCLAItem = pnn.tag
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
						Continuar = False
					End Try
				End If
				
				If Continuar Then
					Dim force_control As Int = 0
					Dim type_control As Int = 0
					Dim relUniqueKey As String = ""
					
					'******************************************************
					' FUNCIONALIDADE DE VERIFICAÇÃO E CONTROLO 
					'******************************************************
			
					If (thisCLAItem.IsInitialized) Then
						If (Utils.NNE(thisCLAItem.Request)) Then
							Dim relUniqueKey As String = Utils.IfNullOrEmpty(thisCLAItem.TaskInfo.dependent_key, "")
							Dim force_control As Int = thisCLAItem.TaskInfo.force_control
							Dim type_control As Int = thisCLAItem.TaskInfo.type_control '1|2|3
						End If
					End If

					Dim status As Int = 0
					If Utils.NNE(BigText) Then
						status = 1
						
						'******************************************************************
						' VERIFICAÇÃO DE COMPARAÇÃO ENTRE O ITEM ACTUAL E O ITEM DEPENDENTE
						'******************************************************************
						If (force_control=1) And (type_control=1) Then
							Dim sSQLcheck As String = $"select execute_value from dta_requests_values where 1=1
							and request_tagcode='${request_tagcode.trim}'
							and task_tagcode='${task_tagcode.trim}' 
							and unique_key='${relUniqueKey.Trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
							
							'and item_tagcode='${item_tagcode.trim}' 
						
							Dim recrec As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQLcheck)
							If recrec.RowCount > 0 Then
								recrec.Position = 0
								Dim compValue As String = Utils.IfNullOrEmpty(recrec.GetString("execute_value"), "")
								Dim NCInt As Int = DBStructures.GetScriptColumnIntEVC($"select control_run_anyway as intval 
													from dta_tasks_items
													where 1=1 ${sqlCondition2}"$, "intval")
								If Not(BigText = compValue) Then
									If (fle = 1) Then
										ftemp.EditText.Color = Colors.Red
										ftemp.EditText.TextColor = Colors.White
									Else If (fle = 2) Then
										ftemp.Color = Colors.Red
										ftemp.EditText.TextColor = Colors.White
									End If
								Else
									If (fle = 1) Then
										ftemp.EditText.Color = Colors.Green
										ftemp.EditText.TextColor = Colors.White
									Else If (fle = 2) Then
										ftemp.Color = Colors.Green
										ftemp.EditText.TextColor = Colors.White
									End If
								End If
								
								If (NCInt = 1) Then 
									Dim dNCStr As String = "C"
									Dim dNCInt As Int = 1
									If Not(BigText = compValue) Then
										Dim dNCStr As String = "NC"
										Dim dNCInt As Int = 2
									End If
									Dim FindSQL As String = $"select * from dta_requests_values_adds where 1=1
											and request_tagcode='${request_tagcode.Trim}' 
											and task_tagcode='${task_tagcode.Trim}' 
											and item_tagcode='${item_tagcode.Trim}' 
											and unique_key='${uniquekey.Trim}' 
											and repeatcounter=${repeatcounter}
											and repeatitemcounter=${repeatitemcounter}
											and repeatfieldcounter=${repeatfieldcounter}"$
									Dim FindSQLData As Cursor = Starter.LocalSQLEVC.ExecQuery(FindSQL)
									If (FindSQLData.RowCount >= 1) Then
										Dim sRunSQL As String = $"update dta_requests_values_adds 
														set fieldref_01='${dNCStr}',
														fieldval_01='${dNCInt}'
														where 1=1
														and request_tagcode='${request_tagcode.Trim}' 
														and task_tagcode='${task_tagcode.Trim}' 
														and item_tagcode='${item_tagcode.Trim}' a
														nd unique_key='${uniquekey.Trim}' 
														and repeatcounter=${repeatcounter}
														and repeatitemcounter=${repeatitemcounter}
														and repeatfieldcounter=${repeatfieldcounter}"$
									Else
										Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_values_adds", "id", "") +1 + 1000000
										Dim sRunSQL As String = $"insert into dta_requests_values_adds 
											(id, request_tagcode, inner_request_tagcode, task_tagcode, item_tagcode, unique_key,
											repeatcounter, repeatitemcounter, repeatfieldcounter, fieldref_01, fieldval_01) values 
											(${maxid}, '${request_tagcode.Trim}', '${action_tagcode.Trim}', '${task_tagcode.Trim}', 
											'${item_tagcode.Trim}', '${uniquekey.Trim}', '${repeatcounter}', 
											'${repeatitemcounter}', '${repeatfieldcounter}', '${dNCStr}', '${dNCInt}')"$
									End If
									Utils.SaveSQLToLog("CLAItemEditValueAdd_FocusChanged",sRunSQL, request_tagcode)
								End If
							End If
						End If
					End If
					
					Try
						Dim sSQL As String = $"update dta_requests_values set execute_value='${BigText}',
							execute_status='${status}', 
							execute_datetime='${sACLADatetime}', 
							execute_latitude='${sACLALatitude}', execute_longitude='${sACLALongitude}'
							where request_tagcode='${request_tagcode.Trim}' and
							task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
							unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
					
						Log(sSQL)
						Utils.SaveSQLToLog("CLAItemEditValue_FocusChanged",sSQL, request_tagcode)
						'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
						Dim params As Map
						params.Initialize
						params.Clear
						params.Put("_token", ShareCode.APP_TOKEN)
						params.Put("ACLARequest", request_tagcode)
						params.Put("ACLAAction", action_tagcode)
						params.Put("ACLATask", task_tagcode)
						params.Put("ACLAItem", item_tagcode)
						params.Put("ACLAUniqueKey", uniquekey)
						params.Put("ACLATagcode", tagcode)
						params.Put("ACLAValue", BigText)
						params.Put("ACLAReqCounter", repeatcounter)
						params.Put("ACLARepeatItem", repeatitemcounter)
						params.Put("ACLARepeatField", repeatfieldcounter)
						params.Put("ACLAInner", SetInner)
			
						params.Put("ACLADatetime", sACLADatetime)
						params.Put("ACLALatitude", sACLALatitude)
						params.Put("ACLALongitude", sACLALongitude)
				
						Dim ACLSessUser As String = ShareCode.SESS_OPER_User
						Dim ACLClear As Int = 0
						params.Put("ACLSessUser", ACLSessUser)
						params.Put("ACLClear", ACLClear)
						params.Put("versionTagcode", Main.VersionTagcode)
						params.Put("_authorization", Main.DeviceAuthorization)
						params.Put("_instance", Main.DeviceInstance)
						params.put("_deviceBrand", Main.DeviceBrand)
						params.put("_deviceModel", Main.DeviceModel)
						params.put("_deviceMacAddress", Main.DeviceMacAddress)
						params.Put("_user", ShareCode.SESS_User)
						Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
						If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
							If Not(ShareCode.APP_WORKING_LOCAL) Then
								Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
								Wait For (GODR) Complete (HasResults As Boolean)
								If HasResults Then
									Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
									Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
								Else
									Utils.CallApi(0, params, Me, Url, "", request_tagcode)
								End If
							Else
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							End If
							Sleep(250)
						Else
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						End If
						
						
						'******************************************************************************
						'	CONTROLO DE ACAIL
						'******************************************************************************
						If (uniquekey.trim = "ad997355-0c5c-57a1-86ab-16aea41a974c") Or _
							(uniquekey.trim = "fe883a15-4df5-50b6-8eba-31b15564cddc") Or _
							(uniquekey.trim = "3c335a96-fc34-5bc8-b286-d61730eafe7c") Then
							Dim ContinuaAcail As Boolean = True
							Try
								Dim valueAcail As Int = BigText
							Catch
								ContinuaAcail = False
							End Try
							
							If (ContinuaAcail) Then
								If valueAcail >= 90 Then
									Dim backColor As Int = Consts.ColorGreen
									Dim fontColor As Int = Colors.Black
								Else
									Dim backColor As Int = Consts.ColorRed
									Dim fontColor As Int = Consts.ColorWhite
								End If
								If (fle = 1) Then
									ftemp.EditText.Color = backColor
									ftemp.EditText.TextColor = fontColor
								Else If (fle = 2) Then
									ftemp.Color = backColor
									ftemp.EditText.TextColor = fontColor
								End If
							
							End If
							
						else If (uniquekey.trim = "0f89b48e-9214-560d-a056-77aa23e5e90c") Then
							Dim ContinuaAcail As Boolean = True
							Try
								Dim valueAcail As Int = BigText
							Catch
								ContinuaAcail = False
							End Try
							
							If (ContinuaAcail) Then
								If (valueAcail >= 5) And (valueAcail<=7) Then
									Dim backColor As Int = Consts.ColorGreen
									Dim fontColor As Int = Colors.Black
								Else
									Dim backColor As Int = Consts.ColorRed
									Dim fontColor As Int = Consts.ColorWhite
								End If
								If (fle = 1) Then
									ftemp.EditText.Color = backColor
									ftemp.EditText.TextColor = fontColor
								Else If (fle = 2) Then
									ftemp.Color = backColor
									ftemp.EditText.TextColor = fontColor
								End If
							
							End If
							
						End If
					
						'******************************************************************************
						'	CONTROLO DE EVENTOS
						'******************************************************************************
						If (NONCLICK = 0) Then
							Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
										$"select distinct paramters 
										from dta_tasks_items_adds where 1=1
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${item_tagcode.trim}'
										And unique_key='${uniquekey.trim}'"$, "paramters")	

							Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
								And task_tagcode='${task_tagcode.trim}'
								And item_tagcode='${item_tagcode.trim}'
								And unique_key='${uniquekey.trim}'
								And tagcode='${tagcode.trim}'
								Order by position"$  
							Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
							If Eventos.RowCount >= 1 Then
								For n=0 To Eventos.RowCount-1
									Eventos.Position = n
				
									Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
									If (evt.type_item = 9) Then
'									ControlUpdateRequestField(BigParent.Tag, evt.value, BigText)
										ControlUpdateRequestField(thisCLAItem, evt.value, BigText)
									Else
										If (Utils.Int2Bool(evt.is_status)) Then
											If (Utils.Int2Bool(evt.have_condition) And Utils.Int2Bool(evt.have_status)) Then
												ForceTerminateChecklistAndCreate(evt.value)
											Else
												ForceTerminateChecklist(evt.value)
											End If
										else if (Utils.Int2Bool(evt.is_foto)) Then
'										ForceTakePicture(BigParent.Tag)
											ForceTakePicture(thisCLAItem)
										else if (Utils.Int2Bool(evt.is_more)) Then
'										ForceAddMore(BigParent.Tag)
											ForceAddMore(thisCLAItem)
										else if (Utils.Int2Bool(evt.is_action)) Then
											'ForceAddAction(BigParent.Tag)
											If Utils.NNE(evt.value) Then
'											ForceAddActionTPA(BigParent.Tag, evt.value, "")
												ForceAddActionTPA(thisCLAItem, evt.value, "",0)
											Else
'											ForceAddAction(BigParent.Tag)
												ForceAddAction(thisCLAItem)
											End If
										else if (Utils.Int2Bool(evt.is_jump)) Then
											ForceAddJump(evt.value)
										else if ((Utils.Int2Bool(evt.is_alert)) Or (Utils.Int2Bool(evt.is_email))) Then
										else if ((Utils.Int2Bool(evt.request_signature)) Or ((evt.event_tagcode = "EVENTTASK_SIGNATURE") And (evt.type_item = 4))) Then
'										ForceAddSignature(BigParent.Tag)
											ForceAddSignature(thisCLAItem)
										else if (Utils.Int2Bool(evt.have_formula) And (evt.type_item = 2)) Then
											Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
											Wait For(res) Complete (retAPI As ExternalDocsInfo)
											If(retAPI.status = 1) Then
												Log($"Missing File downloaded"$)
'												Dim pp As B4XView = BigParent.Parent
'												For Each v As B4XView In pp.GetAllViewsRecursive
'													If (v Is Label) Then
'														Dim lbl As Label = v
'														lbl.Invalidate
'													End If
'												Next
											End If
										else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
											Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
											Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
											SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, False)
										else if ((evt.event_tagcode = "EVENTTASK_MANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
											Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
											Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
											SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, True)
										else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYALLDOWN") And (evt.type_item = 7)) Then
											SetMandatoryStateAfterItem(item_tagcode.trim, False)
										else if ((evt.event_tagcode = "EVENTTASK_MANDATORYALLDOWN") And (evt.type_item = 7)) Then
											SetMandatoryStateAfterItem(item_tagcode.trim, True)
										else if ((evt.event_tagcode = "EVENTTASK_INTEGRATION") And (evt.type_item = 8)) Then
											Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
											Wait For(res) Complete (retAPI As ExternalDocsInfo)
											If(retAPI.status = 1) Then
												Log($"Missing File downloaded"$)
											End If
										else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTER") And (evt.type_item = 30)) Then
'											Dim ItemTagCode As String = item_tagcode.Trim
'											Dim valorVerificar As String = ""
'											If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
'												ItemTagCode = evt.value.Trim
'											End If
'											Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
'											Wait For(res) Complete (retval As Int)
'											valorVerificar = retval
'			
'											Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
'												repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
'											Wait For(res1) Complete (retbool As Boolean)
											Dim ContinuarCheck As Boolean = True
											If (Utils.NNE(ThisItemValue) And Utils.isNumeric(ThisItemValue) And Utils.Int2Bool(evt.have_status)) Then
												ContinuarCheck = False ' JÁ TEM VALOR
											End If
			
											If (ContinuarCheck) Then
												Dim ItemTagCode As String = item_tagcode.Trim
												Dim valorVerificar As String = ""
												If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
													ItemTagCode = evt.value.Trim
												End If
												Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
												Wait For(res) Complete (retval As Int)
												valorVerificar = retval
				
												ThisItemValue = valorVerificar
			
												Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
										repeatcounter, repeatitemcounter, repeatitemcounter, ThisItemValue)
												Wait For(res1) Complete (retbool As Boolean)
											End If
			
'											If (Utils.NNE(ThisItemValue)) Then
'												If (this Is B4XStateButton) And (evt.have_condition=9) Then
'													Dim b4xsb_this As B4XStateButton = this
'													b4xsb_this.Text = ThisItemValue
'												End If
'											End If
										else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTEROTHER") And (evt.type_item = 31)) Then
											'*******************************************************************************************************
											' NOTE: A MESMA FUNCIONALIDADE SÓ QUE PERMITE INDICAR OUTRO ITEM_TAGCODE QUE VAI RECEBER O RESULTADO
											'*******************************************************************************************************
											Dim ItemTagCode As String = item_tagcode.Trim
											Dim OtherValue As String = ""
											Dim valorVerificar As String = ""
											If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
												ItemTagCode = evt.value.Trim
											End If
											If (Utils.NNE(evt.formula)) Then
												OtherValue = evt.formula.Trim
											End If
											Dim res As ResumableSub = CLAIGetSetExternalCounterOther(task_tagcode, ItemTagCode, ThisItemValue, OtherValue, evt)
											Wait For(res) Complete (retval As Int)
											valorVerificar = retval
			
											Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, OtherValue, uniquekey, PressedAnswerTagCode, _
													repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
											Wait For(res1) Complete (retbool As Boolean)
			
										End If
									End If
								Next
							End If
						End If
						
					
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
					End Try
				End If

			End If

		End If
	End If
	NONCLICK = 0
End Sub


' *************************************************************
' TIP: EVENTO DE ENTER DA CAIXA DE TEXTO
' *************************************************************
Sub CLAItemEditValue_EnterPressed
	Dim BX4Temp As B4XView = Sender
	
	Dim fle As Int = 0
	Dim BigTag As String = ""
	If (BX4Temp Is EditText) Then
		Dim temp As EditText = BX4Temp 'Sender
		Dim fle As Int = 1
		Dim BigTag As String = temp.tag
		Dim BigText As String = temp.text
		Dim BigParent As Panel = temp.parent
	else if (BX4Temp Is FloatLabeledEditText) Then
		Dim ftemp As FloatLabeledEditText = BX4Temp 'Sender
		Dim fle As Int = 2
		Dim BigTag As String = ftemp.tag
		Dim BigText As String = ftemp.text
		Dim BigParent As Panel = ftemp.parent
	End If

'	Try
'		Dim temp As EditText = Sender
'		Dim fle As Int = 1
'		Dim BigTag As String = temp.tag
'		Dim BigText As String = temp.text
'		Dim BigParent As Panel = temp.parent
'	Catch
'		Try
'			Dim ftemp As FloatLabeledEditText = Sender
'			Dim fle As Int = 2
'			Dim BigTag As String = ftemp.tag
'			Dim BigText As String = ftemp.text
'			Dim BigParent As Panel = ftemp.parent
'		Catch
'			Dim fle As Int = 0
'			Dim BigTag As String = ""
'		End Try
'	End Try
	
	Dim ThisItemValue As String = BigText
	
'	MainEditFocusComponent.RequestFocus
'	Dim this As FloatLabeledEditText = Sender
	If (LoadingProcess = False) And (fle > 0) Then
		
		If Utils.NE(BigTag) Then
			BigTag = BigParent.Tag
		End If
		Log("»»»»»»»»»»»»»»»»»»»»»»»»»»  EDIT  «««««««««««««««««««««««««««")
'		Dim pan As Panel = this.Parent
'		Dim New As String = this.Text
		If Not(Utils.isNullOrEmpty(BigTag)) Then
			Dim Columns As List = Regex.Split("\|", BigTag) 'this.tag )
			If (Columns.Size > 1) Then
				
				Dim request_tagcode As String = Columns.Get(0)
				Dim action_tagcode As String = Columns.Get(1)
				Dim task_tagcode As String = Columns.Get(2)
				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
				Dim tagcode As String = Columns.Get(5)
'					Dim val As Int = Columns.Get(6)
'					Dim StatusIcon As Int = Columns.Get(7)
				Dim repeatcounter As Int = Columns.Get(9)
				Dim repeatitemcounter As Int = Columns.Get(10)
				Dim repeatfieldcounter As Int = Columns.Get(11)
				Dim sACLADatetime As String = Utils.GetCurrDatetime
				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
				task_tagcode = task_tagcode.Trim
				
				task_tagcode = Utils.IfNullOrEmpty(task_tagcode,action_tagcode)
				
				Dim sss1 As String = $"select count(0) as total
											from dta_requests_values_adds where 1=1
											and request_tagcode='${request_tagcode.Trim}' 
											and task_tagcode='${task_tagcode.Trim}' 
											and item_tagcode='${item_tagcode.Trim}' 
											And repeatcounter=${repeatcounter}
											and repeatitemcounter=${repeatitemcounter}
											and fieldval_03='1'"$
				Log(sss1)
														
														
				Dim DoNotChangeValue As Boolean = (DBStructures.GetScriptColumnIntEVC(sss1, "total") > 0)
				If Not(DoNotChangeValue) Then
					Dim sqlCondition As String = $" and task_tagcode='${task_tagcode.trim}' and unique_key='${uniquekey.Trim}' "$
					Dim sqlCondition2 As String = $" and task_tagcode='${task_tagcode.trim}' and item_tagcode='${item_tagcode.trim}' and unique_key='${uniquekey.Trim}' "$
				
					Dim SetInner As Int = 0
					Try
						Dim lbl As Label = BigParent.GetView(0)
						If (Utils.NNE(lbl.Text)) Then
							If (lbl.Tag = 1) Then
								Dim sSQLw As String = $"update dta_requests_relations set inner_title='${BigText}'
							where request_tagcode='${request_tagcode.trim}' 
							and relation_tagcode='${task_tagcode.trim}' 
							and repeatcounter=${repeatcounter}"$
								Utils.SaveSQLToLog("CLAItemEditValue_FocusChanged",sSQLw, request_tagcode)
								'Starter.LocalSQLEVC.ExecNonQuery(sSQLw)
								SetInner = 1
							End If
						End If
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
					End Try
					PressedAnswerTagCode = tagcode.Trim
					Dim Continuar As Boolean = True
				
'				Dim panpan As Panel = this.Parent
					Dim thisCLAItem As RequestCLAItem
					thisCLAItem.Initialize
					If (BigTag = BigParent.Tag) Then
						Dim thisCLAItem As RequestCLAItem = Types.MakeRequestCLAItem(request_tagcode, _
								action_tagcode, _
								task_tagcode, _
								item_tagcode, _
								uniquekey, _
								tagcode, _
								repeatcounter, repeatitemcounter, repeatfieldcounter,"", "", "", 3, 0, 0, "", _
								DBStructures.DB2CLATaskItem(task_tagcode, uniquekey), "")
					Else
						Try
							Dim thisCLAItem As RequestCLAItem = BigParent.tag 'panpan.tag
						Catch
							Log(LastException)
							Utils.WriteErrors2Log(LastException)
							Continuar = False
						End Try
					End If
				
				
					Continuar = (Continuar) And (thisCLAItem Is RequestCLAItem)
				
					If Not(Continuar) Then
						Continuar = True
						Dim pnn As Panel = BigParent.Parent
						Try
							Dim thisCLAItem As RequestCLAItem = pnn.tag
						Catch
							Log(LastException)
							Utils.WriteErrors2Log(LastException)
							Continuar = False
						End Try
					End If
				
					If Continuar Then
						Dim force_control As Int = 0
						Dim type_control As Int = 0
						Dim relUniqueKey As String = ""
			
						If (thisCLAItem.IsInitialized) Then
							If (Utils.NNE(thisCLAItem.Request)) Then
								Dim relUniqueKey As String = Utils.IfNullOrEmpty(thisCLAItem.TaskInfo.dependent_key, "")
								Dim force_control As Int = thisCLAItem.TaskInfo.force_control
								Dim type_control As Int = thisCLAItem.TaskInfo.type_control '1|2|3
							End If
						End If

						Dim status As Int = 0
						If Utils.NNE(BigText) Then
							status = 1
							'******************************************************************
							' VERIFICAÇÃO DE COMPARAÇÃO ENTRE O ITEM ACTUAL E O ITEM DEPENDENTE
							'******************************************************************
							If (force_control=1) And (type_control=1) Then
								Dim sSQLcheck As String = $"select execute_value from dta_requests_values where 1=1
							and request_tagcode='${request_tagcode.trim}'
							and task_tagcode='${task_tagcode.trim}' 
							and item_tagcode='${item_tagcode.trim}' 
							and unique_key='${relUniqueKey.Trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
						
								Dim recrec As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQLcheck)
								If recrec.RowCount > 0 Then
									recrec.Position = 0
									Dim compValue As String = Utils.IfNullOrEmpty(recrec.GetString("execute_value"), "")
									Dim NCInt As Int = DBStructures.GetScriptColumnIntEVC($"select control_run_anyway as intval
													from dta_tasks_items
													where 1=1 ${sqlCondition2}"$, "intval")
									If Not(BigText = compValue) Then
										If (fle = 1) Then
											temp.Color = Colors.Red
											temp.TextColor = Colors.White
										Else If (fle = 2) Then
											ftemp.Color = Colors.Red
											ftemp.EditText.TextColor = Colors.White
										End If
									Else
										If (fle = 1) Then
											temp.Color = Colors.Green
											temp.TextColor = Colors.White
										Else If (fle = 2) Then
											ftemp.Color = Colors.Green
											ftemp.EditText.TextColor = Colors.White
										End If
									End If
								
									If (NCInt = 1) Then
										Dim dNCStr As String = "C"
										Dim dNCInt As Int = 1
										If Not(BigText = compValue) Then
											Dim dNCStr As String = "NC"
											Dim dNCInt As Int = 2
										End If
										Dim FindSQL As String = $"select * from dta_requests_values_adds where 1=1
											and request_tagcode='${request_tagcode.Trim}' 
											and task_tagcode='${task_tagcode.Trim}' 
											and item_tagcode='${item_tagcode.Trim}' 
											and unique_key='${uniquekey.Trim}' 
											and repeatcounter=${repeatcounter}
											and repeatitemcounter=${repeatitemcounter}
											and repeatfieldcounter=${repeatfieldcounter}"$
										Dim FindSQLData As Cursor = Starter.LocalSQLEVC.ExecQuery(FindSQL)
										If (FindSQLData.RowCount >= 1) Then
											Dim sRunSQL As String = $"update dta_requests_values_adds
														set fieldref_01='${dNCStr}',
														fieldval_01='${dNCInt}'
														where 1=1
														and request_tagcode='${request_tagcode.Trim}' 
														and task_tagcode='${task_tagcode.Trim}' 
														and item_tagcode='${item_tagcode.Trim}' a
														nd unique_key='${uniquekey.Trim}' 
														and repeatcounter=${repeatcounter}
														and repeatitemcounter=${repeatitemcounter}
														and repeatfieldcounter=${repeatfieldcounter}"$
										Else
											Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_values_adds", "id", "") +1 + 1000000
											Dim sRunSQL As String = $"insert into dta_requests_values_adds
											(id, request_tagcode, inner_request_tagcode, task_tagcode, item_tagcode, unique_key,
											repeatcounter, repeatitemcounter, repeatfieldcounter, fieldref_01, fieldval_01) values 
											(${maxid}, '${request_tagcode.Trim}', '${action_tagcode.Trim}', '${task_tagcode.Trim}', 
											'${item_tagcode.Trim}', '${uniquekey.Trim}', '${repeatcounter}',
											'${repeatitemcounter}', '${repeatfieldcounter}', '${dNCStr}', '${dNCInt}')"$
										End If
										Utils.SaveSQLToLog("CLAItemEditValueAdd_FocusChanged",sRunSQL, request_tagcode)
									End If
								End If
							End If
					
						End If
						Try
							'MainEditFocusComponent.RequestFocus
							SetMandatoryValue(item_tagcode.Trim, Utils.Int2Bool(status))
						
							Dim sSQL As String = $"update dta_requests_values set execute_value='${BigText}',
							execute_status='${status}', 
							execute_datetime='${sACLADatetime}', 
							execute_latitude='${sACLALatitude}', execute_longitude='${sACLALongitude}'
							where request_tagcode='${request_tagcode.Trim}' and
							task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
							unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
					
							Log(sSQL)
							
							Utils.SaveSQLToLog("CLAItemEditValue_FocusChanged",sSQL, request_tagcode)
							'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
							Dim params As Map
							params.Initialize
							params.Clear
							params.Put("_token", ShareCode.APP_TOKEN)
							params.Put("ACLARequest", request_tagcode)
							params.Put("ACLAAction", action_tagcode)
							params.Put("ACLATask", task_tagcode)
							params.Put("ACLAItem", item_tagcode)
							params.Put("ACLAUniqueKey", uniquekey)
							params.Put("ACLATagcode", tagcode.trim)
							params.Put("ACLAValue", BigText)
							params.Put("ACLAReqCounter", repeatcounter)
							params.Put("ACLARepeatItem", repeatitemcounter)
							params.Put("ACLARepeatField", repeatfieldcounter)
							params.Put("ACLAInner", SetInner)
			
							params.Put("ACLADatetime", sACLADatetime)
							params.Put("ACLALatitude", sACLALatitude)
							params.Put("ACLALongitude", sACLALongitude)
				
							Dim ACLSessUser As String = ShareCode.SESS_OPER_User
							Dim ACLClear As Int = 0
							params.Put("ACLSessUser", ACLSessUser)
							params.Put("ACLClear", ACLClear)
							params.Put("versionTagcode", Main.VersionTagcode)
							params.Put("_authorization", Main.DeviceAuthorization)
							params.Put("_instance", Main.DeviceInstance)
							params.put("_deviceBrand", Main.DeviceBrand)
							params.put("_deviceModel", Main.DeviceModel)
							params.put("_deviceMacAddress", Main.DeviceMacAddress)
							params.Put("_user", ShareCode.SESS_User)
							Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
							If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
								If Not(ShareCode.APP_WORKING_LOCAL) Then
									Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
									Wait For (GODR) Complete (HasResults As Boolean)
									If HasResults Then
										Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
										Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
									Else
										Utils.CallApi(0, params, Me, Url, "", request_tagcode)
									End If
								Else
									Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
									Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
								End If
								Sleep(250)
							Else
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							End If
							Log("DESPISTE1")
							'******************************************************************************
							'	CONTROLO DE ACAIL
							'******************************************************************************
							If (uniquekey.trim = "ad997355-0c5c-57a1-86ab-16aea41a974c") Or _
							(uniquekey.trim = "fe883a15-4df5-50b6-8eba-31b15564cddc") Or _
							(uniquekey.trim = "3c335a96-fc34-5bc8-b286-d61730eafe7c") Then
								Dim ContinuaAcail As Boolean = True
								Try
									Dim valueAcail As Int = BigText
								Catch
									ContinuaAcail = False
								End Try
							
								If (ContinuaAcail) Then
									If valueAcail >= 90 Then
										Dim backColor As Int = Consts.ColorGreen
										Dim fontColor As Int = Colors.Black
									Else
										Dim backColor As Int = Consts.ColorRed
										Dim fontColor As Int = Consts.ColorWhite
									End If
									If (fle = 1) Then
										temp.Color = backColor
										temp.TextColor = fontColor
									Else If (fle = 2) Then
										ftemp.Color = backColor
										ftemp.EditText.TextColor = fontColor
									End If
							
								End If
							
							else If (uniquekey.trim = "0f89b48e-9214-560d-a056-77aa23e5e90c") Then
								Dim ContinuaAcail As Boolean = True
								Try
									Dim valueAcail As Int = BigText
								Catch
									ContinuaAcail = False
								End Try
							
								If (ContinuaAcail) Then
									If (valueAcail >= 5) And (valueAcail<=7) Then
										Dim backColor As Int = Consts.ColorGreen
										Dim fontColor As Int = Colors.Black
									Else
										Dim backColor As Int = Consts.ColorRed
										Dim fontColor As Int = Consts.ColorWhite
									End If
									If (fle = 1) Then
										temp.Color = backColor
										temp.TextColor = fontColor
									Else If (fle = 2) Then
										ftemp.Color = backColor
										ftemp.EditText.TextColor = fontColor
									End If
							
								End If
							
							End If
					
							'******************************************************************************
							'	CONTROLO DE EVENTOS
							'******************************************************************************
							If (NONCLICK = 0) Then
								
								Dim task2use As String = ""
								If Utils.NE(task_tagcode) Then
									task2use = action_tagcode.trim
								Else
									task2use = task_tagcode.trim
								End If
								
								Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
										$"select distinct paramters 
										from dta_tasks_items_adds where 1=1
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${item_tagcode.trim}'
										And unique_key='${uniquekey.trim}'"$, "paramters")	

								Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
								And task_tagcode='${task_tagcode.trim}'
								And item_tagcode='${item_tagcode.trim}'
								And unique_key='${uniquekey.trim}'
								And tagcode='${tagcode.trim}'
								Order by position"$  
								Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
								If Eventos.RowCount >= 1 Then
									For n=0 To Eventos.RowCount-1
										Eventos.Position = n
				
										Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
										If (evt.type_item = 9) Then
'									ControlUpdateRequestField(BigParent.Tag, evt.value, BigText)
											ControlUpdateRequestField(thisCLAItem, evt.value, BigText)
										Else
											If (Utils.Int2Bool(evt.is_status)) Then
												If (Utils.Int2Bool(evt.have_condition) And Utils.Int2Bool(evt.have_status)) Then
													ForceTerminateChecklistAndCreate(evt.value)
												Else
													ForceTerminateChecklist(evt.value)
												End If
											else if (Utils.Int2Bool(evt.is_foto)) Then
'										ForceTakePicture(BigParent.Tag)
												ForceTakePicture(thisCLAItem)
											else if (Utils.Int2Bool(evt.is_more)) Then
'										ForceAddMore(BigParent.Tag)
												ForceAddMore(thisCLAItem)
											else if (Utils.Int2Bool(evt.is_action)) Then
												'ForceAddAction(BigParent.Tag)
												If Utils.NNE(evt.value) Then
'											ForceAddActionTPA(BigParent.Tag, evt.value, "")
													ForceAddActionTPA(thisCLAItem, evt.value, "",0)
												Else
'											ForceAddAction(BigParent.Tag)
													ForceAddAction(thisCLAItem)
												End If
											else if (Utils.Int2Bool(evt.is_jump)) Then
												ForceAddJump(evt.value)
											else if ((Utils.Int2Bool(evt.is_alert)) Or (Utils.Int2Bool(evt.is_email))) Then
											else if ((Utils.Int2Bool(evt.request_signature)) Or ((evt.event_tagcode = "EVENTTASK_SIGNATURE") And (evt.type_item = 4))) Then
												ForceAddSignature(thisCLAItem)
											else if ((Utils.Int2Bool(evt.have_formula) And (evt.type_item = 2)) Or ((evt.event_tagcode = "EVENTTASK_FORMULA") And (evt.type_item = 2))) Then
												If ((ShareCode.APPL_ACCOUNT.ToUpperCase = "ERGUELOP")) Then
													Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
													Wait For(res) Complete (retAPI As ExternalDocsInfo)
													If(retAPI.status = 1) Then
														Log($"Missing File downloaded"$)
													End If
												Else
'													Log("DESPISTE3")
'													Dim this As FloatLabeledEditText = Sender
'													Log("DESPISTE4")
'													Dim resFormula As ResumableSub = CalcFormulaTrigger(request_tagcode, task_tagcode.Trim, item_tagcode, uniquekey, repeatcounter, repeatitemcounter, 0, _
'													evt.value, evt.Formula, BigText,this)
'													Wait For(resFormula) Complete (result As Boolean)
'													Dim this As FloatLabeledEditText = Sender


													If (fle = 1) Then
														Dim resFormula As ResumableSub = CalcFormulaTrigger(request_tagcode, task_tagcode.Trim, item_tagcode, uniquekey, PressedAnswerTagCode.trim, repeatcounter, repeatitemcounter, 0, _
															evt.value, evt.Formula, BigText,temp)
													Else If (fle = 2) Then
														Dim resFormula As ResumableSub = CalcFormulaTrigger(request_tagcode, task_tagcode.Trim, item_tagcode, uniquekey, PressedAnswerTagCode.trim, repeatcounter, repeatitemcounter, 0, _
															evt.value, evt.Formula, BigText,ftemp)
													End If
													
													
													Wait For(resFormula) Complete (result As Boolean)
												End If
											else if ((evt.event_tagcode = "EVENTTASK_AUTODUPLICATE_CHAPTER") And (evt.type_item = 25)) Then
'												
												' value tem os itemtagcode dos capitulos
												' formula itemtagcode do componemtne que tem a resposta do num de repticoes (se [TV] e o proprio)
												
												' arranjar maneira de apanhar o tagcode do botao de duplicacao correspondente ao capitulo e passa-lo no primeiro argumento
												If Utils.NNE(evt.value) And Utils.NNE(evt.formula) Then
													
'													ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
													
													' APANHA O VALOR DAS REPETICOES NO CAMPO evt.formula, ou [TV] = Sender ou ITEM_TAGCODE
													If evt.formula.ToUpperCase.Contains("[TV]") Then
														Dim ValOfRepeat As Int = BigText
													Else
														For x=0 To UPDATED_EDIT_FIELDS.size -1
															Dim cItem As FieldReference = UPDATED_EDIT_FIELDS.Get(x)
															If (cItem.tagname=evt.formula.Trim) Then
																If cItem.tagobject Is FloatLabeledEditText Then
																	Dim fv As FloatLabeledEditText = cItem.tagobject
																	Dim ValOfRepeat As Int = fv.Text
																	Exit
																Else
																	Dim ValOfRepeat As Int = 0
																End If
															End If
														Next
													End If
													Dim lstItems2Repeat As List = Regex.Split("\|",evt.value)
													For e=0 To lstItems2Repeat.Size -1
														Dim CurrentItem2repeat As String = lstItems2Repeat.Get(e)
														Dim resFChapter As ResumableSub = AddChapter(CurrentItem2repeat,ValOfRepeat)
														Wait For(resFChapter) Complete (result As Boolean)
													Next

								
												End If
														
											else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYALLDOWN") And (evt.type_item = 7)) Then
												SetMandatoryStateAfterItem(item_tagcode.trim, False)
											else if ((evt.event_tagcode = "EVENTTASK_MANDATORYALLDOWN") And (evt.type_item = 7)) Then
												SetMandatoryStateAfterItem(item_tagcode.trim, True)
											else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
												Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
												Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
												SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, False)
											else if ((evt.event_tagcode = "EVENTTASK_MANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
												Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
												Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
												SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, True)
											else if ((evt.event_tagcode = "EVENTTASK_INTEGRATION") And (evt.type_item = 8)) Then
												Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
												Wait For(res) Complete (retAPI As ExternalDocsInfo)
												If(retAPI.status = 1) Then
													Log($"Missing File downloaded"$)
												End If
											else if ((evt.event_tagcode = "EVENTTASK_ACTIVE_INACTIVE_ITEM") And (evt.type_item = 25)) Then
												Log(ComponentList.Size)
												Dim ret As RequestCLAItem
												ret.Initialize
												If (fle=1) Then
													Dim SCI As SingleCLAItem = Types.MakeSingleCLAItem(request_tagcode,task_tagcode,item_tagcode,uniquekey,tagcode,repeatcounter,repeatitemcounter,repeatfieldcounter)
													Dim res As ResumableSub = ActiveInactive(temp , ret, evt, "", SCI, True, repeatitemcounter)
													Wait For(res) Complete (Ended As Boolean)
												Else
													Dim SCI As SingleCLAItem = Types.MakeSingleCLAItem(request_tagcode,task_tagcode,item_tagcode,uniquekey,tagcode,repeatcounter,repeatitemcounter,repeatfieldcounter)
													Dim res As ResumableSub = ActiveInactive(ftemp , ret, evt, "", SCI, True, repeatitemcounter)
													Wait For(res) Complete (Ended As Boolean)
												End If
												
											else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTER") And (evt.type_item = 30)) Then
'												Dim ItemTagCode As String = item_tagcode.Trim
'												Dim valorVerificar As String = ""
'												If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
'													ItemTagCode = evt.value.Trim
'												End If
'												Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
'												Wait For(res) Complete (retval As Int)
'												valorVerificar = retval
'			
'												Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
'													repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
'												Wait For(res1) Complete (retbool As Boolean)
												Dim ContinuarCheck As Boolean = True
												If (Utils.NNE(ThisItemValue) And Utils.isNumeric(ThisItemValue) And Utils.Int2Bool(evt.have_status)) Then
													ContinuarCheck = False ' JÁ TEM VALOR
												End If
			
												If (ContinuarCheck) Then
													Dim ItemTagCode As String = item_tagcode.Trim
													Dim valorVerificar As String = ""
													If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
														ItemTagCode = evt.value.Trim
													End If
													Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
													Wait For(res) Complete (retval As Int)
													valorVerificar = retval
				
													ThisItemValue = valorVerificar
			
													Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
																			repeatcounter, repeatitemcounter, repeatitemcounter, ThisItemValue)
													Wait For(res1) Complete (retbool As Boolean)
												End If
			
'												If (Utils.NNE(ThisItemValue)) Then
'													If (this Is B4XStateButton) And (evt.have_condition=9) Then
'														Dim b4xsb_this As B4XStateButton = this
'														b4xsb_this.Text = ThisItemValue
'													End If
'												End If
											else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTEROTHER") And (evt.type_item = 31)) Then
												'*******************************************************************************************************
												' NOTE: A MESMA FUNCIONALIDADE SÓ QUE PERMITE INDICAR OUTRO ITEM_TAGCODE QUE VAI RECEBER O RESULTADO
												'*******************************************************************************************************
												Dim ItemTagCode As String = item_tagcode.Trim
												Dim OtherValue As String = ""
												Dim valorVerificar As String = ""
												If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
													ItemTagCode = evt.value.Trim
												End If
												If (Utils.NNE(evt.formula)) Then
													OtherValue = evt.formula.Trim
												End If
												Dim res As ResumableSub = CLAIGetSetExternalCounterOther(task_tagcode, ItemTagCode, ThisItemValue, OtherValue, evt)
												Wait For(res) Complete (retval As Int)
												valorVerificar = retval
			
												Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, OtherValue, uniquekey, PressedAnswerTagCode, _
														repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
												Wait For(res1) Complete (retbool As Boolean)
			
											End If
										End If
				
									Next
								End If
							End If
						
					
						Catch
							Log(LastException)
							Utils.WriteErrors2Log(LastException)
						End Try
					End If
				End If

			End If

		End If
	End If
	NONCLICK = 0
End Sub


' *************************************************************
' TIP: EVENTO DE FOCUS DA CAIXA DE TEXTO
' *************************************************************
Sub CLAItemEditValue_FocusChanged (HasFocus As Boolean)
	Dim BX4Temp As B4XView = Sender
	LASTEDITBOXFOCUS = BX4Temp

	Dim BigTag As String = ""
	If (BX4Temp Is FloatLabeledEditText) Then
		Dim this As FloatLabeledEditText = BX4Temp
		If (HasFocus = True) Then
			this.EditText.SelectAll
		Else
			ManageFocus(this)
			CLAItemEditValueReturnFromFloatEditBox (this)
		End If
		NONCLICK = 0
	Else
		Dim this1 As EditText = BX4Temp

		If (HasFocus = True) Then
			this1.SelectAll
		Else
			ManageFocus(this1)
			CLAItemEditValueReturnFromEditBox (this1)
		End If
		NONCLICK = 0
	End If
End Sub


Sub CLAItemEditValueReturnFromFloatEditBoxCancel (this As FloatLabeledEditText)
	MainEditFocusComponent.RequestFocus
	NONCLICK = 0
End Sub

' *************************************************************
' TIP: EVENTO DE RETORNO DA CAIXA DE FLOATEDITTEXT 
' *************************************************************
Sub CLAItemEditValueReturnFromFloatEditBox (this As FloatLabeledEditText)

	ManageFocus(this)
	MainEditFocusComponent.RequestFocus
	If (LoadingProcess = False) Then
		
		Log("»»»»»»»»»»»»»»»»»»»»»»»»»»  EDIT  «««««««««««««««««««««««««««")
		Dim pan As Panel = this.Parent
		Dim thisTAG As String = this.Tag
		Dim New As String = this.Text
		Dim ThisItemValue As String = New
		'If Not(Utils.isNullOrEmpty(pan.Tag)) And (pan.tag = thisTAG)  Then
		If Not(Utils.isNullOrEmpty(this.Tag)) Then
			Dim Columns As List = Regex.Split("\|", thisTAG) 'this.tag )
			If (Columns.Size > 1) Then
				
				Dim request_tagcode As String = Columns.Get(0)
				Dim action_tagcode As String = Columns.Get(1)
				Dim task_tagcode As String = Columns.Get(2)
				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
				Dim tagcode As String = Columns.Get(5)
				'					Dim val As Int = Columns.Get(6)
				'					Dim StatusIcon As Int = Columns.Get(7)
				Dim repeatcounter As Int = Columns.Get(9)
				Dim repeatitemcounter As Int = Columns.Get(10)
				Dim repeatfieldcounter As Int = Columns.Get(11)
				Dim sACLADatetime As String = Utils.GetCurrDatetime
				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
				
				Dim DoNotChangeValue As Boolean = (DBStructures.GetScriptColumnIntEVC($"select count(0) as total
											from dta_requests_values_adds where 1=1
											and request_tagcode='${request_tagcode.Trim}' 
											and task_tagcode='${task_tagcode.Trim}' 
											and item_tagcode='${item_tagcode.Trim}' 
											And repeatcounter=${repeatcounter}
											and repeatitemcounter=${repeatitemcounter}
											and fieldval_03='1'"$, "total") > 0)
				If Not(DoNotChangeValue) Then
					Dim SetInner As Int = 0
					Try
						
						Dim BPV As B4XView =  pan.GetView(0) ' xxx -Alteracao para incluir types de view diferentes
					
						If BPV Is Label Then
							Dim lbl As Label = BPV
							Dim lbltxt As String = lbl.text
						else if BPV Is EditText Then
							Dim edt As EditText = BPV
							Dim lbltxt As String = edt.text
						else if BPV Is FloatLabeledEditText Then
							Dim fltedt As FloatLabeledEditText = BPV
							Dim lbltxt As String = fltedt.EditText.Text
						End If
						
						
						
						If (Utils.NNE(lbltxt)) Then
							If (BPV.Tag = 1) Then
								Dim sSQLw As String = $"update dta_requests_relations set inner_title='${New}'
							where request_tagcode='${request_tagcode.trim}' 
							and relation_tagcode='${task_tagcode.trim}' 
							and repeatcounter=${repeatcounter}"$
								Utils.SaveSQLToLog("CLAItemEditValue_FocusChanged",sSQLw, request_tagcode)
								'Starter.LocalSQLEVC.ExecNonQuery(sSQLw)
								SetInner = 1
							End If
						End If
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
					End Try
					PressedAnswerTagCode = tagcode
					Dim Continuar As Boolean = True

					Dim panpan As Panel = this.Parent
					Dim thisCLAItem As RequestCLAItem
					thisCLAItem.Initialize
					Try
						Dim thisCLAItem As RequestCLAItem = panpan.tag
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
						Continuar = False
					End Try
				
					Continuar = (Continuar) And (thisCLAItem Is RequestCLAItem)
				
					If Continuar Then
						Dim force_control As Int = 0
						Dim type_control As Int = 0
						Dim relUniqueKey As String = ""
			
						If (thisCLAItem.IsInitialized) Then
							If (Utils.NNE(thisCLAItem.Request)) Then
								Dim relUniqueKey As String = Utils.IfNullOrEmpty(thisCLAItem.TaskInfo.dependent_key, "")
								Dim force_control As Int = thisCLAItem.TaskInfo.force_control
								Dim type_control As Int = thisCLAItem.TaskInfo.type_control '1|2|3
							End If
						End If
	
						Dim status As Int = 0
						If Utils.NNE(New) Then
							status = 1
					
							If (force_control=1) And (type_control=1) Then
								Dim sSQLcheck As String = $"select execute_value from dta_requests_values where 1=1
															and request_tagcode='${request_tagcode.trim}'
															and task_tagcode='${task_tagcode.trim}' 
															and item_tagcode='${item_tagcode.trim}' 
															and unique_key='${relUniqueKey.Trim}'
															and repeatcounter=${repeatcounter}
															and repeatitemcounter=${repeatitemcounter}
															and repeatfieldcounter=${repeatfieldcounter}"$
						
								Dim recrec As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQLcheck)
								If recrec.RowCount > 0 Then
									recrec.Position = 0
									Dim compValue As String = Utils.IfNullOrEmpty(recrec.GetString("execute_value"), "")
									If Not(New = compValue) Then
										this.Color = Colors.Red
										this.EditText.TextColor = Colors.White
									Else
										this.Color = Colors.Green
										this.EditText.TextColor = Colors.White
									End If
								End If
							End If
					
						End If
						Try
						
							SetMandatoryValue(item_tagcode.Trim, Utils.Int2Bool(status))
							Dim sSQL As String = $"update dta_requests_values set execute_value='${New}',
							execute_status='${status}', 
							execute_datetime='${sACLADatetime}', 
							execute_latitude='${sACLALatitude}', execute_longitude='${sACLALongitude}'
							where request_tagcode='${request_tagcode.Trim}' and
							task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
							unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
					
							Log(sSQL)
							Utils.SaveSQLToLog("CLAItemEditValue_FocusChanged",sSQL, request_tagcode)
							'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
							Dim params As Map
							params.Initialize
							params.Clear
							params.Put("_token", ShareCode.APP_TOKEN)
							params.Put("ACLARequest", request_tagcode)
							params.Put("ACLAAction", action_tagcode)
							params.Put("ACLATask", task_tagcode)
							params.Put("ACLAItem", item_tagcode)
							params.Put("ACLAUniqueKey", uniquekey)
							params.Put("ACLATagcode", tagcode)
							params.Put("ACLAValue", New)
							params.Put("ACLAReqCounter", repeatcounter)
							params.Put("ACLARepeatItem", repeatitemcounter)
							params.Put("ACLARepeatField", repeatfieldcounter)
							params.Put("ACLAInner", SetInner)
			
							params.Put("ACLADatetime", sACLADatetime)
							params.Put("ACLALatitude", sACLALatitude)
							params.Put("ACLALongitude", sACLALongitude)
				
							Dim ACLSessUser As String = ShareCode.SESS_OPER_User
							Dim ACLClear As Int = 0
							params.Put("ACLSessUser", ACLSessUser)
							params.Put("ACLClear", ACLClear)
							params.Put("versionTagcode", Main.VersionTagcode)
							params.Put("_authorization", Main.DeviceAuthorization)
							params.Put("_instance", Main.DeviceInstance)
							params.put("_deviceBrand", Main.DeviceBrand)
							params.put("_deviceModel", Main.DeviceModel)
							params.put("_deviceMacAddress", Main.DeviceMacAddress)
							params.Put("_user", ShareCode.SESS_User)
							Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
							If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
								If Not(ShareCode.APP_WORKING_LOCAL) Then
									Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
									Wait For (GODR) Complete (HasResults As Boolean)
									If HasResults Then
										Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
										Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
									Else
										Utils.CallApi(0, params, Me, Url, "", request_tagcode)
									End If
								Else
									Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
									Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
								End If
								Sleep(250)
							Else
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							End If
						
							'******************************************************************************
							'	CONTROLO DE ACAIL
							'******************************************************************************
							If (uniquekey.trim = "ad997355-0c5c-57a1-86ab-16aea41a974c") Or _
						(uniquekey.trim = "fe883a15-4df5-50b6-8eba-31b15564cddc") Or _
						(uniquekey.trim = "3c335a96-fc34-5bc8-b286-d61730eafe7c") Then
								Dim ContinuaAcail As Boolean = True
								Try
									Dim valueAcail As Int = New
								Catch
									ContinuaAcail = False
								End Try
						
								If (ContinuaAcail) Then
									If valueAcail >= 90 Then
										Dim backColor As Int = Consts.ColorGreen
										Dim fontColor As Int = Colors.Black
									Else
										Dim backColor As Int = Consts.ColorRed
										Dim fontColor As Int = Consts.ColorWhite
									End If
									this.Color = backColor
									this.EditText.TextColor = fontColor
								End If
						
							else If (uniquekey.trim = "0f89b48e-9214-560d-a056-77aa23e5e90c") Then
								Dim ContinuaAcail As Boolean = True
								Try
									Dim valueAcail As Int = New
								Catch
									ContinuaAcail = False
								End Try
						
								If (ContinuaAcail) Then
									If (valueAcail >= 5) And (valueAcail<=7) Then
										Dim backColor As Int = Consts.ColorGreen
										Dim fontColor As Int = Colors.Black
									Else
										Dim backColor As Int = Consts.ColorRed
										Dim fontColor As Int = Consts.ColorWhite
									End If
									this.Color = backColor
									this.EditText.TextColor = fontColor
						
								End If
						
							else If (uniquekey.trim = "3ff65480-d44f-50e3-9f21-3c7644c921be") Then
								Dim ContinuaAcail As Boolean = True
								Try
									Dim valueAcail As Int = New
								Catch
									ContinuaAcail = False
								End Try
						
								If (ContinuaAcail) Then
									If (valueAcail > 2) Then
										Dim backColor As Int = Consts.ColorGreen
										Dim fontColor As Int = Colors.Black
									Else
										Dim backColor As Int = Consts.ColorRed
										Dim fontColor As Int = Consts.ColorWhite
									End If
									this.Color = backColor
									this.EditText.TextColor = fontColor
						
								End If
						
							else If (uniquekey.trim = "20191212-ctrl-upup-0002-201912120002") Then
								FloatEditBoxChangeColor(New, "[tv]>2", this)
							else If (uniquekey.trim = "20191212-ctrl-down-0002-201912120002") Then
								FloatEditBoxChangeColor(New, "[tv]<2", this)
							End If
						
						
							'******************************************************************************
							'	CONTROLO DE EVENTOS E ENTRADA DE DADOS POR PARAMTERS
							'******************************************************************************
							Dim paramters As String = Utils.IfNullOrEmpty( _
													DBStructures.GetScriptColumnStrEVC( _
														$"select paramters from dta_tasks_items_adds
														where task_tagcode='${task_tagcode.Trim}' 
															and item_tagcode='${item_tagcode.Trim}' 
															and unique_key='${uniquekey.Trim}'"$, "paramters"), "")
							
							If Utils.NNE(paramters) Then
								Dim parser As JSONParser
								parser.Initialize(paramters)
								Dim root As Map = parser.NextObject
							
								Dim inputcontrol As List = root.Get("inputcontrol")
								For Each colinputcontrol As Map In inputcontrol
									Dim actiontype As Int = colinputcontrol.Get("actiontype")
									Dim strmaxvalue As String = colinputcontrol.Get("maxvalue")
									Dim typecontrol As Int = colinputcontrol.Get("typecontrol")
									Dim actiontagcode As String = colinputcontrol.Get("actiontagcode")
									Dim formula As String = colinputcontrol.Get("formula")
									Dim actiongroup As String = colinputcontrol.Get("actiongroup")
									Dim actiononout As Int = colinputcontrol.Get("actiononout")
									Dim strminvalue As String = colinputcontrol.Get("minvalue")
								
									Dim actionresult As Int = Utils.IfNullOrEmpty(colinputcontrol.Get("actionresult"), "0")
									Dim actionforce As Int = Utils.IfNullOrEmpty(colinputcontrol.Get("actionforce"), "0")
								
									Dim respNC As Boolean = False
									If (typecontrol >= 1) Then
										If (typecontrol=1) Then
											Dim minvalue As Double = strminvalue.Replace(",",".")
											Dim maxvalue As Double = strmaxvalue.Replace(",",".")
											Dim form1 As String = $"[tv]>=${minvalue}&&[tv]<=${maxvalue}"$
											respNC = Not(FloatEditBoxChangeColor(New, form1, this))
										else if (typecontrol=2) Then
											respNC = Not(FloatEditBoxChangeColor(New, formula, this))
										End If
									
										Try
											Dim conformity As Int = colinputcontrol.Get("conformity")
											If Utils.Int2Bool(conformity) Then
												Dim conformity_settings As Map = colinputcontrol.Get("conformity_settings")
												Dim conformity_on As Int = conformity_settings.Get("conformity_on")
												Dim nonconformity_on As Int = conformity_settings.Get("nonconformity_on")
									
												If Utils.Int2Bool(conformity_on) And respNC Then
													Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC)
												else if Utils.Int2Bool(nonconformity_on) And Not(respNC) Then
													Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC) + 1
												End If
											End If
										Catch
											Log(LastException)
											Utils.WriteErrors2Log(LastException)
											Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC) + 1
										End Try
									
										Try
											Dim active_inactive As Int = colinputcontrol.Get("active_inactive")
											Dim active_inactive_settings As List = colinputcontrol.Get("active_inactive_settings")
											For Each col_active_inactive As Map In active_inactive_settings
												Dim item_tagcode As String = col_active_inactive.Get("item_tagcode")
												Dim active_color As String = col_active_inactive.Get("active_color")
												Dim inactive_color As String = col_active_inactive.Get("inactive_color")
													
												For i =0 To ComponentList.Size -1
													Dim ClItem As ComponentRecords = ComponentList.Get(i)
													If ClItem.item_tagcode = item_tagcode Then
														Dim View2Process As B4XView = ClItem.component
														If View2Process Is Panel Then
															Dim pnlB4x As Panel = View2Process
															Dim res As ResumableSub = ChangeComponent(item_tagcode,"ENABLE","",active_inactive)
															wait for (res) Complete (Finished As Boolean)
															If active_inactive = 1 Then
																If Utils.NNE(active_color) Then
																	Dim ColorACTIVE As Int = Utils.ColorString(active_color.ToUpperCase)
																Else
																	Dim ColorACTIVE As Int = Colors.White
																End If
																Dim res As ResumableSub = ChangeComponent(item_tagcode, "COLOR","", ColorACTIVE)
																wait for (res) Complete (Finished As Boolean)
															else If active_inactive = 0 Then
																If Utils.NNE(inactive_color) Then
																	Dim ColorINACTIVE As Int = Utils.ColorString(inactive_color.ToUpperCase)
																Else
																	Dim ColorINACTIVE As Int = Colors.LightGray
																End If
																Dim res As ResumableSub = ChangeComponent(item_tagcode, "ENABLE","", ColorACTIVE)
																wait for (res) Complete (Finished As Boolean)
															End If
														End If
													End If
												Next
											Next
										Catch
											Log(LastException)
											Utils.WriteErrors2Log(LastException)
										End Try
									
									
										Dim Req2Pass As RequestCLAItem = Types.MakeRequestCLAItem(request_tagcode,action_tagcode,task_tagcode,item_tagcode,uniquekey, _
										tagcode, repeatcounter,repeatitemcounter,repeatfieldcounter,"","","",0,0,0,"",DBStructures.DB2CLATaskItem("", ""),"")
 
										Dim RSub As ResumableSub = InputControlNextEval(pan,Req2Pass,fieldconfirm_nc,sACLADatetime,sACLALatitude,sACLALongitude, _
										actiononout,actiontype,respNC,actionresult,actiontagcode,actiongroup,actionforce)
										wait for (RSub) Complete (ReturnVal As Boolean)
						
									End If
								Next
							End If
						
							'******************************************************************************
							'	CONTROLO DE EVENTOS
							'******************************************************************************
							If (NONCLICK = 0) Then
								Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
									$"select distinct paramters 
									from dta_tasks_items_adds where 1=1
									And task_tagcode='${task_tagcode.trim}'
									And item_tagcode='${item_tagcode.trim}'
									And unique_key='${uniquekey.trim}'"$, "paramters")	
	
								Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
								And task_tagcode='${task_tagcode.trim}'
								And item_tagcode='${item_tagcode.trim}'
								And unique_key='${uniquekey.trim}'
								And tagcode='${tagcode.trim}'
								Order by position"$  
								Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
								If Eventos.RowCount >= 1 Then
									For n=0 To Eventos.RowCount-1
										Eventos.Position = n
				
										Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
	
										If (evt.type_item = 9) Then
											ControlUpdateRequestField(pan.Tag, evt.value, New)
										Else
											If (Utils.Int2Bool(evt.is_status)) Then
												If (Utils.Int2Bool(evt.have_condition) And Utils.Int2Bool(evt.have_status)) Then
													ForceTerminateChecklistAndCreate(evt.value)
												Else
													ForceTerminateChecklist(evt.value)
												End If
											else if (Utils.Int2Bool(evt.is_foto)) Then
												ForceTakePicture(pan.Tag)
											else if (Utils.Int2Bool(evt.is_more)) Then
												ForceAddMore(pan.Tag)
											else if (Utils.Int2Bool(evt.is_action)) Then
												'ForceAddAction(pan.Tag)
												If Utils.NNE(evt.value) Then
													ForceAddActionTPA(pan.Tag, evt.value, "", 0)
												Else
													ForceAddAction(pan.Tag)
												End If
											else if (Utils.Int2Bool(evt.is_jump)) Then
												ForceAddJump(evt.value)
											else if ((Utils.Int2Bool(evt.is_alert)) Or (Utils.Int2Bool(evt.is_email))) Then
											else if ((Utils.Int2Bool(evt.request_signature)) Or ((evt.event_tagcode = "EVENTTASK_SIGNATURE") And (evt.type_item = 4))) Then
												ForceAddSignature(pan.Tag)
											else if (Utils.Int2Bool(evt.have_formula) And (evt.type_item = 2)) Then
												Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
												item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
												Wait For(res) Complete (retAPI As ExternalDocsInfo)
												If(retAPI.status = 1) Then
													Log($"Missing File downloaded"$)
													'													Dim pp As B4XView = this.Parent
													'													Dim ppp As B4XView = pp.Parent
													'													For Each v As B4XView In ppp.GetAllViewsRecursive
													'														If (v Is Label) Then
													'															Dim lbl As Label = v
													'															lbl.Invalidate
													'														End If
													'													Next
												End If
											else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
												Dim bullet_master As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
												Dim bullet_child As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
												SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, False)
											else if ((evt.event_tagcode = "EVENTTASK_MANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
												Dim bullet_master As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
												Dim bullet_child As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
												SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, True)
											else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYALLDOWN") And (evt.type_item = 7)) Then
												SetMandatoryStateAfterItem(item_tagcode.trim, False)
											else if ((evt.event_tagcode = "EVENTTASK_MANDATORYALLDOWN") And (evt.type_item = 7)) Then
												SetMandatoryStateAfterItem(item_tagcode.trim, True)
											else if ((evt.event_tagcode = "EVENTTASK_INTEGRATION") And (evt.type_item = 8)) Then
												Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
												item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
												Wait For(res) Complete (retAPI As ExternalDocsInfo)
												If(retAPI.status = 1) Then
													Log($"Missing File downloaded"$)
												End If
											else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTER") And (evt.type_item = 30)) Then
'												Dim ItemTagCode As String = item_tagcode.Trim
'												Dim valorVerificar As String = ""
'												If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
'													ItemTagCode = evt.value.Trim
'												End If
'												Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
'												Wait For(res) Complete (retval As Int)
'												valorVerificar = retval
'			
'												Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
'													repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
'												Wait For(res1) Complete (retbool As Boolean)
												Dim ContinuarCheck As Boolean = True
												If (Utils.NNE(ThisItemValue) And Utils.isNumeric(ThisItemValue) And Utils.Int2Bool(evt.have_status)) Then
													ContinuarCheck = False ' JÁ TEM VALOR
												End If
			
												If (ContinuarCheck) Then
													Dim ItemTagCode As String = item_tagcode.Trim
													Dim valorVerificar As String = ""
													If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
														ItemTagCode = evt.value.Trim
													End If
													Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
													Wait For(res) Complete (retval As Int)
													valorVerificar = retval
				
													ThisItemValue = valorVerificar
			
													Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
														repeatcounter, repeatitemcounter, repeatitemcounter, ThisItemValue)
													Wait For(res1) Complete (retbool As Boolean)
												End If
			
'												If (Utils.NNE(ThisItemValue)) Then
'													If (this Is B4XStateButton) And (evt.have_condition=9) Then
'														Dim b4xsb_this As B4XStateButton = this
'														b4xsb_this.Text = ThisItemValue
'													End If
'												End If
											else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTEROTHER") And (evt.type_item = 31)) Then
												'*******************************************************************************************************
												' NOTE: A MESMA FUNCIONALIDADE SÓ QUE PERMITE INDICAR OUTRO ITEM_TAGCODE QUE VAI RECEBER O RESULTADO
												'*******************************************************************************************************
												Dim ItemTagCode As String = item_tagcode.Trim
												Dim OtherValue As String = ""
												Dim valorVerificar As String = ""
												If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
													ItemTagCode = evt.value.Trim
												End If
												If (Utils.NNE(evt.formula)) Then
													OtherValue = evt.formula.Trim
												End If
												Dim res As ResumableSub = CLAIGetSetExternalCounterOther(task_tagcode, ItemTagCode, ThisItemValue, OtherValue, evt)
												Wait For(res) Complete (retval As Int)
												valorVerificar = retval
			
												Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, OtherValue, uniquekey, PressedAnswerTagCode, _
													repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
												Wait For(res1) Complete (retbool As Boolean)
			
											End If
										End If
				
									Next
								End If
							End If
						
					
						Catch
							Log(LastException)
							Utils.WriteErrors2Log(LastException)
						End Try
					End If
				End If

			End If

		End If
	End If
	NONCLICK = 0
	'	ProgressDialogHide
End Sub

' *************************************************************
' TIP: EVENTO DE RETORNO DA CAIXA DE FLOATEDITTEXT 
' *************************************************************
Sub CLAItemEditValueReturnFromEditBox (this1 As EditText)

	ManageFocus(this1)
	MainEditFocusComponent.RequestFocus
	If (LoadingProcess = False) Then
		
		Log("»»»»»»»»»»»»»»»»»»»»»»»»»»  EDIT  «««««««««««««««««««««««««««")
		Dim pan As Panel = this1.Parent
		Dim thisTAG As String = this1.Tag
		Dim New As String = this1.Text
		Dim ThisItemValue As String = New
		'If Not(Utils.isNullOrEmpty(pan.Tag)) And (pan.tag = thisTAG)  Then
		If Not(Utils.isNullOrEmpty(this1.Tag)) Then
			Dim Columns As List = Regex.Split("\|", thisTAG) 'this.tag )
			If (Columns.Size > 1) Then
				
				Dim request_tagcode As String = Columns.Get(0)
				Dim action_tagcode As String = Columns.Get(1)
				Dim task_tagcode As String = Columns.Get(2)
				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
				Dim tagcode As String = Columns.Get(5)
				'					Dim val As Int = Columns.Get(6)
				'					Dim StatusIcon As Int = Columns.Get(7)
				Dim repeatcounter As Int = Columns.Get(9)
				Dim repeatitemcounter As Int = Columns.Get(10)
				Dim repeatfieldcounter As Int = Columns.Get(11)
				Dim sACLADatetime As String = Utils.GetCurrDatetime
				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
				
				Dim DoNotChangeValue As Boolean = (DBStructures.GetScriptColumnIntEVC($"select count(0) as total
											from dta_requests_values_adds where 1=1
											and request_tagcode='${request_tagcode.Trim}' 
											and task_tagcode='${task_tagcode.Trim}' 
											and item_tagcode='${item_tagcode.Trim}' 
											And repeatcounter=${repeatcounter}
											and repeatitemcounter=${repeatitemcounter}
											and fieldval_03='1'"$, "total") > 0)
				If Not(DoNotChangeValue) Then
					Dim SetInner As Int = 0
					Try
						Dim lbl As Label = pan.GetView(0)
						If (Utils.NNE(lbl.Text)) Then
							If (lbl.Tag = 1) Then
								Dim sSQLw As String = $"update dta_requests_relations set inner_title='${New}'
							where request_tagcode='${request_tagcode.trim}' 
							and relation_tagcode='${task_tagcode.trim}' 
							and repeatcounter=${repeatcounter}"$
								Utils.SaveSQLToLog("CLAItemEditValue_FocusChanged",sSQLw, request_tagcode)
								'Starter.LocalSQLEVC.ExecNonQuery(sSQLw)
								SetInner = 1
							End If
						End If
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
					End Try
					PressedAnswerTagCode = tagcode
					Dim Continuar As Boolean = True
				
					Dim panpan As Panel = this1.Parent
					Dim thisCLAItem As RequestCLAItem
					thisCLAItem.Initialize
					Try
						Dim thisCLAItem As RequestCLAItem = panpan.tag
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
						Continuar = False
					End Try
				
					Continuar = (Continuar) And (thisCLAItem Is RequestCLAItem)
				
					If Continuar Then
						Dim force_control As Int = 0
						Dim type_control As Int = 0
						Dim relUniqueKey As String = ""
			
						If (thisCLAItem.IsInitialized) Then
							If (Utils.NNE(thisCLAItem.Request)) Then
								Dim relUniqueKey As String = Utils.IfNullOrEmpty(thisCLAItem.TaskInfo.dependent_key, "")
								Dim force_control As Int = thisCLAItem.TaskInfo.force_control
								Dim type_control As Int = thisCLAItem.TaskInfo.type_control '1|2|3
							End If
						End If
	
						Dim status As Int = 0
						If Utils.NNE(New) Then
							status = 1
					
							If (force_control=1) And (type_control=1) Then
								Dim sSQLcheck As String = $"select execute_value from dta_requests_values where 1=1
						and request_tagcode='${request_tagcode.trim}'
						and task_tagcode='${task_tagcode.trim}' 
						and item_tagcode='${item_tagcode.trim}' 
						and unique_key='${relUniqueKey.Trim}'
						and repeatcounter=${repeatcounter}
						and repeatitemcounter=${repeatitemcounter}
						and repeatfieldcounter=${repeatfieldcounter}"$
						
								Dim recrec As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQLcheck)
								If recrec.RowCount > 0 Then
									recrec.Position = 0
									Dim compValue As String = Utils.IfNullOrEmpty(recrec.GetString("execute_value"), "")
									If Not(New = compValue) Then
										this1.Color = Colors.Red
										this1.TextColor = Colors.White
									Else
										this1.Color = Colors.Green
										this1.TextColor = Colors.White
									End If
								End If
							End If
					
						End If
						Try
						
							SetMandatoryValue(item_tagcode.Trim, Utils.Int2Bool(status))
							Dim sSQL As String = $"update dta_requests_values set execute_value='${New}',
							execute_status='${status}', 
							execute_datetime='${sACLADatetime}', 
							execute_latitude='${sACLALatitude}', execute_longitude='${sACLALongitude}'
							where request_tagcode='${request_tagcode.Trim}' and
							task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
							unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
					
							Log(sSQL)
							Utils.SaveSQLToLog("CLAItemEditValue_FocusChanged",sSQL, request_tagcode)
							'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
							Dim params As Map
							params.Initialize
							params.Clear
							params.Put("_token", ShareCode.APP_TOKEN)
							params.Put("ACLARequest", request_tagcode)
							params.Put("ACLAAction", action_tagcode)
							params.Put("ACLATask", task_tagcode)
							params.Put("ACLAItem", item_tagcode)
							params.Put("ACLAUniqueKey", uniquekey)
							params.Put("ACLATagcode", tagcode)
							params.Put("ACLAValue", New)
							params.Put("ACLAReqCounter", repeatcounter)
							params.Put("ACLARepeatItem", repeatitemcounter)
							params.Put("ACLARepeatField", repeatfieldcounter)
							params.Put("ACLAInner", SetInner)
			
							params.Put("ACLADatetime", sACLADatetime)
							params.Put("ACLALatitude", sACLALatitude)
							params.Put("ACLALongitude", sACLALongitude)
				
							Dim ACLSessUser As String = ShareCode.SESS_OPER_User
							Dim ACLClear As Int = 0
							params.Put("ACLSessUser", ACLSessUser)
							params.Put("ACLClear", ACLClear)
							params.Put("versionTagcode", Main.VersionTagcode)
							params.Put("_authorization", Main.DeviceAuthorization)
							params.Put("_instance", Main.DeviceInstance)
							params.put("_deviceBrand", Main.DeviceBrand)
							params.put("_deviceModel", Main.DeviceModel)
							params.put("_deviceMacAddress", Main.DeviceMacAddress)
							params.Put("_user", ShareCode.SESS_User)
							Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
							If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
								If Not(ShareCode.APP_WORKING_LOCAL) Then
									Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
									Wait For (GODR) Complete (HasResults As Boolean)
									If HasResults Then
										Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
										Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
									Else
										Utils.CallApi(0, params, Me, Url, "", request_tagcode)
									End If
								Else
									Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
									Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
								End If
								Sleep(250)
							Else
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.trim, item_tagcode.trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							End If
						
							'******************************************************************************
							'	CONTROLO DE ACAIL
							'******************************************************************************
							If (uniquekey.trim = "ad997355-0c5c-57a1-86ab-16aea41a974c") Or _
						(uniquekey.trim = "fe883a15-4df5-50b6-8eba-31b15564cddc") Or _
						(uniquekey.trim = "3c335a96-fc34-5bc8-b286-d61730eafe7c") Then
								Dim ContinuaAcail As Boolean = True
								Try
									Dim valueAcail As Int = New
								Catch
									ContinuaAcail = False
								End Try
						
								If (ContinuaAcail) Then
									If valueAcail >= 90 Then
										Dim backColor As Int = Consts.ColorGreen
										Dim fontColor As Int = Colors.Black
									Else
										Dim backColor As Int = Consts.ColorRed
										Dim fontColor As Int = Consts.ColorWhite
									End If
									this1.Color = backColor
									this1.TextColor = fontColor
								End If
						
							else If (uniquekey.trim = "0f89b48e-9214-560d-a056-77aa23e5e90c") Then
								Dim ContinuaAcail As Boolean = True
								Try
									Dim valueAcail As Int = New
								Catch
									ContinuaAcail = False
								End Try
						
								If (ContinuaAcail) Then
									If (valueAcail >= 5) And (valueAcail<=7) Then
										Dim backColor As Int = Consts.ColorGreen
										Dim fontColor As Int = Colors.Black
									Else
										Dim backColor As Int = Consts.ColorRed
										Dim fontColor As Int = Consts.ColorWhite
									End If
									this1.Color = backColor
									this1.TextColor = fontColor
						
								End If
						
							else If (uniquekey.trim = "3ff65480-d44f-50e3-9f21-3c7644c921be") Then
								Dim ContinuaAcail As Boolean = True
								Try
									Dim valueAcail As Int = New
								Catch
									ContinuaAcail = False
								End Try
						
								If (ContinuaAcail) Then
									If (valueAcail > 2) Then
										Dim backColor As Int = Consts.ColorGreen
										Dim fontColor As Int = Colors.Black
									Else
										Dim backColor As Int = Consts.ColorRed
										Dim fontColor As Int = Consts.ColorWhite
									End If
									this1.Color = backColor
									this1.TextColor = fontColor
						
								End If
						
							else If (uniquekey.trim = "20191212-ctrl-upup-0002-201912120002") Then
								EditBoxChangeColor(New, "[tv]>2", this1)
							else If (uniquekey.trim = "20191212-ctrl-down-0002-201912120002") Then
								EditBoxChangeColor(New, "[tv]<2", this1)
							End If
						
						
							'******************************************************************************
							'	CONTROLO DE EVENTOS E ENTRADA DE DADOS POR PARAMTERS
							'******************************************************************************
							Dim paramters As String = Utils.IfNullOrEmpty( _
													DBStructures.GetScriptColumnStrEVC( _
														$"select paramters from dta_tasks_items_adds
														where task_tagcode='${task_tagcode.Trim}' 
															and item_tagcode='${item_tagcode.Trim}' 
															and unique_key='${uniquekey.Trim}'"$, "paramters"), "")
							
							If Utils.NNE(paramters) Then
								Dim parser As JSONParser
								parser.Initialize(paramters)
								Dim root As Map = parser.NextObject
							
								Dim inputcontrol As List = root.Get("inputcontrol")
								For Each colinputcontrol As Map In inputcontrol
									Dim actiontype As Int = colinputcontrol.Get("actiontype")
									Dim strmaxvalue As String = colinputcontrol.Get("maxvalue")
									Dim typecontrol As Int = colinputcontrol.Get("typecontrol")
									Dim actiontagcode As String = colinputcontrol.Get("actiontagcode")
									Dim formula As String = colinputcontrol.Get("formula")
									Dim actiongroup As String = colinputcontrol.Get("actiongroup")
									Dim actiononout As Int = colinputcontrol.Get("actiononout")
									Dim strminvalue As String = colinputcontrol.Get("minvalue")
								
									Dim actionresult As Int = Utils.IfNullOrEmpty(colinputcontrol.Get("actionresult"), "0")
									Dim actionforce As Int = Utils.IfNullOrEmpty(colinputcontrol.Get("actionforce"), "0")
								
									Dim respNC As Boolean = False
									If (typecontrol >= 1) Then
										If (typecontrol=1) Then
											Dim minvalue As Double = strminvalue.Replace(",",".")
											Dim maxvalue As Double = strmaxvalue.Replace(",",".")
											Dim form1 As String = $"[tv]>=${minvalue}&&[tv]<=${maxvalue}"$
											respNC = Not(EditBoxChangeColor(New, form1, this1))
										else if (typecontrol=2) Then
											respNC = Not(EditBoxChangeColor(New, formula, this1))
										End If
									
										Try
											Dim conformity As Int = colinputcontrol.Get("conformity")
											If Utils.Int2Bool(conformity) Then
												Dim conformity_settings As Map = colinputcontrol.Get("conformity_settings")
												Dim conformity_on As Int = conformity_settings.Get("conformity_on")
												Dim nonconformity_on As Int = conformity_settings.Get("nonconformity_on")
									
												If Utils.Int2Bool(conformity_on) And respNC Then
													Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC)
												else if Utils.Int2Bool(nonconformity_on) And Not(respNC) Then
													Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC) + 1
												End If
											End If
										Catch
											Log(LastException)
											Utils.WriteErrors2Log(LastException)
											Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC) + 1
										End Try
									
										Try
											Dim active_inactive As Int = colinputcontrol.Get("active_inactive")
											Dim active_inactive_settings As List = colinputcontrol.Get("active_inactive_settings")
											For Each col_active_inactive As Map In active_inactive_settings
												Dim item_tagcode As String = col_active_inactive.Get("item_tagcode")
												Dim active_color As String = col_active_inactive.Get("active_color")
												Dim inactive_color As String = col_active_inactive.Get("inactive_color")
													
												For i =0 To ComponentList.Size -1
													Dim ClItem As ComponentRecords = ComponentList.Get(i)
													If ClItem.item_tagcode = item_tagcode Then
														Dim View2Process As B4XView = ClItem.component
														If View2Process Is Panel Then
															Dim pnlB4x As Panel = View2Process
															Dim res As ResumableSub = ChangeComponent(item_tagcode,"ENABLE","",active_inactive)
															wait for (res) Complete (Finished As Boolean)
															If active_inactive = 1 Then
																If Utils.NNE(active_color) Then
																	Dim ColorACTIVE As Int = Utils.ColorString(active_color.ToUpperCase)
																Else
																	Dim ColorACTIVE As Int = Colors.White
																End If
																Dim res As ResumableSub = ChangeComponent(item_tagcode, "COLOR","", ColorACTIVE)
																wait for (res) Complete (Finished As Boolean)
															else If active_inactive = 0 Then
																If Utils.NNE(inactive_color) Then
																	Dim ColorINACTIVE As Int = Utils.ColorString(inactive_color.ToUpperCase)
																Else
																	Dim ColorINACTIVE As Int = Colors.LightGray
																End If
																Dim res As ResumableSub = ChangeComponent(item_tagcode, "ENABLE","", ColorACTIVE)
																wait for (res) Complete (Finished As Boolean)
															End If
														End If
													End If
												Next
											Next
										Catch
											Log(LastException)
											Utils.WriteErrors2Log(LastException)
										End Try
									
									
										Dim Req2Pass As RequestCLAItem = Types.MakeRequestCLAItem(request_tagcode,action_tagcode,task_tagcode,item_tagcode,uniquekey, _
										tagcode, repeatcounter,repeatitemcounter,repeatfieldcounter,"","","",0,0,0,"",DBStructures.DB2CLATaskItem("", ""),"")
 
										Dim RSub As ResumableSub = InputControlNextEval(pan,Req2Pass,fieldconfirm_nc,sACLADatetime,sACLALatitude,sACLALongitude, _
										actiononout,actiontype,respNC,actionresult,actiontagcode,actiongroup,actionforce)
										wait for (RSub) Complete (ReturnVal As Boolean)
						
									End If
								Next
							End If
						
							'******************************************************************************
							'	CONTROLO DE EVENTOS
							'******************************************************************************
							If (NONCLICK = 0) Then
								Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
									$"select distinct paramters 
									from dta_tasks_items_adds where 1=1
									And task_tagcode='${task_tagcode.trim}'
									And item_tagcode='${item_tagcode.trim}'
									And unique_key='${uniquekey.trim}'"$, "paramters")	
	
								Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
								And task_tagcode='${task_tagcode.trim}'
								And item_tagcode='${item_tagcode.trim}'
								And unique_key='${uniquekey.trim}'
								And tagcode='${tagcode.trim}'
								Order by position"$  
								Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
								If Eventos.RowCount >= 1 Then
									For n=0 To Eventos.RowCount-1
										Eventos.Position = n
				
										Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
	
										If (evt.type_item = 9) Then
											ControlUpdateRequestField(pan.Tag, evt.value, New)
										Else
											If (Utils.Int2Bool(evt.is_status)) Then
												If (Utils.Int2Bool(evt.have_condition) And Utils.Int2Bool(evt.have_status)) Then
													ForceTerminateChecklistAndCreate(evt.value)
												Else
													ForceTerminateChecklist(evt.value)
												End If
											else if (Utils.Int2Bool(evt.is_foto)) Then
												ForceTakePicture(pan.Tag)
											else if (Utils.Int2Bool(evt.is_more)) Then
												ForceAddMore(pan.Tag)
											else if (Utils.Int2Bool(evt.is_action)) Then
												'ForceAddAction(pan.Tag)
												If Utils.NNE(evt.value) Then
													ForceAddActionTPA(pan.Tag, evt.value, "", 0)
												Else
													ForceAddAction(pan.Tag)
												End If
											else if (Utils.Int2Bool(evt.is_jump)) Then
												ForceAddJump(evt.value)
											else if ((Utils.Int2Bool(evt.is_alert)) Or (Utils.Int2Bool(evt.is_email))) Then
											else if ((Utils.Int2Bool(evt.request_signature)) Or ((evt.event_tagcode = "EVENTTASK_SIGNATURE") And (evt.type_item = 4))) Then
												ForceAddSignature(pan.Tag)
											else if (Utils.Int2Bool(evt.have_formula) And (evt.type_item = 2)) Then
												Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
												item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
												Wait For(res) Complete (retAPI As ExternalDocsInfo)
												If(retAPI.status = 1) Then
													Log($"Missing File downloaded"$)
													'													Dim pp As B4XView = this.Parent
													'													Dim ppp As B4XView = pp.Parent
													'													For Each v As B4XView In ppp.GetAllViewsRecursive
													'														If (v Is Label) Then
													'															Dim lbl As Label = v
													'															lbl.Invalidate
													'														End If
													'													Next
												End If
											else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
												Dim bullet_master As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
												Dim bullet_child As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
												SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, False)
											else if ((evt.event_tagcode = "EVENTTASK_MANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
												Dim bullet_master As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
												Dim bullet_child As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
												SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, True)
											else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYALLDOWN") And (evt.type_item = 7)) Then
												SetMandatoryStateAfterItem(item_tagcode.trim, False)
											else if ((evt.event_tagcode = "EVENTTASK_MANDATORYALLDOWN") And (evt.type_item = 7)) Then
												SetMandatoryStateAfterItem(item_tagcode.trim, True)
											else if ((evt.event_tagcode = "EVENTTASK_INTEGRATION") And (evt.type_item = 8)) Then
												Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
												item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
												Wait For(res) Complete (retAPI As ExternalDocsInfo)
												If(retAPI.status = 1) Then
													Log($"Missing File downloaded"$)
												End If
											else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTER") And (evt.type_item = 30)) Then
'												Dim ItemTagCode As String = item_tagcode.Trim
'												Dim valorVerificar As String = ""
'												If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
'													ItemTagCode = evt.value.Trim
'												End If
'												Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
'												Wait For(res) Complete (retval As Int)
'												valorVerificar = retval
'			
'												Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
'													repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
'												Wait For(res1) Complete (retbool As Boolean)
												Dim ContinuarCheck As Boolean = True
												If (Utils.NNE(ThisItemValue) And Utils.isNumeric(ThisItemValue) And Utils.Int2Bool(evt.have_status)) Then
													ContinuarCheck = False ' JÁ TEM VALOR
												End If
			
												If (ContinuarCheck) Then
													Dim ItemTagCode As String = item_tagcode.Trim
													Dim valorVerificar As String = ""
													If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
														ItemTagCode = evt.value.Trim
													End If
													Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
													Wait For(res) Complete (retval As Int)
													valorVerificar = retval
				
													ThisItemValue = valorVerificar
			
													Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
														repeatcounter, repeatitemcounter, repeatitemcounter, ThisItemValue)
													Wait For(res1) Complete (retbool As Boolean)
												End If
			
'												If (Utils.NNE(ThisItemValue)) Then
'													If (this Is B4XStateButton) And (evt.have_condition=9) Then
'														Dim b4xsb_this As B4XStateButton = this
'														b4xsb_this.Text = ThisItemValue
'													End If
'												End If
											else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTEROTHER") And (evt.type_item = 31)) Then
												'*******************************************************************************************************
												' NOTE: A MESMA FUNCIONALIDADE SÓ QUE PERMITE INDICAR OUTRO ITEM_TAGCODE QUE VAI RECEBER O RESULTADO
												'*******************************************************************************************************
												Dim ItemTagCode As String = item_tagcode.Trim
												Dim OtherValue As String = ""
												Dim valorVerificar As String = ""
												If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
													ItemTagCode = evt.value.Trim
												End If
												If (Utils.NNE(evt.formula)) Then
													OtherValue = evt.formula.Trim
												End If
												Dim res As ResumableSub = CLAIGetSetExternalCounterOther(task_tagcode, ItemTagCode, ThisItemValue, OtherValue, evt)
												Wait For(res) Complete (retval As Int)
												valorVerificar = retval
			
												Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, OtherValue, uniquekey, PressedAnswerTagCode, _
													repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
												Wait For(res1) Complete (retbool As Boolean)
			
											End If
										End If
				
									Next
								End If
							End If
						
					
						Catch
							Log(LastException)
							Utils.WriteErrors2Log(LastException)
						End Try
					End If
				End If

			End If

		End If
	End If
	NONCLICK = 0
	'	ProgressDialogHide
End Sub



Sub EditTextBoxChangeColor(New As String, Condition As String, this As EditText) As Boolean
	Dim resultado As Boolean = False
	Dim ContinuaTeste As Boolean = True
	Try
		Dim valueTest As Int = New
	Catch
		ContinuaTeste = False
	End Try
							
	If (ContinuaTeste) Then
		If (Utils.Test4True(valueTest, Condition,this)) Then
			Dim backColor As Int = Consts.ColorGreen
			Dim fontColor As Int = Colors.Black
			resultado = True
		Else
			Dim backColor As Int = Consts.ColorRed
			Dim fontColor As Int = Consts.ColorWhite
		End If
		this.Color = backColor
		this.TextColor = fontColor
							
	End If
	Return resultado
End Sub

Sub FloatEditBoxChangeColor(New As String, Condition As String, this As FloatLabeledEditText) As Boolean
	Dim resultado As Boolean = False
	Dim ContinuaTeste As Boolean = True
	Try
		Dim valueTest As Double = New
	Catch
		ContinuaTeste = False
	End Try
							
	If (ContinuaTeste) Then
		If (Utils.Test4True(valueTest, Condition, this)) Then
			Dim backColor As Int = Consts.ColorGreen
			Dim fontColor As Int = Colors.Black
			resultado = True
		Else
			Dim backColor As Int = Consts.ColorRed
			Dim fontColor As Int = Consts.ColorWhite
		End If
		this.Color = backColor
		this.EditText.TextColor = fontColor
							
	End If
	Return resultado
End Sub

Sub EditBoxChangeColor(New As String, Condition As String, this1 As EditText) As Boolean
	Dim resultado As Boolean = False
	Dim ContinuaTeste As Boolean = True
	Try
		Dim valueTest As Double = New
	Catch
		ContinuaTeste = False
	End Try
							
	If (ContinuaTeste) Then
		If (Utils.Test4True(valueTest, Condition, this1)) Then
			Dim backColor As Int = Consts.ColorGreen
			Dim fontColor As Int = Colors.Black
			resultado = True
		Else
			Dim backColor As Int = Consts.ColorRed
			Dim fontColor As Int = Consts.ColorWhite
		End If
		this1.Color = backColor
		this1.TextColor = fontColor
							
	End If
	Return resultado
End Sub

Sub SeekbarChangeColor(New As String, Condition As String, this As SeekBar) As Boolean
	Dim resultado As Boolean = False
	Dim ContinuaTeste As Boolean = True
	Try
		Dim valueTest As Double = New
	Catch
		ContinuaTeste = False
	End Try
							
	If (ContinuaTeste) Then
		If (Utils.Test4True(valueTest, Condition, this)) Then
			Dim backColor As Int = Consts.ColorGreen
			resultado = True
		Else
			Dim backColor As Int = Consts.ColorRed
		End If
		this.Color = backColor
							
	End If
	Return resultado
End Sub

' *************************************************************
' TIP: PROCEDIMENTO DE ENVIO DE EMAIL PELO BO
' *************************************************************
Sub RequestEmailFromBO(NRequest As String, EmailsTO As String, EmailsCC As String, subject As String, detail As String ,sendBCC As String) As ResumableSub
	
	EmailsTO = EmailsTO.Replace(";;", ";")
	EmailsTO = EmailsTO.Replace(",", ";")
	EmailsTO = EmailsTO.Replace("|", ";")
	EmailsTO = EmailsTO.Replace(" ", "")

	EmailsCC = EmailsCC.Replace(";;", ";")
	EmailsCC = EmailsCC.Replace(",", ";")
	EmailsCC = EmailsCC.Replace("|", ";")
	EmailsCC = EmailsCC.Replace(" ", "")
	
	Dim ServerAddress As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/cla/send/email"$
	Dim JobEmail As HttpJob
	JobEmail.Initialize("",Me)
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token",ShareCode.APP_TOKEN)
	params.Put("request",NRequest)
	params.Put("emailsTO",EmailsTO)
	params.Put("emailsCC",EmailsCC)
	params.Put("subject", subject)
'	params.Put("detail", detail)
	params.Put("date",Utils.GetCurrDatetime)
	params.Put("user", ShareCode.SESS_OPER_User)
	params.Put("SendBCC", sendBCC)
	params.Put("debug", 0)
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim JSON As JSONGenerator
	JSON.Initialize(params)
    
	Dim data As String = JSON.ToPrettyString(1)
	
	Utils.ShowProcinLog("CheckList3","RequestEmailfromBO",data)
	
	'SUBSTITUIR O QUE EST ABAIXO - NOVA ESTRUTURA NO RequestEmailFromBO do Reportview
	
	JobEmail.PostString(ServerAddress, data)
	JobEmail.GetRequest.SetContentType("application/json")
	JobEmail.GetRequest.Timeout = 90000
	ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
	Sleep(150)
	Wait For (JobEmail) JobDone(JobEmail As HttpJob)
	
	ProgressDialogHide
	
	If JobEmail.Success Then
		Dim JsonStruct As String=""
		Try
			JsonStruct = JobEmail.GetString
			Dim parser As JSONParser
			parser.Initialize(JsonStruct)
			Dim root As Map = parser.NextObject
			Dim Status As String = root.Get("status")
			Dim Message As String = root.Get("message")
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		
		If Status = "1" Then
			ShareCode.EML_RESULT = "SUCESSO"
		Else
			ShareCode.EML_RESULT = "ERRO"
		End If
		
		Utils.ShowProcinLog("CheckList3","RequestEmailfromBO","Success")
		Dim Eml_result_Text As String = $"${NRequest} - ${ShareCode.EML_RESULT}${CRLF}${EmailsTO}"$
		CreateEmailAlert(Eml_result_Text)
		MsgboxAsync("Verifique o estado do envio em Alertas, no Menu principal",ShareCode.GeneralInfoTitle)
		Return True
	Else
		Log(JobEmail.ErrorMessage)
		Utils.ShowProcinLog("CheckList3","RequestEmailfromBO","JOB ERROR")
		Utils.logError("CheckList3", ShareCode.SESS_User, JobEmail.ErrorMessage)
		Return True
	End If
	JobEmail.Release
End Sub

Sub CreateEmailAlert(Alert_Text As String)
	Dim mID As Int = DBStructures.GetMaxOfEVC("dta_alerts", "id", "") + 1+ 1000000
	Dim alerttagcode As String = $"${Utils.GenerateTagcode("ALERTINF_")}"$
	Dim sSQL As String = $"insert into dta_alerts (id, tagcode, relation_tagcode, relation_type, alert_type, internal,
							origin, title, user_tagcode, date_alert, date_verification, active,alert_visible, status_id, kind_data)
							values (${mID}, '${alerttagcode}', '', 'ALRTREL_REQUESTS', 'ALRTTYP_NOTIFY', 1, 1, '${Alert_Text}', 
	'${ShareCode.SESS_User}', '${Utils.GetCurrentDate}', '', 1, 1, 0, 0)"$
	Utils.SaveSQLToLog("butSavePicture_Click",sSQL, "")
	CallSub(MainMenu,"BadgeCheckUpdate")
End Sub

Sub SendReportEmailExt(EmailTo As String, EmailCC As String, Subject As String, Details As String, fileName As String)
	Dim eSMTP As SMTP
	eSMTP.Initialize($"mail.${ShareCode.APPL_HOST}"$, 587, $"alertas@${ShareCode.APPL_HOST}"$, "..Alertas@VRCG_20!9", "eSMTPReturn")
	eSMTP.StartTLSMode = True
	eSMTP.HtmlBody = True
	eSMTP.To.AddAll(Regex.Split("\;", EmailTo ))
	eSMTP.CC.AddAll(Regex.Split("\;", EmailCC ))
	eSMTP.Subject = Subject
	eSMTP.Body = Details
	eSMTP.AddAttachment(Starter.SharedFolder, fileName)
	eSMTP.Send
End Sub

Sub eSMTPReturn_MessageSent(Success As Boolean)
	Log("SMTP send: " & Success )
	If Success Then
		ToastMessageShow(ShareCode.AvisoToastEmailSent,True)
	Else
		ToastMessageShow(ShareCode.AvisoToastEmailNotSent,True)
		Log(LastException.Message)
	End If
End Sub

Sub GetPressedAnswerTagCode(CLAItem As RequestCLAItem) As String 
	Dim sSQL As String = $"select a.tagcode from  dta_requests_values as a where 1=1 
						and a.request_tagcode='${CLAItem.Request.trim}' 
						and a.inner_request_tagcode='${CLAItem.Action.trim}' 
						and a.task_tagcode='${CLAItem.Task.trim}'
						and a.item_tagcode='${CLAItem.Item.trim}' 
						and a.unique_key='${CLAItem.UniqueKey.trim}'
						and a.execute_status=1
						and a.repeatcounter=${CLAItem.RepeatCounter}
						and a.repeatitemcounter=${CLAItem.RepeatItemCounter}
						and a.repeatfieldcounter=${CLAItem.repeatfieldcounter}"$
						
	Dim ret As String = DBStructures.GetScriptColumnStrEVC(sSQL, "tagcode")
	Return ret
End Sub

Sub Return2CLAI(CLAItem As RequestCLAItem, TabPos As Int)
	Dim Filter As AppActionDialogs
	Filter.Initialize
	Filter.GetMoreActionsDialog(Activity, "CheckList3", CLAItem, TabPos, "", MainObservations, 0, GetPressedAnswerTagCode(CLAItem), "", "",0)
End Sub

Sub ReturnFromCLAI
	WindowStatusUpdate
	PressedAnswerTagCode=""
End Sub


' *************************************************************
' TIP: RETORNA LISTA DE IMAGENS DA PERGUNTA
' *************************************************************
Sub FINItemImages_ItemClick (Index As Int, Value As Object)
	Try
		
		Dim pnl As Panel = FINItemImages.GetPanel(Index)
		'p.Tag = $"${tagcode}|${kind_data}|${id}"$
		Dim this As RequestCLAItem = pnl.Tag
		Dim info As List = Regex.Split("\|", pnl.tag )
		Dim fname As Label = pnl.GetView(2)
		'	Dim tagcode As String = info.Get(0)
		'	Dim val As Int = info.Get(1)
		'
		'	If (val = 0) Then
		Dim imgdata As ImageViewData = Types.MakeImageViewDataClear
		Dim imgList As List
		imgList.Initialize
		Private Record As Cursor
		'		ItemsCounter = 0

		Dim SQL As String = $"select id,tagcode,imageb64,imagename from dta_requests_values_images where request_tagcode='${this.Request}' and task_tagcode='${this.Task}' and
										item_tagcode='${this.Item}' and unique_key='${this.UniqueKey}' and tagcode='${this.Tagcode}' and imagename='${fname.Text}'
										And repeatcounter=${this.RepeatCounter}
										And repeatitemcounter=${this.RepeatItemCounter}"$
		Log(SQL)
		Record = Starter.LocalSQLEVC.ExecQuery(SQL)
		
		Dim nRows As Int = Record.RowCount
		If nRows > 0 Then
			For Row = 0 To Record.RowCount-1
				'				ItemsCounter = ItemsCounter + 1
				Record.Position = Row
				Dim imgdata As ImageViewData = Types.MakeImageViewData(Record.GetString("imageb64"), Record.GetString("imagename"))
				imgList.Add(imgdata)
			Next
		Else
			imgList.Add(imgdata)
		End If
		Record.Close

		If Utils.NNE(imgdata.b64) Then
			Dim Filter As AppDialogs
			Filter.Initialize
			Filter.getShowImageViewListDialog(Me, imgList)
		End If
		'	End If

	Catch
		Log(LastException.Message)
	End Try
End Sub

Sub ShowImage_Click
	
End Sub

Sub ShowImage_LongClick
	Dim imgv As ImageView = Sender
	Dim imgdata As ImageViewData = imgv.Tag 'ImageViewData
	Dim Filter As AppDialogs
	Filter.Initialize
	Filter.getShowImageViewDialog(Me, imgdata.filename, imgdata.b64, imgdata.filename)
End Sub

' *************************************************************
' TIP: GRAVA OBSERVAÇÕES FINAIS NA INTERVENÇÃO/CHECKLIST
' *************************************************************
Sub saveFinalObs As ResumableSub
'	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Dim Continuar As Boolean = True
	Dim valor As String = ""
	Try
		Dim valor As String = FinalObs.Text
		Dim sSQL As String = $"update dta_requests_relations set request_obs='${valor}' where request_tagcode='${CurrentCLA.Request.Trim}'
				and relation_tagcode='${CurrentCLA.Action.Trim}' and repeatcounter=${CurrentCLA.RepeatCounter}"$
		Utils.SaveSQLToLog("saveFinalObs",sSQL, CurrentCLA.Request)
		'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
		Continuar = False
	End Try
	
	If (Continuar) Then
		
		Dim sACLADatetime As String = Utils.GetCurrDatetime
		Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
		Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
		Dim params As Map
		params.Initialize
		params.Clear
		params.Put("_token", ShareCode.APP_TOKEN)
		params.Put("ACLARequest", CurrentCLA.Request)
		params.Put("ACLAUser", ShareCode.SESS_OPER_User)
		params.Put("ACLAExecDate", sACLADatetime)
		params.Put("ACLADatetime", sACLADatetime)
		Try
			params.Put("ACLALatitude", sACLALatitude)
			params.Put("ACLALongitude", sACLALongitude)
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
			params.Put("ACLALatitude", "")
			params.Put("ACLALongitude", "")
		End Try
	
		params.Put("ACLAAction", CurrentCLA.Action.trim)
		params.Put("ACLAReqCounter", CurrentCLA.RepeatCounter)
		params.Put("ACLAObs", valor)
		params.Put("versionTagcode", Main.VersionTagcode)
		params.Put("_authorization", Main.DeviceAuthorization)
		params.Put("_instance", Main.DeviceInstance)
		params.put("_deviceBrand", Main.DeviceBrand)
		params.put("_deviceModel", Main.DeviceModel)
		params.put("_deviceMacAddress", Main.DeviceMacAddress)
		params.Put("_user", ShareCode.SESS_User)
		Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clarel/obs/update"$
		If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
			If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
				Utils.CallApi(0, params, Me, Url, "", CurrentCLA.Request.Trim)
			Else
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.Request.Trim,"","")
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			End If
			Sleep(500)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.Request.Trim,"","")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If

	End If
	
	Return True
'	ProgressDialogHide
End Sub

' *********************************************************************
' TIP: GRAVA OBSERVAÇÕES FINAIS DA INTERVENÇÃO/CHECKLIST NO SERVIDOR
' *********************************************************************
Sub saveFinalObsSend2Server(valor As String) As ResumableSub
	
	Dim sACLADatetime As String = Utils.GetCurrDatetime
	Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
	Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLARequest", CurrentCLA.Request)
	params.Put("ACLAUser", ShareCode.SESS_OPER_User)
	params.Put("ACLAExecDate", sACLADatetime)
	params.Put("ACLADatetime", sACLADatetime)
	Try
		params.Put("ACLALatitude", sACLALatitude)
		params.Put("ACLALongitude", sACLALongitude)
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
		params.Put("ACLALatitude", "")
		params.Put("ACLALongitude", "")
	End Try
	
	params.Put("ACLAAction", CurrentCLA.Action.trim)
	params.Put("ACLAReqCounter", CurrentCLA.RepeatCounter)
	params.Put("ACLAObs", valor)
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clarel/obs/update"$
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
			Utils.CallApi(0, params, Me, Url, "", CurrentCLA.Request.Trim)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.Request.Trim,"","")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(500)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.Request.Trim,"","")
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If

	Return True
	
End Sub

Sub FinalObs_FocusChanged (HasFocus As Boolean)
	If Not(HasFocus) Then
		Dim SaveObs As ResumableSub = saveFinalObs
		wait for (SaveObs) Complete (Finished As Boolean)
	End If
End Sub


' ************************************************************************
' ASSOCIA OBJECTO À CHECKLIST/INTERVENÇÃO
' ************************************************************************
Sub butAssociateObject_Click

	createObjectPanel.Visible = True
'******************************************************************
'	ALTERACAO PC
'******************************************************************
	If ObjectTypeListView.Size <= 1 Then
		ObjectTypeListView_ItemClick(0,0)
		createObjectConfirmButton_Click
	End If
	
End Sub

' ************************************************************************
' DESASSOCIA OBJECTO DA CHECKLIST/INTERVENÇÃO
' ************************************************************************
Sub butDessociateObject_Click
	
	DessociateObject
	
End Sub

' ************************************************************************
' SELECÇÃO DE OBJECTO
' ************************************************************************
Sub ListItemsList_ItemClick (Index As Int, Value As Object)
	Dim Filter As AppDialogs
	Filter.Initialize
	Filter.getObjectSelectDialog(Activity, "CheckList3", "Selecção de Objecto", 0)
End Sub

' ************************************************************************
' RETORNA OBJECTO SELECCIONADO
' ************************************************************************
Sub ObjectSelected(tagcode As String, Local As Int)
	AssociateObject(tagcode)
End Sub

' ************************************************************************
' ALTERA O OBJECTO ASSOCIADO A CHECKLIST/INTERVENÇÃO
' ************************************************************************
Sub butChangeObject_Click
	
	' VERIFICAR SE PODE ALTERAR O OBJECTO (dta_typerequests_tasks_adds - can_change_object)
	
	Dim typerequest_tagcode As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(typerequest_tagcode, '') as valor
						from dta_requests where tagcode='${CurrentCLA.Request.Trim}'"$, "valor")
						
	Dim can_change_object As Boolean = Utils.Int2Bool(DBStructures.GetScriptColumnIntEVC($"select ifnull(can_change_object, 0) as valor
						from dta_typerequests_tasks_adds where typerequest_tagcode='${typerequest_tagcode}' 
						and task_tagcode='${CurrentCLA.Task.Trim}'"$, "valor"))
	
	If can_change_object = False Then
		MsgboxAsync(ShareCode.checklistavisonaopermitealteracao,ShareCode.GeneralInfoTitle)
		Return
	End If
		
	butAssociateObject_Click
	
	
End Sub

' ************************************************************************
' REMOVE O OBJECTO DA CHECKLIST
' ************************************************************************
' *************************************************************
' TIP: REMOÇÃO DE OBJECTO DA INTERVENÇÃO
' *************************************************************
Sub DessociateObject
	
	' VERIFICAR SE PODE ALTERAR O OBJECTO (dta_typerequests_tasks_adds - can_remove_object)
	
	Dim typerequest_tagcode As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(typerequest_tagcode, '') as valor
						from dta_requests where tagcode='${CurrentCLA.Request.Trim}'"$, "valor")		
	
	Dim can_remove_object As Boolean = Utils.Int2Bool(DBStructures.GetScriptColumnIntEVC($"select ifnull(can_remove_object, 0) as valor
						from dta_typerequests_tasks_adds where typerequest_tagcode='${typerequest_tagcode}' 
						and task_tagcode='${CurrentCLA.Task.Trim}'"$, "valor"))
	
	If can_remove_object = False Then
		MsgboxAsync(ShareCode.checklistavisonaopermiteremocao,ShareCode.GeneralInfoTitle)
		Wait For Msgbox_Result (Result As Int)
		Return
	End If
	
	'retorna a entidade associada
	'*****************************************************************************
	Dim sSql As String = $"select entity_tagcode from dta_requests where tagcode='${CurrentCLA.Request.trim}'"$
	Dim recCheckObj As Cursor = Starter.LocalSQLEVC.ExecQuery(sSql)
	
	Dim entity_tagcode As String = ""
	If recCheckObj.RowCount > 0 Then
		recCheckObj.Position = 0
		Dim entity_tagcode As String = recCheckObj.GetString("entity_tagcode")
	Else
		entity_tagcode = ""
	End If
	recCheckObj.Close

	'retorna o objecto associado
	'*****************************************************************************
	Dim sSql As String = $"select object_tagcode from dta_requests_relations where request_tagcode='${CurrentCLA.Request.trim}'
							and relation_tagcode='${CurrentCLA.Action.trim}'
							and repeatcounter=${CurrentCLA.RepeatCounter}"$
	Dim recCheckObj As Cursor = Starter.LocalSQLEVC.ExecQuery(sSql)
	
	Dim CurrentAttachedObj As String = ""
	If recCheckObj.RowCount > 0 Then
		recCheckObj.Position = 0
		Dim CurrentAttachedObj As String = recCheckObj.GetString("object_tagcode")
	Else
		CurrentAttachedObj = ""
	End If
	recCheckObj.Close
	
	If Utils.NE(CurrentAttachedObj) Or (CurrentAttachedObj = "__NONE__") Then
		MsgboxAsync(ShareCode.checklistavisosemobjectos,ShareCode.GeneralInfoTitle)
		Wait For Msgbox_Result (Result As Int)
		Return
	End If
	
	
	Dim rectst As Cursor = Starter.LocalSQLEVC.ExecQuery("select * from dta_typerequests_tasks_adds")
	If rectst.RowCount > 0 Then
		Log("Existem dados")
	Else
		Log("Base de dados vazia")
	End If
	rectst.Close
	
	
	' 1º passo
	'Verificar se a intervencao é simples ou complexa
	
	'*********************************************************************************
	' tr_is_model = 0-Simplificada, 1-Complexa
	' cl_is_father = 0-Child, 1-Principal
	'*********************************************************************************
	
	Dim sSql As String = $"select ifnull(c.cl_is_father,0) as cl_is_father, ifnull(a.tr_is_model, 0) as tr_is_model, b.task_tagcode from dta_typerequests as a
							inner join dta_typerequests_tasks as b on (b.typerequest_tagcode=a.tagcode)
							left join dta_typerequests_tasks_adds as c on (c.typerequest_tagcode=b.typerequest_tagcode and c.task_tagcode=b.task_tagcode)
							where a.tagcode in (select typerequest_tagcode from dta_requests where tagcode='${CurrentCLA.Request.trim}')
							and b.task_tagcode='${CurrentCLA.Action.trim}'"$
		
	Dim recCheckObj As Cursor = Starter.LocalSQLEVC.ExecQuery(sSql)
	Dim tr_is_model As Boolean = False
	Dim cl_is_father As Boolean = False
	If recCheckObj.RowCount > 0 Then
		recCheckObj.Position = 0
		Dim tr_is_model As Boolean = Utils.Int2Bool(recCheckObj.Getint("tr_is_model"))
		Dim cl_is_father As Boolean = Utils.Int2Bool(recCheckObj.Getint("cl_is_father"))
	Else
		MsgboxAsync(ShareCode.checklisterrodesassociar,ShareCode.GeneralAlertTitle)
		Wait For Msgbox_Result (Result As Int)
		Return
	End If
	recCheckObj.Close

	If (tr_is_model=False) Then 'Se intervencao for simples
		
		Dim sSql As String = $"update dta_requests_relations set object_tagcode='' where request_tagcode='${CurrentCLA.Request.trim}'
							and relation_tagcode='${CurrentCLA.Action.trim}'
							and repeatcounter=${CurrentCLA.RepeatCounter}"$
		
		Utils.SaveSQLToLog("ObjectSelected",sSql, CurrentCLA.Request)
	
		Dim sSql As String = $"update dta_requests set object_tagcode='_NONE_' where tagcode='${CurrentCLA.Request.trim}'"$
		Utils.SaveSQLToLog("ObjectSelected",sSql, CurrentCLA.Request)
	Else 'Se intervencao e complexa
		If (cl_is_father=False) Then ' A checklist não é principal
			Dim sSql As String = $"update dta_requests_relations set object_tagcode='' where request_tagcode='${CurrentCLA.Request.trim}'
							and relation_tagcode='${CurrentCLA.Action.trim}'
							and repeatcounter=${CurrentCLA.RepeatCounter}"$
			
			Utils.SaveSQLToLog("ObjectSelected",sSql, CurrentCLA.Request)
		Else 'a checklist é a principal. Avisa o utilizador e nao altera nada
			MsgboxAsync(ShareCode.checklistavisonaoepossivelremover,ShareCode.GeneralAlertTitle)
			Wait For Msgbox_Result (Result As Int)
			Return
		End If
	End If
		
	'*********************************************************************************
	'efectuar update ao servidor / API
	'*********************************************************************************
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLARequest", CurrentCLA.Request.Trim)
	params.Put("ACLAAction", CurrentCLA.Action.Trim)
	params.Put("ACLAReqCounter", CurrentCLA.RepeatCounter)
	params.Put("ACLAObject", "")
	params.Put("ACLAEntity", entity_tagcode.Trim)
	params.Put("ACLAORemove", 1)
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/cla/object/update"$
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
			Utils.CallApi(0, params, Me, Url, "", CurrentCLA.Request.Trim)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.Request.Trim,CurrentCLA.Action.trim,"")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(500)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.Request.Trim,CurrentCLA.Action.trim,"")
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If
	MsgboxAsync(ShareCode.checklistobjectodesassociado,ShareCode.GeneralInfoTitle)
	Wait For Msgbox_Result (Result As Int)
	'noObjectPanel.Visible = True
	
	clListView.Clear
	FINItemImages.Clear
	FINGroups.Clear
	objectListView.Clear
	ComponentList.Clear
	ActivityStart(CurrentCLA, CurrentEntity)
End Sub

' *************************************************************
' TIP: ASSOCIAÇÃO DE OBJECTO À INTERVENÇÃO
' *************************************************************
Sub AssociateObject(tagcode As String)
'	Dim tagcode As String = butAssociateObject.tag
	If Utils.NNE(tagcode) Then
		ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
		Sleep(150)
		MainObjectTagCode = tagcode.Trim
		Dim sSQL As String = $"select parent_tagcode from dta_objects where tagcode='${tagcode}'"$
		Dim parent_tagcode As String = DBStructures.GetScriptColumnStrEVC(sSQL, "parent_tagcode")
		parent_tagcode = Utils.IfNullOrEmpty(parent_tagcode, tagcode)
		
		Dim typerequest_tagcode As String = DBStructures.GetScriptColumnStrEVC($"select typerequest_tagcode
										from dta_requests where tagcode='${CurrentCLA.Request.trim}'"$, _
										"typerequest_tagcode")
		
		Dim sSQL As String = $"update dta_requests_relations set object_tagcode='${tagcode}' where request_tagcode='${CurrentCLA.Request.trim}'
							and relation_tagcode='${CurrentCLA.Action.trim}' and repeatcounter=${CurrentCLA.RepeatCounter}"$
		Utils.SaveSQLToLog("ObjectSelected",sSQL, CurrentCLA.Request)
		'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
		
		Dim sSQL As String = $"update dta_requests set entity_tagcode='${parent_tagcode.trim}', object_tagcode='${tagcode.trim}' where tagcode='${CurrentCLA.Request.trim}'"$
		Utils.SaveSQLToLog("ObjectSelected",sSQL, CurrentCLA.Request)
		'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
		
		If Utils.NNE(parent_tagcode) Then
			Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests_entities", "id", "") + 1+ 1000000
			Dim newExecution As Map
			newExecution.Initialize
			newExecution.Put("id", maxID)
			newExecution.Put("request_tagcode", CurrentCLA.Request.Trim)
			newExecution.Put("entity_tagcode", parent_tagcode.Trim)
			newExecution.Put("entity_type", "")
			newExecution.Put("ismaster", 0)
			newExecution.Put("active", 1)
			Dim ListOfMaps As List
			ListOfMaps.Initialize
			ListOfMaps.Add(newExecution)
			DBUtils.InsertMaps(Starter.LocalSQLEVC, "dta_requests_entities", ListOfMaps)
		End If
		
		Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests_objects", "id", "") + 1+ 1000000
		Dim newExecution As Map
		newExecution.Initialize
		newExecution.Put("id", maxID)
		newExecution.Put("request_tagcode", CurrentCLA.Request.Trim)
		newExecution.Put("object_tagcode", tagcode.Trim)
		newExecution.Put("ismaster", 0)
		newExecution.Put("active", 1)
		Dim ListOfMaps As List
		ListOfMaps.Initialize
		ListOfMaps.Add(newExecution)
		DBUtils.InsertMaps(Starter.LocalSQLEVC, "dta_requests_objects", ListOfMaps)
		
		' *****************************************************************
		' UPDATE API
		' *****************************************************************
		
		Dim params As Map
		params.Initialize
		params.Clear
		params.Put("_token", ShareCode.APP_TOKEN)
		params.Put("ACLARequest", CurrentCLA.Request.Trim)
		params.Put("ACLAAction", CurrentCLA.Action.Trim)
		params.Put("ACLAReqCounter", CurrentCLA.RepeatCounter)
		params.Put("ACLAObject", tagcode.Trim)
		params.Put("ACLAEntity", parent_tagcode.Trim)
		params.Put("versionTagcode", Main.VersionTagcode)
		params.Put("_authorization", Main.DeviceAuthorization)
		params.Put("_instance", Main.DeviceInstance)
		params.put("_deviceBrand", Main.DeviceBrand)
		params.put("_deviceModel", Main.DeviceModel)
		params.put("_deviceMacAddress", Main.DeviceMacAddress)
		params.Put("_user", ShareCode.SESS_User)
		Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/cla/object/update"$
		
		If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
			If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
				Utils.CallApi(0, params, Me, Url, "", CurrentCLA.Request.Trim)
			Else
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.Request.Trim,CurrentCLA.Action.trim,"")
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			End If
			Sleep(500)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, CurrentCLA.Request.Trim,CurrentCLA.Action.trim,"")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		
		Dim ObjectTag As String = tagcode.Trim
		Dim actionkey As String = CurrentCLA.Action.Trim
		Dim tagcodereq As String = CurrentCLA.Request.Trim
		Dim repeatcounter As Int = CurrentCLA.RepeatCounter
		
		' *****************************************************************
		If Utils.NNE(ObjectTag) And Not(ObjectTag = "__NONE__") Then
			Private Record9 As Cursor
			Dim sSQL As String = $"SELECT b.connectmode, b.connect2data, a.do_name, a.do_field, a.do_is_additional,
										a.task_tagcode, a.item_tagcode, a.unique_key, a.data_type, a.title
										FROM dta_tasks_items AS a
										INNER JOIN dta_tasks AS b ON (b.tagcode=a.task_tagcode)
										WHERE  ((a.do_name <> '' AND a.do_field <> '' AND b.connect2data <> '') or
										 (a.do_name = '__TYPEREQUEST__' AND a.do_field <> '' )) and a.task_tagcode='${actionkey}'"$
			Record9 = Starter.LocalSQLEVC.ExecQuery(sSQL)
			If Record9.RowCount > 0 Then
				For ni = 0 To Record9.RowCount-1
					Record9.Position = ni
					Dim do_name As String = Record9.GetString("do_name")
					Dim do_field As String = Record9.GetString("do_field")
					Dim do_is_additional As Int = Record9.GetInt("do_is_additional")
					Dim task_tagcode As String = Record9.GetString("task_tagcode")
					Dim item_tagcode As String = Record9.GetString("item_tagcode")
					Dim unique_key As String = Record9.GetString("unique_key")

						Dim actuliza As Boolean = False
						
					If (do_name.ToUpperCase = "__TYPEREQUEST__") Then
						'VERIFICA SE OS CAMPOS FORAM LANÇADOS
						If (tagcodereq.StartsWith("IE_")) Then
							Dim insSQL As String = $"insert into dta_requests_fields (id, request_tagcode, field_tagcode)
														Select id, '${tagcodereq}' as request_tagcode, field_tagcode 
														from dta_typerequests_fields where typerequest_tagcode='${typerequest_tagcode}' 
														And '${tagcodereq}'||field_tagcode not in 
															(Select '${tagcodereq}'||field_tagcode as campo 
															from dta_requests_fields
															where request_tagcode='${tagcodereq}')"$
							'Starter.LocalSQLEVC.ExecNonQuery(insSQL)
							Utils.SaveSQLToLog("CriaCamposAdicionais",insSQL, tagcodereq)
							Dim params As Map
							params.Initialize
							params.Clear
							params.Put("_token", ShareCode.APP_TOKEN)
							params.Put("ACLARequest", tagcodereq)
							params.Put("ACLARequestType", typerequest_tagcode)
							params.Put("versionTagcode", Main.VersionTagcode)
							params.Put("_authorization", Main.DeviceAuthorization)
							params.Put("_instance", Main.DeviceInstance)
							params.put("_deviceBrand", Main.DeviceBrand)
							params.put("_deviceModel", Main.DeviceModel)
							params.put("_deviceMacAddress", Main.DeviceMacAddress)
							params.Put("_user", ShareCode.SESS_User)
							Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/cla-fields/create"$
							If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
								Utils.CallApi(0, params, Me, Url, "", tagcodereq)
							Else
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, tagcodereq.Trim,"","")
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							End If
							Sleep(500)
						End If
						
						
						
						Dim ObjSQL As String = $"select distinct value from dta_requests_fields where request_tagcode='${typerequest_tagcode}' and field_tagcode='${do_field}'"$
						Private Record99 As Cursor = Starter.LocalSQLEVC.ExecQuery(ObjSQL)
						If Record99.RowCount > 0 Then
							For nii = 0 To Record99.RowCount-1
								Record99.Position = nii
								Dim val As String = Utils.IfNullOrEmpty(Record99.GetString("value"), "")
								Dim NewSQL As String = $"update dta_requests_values set execute_status=1, execute_value='${val}',
															execute_value_title='${val}'
															where request_tagcode='${tagcodereq}' 
															and inner_request_tagcode='${actionkey}'
															and task_tagcode='${task_tagcode}'
															and item_tagcode='${item_tagcode}'
															and unique_key='${unique_key}'
															and repeatcounter=${repeatcounter} "$
								Try
									Starter.LocalSQLEVC.ExecNonQuery(NewSQL)
								Catch
									Log($"Erro de campo: ${LastException}"$)
								End Try
								
								Dim rs As ResumableSub = UpdateServerwithObject(CurrentCLA, item_tagcode, unique_key, val, "" ,0, 0)
								Wait For(rs) Complete (updated As Boolean)
								Sleep(100)
							Next
						End If
						Record99.Close
					Else
						' ***********************************************************************
						' ALTERACAO PC
						' ***********************************************************************
						' CAMPOS RELACIONADOS COM O OBJECTO SELECIONADO / IDENTIFICADO
						' COMPARAR E VALIDAR SE O DO_NAME É IGUAL AO TIPO DE OBJECTO
						' "object_type"
						' ***********************************************************************
										
						Dim objectTagValue As String = DBStructures.GetScriptColumnStrEVC($"select object_tagcode from
											dta_requests where tagcode='${CurrentCLA.Request.Trim}'"$, _
											"object_tagcode")
						
						Dim object_type As String = DBStructures.GetScriptColumnStrEVC($"select object_type from
											dta_objects where tagcode='${objectTagValue.Trim}'"$, _
											"object_type")	
						
						Dim title_import As String = DBStructures.GetScriptColumnStrEVC($"select title_import from
											dta_objects where tagcode='${objectTagValue.Trim}'"$, _
											"title_import")	
						
						If (do_name = object_type) Then
							If (do_is_additional = 1) Then
								Dim ObjSQL As String = $"select distinct `value` from dta_objects_fields where object_tagcode='${ObjectTag}' and field_tagcode='${do_field}'"$
							Else
								If Utils.FieldInList(do_field, "address|address2|postalcode|local|latitude|longitude|block|floor|door") Then
									Dim ObjSQL As String = $"select distinct ${do_field} as `value` from dta_locations where tagcode in
																	(select local_tagcode from dta_objects where tagcode='${ObjectTag}')"$
								Else If Utils.FieldInList(do_field, "name|phone|email|mobile") Then
									Dim ObjSQL As String = $"select distinct ${do_field} as `value` from dta_contacts where tagcode in
															(select contact_tagcode from dta_objects_contacts where object_tagcode='${ObjectTag}' limit 1)"$
								Else
									Dim ObjSQL As String = $"select distinct ${do_field} as `value` from dta_objects where tagcode='${ObjectTag}'"$
								End If
								Log(ObjSQL)
							End If
										
							Private Record99 As Cursor = Starter.LocalSQLEVC.ExecQuery(ObjSQL)
							If Record99.RowCount > 0 Then
								actuliza = True
								For nii = 0 To Record99.RowCount-1
									Record99.Position = nii
									Dim val As String = Utils.IfNullOrEmpty(Record99.GetString("value"), "")
									If Utils.NNE(val) Then
										Dim vStatus As String = "1"
										If (val= "0") And (do_is_additional = 1) Then
											Dim vStatus As String = "0"
										End If
										Dim NewSQL As String = $"update dta_requests_values set execute_status=${vStatus}, execute_value='${val}', execute_value_title ='${val}',
															object_tagcode='${ObjectTag}'
															where request_tagcode='${tagcodereq}' 
															and inner_request_tagcode='${actionkey}'
															and task_tagcode='${task_tagcode}'
															and item_tagcode='${item_tagcode}'
															and unique_key='${unique_key}'
															and repeatcounter=${repeatcounter} "$
										Log(NewSQL)
										Try
											Utils.SaveSQLToLog("ListaPrincipal_ItemClick",NewSQL, tagcodereq)
											'Starter.LocalSQLEVC.ExecNonQuery(NewSQL)
										Catch
											Log($"Erro de campo: ${LastException}"$)
										End Try
									
										Dim rs As ResumableSub = UpdateServerwithObject(CurrentCLA, item_tagcode, unique_key, val,"", 0, 0)
										Wait For(rs) Complete (updated As Boolean)
										Sleep(100)
									End If
								Next
							End If
							Record99.Close
						End If
					End If
				Next
			End If
			Record9.Close
			
			' Verificar os paramteros no typerequests_tasks_adds
			Dim CTRTP3 As ResumableSub = CheckTypeRequestTaskParamters3(CurrentCLA.Request, CurrentCLA.Action,"_NONE_", ObjectTag.trim, 5)
			Wait For (CTRTP3) Complete (EndCheck As Boolean)
			Sleep(100)
			
		End If
		
		
		If Utils.NNE(title_import) Then
			If title_import <> CurrentEntity Then
				CurrentEntity = title_import
			End If
		End If
		
		Dim rs2 As ResumableSub = FillAdditionalFields(CurrentCLA,CurrentCLA.Request,CurrentCLA.Action)
		Wait for (rs2) Complete (Finished As Boolean)
		
		Dim rs3 As ResumableSub = updatefieldsfromObject(CurrentCLA, tagcode)
		Wait for (rs3) Complete (Finished As Boolean)
		
'		
'		If (updatefieldsfromObject(CurrentCLA, tagcode)) Then
'			clListView.Clear
'			FINItemImages.Clear
'			FINGroups.Clear
'			objectListView.Clear
'			ComponentList.Clear
'			ProgressDialogHide
'			ActivityStart(CurrentCLA, CurrentEntity)
'			Return
'		Else
'			clListView.Clear
'			FINItemImages.Clear
'			FINGroups.Clear
'			objectListView.Clear
'			ComponentList.Clear
'			ProgressDialogHide
'			Dim RI As RequestInfo = DBStructures.getRequestInfo(CurrentCLA.Request)
'			getRequestObject( RI )
'			Return
'		End If
'		'objectPropertyListView.Clear
		
		ProgressDialogHide
		clListView.Clear
		FINItemImages.Clear
		FINGroups.Clear
		objectListView.Clear
		ComponentList.Clear
		ChaptersList.Clear
		ActivityStart(CurrentCLA, CurrentEntity)
		
	End If
End Sub



Sub FillAdditionalFields(CLA As RequestCLA, req_tagcode As String, task_tagcode As String) As ResumableSub
	
		
	Dim obj_tagcode As String = DBStructures.GetScriptColumnStrEVC($"select object_tagcode from dta_requests where 1=1
																	and tagcode = '${req_tagcode}'"$,"object_tagcode")
																	
	If Utils.NNE(obj_tagcode) Then
		Dim FIELD_CLIENT_PSE As String = DBStructures.GetScriptColumnStrEVC($"select title_import from dta_objects where tagcode
										in (select parent_tagcode from dta_objects where tagcode = '${obj_tagcode}')"$,"title_import")
	
		Dim AUTHUSR As String = DBStructures.GetScriptColumnStrEVC($"select value from dta_objects_fields where
																	object_tagcode = '${obj_tagcode}' and field_tagcode = 'FIELD_EDPC_CONTRACT_MANAGER'"$,"value")
		
		If Utils.NNE(AUTHUSR) Then
			Dim FIELD_EDPC_CONTRACT_MANAGER As String = DBStructures.GetScriptColumnStrEVC($"select name from aut_users where tagcode = '${AUTHUSR}'"$,"name")
		Else
			Dim FIELD_EDPC_CONTRACT_MANAGER As String = ""
		End If
		
		Dim FIELD_TECHNICAL_NAME As String = ShareCode.SESS_OPER_UserName
		Dim FIELD_TECHNICAL As String = ShareCode.SESS_OPER_User
		
		ShareCode.DEVICE_FIELDREPORTDATETIME_SYSOREXEC = Utils.ifnullorempty(DBStructures.getparamstate("DEVICE_FIELDREPORTDATETIME_SYSOREXEC"), 0)
		Dim DATA_SYSOREXEC As Boolean = Utils.Int2Bool(ShareCode.DEVICE_FIELDREPORTDATETIME_SYSOREXEC)
		
		If DATA_SYSOREXEC Then
			Dim FIELD_REPORTDATE As String = DBStructures.GetScriptColumnStrEVC($"select execute_date from dta_requests where tagcode = '${req_tagcode}')"$,"execute_date")
			Dim FIELD_REPORTTIME As String = DBStructures.GetScriptColumnStrEVC($"select execute_start from dta_requests where tagcode = '${req_tagcode}')"$,"execute_start")
		Else
			Dim FIELD_REPORTDATE As String = Utils.GetCurrentDate
			Dim FIELD_REPORTTIME As String = Utils.GetCurrentTimeExt
		End If
		
		'TIP : Update Local
		Dim UpdRV As String = $"update dta_requests_values set execute_value = '${FIELD_CLIENT_PSE}' where 1=1
								And request_tagcode = '${req_tagcode}'
								And task_tagcode = '${task_tagcode}'
								And item_tagcode = 'FIELD_CLIENT_PSE'"$
		Starter.LocalSQLEVC.ExecNonQuery(UpdRV)
		Sleep(100)
		'TIP : Update Servidor
		Dim UK As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_requests_values where 1=1
															And	request_tagcode = '${req_tagcode}'
															And task_tagcode = '${task_tagcode}'
															And item_tagcode = 'FIELD_CLIENT_PSE'"$,"unique_key")
	
		Dim repeatCounter As Int = DBStructures.GetScriptColumnIntEVC($"select repeatcounter from dta_requests_values where 1=1
															and	request_tagcode = '${req_tagcode}'
															and task_tagcode = '${task_tagcode}'
															and item_tagcode = 'FIELD_CLIENT_PSE'"$,"repeatcounter")
															
		Dim RUpdSvr As ResumableSub = ActualizaSvr_CLAI_Update(CLA,"FIELD_CLIENT_PSE",UK,FIELD_CLIENT_PSE,"",repeatCounter)
		Wait For (RUpdSvr) Complete (EndUpdate As Boolean)
		
		Dim UpdRV As String = $"update dta_requests_values set execute_value = '${FIELD_EDPC_CONTRACT_MANAGER}',
								execute_value_title = '${FIELD_EDPC_CONTRACT_MANAGER}',
								object_tagcode = '${AUTHUSR}'
								where 1=1
								And request_tagcode = '${req_tagcode}'
								And task_tagcode = '${task_tagcode}'
								And item_tagcode = 'FIELD_EDPC_CONTRACT_MANAGER'"$
		Starter.LocalSQLEVC.ExecNonQuery(UpdRV)
		Sleep(100)
		'TIP : Update Servidor
		Dim UK As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_requests_values where 1=1
															And	request_tagcode = '${req_tagcode}'
															And task_tagcode = '${task_tagcode}'
															And item_tagcode = 'FIELD_EDPC_CONTRACT_MANAGER'"$,"unique_key")
	
		Dim repeatCounter As Int = DBStructures.GetScriptColumnIntEVC($"select repeatcounter from dta_requests_values where 1=1
															and	request_tagcode = '${req_tagcode}'
															and task_tagcode = '${task_tagcode}'
															and item_tagcode = 'FIELD_EDPC_CONTRACT_MANAGER'"$,"repeatcounter")
															
		Dim RUpdSvr As ResumableSub = ActualizaSvr_CLAI_Update(CLA,"FIELD_EDPC_CONTRACT_MANAGER",UK,FIELD_EDPC_CONTRACT_MANAGER,AUTHUSR,repeatCounter)
		Wait For (RUpdSvr) Complete (EndUpdate As Boolean)
		
		
		Dim UpdRV As String = $"update dta_requests_values set execute_value = '${FIELD_REPORTDATE}' where 1=1
								And request_tagcode = '${req_tagcode}'
								And task_tagcode = '${task_tagcode}'
								And item_tagcode = 'FIELD_REPORTDATE'"$
		Starter.LocalSQLEVC.ExecNonQuery(UpdRV)
		Sleep(100)
		'TIP : Update Servidor
		Dim UK As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_requests_values where 1=1
															And	request_tagcode = '${req_tagcode}'
															And task_tagcode = '${task_tagcode}'
															And item_tagcode = 'FIELD_REPORTDATE'"$,"unique_key")
	
		Dim repeatCounter As Int = DBStructures.GetScriptColumnIntEVC($"select repeatcounter from dta_requests_values where 1=1
															and	request_tagcode = '${req_tagcode}'
															and task_tagcode = '${task_tagcode}'
															and item_tagcode = 'FIELD_REPORTDATE'"$,"repeatcounter")
															
		Dim RUpdSvr As ResumableSub = ActualizaSvr_CLAI_Update(CLA,"FIELD_REPORTDATE",UK,FIELD_REPORTDATE,"",repeatCounter)
		Wait For (RUpdSvr) Complete (EndUpdate As Boolean)
		
		Dim UpdRV As String = $"update dta_requests_values set execute_value = '${FIELD_REPORTTIME}' where 1=1
								And request_tagcode = '${req_tagcode}'
								And task_tagcode = '${task_tagcode}'
								And item_tagcode = 'FIELD_REPORTTIME'"$
		Starter.LocalSQLEVC.ExecNonQuery(UpdRV)
		Sleep(100)
		
		Dim UK As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_requests_values where 1=1
															And	request_tagcode = '${req_tagcode}'
															And task_tagcode = '${task_tagcode}'
															And item_tagcode = 'FIELD_REPORTTIME'"$,"unique_key")
	
		Dim repeatCounter As Int = DBStructures.GetScriptColumnIntEVC($"select repeatcounter from dta_requests_values where 1=1
															and	request_tagcode = '${req_tagcode}'
															and task_tagcode = '${task_tagcode}'
															and item_tagcode = 'FIELD_REPORTTIME'"$,"repeatcounter")
															
		Dim RUpdSvr As ResumableSub = ActualizaSvr_CLAI_Update(CLA,"FIELD_REPORTTIME",UK,FIELD_REPORTTIME,"",repeatCounter)
		Wait For (RUpdSvr) Complete (EndUpdate As Boolean)
		
		Dim UpdRV As String = $"update dta_requests_values set execute_value = '${FIELD_TECHNICAL_NAME}' where 1=1
								And request_tagcode = '${req_tagcode}'
								And task_tagcode = '${task_tagcode}'
								And item_tagcode = 'FIELD_TECHNICAL'"$
		Starter.LocalSQLEVC.ExecNonQuery(UpdRV)
		Sleep(100)
		'TIP : Update Servidor
		Dim UK As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_requests_values where 1=1
															And	request_tagcode = '${req_tagcode}'
															And task_tagcode = '${task_tagcode}'
															And item_tagcode = 'FIELD_TECHNICAL'"$,"unique_key")
	
		Dim repeatCounter As Int = DBStructures.GetScriptColumnIntEVC($"select repeatcounter from dta_requests_values where 1=1
															and	request_tagcode = '${req_tagcode}'
															and task_tagcode = '${task_tagcode}'
															and item_tagcode = 'FIELD_TECHNICAL'"$,"repeatcounter")
															
		Dim RUpdSvr As ResumableSub = ActualizaSvr_CLAI_Update(CLA,"FIELD_TECHNICAL",UK,FIELD_TECHNICAL_NAME,FIELD_TECHNICAL,repeatCounter)
		Wait For (RUpdSvr) Complete (EndUpdate As Boolean)

	End If
	
	Return True
	
End Sub


Sub ActualizaSvr_CLAI_Update (CLA As RequestCLA, itemTC As String, UK As String, val2fill As String, ObjVal As String,repcnt As Int) As ResumableSub
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLARequest", CLA.Request)
	params.Put("ACLAAction", CLA.Action)
	params.Put("ACLATask", CLA.Task)
	params.Put("ACLAItem",itemTC)
	params.Put("ACLAUniqueKey", UK)
'	params.Put("ACLATagcode", tagcode)
	params.Put("ACLAObjectTag", ObjVal)
	params.Put("ACLAValue", val2fill)
	params.Put("ACLAReqCounter", repcnt)
	params.Put("ACLARepeatItem", 0)
	params.Put("ACLARepeatField", 0)
	params.Put("ACLAInner", 0)
														
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim sACLADatetime As String = Utils.GetCurrDatetime
	Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
	Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")

	params.Put("ACLADatetime", sACLADatetime)
	params.Put("ACLALatitude", sACLALatitude)
	params.Put("ACLALongitude", sACLALongitude)
	Dim ACLSessUser As String = ShareCode.SESS_OPER_User
			
	params.Put("ACLSessUser", ACLSessUser)
	params.Put("ACLClear", 0)
					
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then
			Dim GODR As ResumableSub = GetOfflineDataRec(1, CLA.Request.Trim,CLA.Action.trim,itemTC.trim)
			Wait For (GODR) Complete (HasResults As Boolean)
			If HasResults Then
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, CLA.Request.Trim,CLA.Action.trim,itemTC.trim)
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			Else
				Utils.CallApi(0, params, Me, Url, "", CLA.Request)
			End If
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, CLA.Request.Trim,CLA.Action.trim,itemTC.trim)
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(250)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, CLA.Request.Trim,CLA.Action.trim,itemTC.trim)
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If
	
	Return True
	
End Sub



' *************************************************************
' TIP: EVENTO DE ATUALIZAÇÃO DE CAMPOS RELACIONADOS COM OBJECTO
' *************************************************************
Sub updatefieldsfromObject(req As RequestCLA, obj As String) As ResumableSub
	' *****************************************************************
	' VERIFICA SE EXISTEM CAMPOS A ACTUALIZAR A TABELA
	' *****************************************************************
	Dim MadeUpdates As Int = 0
	Dim sSQL As String = $"SELECT b.connectmode, b.connect2data, a.do_name, a.do_field, a.do_is_additional,
							a.task_tagcode, a.item_tagcode, a.unique_key, a.data_type, a.title
							FROM dta_tasks_items AS a
							INNER JOIN dta_tasks AS b ON (b.tagcode=a.task_tagcode)
							WHERE  a.do_name <> '' AND a.do_field <> '' AND b.connect2data <> '' and a.task_tagcode='${req.Action.trim}'"$
'	Private Record9 As ResultSet = Starter.LocalSQLEVC.ExecQuery(sSQL)
	Private Record9 As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
	If Record9.RowCount >= 1 Then
		For r=0 To Record9.RowCount-1
			Record9.Position = r
			Dim connectmode As Int = Record9.GetInt("connectmode")
			Dim connect2data As String = Record9.GetString("connect2data")
			Dim do_name As String = Record9.GetString("do_name")
			Dim do_field As String = Record9.GetString("do_field")
			Dim do_is_additional As Int = Record9.GetInt("do_is_additional")
			Dim task_tagcode As String = Record9.GetString("task_tagcode")
			Dim item_tagcode As String = Record9.GetString("item_tagcode")
			Dim unique_key As String = Record9.GetString("unique_key")
			Dim data_type As Int = Record9.GetInt("data_type")
			Dim title As String = Record9.GetString("title")
			
			If Utils.NNE(obj) Then
				If Not(do_name.ToUpperCase = "__TYPEREQUEST__") Then
					If (do_is_additional = 1) Then
						Dim ObjSQL As String = $"select distinct value from dta_objects_fields where object_tagcode='${obj}' and field_tagcode='${do_field}'"$
					Else
						If Utils.FieldInList(do_field, "address|address2|postalcode|phone|local|latitude|longitude|block|floor|door") Then
							Dim ObjSQL As String = $"select ${do_field} as value from dta_locations where tagcode in
															(select local_tagcode from dta_objects where tagcode='${obj}')"$
						Else If Utils.FieldInList(do_field, "name|phone|email|mobile") Then
							Dim ObjSQL As String = $"select distinct ${do_field} as `value` from dta_contacts where tagcode in
															(select contact_tagcode from dta_objects_contacts where object_tagcode='${obj}' limit 1)"$
						Else
							Dim ObjSQL As String = $"select ${do_field} as value from dta_objects where tagcode='${obj}'"$
						End If
					End If
					Private Record99 As Cursor = Starter.LocalSQLEVC.ExecQuery(ObjSQL)
					If Record99.RowCount >= 1 Then
						For ri = 0 To Record99.RowCount-1
							MadeUpdates = MadeUpdates +1
							Record99.Position = ri
							Dim val As String = Utils.IfNullOrEmpty(Record99.GetString("value"), "")
							Dim NewSQL As String = $"update dta_requests_values set execute_status=1, execute_value='${val}'
															where request_tagcode='${req.Request.Trim}' 
															and inner_request_tagcode='${req.Action.Trim}'
															and task_tagcode='${task_tagcode}'
															and item_tagcode='${item_tagcode}'
															and unique_key='${unique_key}'
															and repeatcounter=${req.RepeatCounter} 
															and execute_value='' "$
							Try
								Starter.LocalSQLEVC.ExecNonQuery(NewSQL)
							Catch
								Log($"Erro de campo: ${LastException}"$)
								MadeUpdates = MadeUpdates -1
							End Try
						Next
					End If
					Record99.Close
				End If
			Else
				If (do_is_additional = 1) Then
					Dim ObjSQL As String = $"select distinct value from dta_objects_fields where object_tagcode='${obj}' and field_tagcode='${do_field}'"$
				Else
					If Utils.FieldInList(do_field, "address|address2|postalcode|phone|local|latitude|longitude|block|floor|door") Then
					'If ((do_field.Trim = "address") Or (do_field.Trim = "address2") Or (do_field.Trim = "postalcode") Or (do_field.Trim = "local")) Then
						Dim ObjSQL As String = $"select distinct ${do_field} as `value` from dta_locations where tagcode in
																	(select local_tagcode from dta_objects where tagcode='${obj}')"$
					Else If Utils.FieldInList(do_field, "name|phone|email|mobile") Then
						Dim ObjSQL As String = $"select distinct ${do_field} as `value` from dta_contacts where tagcode in
															(select contact_tagcode from dta_objects_contacts where object_tagcode='${obj}' limit 1)"$
					Else
						Dim ObjSQL As String = $"select distinct ${do_field} as value from dta_objects where tagcode='${obj}'"$
					End If
				End If

				Private Record99 As Cursor = Starter.LocalSQLEVC.ExecQuery(ObjSQL)
				If Record99.RowCount >= 1 Then
					For ri = 0 To Record99.RowCount-1
						MadeUpdates = MadeUpdates +1
						Record99.Position = ri
						Dim val As String = Utils.IfNullOrEmpty(Record99.GetString("value"), "")
						Dim NewSQL As String = $"update dta_requests_values set execute_status=1, execute_value='${val}'
																where request_tagcode='${req.Request.Trim}' 
																and inner_request_tagcode='${req.Action.Trim}'
																and task_tagcode='${task_tagcode}'
																and item_tagcode='${item_tagcode}'
																and unique_key='${unique_key}'
																and repeatcounter=${req.RepeatCounter} 
																and execute_value='' "$
						Try
'						Starter.LocalSQLEVC.ExecNonQuery(NewSQL)
							Utils.SaveSQLToLog("UpdateObjectSelected",NewSQL, req.Request)
						Catch
							Log($"Erro de campo: ${LastException}"$)
							MadeUpdates = MadeUpdates -1
						End Try
					
					Next
				End If
				Record99.Close
			End If
			
			
		Next
	End If
	Record9.Close

	Return MadeUpdates > 0
End Sub


'************************************************************************
' NOVA SECÇÃO DE EDIÇÃO DE DADOS
'************************************************************************
'		EXECUTE_STATUS - Estado do butão (0/1)
'		EXECUTE_VALUE - Valor do botão (1/2/3)
'		EXECUTE_VALUES_TITLE - Valor do campo de edição
'************************************************************************


' *************************************************************
' TIP: VIEW - CRIAÇÃO DE VIEW TIPO 20
' *************************************************************
Sub CreateLineItemConfirmButton(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
		ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
		ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	
	If (CurrentOrientation=0) Then
		Dim height As Int = Utils.IntToDIP(outRecord.GetInt("height_land"))
	Else
		If (ShareCode.ISPHONE) Then
			Dim height As Int = Utils.IntToDIP(outRecord.GetInt("height_port_sp"))
		Else
			Dim height As Int = Utils.IntToDIP(outRecord.GetInt("height_port"))
		End If
	End If

	Dim LayOutStr As String = "CLA_ITEM_EditBox_ValueConfirm" '"CLAItemEditValueSTD"
	If (ShareCode.ISPHONE) Then
		LayOutStr = "CLA_ITEM_EditBox_ValueConfirm"
'		Dim height As Int = 100dip
	End If

	Dim p As Panel
	p.Initialize("CLALineClick")
	Activity.AddView(p, 0, 0, 100%x, height) '115dip)
	p.LoadLayout(LayOutStr)
	
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
		If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	p.RemoveView
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")

	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
	Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${CurrentCLA.RepeatCounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	Private Record2 As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	If Record2.RowCount > 0 Then
		Record2.Position = 0
		
		Dim Status As Int = Record2.GetInt("status")
		Dim repeatcounter As Int = Record2.GetInt("repeatcounter")
		Dim execute_value_title As String = Record2.GetString("execute_value_title")
		
		
		CLAItemEditValueSTD.Text = execute_value_title
		UPDATED_EDIT_FIELDS.Add( Types.MakeFieldReference(ItemTagcode, CLAItemEditValueSTD, repeatfieldcounter))
		
		CLAItemButton_1.State = 0
		CLAItemButton_2.State = 0
		
		If (Status = 1) Then
			CLAItemButton_1.State = 1
		Else If (Status = 2) Then
			CLAItemButton_2.State = 1
		End If
		
		CLAItemEditValueSTD.Enabled = Not(READONLY_FEATURES)
		CLAItemButton_1.Enabled = Not(READONLY_FEATURES)
		CLAItemButton_2.Enabled = Not(READONLY_FEATURES)
		
		Dim SSTAG As String = $"${Record2.GetString("request_tagcode")}|${Record2.GetString("inner_request_tagcode")}|
						${Record2.GetString("task_tagcode")}|${Record2.GetString("item_tagcode")}|${Record2.GetString("unique_key")}|
						${Record2.GetString("tagcode")}|1|${CLAItemButton_1.State}|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
		
		Dim SSTAG1 As String = $"${Record2.GetString("request_tagcode")}|${Record2.GetString("inner_request_tagcode")}|
						${Record2.GetString("task_tagcode")}|${Record2.GetString("item_tagcode")}|${Record2.GetString("unique_key")}|
						${Record2.GetString("tagcode")}|2|${CLAItemButton_1.State}|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
		
		
		CLAItemEditValueSTD.Tag = SSTAG
		CLAItemButton_1.Tag = SSTAG
		CLAItemButton_2.Tag = SSTAG1
		
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record2.GetString("request_tagcode"), _
				Record2.GetString("inner_request_tagcode"), _
				Record2.GetString("task_tagcode"), _
				Record2.GetString("item_tagcode"), _
				Record2.GetString("unique_key"), _
				Record2.GetString("tagcode"), _
				Record2.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record2.GetString("task_tagcode"), Record2.GetString("unique_key")), "")
							
'	*********************************************************************************************************************
'	 ROTINA DE VERIFICACAO SE O PAINEL FOI INACTIVADO POR EVENTO E PROCEDER DE ACORDO, COLOCANDO-O A ENABLE OU DISABLED
'	 E MUDANDO A COR DE BRANCO PARA CINZA E VICE VERSA
'	*********************************************************************************************************************
								
		Dim EnabledState As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(fieldref_02, 'enabled') as EnabledState from dta_requests_values_adds where 1=1
																	and request_tagcode = '${CLAItem.Request.Trim}'
																	and task_tagcode = '${CLAItem.task.trim}'
																	and item_tagcode = '${CLAItem.item.trim}'
																	and repeatcounter = ${repeatcounter}
																	and repeatitemcounter = ${repeatitemcounter}
																	and repeatfieldcounter = ${repeatfieldcounter}"$,"EnabledState")
		If EnabledState.ToLowerCase = "disabled" Then
			Dim Val2set As Boolean = False
			p.Enabled = Val2set
			p.Color = Colors.LightGray
			For Each v As View In p.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		Else
			If READONLY_FEATURES = False Then
				Dim Val2set As Boolean = True
				p.Enabled = Val2set
				p.Color = Colors.white
				For Each v As View In p.GetAllViewsRecursive
							
					If v Is Label Then
						Dim lV As Label = v
						lV.Enabled = Val2set
					else If v Is EditText Then
						Dim eV As EditText = v
						eV.Enabled = Val2set
					else If v Is FloatLabeledEditText Then
						Dim fV As FloatLabeledEditText = v
						fV.Enabled = Val2set
					else If v Is Button Then
						Dim bV As Button = v
						bV.Enabled = Val2set
					else If v Is Spinner Then
						Dim sV As Spinner = v
						sV.Enabled = Val2set
					End If
				Next
			End If
			
		End If
'	*********************************************************************************************************************
'	*********************************************************************************************************************
		ComponentList.add( Types.MakeComponentRecords(p, taggedID, Record2.GetString("item_tagcode"),height ,repeatitemcounter,repeatfieldcounter,True) )

	End If
	Record2.Close
	CLAButtonOptions.Tag = CLAItem
	CLAButtonOptions.Enabled = Not(READONLY_FEATURES)
	p.Tag = CLAItem
	
	If (innerPanel = 0) Then
		Dim pnl As B4XView = chapter.GetView(1)
		pnl.AddView(p, 0, Posis, chapter.Width, height)
'			pnlExpanded.AddView(p, 0, Posis, chapter.Width, height)
	Else
		chapter.AddView(p, 0, Posis, chapter.Width, height)
	End If
	Posis = Posis + height '115dip
	Return Posis
End Sub

' *************************************************************
' TIP: VIEW - CRIAÇÃO DE VIEW TIPO 10-22
' *************************************************************
Sub CreateLineConfirmButton(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
		ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
		ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	
	If (CurrentOrientation=0) Then
		Dim height As Int = Utils.IntToDIP(outRecord.GetInt("height_land") + DeviceHeight2)
	Else
		If (ShareCode.ISPHONE) Then
			Dim height As Int = outRecord.GetInt("height_port_sp") + DeviceHeight2
		Else
			Dim height As Int = outRecord.GetInt("height_port") + DeviceHeight2
		End If
		
		Dim rowitems As Int = outRecord.GetInt("rowitems")
		
		If(ShareCode.ISPHONE And rowitems > 1) Then
			height = height + (rowitems*60dip)
'		Else If	(ShareCode.ISPHONE And rowitems = 1)Then
'			height = height + 60dip
		End If
	End If
	'Dim height As Int = 60dip
	Dim LayOutStr As String = "CLA_ITEM_Text_LineConfirm"
	If (ShareCode.ISPHONE) Then
		LayOutStr = "CLA_ITEM_Text_LineConfirm"
'		Dim height As Int = 100dip
	End If

	Dim p As Panel
	p.Initialize("CLALineClick")
	Activity.AddView(p, 0, 0, 100%x, height) '115dip)
	p.LoadLayout(LayOutStr)
	
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
	If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	p.RemoveView
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
'	p.Tag = ItemTagcode
	
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int = 0
	End Try
	
'	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	
	'CLAItemTitle.Text = $"${taggedID}.${subidx} - ${Title}"$
'	If Utils.NNE(ExtraInfo) Then CLAItemTitleInfo.Text = ExtraInfo
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	'Dim Repeat As Int = outRecord.GetInt("repeated")
	'Dim Multi As Int = outRecord.GetInt("multiple")
	Dim Critical As Int = outRecord.GetInt("critical")

	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed

	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${CurrentCLA.RepeatCounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
						
	If (DataBulkUpload=1) And (fieldval_04>=0) Then
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${CurrentCLA.RepeatCounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						and x.item_tagcode||x.item_tagcode||x.unique_key||x.repeatcounter in (select z.item_tagcode||z.item_tagcode||z.unique_key||z.repeatcounter  
						from dta_requests_values_adds as z where  z.fieldval_04=${fieldval_04})
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	Else
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${CurrentCLA.RepeatCounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	End If
	Log(AllSQL)
	Private Record2 As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	If Record2.RowCount > 0 Then
		Record2.Position = 0
		
		Dim Status As Int = Record2.GetInt("status")
		Dim value As String = Record2.GetString("value")
		Dim repeatcounter As Int = Record2.GetInt("repeatcounter")

		CLAItemButton_1.State = 0
		CLAItemButton_2.State = 0
			
		If (Status = 1) Then
			If (value = "1") Then
				CLAItemButton_1.State = 1
			Else If (value = "2") Then
				CLAItemButton_2.State = 1
			End If
		End If
			
		CLAItemButton_1.Enabled = Not(READONLY_FEATURES)
		CLAItemButton_2.Enabled = Not(READONLY_FEATURES)

		Dim SSTAG As String = $"${Record2.GetString("request_tagcode")}|${Record2.GetString("inner_request_tagcode")}|
						${Record2.GetString("task_tagcode")}|${Record2.GetString("item_tagcode")}|${Record2.GetString("unique_key")}|
						${Record2.GetString("tagcode")}|1|${CLAItemButton_1.State}|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
	
		Dim SSTAG1 As String = $"${Record2.GetString("request_tagcode")}|${Record2.GetString("inner_request_tagcode")}|
						${Record2.GetString("task_tagcode")}|${Record2.GetString("item_tagcode")}|${Record2.GetString("unique_key")}|
						${Record2.GetString("tagcode")}|2|${CLAItemButton_2.State}|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$

		CLAItemButton_1.Tag = SSTAG
		CLAItemButton_2.Tag = SSTAG1
		
		Log($"${SSTAG} / ${SSTAG1}"$ )
		
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record2.GetString("request_tagcode"), _
					Record2.GetString("inner_request_tagcode"), _
					Record2.GetString("task_tagcode"), _
					Record2.GetString("item_tagcode"), _
					Record2.GetString("unique_key"), _
					Record2.GetString("tagcode"), _
					Record2.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter, "", "", "", 3, 0, 0, "", _
								DBStructures.DB2CLATaskItem(Record2.GetString("task_tagcode"), Record2.GetString("unique_key")), "")
								
'	*********************************************************************************************************************
'	 ROTINA DE VERIFICACAO SE O PAINEL FOI INACTIVADO POR EVENTO E PROCEDER DE ACORDO, COLOCANDO-O A ENABLE OU DISABLED
'	 E MUDANDO A COR DE BRANCO PARA CINZA E VICE VERSA
'	*********************************************************************************************************************
								
		Dim EnabledState As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(fieldref_02, 'enabled') as EnabledState from dta_requests_values_adds where 1=1
																	and request_tagcode = '${CLAItem.Request.Trim}'
																	and task_tagcode = '${CLAItem.task.trim}'
																	and item_tagcode = '${CLAItem.item.trim}'
																	and repeatcounter = ${repeatcounter}
																	and repeatitemcounter = ${repeatitemcounter}
																	and repeatfieldcounter = ${repeatfieldcounter}"$,"EnabledState")
		If EnabledState.ToLowerCase = "disabled" Then
			Dim Val2set As Boolean = False
			p.Enabled = Val2set
			p.Color = Colors.LightGray
			For Each v As View In p.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		Else
			If READONLY_FEATURES = False Then
				Dim Val2set As Boolean = True
				p.Enabled = Val2set
				p.Color = Colors.white
				For Each v As View In p.GetAllViewsRecursive
							
					If v Is Label Then
						Dim lV As Label = v
						lV.Enabled = Val2set
					else If v Is EditText Then
						Dim eV As EditText = v
						eV.Enabled = Val2set
					else If v Is FloatLabeledEditText Then
						Dim fV As FloatLabeledEditText = v
						fV.Enabled = Val2set
					else If v Is Button Then
						Dim bV As Button = v
						bV.Enabled = Val2set
					else If v Is Spinner Then
						Dim sV As Spinner = v
						sV.Enabled = Val2set
					End If
				Next
			End If
			
		End If
'	*********************************************************************************************************************
'	*********************************************************************************************************************

		ComponentList.add( Types.MakeComponentRecords(p, taggedID, Record2.GetString("item_tagcode"), height ,repeatitemcounter,repeatfieldcounter, True) )

		
	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record2.Close
	CLAButtonOptions.Tag = CLAItem
	CLAButtonOptions.Enabled = Not(READONLY_FEATURES)
	p.Tag = CLAItem
	
	If (innerPanel = 0) Then
		
		Dim pnl As B4XView = chapter.GetView(1)
		pnl.AddView(p, 0, Posis, chapter.Width, height)
'			pnlExpanded.AddView(p, 0, Posis, chapter.Width, height)
	Else
		chapter.AddView(p, 0, Posis, chapter.Width, height)
	End If
	Posis = Posis + height '115dip
	Return Posis
End Sub


' *************************************************************
' TIP: VIEW - CRIAÇÃO DE VIEW TIPO 21
' *************************************************************
Sub CreateLineItemConfirmIntButton(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
		ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
		ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	
	If (CurrentOrientation=0) Then
		Dim height As Int = outRecord.GetInt("height_land") + DeviceHeight2
	Else
		Dim height As Int = outRecord.GetInt("height_port") + DeviceHeight2
		Dim rowitems As Int = outRecord.GetInt("rowitems")
		If(ShareCode.ISPHONE And rowitems > 1) Then
			height = height + (rowitems*60dip)
		Else If	(ShareCode.ISPHONE And rowitems = 1)Then
			height = height + 60dip
		End If
	End If

	'Dim height As Int = 60dip
	Dim LayOutStr As String = "CLA_ITEM_EditBox_ValueINTConfirm"
	If (ShareCode.ISPHONE) Then
		LayOutStr = "CLA_ITEM_EditBox_ValueINTConfirm"
'		Dim height As Int = 100dip
	End If
	

	Dim p As Panel
	p.Initialize("CLALineClick")
	Activity.AddView(p, 0, 0, 100%x, height) '115dip)
	p.LoadLayout(LayOutStr)
	
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
	If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	p.RemoveView
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
'	p.Tag = ItemTagcode
	
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	
	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")

	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
	
	
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${CurrentCLA.RepeatCounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
						
	If (DataBulkUpload=1) And (fieldval_04>=0) Then
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${CurrentCLA.RepeatCounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						and x.item_tagcode||x.item_tagcode||x.unique_key||x.repeatcounter in (select z.item_tagcode||z.item_tagcode||z.unique_key||z.repeatcounter  
						from dta_requests_values_adds as z where  z.fieldval_04=${fieldval_04})
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	Else
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${CurrentCLA.RepeatCounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	End If
	Log("--------------------------------------------------------------")
	Log(AllSQL)
	Log("--------------------------------------------------------------")
	Private Record2 As Cursor = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	If Record2.RowCount > 0 Then
		Record2.Position = 0
		
		Dim Status As Int = Record2.GetInt("status")
		Dim value As String = Record2.GetString("value")
		Dim repeatcounter As Int = Record2.GetInt("repeatcounter")
		Dim execute_value_title As String = Record2.GetString("execute_value_title")
				
		CLAItemEditValueSTD.Text = execute_value_title
		CLAItemButton_1.State = 0
		CLAItemButton_2.State = 0
			
		If (Status = 1) Then
			If (value = "1") Then
				CLAItemButton_1.State = 1
			Else If (value = "2") Then
				CLAItemButton_2.State = 1
			End If
		End If
		CLAItemEditValueSTD.Enabled = Not(READONLY_FEATURES)
		CLAItemButton_1.Enabled = Not(READONLY_FEATURES)
		CLAItemButton_2.Enabled = Not(READONLY_FEATURES)

		Dim SSTAG As String = $"${Record2.GetString("request_tagcode")}|${Record2.GetString("inner_request_tagcode")}|
						${Record2.GetString("task_tagcode")}|${Record2.GetString("item_tagcode")}|${Record2.GetString("unique_key")}|
						${Record2.GetString("tagcode")}|1|${CLAItemButton_1.State}|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
	
		Dim SSTAG1 As String = $"${Record2.GetString("request_tagcode")}|${Record2.GetString("inner_request_tagcode")}|
						${Record2.GetString("task_tagcode")}|${Record2.GetString("item_tagcode")}|${Record2.GetString("unique_key")}|
						${Record2.GetString("tagcode")}|2|${CLAItemButton_2.State}|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
	
		CLAItemEditValueSTD.Tag = SSTAG
		CLAItemButton_1.Tag = SSTAG
		CLAItemButton_2.Tag = SSTAG1
		
		Log($"${SSTAG} / ${SSTAG1}"$ )
		
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record2.GetString("request_tagcode"), _
					Record2.GetString("inner_request_tagcode"), _
					Record2.GetString("task_tagcode"), _
					Record2.GetString("item_tagcode"), _
					Record2.GetString("unique_key"), _
					Record2.GetString("tagcode"), _
					Record2.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter, "", "", "", 3, 0, 0, "", _
								DBStructures.DB2CLATaskItem(Record2.GetString("task_tagcode"), Record2.GetString("unique_key")), "")
								
'	*********************************************************************************************************************
'	 ROTINA DE VERIFICACAO SE O PAINEL FOI INACTIVADO POR EVENTO E PROCEDER DE ACORDO, COLOCANDO-O A ENABLE OU DISABLED
'	 E MUDANDO A COR DE BRANCO PARA CINZA E VICE VERSA
'	*********************************************************************************************************************
								
		Dim EnabledState As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(fieldref_02, 'enabled') as EnabledState from dta_requests_values_adds where 1=1
																	and request_tagcode = '${CLAItem.Request.Trim}'
																	and task_tagcode = '${CLAItem.task.trim}'
																	and item_tagcode = '${CLAItem.item.trim}'
																	and repeatcounter = ${repeatcounter}
																	and repeatitemcounter = ${repeatitemcounter}
																	and repeatfieldcounter = ${repeatfieldcounter}"$,"EnabledState")
		If EnabledState.ToLowerCase = "disabled" Then
			Dim Val2set As Boolean = False
			p.Enabled = Val2set
			p.Color = Colors.LightGray
			For Each v As View In p.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		Else
			If READONLY_FEATURES = False Then
				Dim Val2set As Boolean = True
				p.Enabled = Val2set
				p.Color = Colors.white
				For Each v As View In p.GetAllViewsRecursive
							
					If v Is Label Then
						Dim lV As Label = v
						lV.Enabled = Val2set
					else If v Is EditText Then
						Dim eV As EditText = v
						eV.Enabled = Val2set
					else If v Is FloatLabeledEditText Then
						Dim fV As FloatLabeledEditText = v
						fV.Enabled = Val2set
					else If v Is Button Then
						Dim bV As Button = v
						bV.Enabled = Val2set
					else If v Is Spinner Then
						Dim sV As Spinner = v
						sV.Enabled = Val2set
					End If
				Next
			End If
			
		End If
'	*********************************************************************************************************************
'	*********************************************************************************************************************

		ComponentList.add( Types.MakeComponentRecords(p, taggedID, Record2.GetString("item_tagcode"),height,repeatitemcounter,repeatfieldcounter ,True) )

		
		Dim pp As Panel = CLAItemEditValueSTD.Parent
		pp.Tag = CLAItem
	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record2.Close
	CLAButtonOptions.Tag = CLAItem
	CLAButtonOptions.Enabled = Not(READONLY_FEATURES)
	p.Tag = CLAItem
	
	If (innerPanel = 0) Then
		Dim pnl As B4XView = chapter.GetView(1)
		pnl.AddView(p, 0, Posis, chapter.Width, height)
'			pnlExpanded.AddView(p, 0, Posis, chapter.Width, height)
	Else
		chapter.AddView(p, 0, Posis, chapter.Width, height)
	End If
	Posis = Posis + height '115dip
	Return Posis
End Sub

' *************************************************************
' TIP: VIEW - CRIAÇÃO DE VIEW TIPO 26
' *************************************************************
Sub CreateLineItemConfirmInt2Button(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
		ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
		ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	
	If (CurrentOrientation=0) Then
		Dim height As Int = 120
	Else
		If (ShareCode.ISPHONE) Then
			Dim height As Int = outRecord.GetInt("height_port_sp") + DeviceHeight2
		Else
			Dim height As Int = outRecord.GetInt("height_port") + DeviceHeight2
		End If
		Dim rowitems As Int = outRecord.GetInt("rowitems")
		
		If(ShareCode.ISPHONE And rowitems > 1) Then
			height = height + (rowitems*60dip)
'		Else If	(ShareCode.ISPHONE And rowitems = 1)Then
'			height = height + 60dip
		End If
	End If
	'Dim height As Int = 60dip
	Dim LayOutStr As String = "CLA_ITEM_EditBox_ValueINT2Confirm"
	If (ShareCode.ISPHONE) Then
		LayOutStr = "CLA_ITEM_EditBox_ValueINT2Confirm"
'		Dim height As Int = 100dip
	End If
	
	Dim p As Panel
	p.Initialize("CLALineClick")
	Activity.AddView(p, 0, 0, 100%x, height) '115dip)
	p.LoadLayout(LayOutStr)
	
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int = 0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
	If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	p.RemoveView
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
'	p.Tag = ItemTagcode
	
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	
	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")

	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
	
'	Private Row As Int = 0
	Private Record2 As Cursor
						
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${CurrentCLA.RepeatCounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
						
	If (DataBulkUpload=1) And (fieldval_04>=0) Then
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${CurrentCLA.RepeatCounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						and x.item_tagcode||x.item_tagcode||x.unique_key||x.repeatcounter in (select z.item_tagcode||z.item_tagcode||z.unique_key||z.repeatcounter  
						from dta_requests_values_adds as z where  z.fieldval_04=${fieldval_04})
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	Else
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${CurrentCLA.RepeatCounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	End If
	Log("--------------------------------------------------------------")
	Log(AllSQL)
	Log("--------------------------------------------------------------")
	Record2 = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	If Record2.RowCount > 0 Then
		Record2.Position = 0
		
		Dim Status As Int = Record2.GetInt("status")
		Dim value As String = Record2.GetString("value")
		Dim repeatcounter As Int = Record2.GetInt("repeatcounter")
		Dim execute_value_title As String = Record2.GetString("execute_value_title")
		
		UPDATED_EDIT_FIELDS.Add( Types.MakeFieldReference(ItemTagcode, CLAItemEditValueSTD, repeatfieldcounter))
			
		CLAItemEditValueSTD.Text = execute_value_title
		CLAItemButton_1.State = 0
			
		If (Status = 1) Then
			If (value = "1") Then
				CLAItemButton_1.State = 1
			End If
		End If
			
		CLAItemEditValueSTD.Enabled = Not(READONLY_FEATURES)
		CLAItemButton_1.Enabled = Not(READONLY_FEATURES)
		

		Dim SSTAG As String = $"${Record2.GetString("request_tagcode")}|${Record2.GetString("inner_request_tagcode")}|
						${Record2.GetString("task_tagcode")}|${Record2.GetString("item_tagcode")}|${Record2.GetString("unique_key")}|
						${Record2.GetString("tagcode")}|1|${CLAItemButton_1.State}|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
	
			
		CLAItemEditValueSTD.Tag = SSTAG
		CLAItemButton_1.Tag = SSTAG
		
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record2.GetString("request_tagcode"), _
					Record2.GetString("inner_request_tagcode"), _
					Record2.GetString("task_tagcode"), _
					Record2.GetString("item_tagcode"), _
					Record2.GetString("unique_key"), _
					Record2.GetString("tagcode"), _
					Record2.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter, "", "", "", 3, 0, 0, "", _
								DBStructures.DB2CLATaskItem(Record2.GetString("task_tagcode"), Record2.GetString("unique_key")), "")
								
		Dim pp As Panel = CLAItemEditValueSTD.Parent
		pp.Tag = CLAItem
	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record2.Close
	CLAButtonOptions.Tag = CLAItem
	CLAButtonOptions.Enabled = Not(READONLY_FEATURES)
	p.Tag = CLAItem
	
	If (innerPanel = 0) Then
		Dim pnl As B4XView = chapter.GetView(1)
		pnl.AddView(p, 0, Posis, chapter.Width, height)
'			pnlExpanded.AddView(p, 0, Posis, chapter.Width, height)
	Else
		chapter.AddView(p, 0, Posis, chapter.Width, height)
	End If
	Posis = Posis + height '115dip
	Return Posis
End Sub

' *************************************************************
' TIP: EVENTO DE ATUALIZAÇÃO AO PRESSIONAR ENTER (EDIÇÃO)
' *************************************************************
Sub CLAItemEditValueEnterPressedSTD(ftemp As EditText)

	'********************************************************
	'	FLE identifica se é EditText(1) ou FloatEditText(2)
	'********************************************************
	Dim fle As Int = 1
	Dim BigTag As String = ftemp.tag
	Dim BigText As String = ftemp.text
	Dim BigParent As Panel = ftemp.parent
	
	Dim ThisItemValue as String = BigText
	
'	Dim this As FloatLabeledEditText = Sender
	If (LoadingProcess = False) And (fle > 0) Then
		
		If Utils.NE(BigTag) Then
			BigTag = BigParent.Tag
		End If
		Log("»»»»»»»»»»»»»»»»»»»»»»»»»»  EDIT  «««««««««««««««««««««««««««")
'		Dim pan As Panel = this.Parent
'		Dim New As String = this.Text
		If Not(Utils.isNullOrEmpty(BigTag)) Then
			Dim Columns As List = Regex.Split("\|", BigTag) 'this.tag )
			If (Columns.Size > 1) Then
				
				Dim request_tagcode As String = Columns.Get(0)
				Dim action_tagcode As String = Columns.Get(1)
				Dim task_tagcode As String = Columns.Get(2)
				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
				Dim tagcode As String = Columns.Get(5)
'					Dim val As Int = Columns.Get(6)
'					Dim StatusIcon As Int = Columns.Get(7)
				Dim repeatcounter As Int = Columns.Get(9)
				Dim repeatitemcounter As Int = Columns.Get(10)
				Dim repeatfieldcounter As Int = Columns.Get(11)
				Dim sACLADatetime As String = Utils.GetCurrDatetime
				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
				
				Dim sqlCondition As String = $" and task_tagcode='${task_tagcode.trim}' and unique_key='${uniquekey.Trim}' "$
				Dim sqlCondition2 As String = $" and task_tagcode='${task_tagcode.trim}' and item_tagcode='${item_tagcode.trim}' and unique_key='${uniquekey.Trim}' "$
				
				Dim SetInner As Int = 0
				Try
					Dim lbl As Label = BigParent.GetView(0)
					If (Utils.NNE(lbl.Text)) Then
						If (lbl.Tag = 1) Then
							Dim sSQLw As String = $"update dta_requests_relations set inner_title='${BigText}'
							where request_tagcode='${request_tagcode.trim}' 
							and relation_tagcode='${task_tagcode.trim}' 
							and repeatcounter=${repeatcounter}"$
							Utils.SaveSQLToLog("CLAItemEditValue_FocusChanged",sSQLw, request_tagcode)
							'Starter.LocalSQLEVC.ExecNonQuery(sSQLw)
							SetInner = 1
						End If
					End If
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
				PressedAnswerTagCode = tagcode.Trim
				Dim Continuar As Boolean = True
				
'				Dim panpan As Panel = this.Parent
				Dim thisCLAItem As RequestCLAItem
				thisCLAItem.Initialize
				If (BigTag = BigParent.Tag) Then
					Dim thisCLAItem As RequestCLAItem = Types.MakeRequestCLAItem(request_tagcode.trim, _
								action_tagcode.trim, _
								task_tagcode.trim, _
								item_tagcode.trim, _
								uniquekey.trim, _
								tagcode.Trim, _
								repeatcounter, repeatitemcounter, repeatfieldcounter,"", "", "", 3, 0, 0, "", _
								DBStructures.DB2CLATaskItem(task_tagcode, uniquekey), "")
				Else
					Try
						Dim thisCLAItem As RequestCLAItem = BigParent.tag 'panpan.tag
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
						Continuar = False
					End Try
				End If
				
				
				Continuar = (Continuar) And (thisCLAItem Is RequestCLAItem)
				
				If Not(Continuar) Then
					Continuar = True
					Dim pnn As Panel = BigParent.Parent
					Try
						Dim thisCLAItem As RequestCLAItem = pnn.tag
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
						Continuar = False
					End Try
				End If
				
				If Continuar Then
					Dim force_control As Int = 0
					Dim type_control As Int = 0
					Dim relUniqueKey As String = ""
					
					'******************************************************
					' FUNCIONALIDADE DE VERIFICAÇÃO E CONTROLO 
					'******************************************************
			
					If (thisCLAItem.IsInitialized) Then
						If (Utils.NNE(thisCLAItem.Request)) Then
							Dim relUniqueKey As String = Utils.IfNullOrEmpty(thisCLAItem.TaskInfo.dependent_key, "")
							Dim force_control As Int = thisCLAItem.TaskInfo.force_control
							Dim type_control As Int = thisCLAItem.TaskInfo.type_control '1|2|3
						End If
					End If

					Dim status As Int = 0
					If Utils.NNE(BigText) Then
						status = 1
						
						'******************************************************************
						' VERIFICAÇÃO DE COMPARAÇÃO ENTRE O ITEM ACTUAL E O ITEM DEPENDENTE
						'******************************************************************
						If (force_control=1) And (type_control=1) Then
							Dim sSQLcheck As String = $"select execute_value from dta_requests_values where 1=1
							and request_tagcode='${request_tagcode.trim}'
							and task_tagcode='${task_tagcode.trim}' 
							and unique_key='${relUniqueKey.Trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
							
							'and item_tagcode='${item_tagcode.trim}' 
						
							Dim recrec As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQLcheck)
							If recrec.RowCount > 0 Then
								recrec.Position = 0
								Dim compValue As String = Utils.IfNullOrEmpty(recrec.GetString("execute_value"), "")
								Dim NCInt As Int = DBStructures.GetScriptColumnIntEVC($"select control_run_anyway as intval 
													from dta_tasks_items
													where 1=1 ${sqlCondition2}"$, "intval")
								If Not(BigText = compValue) Then
									If (fle = 1) Then
										ftemp.Color = Colors.Red
										ftemp.TextColor = Colors.White
									Else If (fle = 2) Then
										ftemp.Color = Colors.Red
										ftemp.TextColor = Colors.White
									End If
								Else
									If (fle = 1) Then
										ftemp.Color = Colors.Green
										ftemp.TextColor = Colors.White
									Else If (fle = 2) Then
										ftemp.Color = Colors.Green
										ftemp.TextColor = Colors.White
									End If
								End If
								
								If (NCInt = 1) Then 
									Dim dNCStr As String = "C"
									Dim dNCInt As Int = 1
									If Not(BigText = compValue) Then
										Dim dNCStr As String = "NC"
										Dim dNCInt As Int = 2
									End If
									Dim FindSQL As String = $"select * from dta_requests_values_adds where 1=1
											and request_tagcode='${request_tagcode.Trim}' 
											and task_tagcode='${task_tagcode.Trim}' 
											and item_tagcode='${item_tagcode.Trim}' 
											and unique_key='${uniquekey.Trim}' 
											and repeatcounter=${repeatcounter}
											and repeatitemcounter=${repeatitemcounter}
											and repeatfieldcounter=${repeatfieldcounter}"$
									Dim FindSQLData As Cursor = Starter.LocalSQLEVC.ExecQuery(FindSQL)
									If (FindSQLData.RowCount >= 1) Then
										Dim sRunSQL As String = $"update dta_requests_values_adds 
														set fieldref_01='${dNCStr}',
														fieldval_01='${dNCInt}'
														where 1=1
														and request_tagcode='${request_tagcode.Trim}' 
														and task_tagcode='${task_tagcode.Trim}' 
														and item_tagcode='${item_tagcode.Trim}' a
														nd unique_key='${uniquekey.Trim}' 
														and repeatcounter=${repeatcounter}
														and repeatitemcounter=${repeatitemcounter}
														and repeatfieldcounter=${repeatfieldcounter}"$
									Else
										Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_values_adds", "id", "") +1 + 1000000
										Dim sRunSQL As String = $"insert into dta_requests_values_adds 
											(id, request_tagcode, inner_request_tagcode, task_tagcode, item_tagcode, unique_key,
											repeatcounter, repeatitemcounter, repeatfieldcounter, fieldref_01, fieldval_01) values 
											(${maxid}, '${request_tagcode.Trim}', '${action_tagcode.Trim}', '${task_tagcode.Trim}', 
											'${item_tagcode.Trim}', '${uniquekey.Trim}', '${repeatcounter}', 
											'${repeatitemcounter}', '${repeatfieldcounter}', '${dNCStr}', '${dNCInt}')"$
									End If
									Utils.SaveSQLToLog("CLAItemEditValueAdd_FocusChanged",sRunSQL, request_tagcode.trim)
								End If
							End If
						End If
					End If
					
					Try
						
						Dim data_type As String = DBStructures.GetScriptColumnStrEVC($"SELECT data_type FROM dta_tasks_items WHERE 1=1
																						and task_tagcode = '${task_tagcode.Trim}'
																						AND item_tagcode = '${item_tagcode.trim}'"$,"data_type")
						
						If data_type = "21" Or data_type = "26" Then
							Dim sSQL As String = $"update dta_requests_values set execute_value_title='${BigText}',
							execute_status='${status}', 
							execute_datetime='${sACLADatetime}', 
							execute_latitude='${sACLALatitude}', execute_longitude='${sACLALongitude}'
							where request_tagcode='${request_tagcode.Trim}' and
							task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
							unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
						Else
							Dim sSQL As String = $"update dta_requests_values set execute_value='${BigText}',
							execute_status='${status}', 
							execute_datetime='${sACLADatetime}', 
							execute_latitude='${sACLALatitude}', execute_longitude='${sACLALongitude}'
							where request_tagcode='${request_tagcode.Trim}' and
							task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
							unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
						End If
						
					
						Log(sSQL)
						Utils.SaveSQLToLog("CLAItemEditValue_FocusChanged",sSQL, request_tagcode)
						'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
						Dim params As Map
						params.Initialize
						params.Clear
						params.Put("_token", ShareCode.APP_TOKEN)
						params.Put("ACLARequest", request_tagcode.trim)
						params.Put("ACLAAction", action_tagcode.trim)
						params.Put("ACLATask", task_tagcode.trim)
						params.Put("ACLAItem", item_tagcode.trim)
						params.Put("ACLAUniqueKey", uniquekey.trim)
						params.Put("ACLATagcode", tagcode.trim)

						If data_type = "21" Or data_type = "26" Then
							params.Put("ACLAValueTitle", BigText)
						Else
							params.Put("ACLAValue", BigText)
						End If
						params.Put("ACLAValue", BigText) ' SE NAO ENVIAR O ACLAValue, NO BO Não aparece nada. Falar com o Gabriel, para actualizar 21 e 26
						params.Put("ACLAReqCounter", repeatcounter)
						params.Put("ACLARepeatItem", repeatitemcounter)
						params.Put("ACLARepeatField", repeatfieldcounter)
						params.Put("ACLAInner", SetInner)
			
						params.Put("ACLADatetime", sACLADatetime)
						params.Put("ACLALatitude", sACLALatitude)
						params.Put("ACLALongitude", sACLALongitude)
				
						Dim ACLSessUser As String = ShareCode.SESS_OPER_User
						Dim ACLClear As Int = 0
						params.Put("ACLSessUser", ACLSessUser)
						params.Put("ACLClear", ACLClear)
						params.Put("versionTagcode", Main.VersionTagcode)
						params.Put("_authorization", Main.DeviceAuthorization)
						params.Put("_instance", Main.DeviceInstance)
						params.put("_deviceBrand", Main.DeviceBrand)
						params.put("_deviceModel", Main.DeviceModel)
						params.put("_deviceMacAddress", Main.DeviceMacAddress)
						params.Put("_user", ShareCode.SESS_User)
						Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
						If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
							If Not(ShareCode.APP_WORKING_LOCAL) Then
								Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
								Wait For (GODR) Complete (HasResults As Boolean)
								If HasResults Then
									Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
									Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
								Else
									Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim)
								End If
							Else
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							End If
							Sleep(250)
						Else
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						End If
						
						
						'******************************************************************************
						'	CONTROLO DE ACAIL
						'******************************************************************************
						If (uniquekey.trim = "ad997355-0c5c-57a1-86ab-16aea41a974c") Or _
							(uniquekey.trim = "fe883a15-4df5-50b6-8eba-31b15564cddc") Or _
							(uniquekey.trim = "3c335a96-fc34-5bc8-b286-d61730eafe7c") Then
							Dim ContinuaAcail As Boolean = True
							Try
								Dim valueAcail As Int = BigText
							Catch
								ContinuaAcail = False
							End Try
							
							If (ContinuaAcail) Then
								If valueAcail >= 90 Then
									Dim backColor As Int = Consts.ColorGreen
									Dim fontColor As Int = Colors.Black
								Else
									Dim backColor As Int = Consts.ColorRed
									Dim fontColor As Int = Consts.ColorWhite
								End If
								If (fle = 1) Then
									ftemp.Color = backColor
									ftemp.TextColor = fontColor
								Else If (fle = 2) Then
									ftemp.Color = backColor
									ftemp.TextColor = fontColor
								End If
							End If
							
						else If (uniquekey.trim = "0f89b48e-9214-560d-a056-77aa23e5e90c") Then
							Dim ContinuaAcail As Boolean = True
							Try
								Dim valueAcail As Int = BigText
							Catch
								ContinuaAcail = False
							End Try
							
							If (ContinuaAcail) Then
								If (valueAcail >= 5) And (valueAcail<=7) Then
									Dim backColor As Int = Consts.ColorGreen
									Dim fontColor As Int = Colors.Black
								Else
									Dim backColor As Int = Consts.ColorRed
									Dim fontColor As Int = Consts.ColorWhite
								End If
								If (fle = 1) Then
									ftemp.Color = backColor
									ftemp.TextColor = fontColor
								Else If (fle = 2) Then
									ftemp.Color = backColor
									ftemp.TextColor = fontColor
								End If
							
							End If
							
						End If
					
						'******************************************************************************
						'	CONTROLO DE EVENTOS
						'******************************************************************************
						If (NONCLICK = 0) Then
							Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
										$"select distinct paramters 
										from dta_tasks_items_adds where 1=1
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${item_tagcode.trim}'
										And unique_key='${uniquekey.trim}'"$, "paramters")	

							Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
								And task_tagcode='${task_tagcode.trim}'
								And item_tagcode='${item_tagcode.trim}'
								And unique_key='${uniquekey.trim}'
								And tagcode='${tagcode.trim}'
								Order by position"$  
							Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
							If Eventos.RowCount >= 1 Then
								For n=0 To Eventos.RowCount-1
									Eventos.Position = n
				
									Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
									If (evt.type_item = 9) Then
'									ControlUpdateRequestField(BigParent.Tag, evt.value, BigText)
										ControlUpdateRequestField(thisCLAItem, evt.value, BigText)
									Else
										If (Utils.Int2Bool(evt.is_status)) Then
											If (Utils.Int2Bool(evt.have_condition) And Utils.Int2Bool(evt.have_status)) Then
												ForceTerminateChecklistAndCreate(evt.value)
											Else
												ForceTerminateChecklist(evt.value)
											End If
										else if (Utils.Int2Bool(evt.is_foto)) Then
'										ForceTakePicture(BigParent.Tag)
											ForceTakePicture(thisCLAItem)
										else if (Utils.Int2Bool(evt.is_more)) Then
'										ForceAddMore(BigParent.Tag)
											ForceAddMore(thisCLAItem)
										else if (Utils.Int2Bool(evt.is_action)) Then
											'ForceAddAction(BigParent.Tag)
											If Utils.NNE(evt.value) Then
'											ForceAddActionTPA(BigParent.Tag, evt.value, "")
												ForceAddActionTPA(thisCLAItem, evt.value, "",0)
											Else
'											ForceAddAction(BigParent.Tag)
												ForceAddAction(thisCLAItem)
											End If
										else if (Utils.Int2Bool(evt.is_jump)) Then
											ForceAddJump(evt.value)
										else if ((Utils.Int2Bool(evt.is_alert)) Or (Utils.Int2Bool(evt.is_email))) Then
										else if ((Utils.Int2Bool(evt.request_signature)) Or ((evt.event_tagcode = "EVENTTASK_SIGNATURE") And (evt.type_item = 4))) Then
'										ForceAddSignature(BigParent.Tag)
											ForceAddSignature(thisCLAItem)
										else if (Utils.Int2Bool(evt.have_formula) And (evt.type_item = 2)) Then
											Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
											Wait For(res) Complete (retAPI As ExternalDocsInfo)
											If(retAPI.status = 1) Then
												Log($"Missing File downloaded"$)
'												Dim pp As B4XView = BigParent.Parent
'												For Each v As B4XView In pp.GetAllViewsRecursive
'													If (v Is Label) Then
'														Dim lbl As Label = v
'														lbl.Invalidate
'													End If
'												Next
											End If
										else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
											Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
											Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
											SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, False)
										else if ((evt.event_tagcode = "EVENTTASK_MANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
											Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
											Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
											SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, True)
										else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYALLDOWN") And (evt.type_item = 7)) Then
											SetMandatoryStateAfterItem(item_tagcode.trim, False)
										else if ((evt.event_tagcode = "EVENTTASK_MANDATORYALLDOWN") And (evt.type_item = 7)) Then
											SetMandatoryStateAfterItem(item_tagcode.trim, True)
										else if ((evt.event_tagcode = "EVENTTASK_INTEGRATION") And (evt.type_item = 8)) Then
											Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
											Wait For(res) Complete (retAPI As ExternalDocsInfo)
											If(retAPI.status = 1) Then
												Log($"Missing File downloaded"$)
											End If
										else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTER") And (evt.type_item = 30)) Then
'											Dim ItemTagCode As String = item_tagcode.Trim
'											Dim valorVerificar As String = ""
'											If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
'												ItemTagCode = evt.value.Trim
'											End If
'											Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
'											Wait For(res) Complete (retval As Int)
'											valorVerificar = retval
'			
'											Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
'													repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
'											Wait For(res1) Complete (retbool As Boolean)
											Dim ContinuarCheck As Boolean = True
											If (Utils.NNE(ThisItemValue) And Utils.isNumeric(ThisItemValue) And Utils.Int2Bool(evt.have_status)) Then
												ContinuarCheck = False ' JÁ TEM VALOR
											End If
			
											If (ContinuarCheck) Then
												Dim ItemTagCode As String = item_tagcode.Trim
												Dim valorVerificar As String = ""
												If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
													ItemTagCode = evt.value.Trim
												End If
												Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
												Wait For(res) Complete (retval As Int)
												valorVerificar = retval
				
												ThisItemValue = valorVerificar
			
												Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
													repeatcounter, repeatitemcounter, repeatitemcounter, ThisItemValue)
												Wait For(res1) Complete (retbool As Boolean)
											End If
			
'											If (Utils.NNE(ThisItemValue)) Then
'												If (this Is B4XStateButton) And (evt.have_condition=9) Then
'													Dim b4xsb_this As B4XStateButton = this
'													b4xsb_this.Text = ThisItemValue
'												End If
'											End If
										else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTEROTHER") And (evt.type_item = 31)) Then
											'*******************************************************************************************************
											' NOTE: A MESMA FUNCIONALIDADE SÓ QUE PERMITE INDICAR OUTRO ITEM_TAGCODE QUE VAI RECEBER O RESULTADO
											'*******************************************************************************************************
											Dim ItemTagCode As String = item_tagcode.Trim
											Dim OtherValue As String = ""
											Dim valorVerificar As String = ""
											If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
												ItemTagCode = evt.value.Trim
											End If
											If (Utils.NNE(evt.formula)) Then
												OtherValue = evt.formula.Trim
											End If
											Dim res As ResumableSub = CLAIGetSetExternalCounterOther(task_tagcode, ItemTagCode, ThisItemValue, OtherValue, evt)
											Wait For(res) Complete (retval As Int)
											valorVerificar = retval
			
											Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, OtherValue, uniquekey, PressedAnswerTagCode, _
													repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
											Wait For(res1) Complete (retbool As Boolean)
			
										End If
									End If
				
								Next
							End If
						End If
						
					
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
					End Try
				End If

			End If

		End If
	End If
	NONCLICK = 0
End Sub
		
' *************************************************************
' TIP: EVENTO DE BOTÃO MENUS (OPÇÃO 27 - STOCK)
' *************************************************************
Sub CreateLineItemStockPlusMinus(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
		ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
		ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	
	If (CurrentOrientation=0) Then
		Dim height As Int = outRecord.GetInt("height_land") + DeviceHeight2
	Else
		Dim height As Int = outRecord.GetInt("height_port") + DeviceHeight2
		
		Dim rowitems As Int = outRecord.GetInt("rowitems")
		
		If(ShareCode.ISPHONE And rowitems > 1) Then
			height = height + (rowitems*60dip)
		Else If	(ShareCode.ISPHONE And rowitems = 1)Then
			height = height + 60dip
		End If
	End If
'	Dim frmt As Int = outRecord.GetInt("distinct_rows")
	'Dim height As Int = 75dip
	
	Dim LayOutStr As String = "CLA_item_editbox_stock_PlusMinus"
	
	Dim p As Panel
	p.Initialize("CLALineClick")
	Activity.AddView(p, 0, 0, 100%x, height) '115dip)
	p.LoadLayout(LayOutStr)
	
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int = 0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
	If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	p.RemoveView
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0,"", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
'	p.Tag = ItemTagcode
	
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
	
	'CLAItemTitle.Text = $"${taggedID}.${subidx} - ${Title}"$
'	If Utils.NNE(ExtraInfo) Then CLAItemTitleInfo.Text = ExtraInfo
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	'Dim Repeat As Int = outRecord.GetInt("repeated")
'	Dim Multi As Int = outRecord.GetInt("multiple")
	Dim Critical As Int = outRecord.GetInt("critical")
	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)
	
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
	
	Private Record As Cursor

	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	
	Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
						
	If (DataBulkUpload=1) And (fieldval_04>=0) Then
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						and x.item_tagcode||x.item_tagcode||x.unique_key||x.repeatcounter in (select z.item_tagcode||z.item_tagcode||z.unique_key||z.repeatcounter  
						from dta_requests_values_adds as z where  z.fieldval_04=${fieldval_04})
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	Else
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	End If
	Log(AllSQL)
	Record = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	If Record.RowCount > 0 Then
		Record.Position = 0
		Dim vtype As Int = Record.GetInt("val_datatype")
		CLAItemEditValueStk.Hint = Record.GetString("val_title")
		CLAItemEditValueStk.TextSize = 16
		CLAItemEditValueStk.Padding = Array As Int (1dip, 1dip, 1dip, 1dip)
		CLAItemEditValueStk.Gravity = Gravity.CENTER
		
		Dim val_format As Int = Record.GetInt("val_format")
		
		
		'CLAItemEditValueStk.EditText.InputType = CLAItemEditValueStk.EditText.INPUT_TYPE_NUMBERS
		If (vtype=13) Then
			CLAItemEditValueStk.InputType = CLAItemEditValueStk.INPUT_TYPE_NUMBERS
		else If (vtype=18) Then
			CLAItemEditValueStk.InputType = CLAItemEditValueStk.INPUT_TYPE_DECIMAL_NUMBERS
		else If ((vtype=21) Or (vtype=23)) Then
			CLAItemEditValueStk.InputType = CLAItemEditValueStk.INPUT_TYPE_NUMBERS
			If (val_format = 18) Then
				CLAItemEditValueStk.InputType = CLAItemEditValueStk.INPUT_TYPE_DECIMAL_NUMBERS
			End If
		End If
		Dim Value2Show As String = Utils.IfNullOrEmpty(Record.GetString("value"), _
								Utils.IfNullOrEmpty(objValue, _
								Utils.IfNullOrEmpty(Record.GetString("value_default"),"")))
		Dim repeatcounter As Int = Record.GetInt("repeatcounter")
'		If Not(Utils.isNullOrEmpty(Record.GetString("value"))) Then
'			CLAItemEditValueStk.Text = Record.GetString("value")
'		End If
		CLAItemEditValueStk.Enabled = Not(READONLY_FEATURES)
		CLAItemEditValuePLUS.Enabled = Not(READONLY_FEATURES)
		CLAItemEditValueMINUS.Enabled = Not(READONLY_FEATURES)
				
		Dim SSTAG As String = $"${Record.GetString("request_tagcode")}|${Record.GetString("inner_request_tagcode")}|
					${Record.GetString("task_tagcode")}|${Record.GetString("item_tagcode")}|${Record.GetString("unique_key")}|
					${Record.GetString("tagcode")}|1|0|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
		
		CLAItemEditValueStk.Tag = SSTAG
'		p.Tag = SSTAG
						
		'*******************************************************************************
		' SE O STATUS FOR 3 (Concluido) MOSTRA A Qtd MOVIMENTADA NA CLAItemEditValueStk E O STOCK DA ALTURA NA CLA_Stock
		' SE O STATUS FOR 2 (Reaberto) MOSTRA A Qtd A 0 E O STOCK QUE EXISTE ACTUALMENTE NA CLA_Stock
		'*******************************************************************************
		Dim run_enddate As String =  DBStructures.GetScriptColumnStrEVC($"select run_enddate from dta_requests where tagcode = '${CurrentCLA.Request.trim}'"$,"run_enddate")
		
		
		If CurrentCLA.Status.status = 3 Then
			
			Dim request_tagcode As String = CurrentCLA.Request
			Dim task_tagcode As String = CurrentCLA.Task
			
'			Dim Stock_ref As Int =  DBStructures.GetScriptColumnIntEVC($"select val_min from dta_requests_values
'								where request_tagcode='${request_tagcode.trim}' and
'								task_tagcode='${task_tagcode.Trim}' and item_tagcode='${ItemTagcode.Trim}' and 
'								unique_key='${UniqueKey.Trim}' 
'								And repeatcounter=${repeatcounter}
'								And repeatitemcounter=${repeatitemcounter}
'								And repeatfieldcounter=${repeatfieldcounter}"$, "val_min")


			Dim Stock_ref As Int =  DBStructures.GetScriptColumnIntEVC($"select fieldval_02 from dta_requests_values_adds
								where request_tagcode='${request_tagcode.trim}' and
								task_tagcode='${task_tagcode.Trim}' and item_tagcode='${ItemTagcode.Trim}' and 
								unique_key='${UniqueKey.Trim}' 
								And repeatcounter=${repeatcounter}
								And repeatitemcounter=${repeatitemcounter}
								And repeatfieldcounter=${repeatfieldcounter}"$, "fieldval_02")
			

			CLAItemEditValueStk.Text = Value2Show
			CLA_StockTitle.text = $"${ShareCode.MsgStockHistorico}${CRLF}${Stock_ref}"$
			CLA_Stock.Text = $"${Stock_ref}"$
		else If CurrentCLA.Status.status = 2 And Utils.NNE(run_enddate) Then
				
			Dim request_tagcode As String = CurrentCLA.Request
			Dim task_tagcode As String = CurrentCLA.Task
			
'			Dim Stock_ref As Int =  DBStructures.GetScriptColumnIntEVC($"select val_min from dta_requests_values
'								where request_tagcode='${request_tagcode.trim}' and
'								task_tagcode='${task_tagcode.Trim}' and item_tagcode='${ItemTagcode.Trim}' and 
'								unique_key='${UniqueKey.Trim}' 
'								And repeatcounter=${repeatcounter}
'								And repeatitemcounter=${repeatitemcounter}
'								And repeatfieldcounter=${repeatfieldcounter}"$, "val_min")

			Dim Stock_ref As Int =  DBStructures.GetScriptColumnIntEVC($"select fieldval_02 from dta_requests_values_adds
								where request_tagcode='${request_tagcode.trim}' and
								task_tagcode='${task_tagcode.Trim}' and item_tagcode='${ItemTagcode.Trim}' and 
								unique_key='${UniqueKey.Trim}' 
								And repeatcounter=${repeatcounter}
								And repeatitemcounter=${repeatitemcounter}
								And repeatfieldcounter=${repeatfieldcounter}"$, "fieldval_02")

			CLAItemEditValueStk.Text = Value2Show
'			CLA_StockTitle.text = $"${ShareCode.MsgStockHistorico}"$
			CLA_StockTitle.text = $"${ShareCode.MsgStockHistorico}${CRLF}${Stock_ref}"$
			CLA_Stock.Text = $"${Stock_ref}"$
		else If CurrentCLA.Status.status = 2 And Utils.NE(run_enddate) Then
			CLAItemEditValueStk.Text = "0"
'			CLA_StockTitle.text = $"${ShareCode.MsgStockActual}"$
			CLA_StockTitle.text = $"${ShareCode.MsgStockActual}${CRLF}${Record.GetInt("value")}"$
			CLA_Stock.Text = $"${Record.GetInt("value")}"$
		Else
			CLAItemEditValueStk.Text = "0"
'			CLA_StockTitle.text = $"${ShareCode.MsgStockActual}"$
			CLA_StockTitle.text = $"${ShareCode.MsgStockActual}${CRLF}${Record.GetInt("value")}"$
			CLA_Stock.Text = $"${Record.GetInt("value")}"$
		End If

		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record.GetString("request_tagcode"), _
				Record.GetString("inner_request_tagcode"), _
				Record.GetString("task_tagcode"), _
				Record.GetString("item_tagcode"), _
				Record.GetString("unique_key"), _
				Record.GetString("tagcode"), _
				Record.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter, Title.Trim, "", "", 3, 0, 0, "", _
				DBStructures.DB2CLATaskItem(Record.GetString("task_tagcode"), Record.GetString("unique_key")), "")
	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record.Close
	CLAButtonOptions.Tag = CLAItem
	CLAButtonOptions.Enabled = Not(READONLY_FEATURES)
	p.Tag = CLAItem
	
	If (innerPanel = 0) Then
		Dim pnl As B4XView = chapter.GetView(1)
		pnl.AddView(p, 0, Posis, chapter.Width, height)
'			pnlExpanded.AddView(p, 0, Posis, chapter.Width, height)
	Else
		chapter.AddView(p, 0, Posis, chapter.Width, height)
	End If
	'clListView.ExpandItem(0)
	Posis = Posis + height '115dip
	Return Posis


End Sub

Sub CLAItemEditValueSTDDOWN_Click
	Dim this As Button = Sender
	Log("Clicou DOWN")
	If (LoadingProcess = False) Then
		
		Dim pan As Panel = this.Parent
		Dim edit As EditText = pan.GetView(0)
	
		Log(edit.InputType)
		If (edit.InputType = edit.INPUT_TYPE_DECIMAL_NUMBERS) Or _
			(edit.InputType = edit.INPUT_TYPE_NUMBERS) Then
			
			If (edit.InputType = edit.INPUT_TYPE_DECIMAL_NUMBERS) Then
				Dim vd As Double = edit.Text
				vd = vd - 1
				edit.Text = vd
			else If (edit.InputType = edit.INPUT_TYPE_NUMBERS) Then
				Dim vi As Int = edit.Text
				vi = vi -1
				edit.Text = vi
			End If
			Log(edit.Text)
			
			CLAItemEditValueEnterPressedSTD(edit)
		Else
			Log("Não é do tipo numero")
		End If
		
	End If
End Sub

Sub CLAItemEditValueSTDUP_Click
	Dim this As Button = Sender
	Log("Clicou UP")
	If (LoadingProcess = False) Then
		
		Dim pan As Panel = this.Parent
		Dim edit As EditText = pan.GetView(0)
		edit.Text = Utils.IfNullOrEmpty(edit.Text, "0")
		
		If Not(IsNumber(edit.Text)) Then
			edit.Text = 0
		End If
		
		Log(edit.InputType)
		If (edit.InputType = edit.INPUT_TYPE_DECIMAL_NUMBERS) Or _
			(edit.InputType = edit.INPUT_TYPE_NUMBERS) Then
			
			If (edit.InputType = edit.INPUT_TYPE_DECIMAL_NUMBERS) Then
				Dim vd As Double = edit.Text
				vd = vd + 1
				edit.Text = vd
			else If (edit.InputType = edit.INPUT_TYPE_NUMBERS) Then
				Dim vi As Int = edit.Text
				vi = vi + 1
				edit.Text = vi
			End If
			Log(edit.Text)
			
			CLAItemEditValueEnterPressedSTD(edit)
		Else
			Log("Não é do tipo numero")
		End If
		
	End If
End Sub

Sub CLAItemEditValueDOWN_Click
	Dim this As Button = Sender
	Log("Clicou DOWN")
	If (LoadingProcess = False) Then
		
		Dim pan As Panel = this.Parent
		Dim edit As FloatLabeledEditText = pan.GetView(0)
	
		If Not(IsNumber(edit.Text)) Then
			edit.Text = 0
		End If
		
		Log(edit.EditText.InputType)
		If (edit.EditText.InputType = edit.EditText.INPUT_TYPE_DECIMAL_NUMBERS) Or _
			(edit.EditText.InputType = edit.EditText.INPUT_TYPE_NUMBERS) Then
			
			If (edit.EditText.InputType = edit.EditText.INPUT_TYPE_DECIMAL_NUMBERS) Then
				Dim vd As Double = edit.Text
				vd = vd - 1
				edit.Text = vd
			else If (edit.EditText.InputType = edit.EditText.INPUT_TYPE_NUMBERS) Then
				Dim vi As Int = edit.Text
				vi = vi -1
				edit.Text = vi
			End If
			Log(edit.Text)
			CLAItemEditValueEnterPressed(edit)
		Else
			Log("Não é do tipo numero")
		End If
		
	End If
End Sub

Sub CLAItemEditValueUP_Click
	Dim this As Button = Sender
	Log("Clicou UP")
	If (LoadingProcess = False) Then
		
		Dim pan As Panel = this.Parent
		Dim edit As FloatLabeledEditText = pan.GetView(0)
		edit.Text = Utils.IfNullOrEmpty(edit.Text, "0")
	
		Log(edit.EditText.InputType)
		If (edit.EditText.InputType = edit.EditText.INPUT_TYPE_DECIMAL_NUMBERS) Or _
			(edit.EditText.InputType = edit.EditText.INPUT_TYPE_NUMBERS) Then
			
			If (edit.EditText.InputType = edit.EditText.INPUT_TYPE_DECIMAL_NUMBERS) Then
				Dim vd As Double = edit.Text
				vd = vd + 1
				edit.Text = vd
			else If (edit.EditText.InputType = edit.EditText.INPUT_TYPE_NUMBERS) Then
				Dim vi As Int = edit.Text
				vi = vi + 1
				edit.Text = vi
			End If
			Log(edit.Text)
			
			CLAItemEditValueEnterPressed(edit)
		Else
			Log("Não é do tipo numero")
		End If
	End If
End Sub

Sub CLAItemEditValueSTD_TextChanged (Old As String, New As String)
'	Dim edit As EditText = Sender
'	Dim pan As Panel = edit.Parent
'	Dim this As B4XStateButton = pan.GetView(1)
'	this.MakeClick
End Sub

Sub CLAItemEditValueSTD_EnterPressed
'	Dim edit As EditText = Sender
'	Dim pan As Panel = edit.Parent
'	Dim this As B4XStateButton = pan.GetView(1)
'	this.MakeClick
End Sub

' *************************************************************
' TIP: ATUALIZA REGISTO DE INTERVENÇÃO NO FOCUS (TIPO STD)
' *************************************************************
Sub CLAItemEditValueSTD_FocusChanged (HasFocus As Boolean)
	Dim this As EditText = Sender

	If (HasFocus = True) Then
		this.SelectAll
	Else
		ManageFocus(this)
		If (LoadingProcess = False) Then
			
			Log("»»»»»»»»»»»»»»»»»»»»»»»»»»  EDIT  «««««««««««««««««««««««««««")
			Dim pan As Panel = this.Parent
			Dim thisTAG As String = this.Tag
			Dim New As String = this.Text
			Dim ThisItemValue As String = New
'			Log(this.Tag)
			'If Not(Utils.isNullOrEmpty(pan.Tag)) And (pan.tag = thisTAG)  Then
			If Not(Utils.isNullOrEmpty(this.Tag)) Then
				Dim Columns As List = Regex.Split("\|", thisTAG) 'this.tag )
'				Log(Columns.Size)
				If (Columns.Size > 1) Then
					
					Dim request_tagcode As String = Columns.Get(0)
					Dim action_tagcode As String = Columns.Get(1)
					Dim task_tagcode As String = Columns.Get(2)
					Dim item_tagcode As String = Columns.Get(3)
					Dim uniquekey As String = Columns.Get(4)
					Dim tagcode As String = Columns.Get(5)
					Dim val As Int = Columns.Get(6)
					Dim StatusIcon As Int = Columns.Get(7)
					Dim repeatcounter As Int = Columns.Get(9)
					Dim repeatitemcounter As Int = Columns.Get(10)
					Dim repeatfieldcounter As Int = Columns.Get(11)
					Dim sACLADatetime As String = Utils.GetCurrDatetime
					Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
					Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
					Log(request_tagcode)
					Dim SetInner As Int = 0
					Try
'						Log(pan.GetView(0))
						Dim lbl As Label = pan.GetView(0)
						If (Utils.NNE(lbl.Text)) Then
'							Log(lbl.Tag)
							If (lbl.Tag = 1) Then
								Dim sSQLw As String = $"update dta_requests_relations set inner_title='${New}'
								where request_tagcode='${request_tagcode.trim}' 
								and relation_tagcode='${task_tagcode.trim}' 
								and repeatcounter=${repeatcounter}"$
								Utils.SaveSQLToLog("CLAItemEditValue_FocusChanged",sSQLw, request_tagcode)
								'Starter.LocalSQLEVC.ExecNonQuery(sSQLw)
								SetInner = 1
							End If
						End If
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
					End Try
					
					PressedAnswerTagCode = tagcode.trim
					Dim Continuar As Boolean = True
'					Log(PressedAnswerTagCode)
					Dim panpan As Panel = this.Parent
					If (Utils.NE(panpan.Tag)) Then
						panpan.Tag = Types.MakeRequestCLAItem(request_tagcode, action_tagcode, task_tagcode, _
								item_tagcode, uniquekey, tagcode.Trim, repeatcounter, repeatitemcounter, repeatfieldcounter, _
								"", "", val, 0,0,1,"", DBStructures.DB2CLATaskItem("", ""), "")
					End If
					
					
					Dim thisCLAItem As RequestCLAItem
					thisCLAItem.Initialize
					Try
						Dim thisCLAItem As RequestCLAItem = panpan.tag
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
						Continuar = False
					End Try
					
					Continuar = (Continuar) And (thisCLAItem Is RequestCLAItem)
					
					If Continuar Then
						Dim force_control As Int = 0
						Dim type_control As Int = 0
						Dim relUniqueKey As String = ""
				
						If (thisCLAItem.IsInitialized) Then
							If (Utils.NNE(thisCLAItem.Request)) Then
								Dim relUniqueKey As String = Utils.IfNullOrEmpty(thisCLAItem.TaskInfo.dependent_key, "")
								Dim force_control As Int = thisCLAItem.TaskInfo.force_control
								Dim type_control As Int = thisCLAItem.TaskInfo.type_control '1|2|3
							End If
						End If

						Dim status As Int = 0
						If Utils.NNE(New) Then
							status = 1
						
							If (force_control=1) And (type_control=1) Then
								Dim sSQLcheck As String = $"select execute_value from dta_requests_values where 1=1
															and request_tagcode='${request_tagcode.trim}'
															and task_tagcode='${task_tagcode.trim}' 
															and item_tagcode='${item_tagcode.trim}' 
															and unique_key='${relUniqueKey.Trim}'
															and repeatcounter=${repeatcounter}
															and repeatitemcounter=${repeatitemcounter}
															and repeatfieldcounter=${repeatfieldcounter}"$
							
								Dim recrec As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQLcheck)
								If recrec.RowCount > 0 Then
									recrec.Position = 0
									Dim compValue As String = Utils.IfNullOrEmpty(recrec.GetString("execute_value"), "")
									If Not(New = compValue) Then
										this.Color = Colors.Red
										this.TextColor = Colors.White
									Else
										this.Color = Colors.Green
										this.TextColor = Colors.White
									End If
								End If
							End If
						
						End If
						Try
							Dim sSQL As String = $"update dta_requests_values set execute_value='${New}',
								execute_value_title='${New}',
								execute_status='${status}', 
								execute_datetime='${sACLADatetime}', 
								execute_latitude='${sACLALatitude}', execute_longitude='${sACLALongitude}'
								where request_tagcode='${request_tagcode.Trim}' and
								task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
								unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}'
								and repeatcounter=${repeatcounter}
								and repeatitemcounter=${repeatitemcounter}
								and repeatfieldcounter=${repeatfieldcounter}"$
						
							Log(sSQL)
							Utils.SaveSQLToLog("CLAItemEditValue_FocusChanged",sSQL, request_tagcode)
							'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
							Dim params As Map
							params.Initialize
							params.Clear
							params.Put("_token", ShareCode.APP_TOKEN)
							params.Put("ACLARequest", request_tagcode)
							params.Put("ACLAAction", action_tagcode)
							params.Put("ACLATask", task_tagcode)
							params.Put("ACLAItem", item_tagcode)
							params.Put("ACLAUniqueKey", uniquekey)
							params.Put("ACLATagcode", tagcode)
							params.Put("ACLAValue", New)
							params.Put("ACLAValueTitle", New)
							params.Put("ACLAReqCounter", repeatcounter)
							params.Put("ACLARepeatItem", repeatitemcounter)
							params.Put("ACLARepeatField", repeatfieldcounter)
							params.Put("ACLAInner", SetInner)
				
							params.Put("ACLADatetime", sACLADatetime)
							params.Put("ACLALatitude", sACLALatitude)
							params.Put("ACLALongitude", sACLALongitude)
					
							Dim ACLSessUser As String = ShareCode.SESS_OPER_User
							Dim ACLClear As Int = 0
							params.Put("ACLSessUser", ACLSessUser)
							params.Put("ACLClear", ACLClear)
							params.Put("versionTagcode", Main.VersionTagcode)
							params.Put("_authorization", Main.DeviceAuthorization)
							params.Put("_instance", Main.DeviceInstance)
							params.put("_deviceBrand", Main.DeviceBrand)
							params.put("_deviceModel", Main.DeviceModel)
							params.put("_deviceMacAddress", Main.DeviceMacAddress)
							params.Put("_user", ShareCode.SESS_User)
							Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
							If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
								If Not(ShareCode.APP_WORKING_LOCAL) Then
									Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
									Wait For (GODR) Complete (HasResults As Boolean)
									If HasResults Then
										Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
										Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
									Else
										Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim)
									End If
								Else
									Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
									Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
								End If
								Sleep(500)
							Else
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							End If
						
							'******************************************************************************
							'	CONTROLO DE EVENTOS
							'******************************************************************************
							If (NONCLICK = 0) Then
								Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
										$"select distinct paramters 
										from dta_tasks_items_adds where 1=1
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${item_tagcode.trim}'
										And unique_key='${uniquekey.trim}'"$, "paramters")	

								Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
									And task_tagcode='${task_tagcode.trim}'
									And item_tagcode='${item_tagcode.trim}'
									And unique_key='${uniquekey.trim}'
									And tagcode='${tagcode.trim}'
									Order by position"$  
								Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
								If Eventos.RowCount >= 1 Then
									For n=0 To Eventos.RowCount-1
										Eventos.Position = n
					
										Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
										If (evt.type_item = 9) Then
											ControlUpdateRequestField(pan.Tag, evt.value, New)
										Else
											If (Utils.Int2Bool(evt.is_status)) Then
												If (Utils.Int2Bool(evt.have_condition) And Utils.Int2Bool(evt.have_status)) Then
													ForceTerminateChecklistAndCreate(evt.value)
												Else
													ForceTerminateChecklist(evt.value)
												End If
											else if (Utils.Int2Bool(evt.is_foto)) Then
												ForceTakePicture(pan.Tag)
											else if (Utils.Int2Bool(evt.is_more)) Then
												ForceAddMore(pan.Tag)
											else if (Utils.Int2Bool(evt.is_action)) Then
												'ForceAddAction(pan.Tag)
												If Utils.NNE(evt.value) Then
													ForceAddActionTPA(pan.Tag, evt.value, "",0)
												Else
													ForceAddAction(pan.Tag)
												End If
											else if (Utils.Int2Bool(evt.is_jump)) Then
												ForceAddJump(evt.value)
											else if ((Utils.Int2Bool(evt.is_alert)) Or (Utils.Int2Bool(evt.is_email))) Then
											else if ((Utils.Int2Bool(evt.request_signature)) Or ((evt.event_tagcode = "EVENTTASK_SIGNATURE") And (evt.type_item = 4))) Then
												ForceAddSignature(pan.Tag)
											else if (Utils.Int2Bool(evt.have_formula) And (evt.type_item = 2)) Then
												Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
												Wait For(res) Complete (retAPI As ExternalDocsInfo)
												If(retAPI.status = 1) Then
													Log($"Missing File downloaded"$)
'													Dim pp As B4XView = this.Parent
'													Dim ppp As B4XView = pp.Parent
'													For Each v As B4XView In ppp.GetAllViewsRecursive
'														If (v Is Label) Then
'															Dim lbl As Label = v
'															lbl.Invalidate
'														End If
'													Next
												End If
											else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
												Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
												Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
												SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, False)
											else if ((evt.event_tagcode = "EVENTTASK_MANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
												Dim bullet_master As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
												Dim bullet_child As Int = Utils.IfNullOrEmpty( _
											DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
													And task_tagcode='${task_tagcode.trim}'
													And item_tagcode='${item_tagcode.trim}'
													And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
												SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, True)
											else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYALLDOWN") And (evt.type_item = 7)) Then
												SetMandatoryStateAfterItem(item_tagcode.trim, False)
											else if ((evt.event_tagcode = "EVENTTASK_MANDATORYALLDOWN") And (evt.type_item = 7)) Then
												SetMandatoryStateAfterItem(item_tagcode.trim, True)
											else if ((evt.event_tagcode = "EVENTTASK_INTEGRATION") And (evt.type_item = 8)) Then
												Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
													item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
												Wait For(res) Complete (retAPI As ExternalDocsInfo)
												If(retAPI.status = 1) Then
													Log($"Missing File downloaded"$)
												End If
											else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTER") And (evt.type_item = 30)) Then
'												Dim ItemTagCode As String = item_tagcode.Trim
'												Dim valorVerificar As String = ""
'												If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
'													ItemTagCode = evt.value.Trim
'												End If
'												Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
'												Wait For(res) Complete (retval As Int)
'												valorVerificar = retval
'			
'												Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
'													repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
'												Wait For(res1) Complete (retbool As Boolean)
												Dim ContinuarCheck As Boolean = True
												If (Utils.NNE(ThisItemValue) And Utils.isNumeric(ThisItemValue) And Utils.Int2Bool(evt.have_status)) Then
													ContinuarCheck = False ' JÁ TEM VALOR
												End If
			
												If (ContinuarCheck) Then
													Dim ItemTagCode As String = item_tagcode.Trim
													Dim valorVerificar As String = ""
													If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
														ItemTagCode = evt.value.Trim
													End If
													Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
													Wait For(res) Complete (retval As Int)
													valorVerificar = retval
				
													ThisItemValue = valorVerificar
			
													Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
														repeatcounter, repeatitemcounter, repeatitemcounter, ThisItemValue)
													Wait For(res1) Complete (retbool As Boolean)
												End If
			
'												If (Utils.NNE(ThisItemValue)) Then
'													If (this Is B4XStateButton) And (evt.have_condition=9) Then
'														Dim b4xsb_this As B4XStateButton = this
'														b4xsb_this.Text = ThisItemValue
'													End If
'												End If
											else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTEROTHER") And (evt.type_item = 31)) Then
												'*******************************************************************************************************
												' NOTE: A MESMA FUNCIONALIDADE SÓ QUE PERMITE INDICAR OUTRO ITEM_TAGCODE QUE VAI RECEBER O RESULTADO
												'*******************************************************************************************************
												Dim ItemTagCode As String = item_tagcode.Trim
												Dim OtherValue As String = ""
												Dim valorVerificar As String = ""
												If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
													ItemTagCode = evt.value.Trim
												End If
												If (Utils.NNE(evt.formula)) Then
													OtherValue = evt.formula.Trim
												End If
												Dim res As ResumableSub = CLAIGetSetExternalCounterOther(task_tagcode, ItemTagCode, ThisItemValue, OtherValue, evt)
												Wait For(res) Complete (retval As Int)
												valorVerificar = retval
			
												Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, OtherValue, uniquekey, PressedAnswerTagCode, _
													repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
												Wait For(res1) Complete (retbool As Boolean)
			
											End If
										End If
									Next
								End If
							End If
							
						
						Catch
							Log(LastException)
							Utils.WriteErrors2Log(LastException)
						End Try
					End If
	
				End If
	
			End If
		End If
	End If
	NONCLICK = 0
End Sub

' *************************************************************
' TIP: ATUALIZA REGISTO DE INTERVENÇÃO
' *************************************************************
Sub CLAItemButtonSTD_StateClick (State As Int)
	Dim this As B4XStateButton = Sender
'	Dim ReqFocus As ResumableSub = HiddenEditRequestFocus  '(this.Parent)
'	Wait For(ReqFocus) Complete (OkRequest As Boolean)
	If (LoadingProcess = False) Then
		
		If this.IsInitialized Then
			Dim pan As Panel = this.Parent
			Dim panEdit As Panel = pan.GetView(7)
			Dim edit As EditText = panEdit.GetView(0)
		
			Dim Columns As List = Regex.Split("\|", this.tag )
			If (Columns.Size >= 1) Then
				Dim doContinua As Boolean = True
				Try
					Dim request_tagcode As String = Columns.Get(0)
					Dim action_tagcode As String = Columns.Get(1)
					Dim task_tagcode As String = Columns.Get(2)
					Dim item_tagcode As String = Columns.Get(3)
					Dim uniquekey As String = Columns.Get(4)
					Dim tagcode As String = Columns.Get(5)
					Dim val As String = Columns.Get(6)
					'Dim StatusIcon As Int = Columns.Get(7)
					'Dim Multi As Int = Columns.Get(8)
					Dim repeatcounter As Int = Columns.Get(9)
					Dim repeatitemcounter As Int = Columns.Get(10)
					Dim repeatfieldcounter As Int = Columns.Get(11)
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
					doContinua = False
				End Try
	
				If (doContinua) Then
					PressedAnswerTagCode = tagcode
					If State = 0 Then val = ""
					Dim sACLADatetime As String = Utils.GetCurrDatetime
					Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
					Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
			
					Dim vMulti As String = edit.Text
					Dim ACLSessUser As String = ShareCode.SESS_OPER_User
					Dim sSQL As String = $"update dta_requests_values set
							execute_status=${State},
							execute_value='${val}',  
							execute_value_title='${vMulti}',
							execute_datetime='${sACLADatetime.Trim}',
							sess_user='${ACLSessUser}',
							execute_latitude='${sACLALatitude.Trim}',
							execute_longitude='${sACLALongitude.Trim}' where request_tagcode='${request_tagcode.Trim}' and
							task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
							unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
					Log(sSQL)
					Utils.SaveSQLToLog("CLAItemButtonSTD_StateClick",sSQL, request_tagcode)
					'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
		
					Dim params As Map
					params.Initialize
					params.Clear
					params.Put("_token", ShareCode.APP_TOKEN)
					params.Put("ACLARequest", request_tagcode)
					params.Put("ACLAAction", action_tagcode)
					params.Put("ACLATask", task_tagcode)
					params.Put("ACLAItem", item_tagcode)
					params.Put("ACLAUniqueKey", uniquekey)
					params.Put("ACLATagcode", tagcode)
					params.Put("ACLAValue", val)
					params.Put("ACLAValuetitle", vMulti)
					params.Put("ACLAReqCounter", repeatcounter)
					params.Put("ACLARepeatItem", repeatitemcounter)
					params.Put("ACLARepeatField", repeatfieldcounter)
					params.Put("ACLAInner", 0)
					params.Put("ACLADatetime", sACLADatetime)
					params.Put("ACLALatitude", sACLALatitude)
					params.Put("ACLALongitude", sACLALongitude)
					params.Put("ACLSessUser", ACLSessUser)
					params.Put("ACLClear", 0)
					params.Put("versionTagcode", Main.VersionTagcode)
					params.Put("_authorization", Main.DeviceAuthorization)
					params.Put("_instance", Main.DeviceInstance)
					params.put("_deviceBrand", Main.DeviceBrand)
					params.put("_deviceModel", Main.DeviceModel)
					params.put("_deviceMacAddress", Main.DeviceMacAddress)
					params.Put("_user", ShareCode.SESS_User)
					Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
					If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
						If Not(ShareCode.APP_WORKING_LOCAL) Then
							Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
							Wait For (GODR) Complete (HasResults As Boolean)
							If HasResults Then
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							Else
								Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim)
							End If
						Else
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						End If
						Sleep(500)
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If

					'===============================================
					Dim ppar As Panel = this.Parent
					Dim bb As Button
					Try
						Dim bb As Button = ppar.GetView(3)
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
					End Try
					'******************************************************************************
					'	CONTROLO DE EVENTOS
					'******************************************************************************
					If (bb.IsInitialized) Then
						
						Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
											$"select distinct paramters 
											from dta_tasks_items_adds where 1=1
											And task_tagcode='${task_tagcode.trim}'
											And item_tagcode='${item_tagcode.trim}'
											And unique_key='${uniquekey.trim}'"$, "paramters")	
											
						Try
							Dim double_button_control As Int = QuestParams.Get("double_button_control")
						Catch
							Dim double_button_control As Int = 0
							Log(LastException)
							Utils.WriteErrors2Log(LastException)
						End Try
						
'					Dim double_button_control As Int = QuestParams.Get("double_button_control")
						If Utils.Int2Bool(double_button_control) Then
							Dim double_button_settings As Map = QuestParams.Get("double_button_settings")
						
							Dim control_conformities As Int = double_button_settings.Get("control_conformities")
							If Utils.Int2Bool(control_conformities) Then
								Dim fieldconfirm_nc As Int = 0
								If (val = "1") Then
									Dim conformity_type_button1 As String = double_button_settings.Get("conformity_type_button1")
									If (conformity_type_button1="TCTT_002") Or (conformity_type_button1="NC") Then
										Dim fieldconfirm_nc As Int = 2
									End If
								else If (val = "2") Then
									Dim conformity_type_button2 As String = double_button_settings.Get("conformity_type_button2")
									If (conformity_type_button2="TCTT_002") Or (conformity_type_button2="NC") Then
										Dim fieldconfirm_nc As Int = 2
									End If
								End If
							
								Dim strTagcode As String = ""
								If Utils.NNE(tagcode) Then
									Dim strTagcode As String = $" and tagcode='${tagcode.Trim}'"$
								End If
							
								Dim ExisteAdds As Int = DBStructures.GetScriptColumnIntEVC($"select count(0) as total from dta_requests_values_adds
											 	where request_tagcode='${request_tagcode.Trim}' and
												task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
												unique_key='${uniquekey.Trim}' ${strTagcode}
												And repeatcounter=${repeatcounter}
												and repeatitemcounter=${repeatitemcounter}
												and repeatfieldcounter=${repeatfieldcounter}"$, "total")
												
								If (ExisteAdds = 0) Then
									Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_values_adds", "id", "") +3 + 1000000
									Dim sSQL As String = $"insert into dta_requests_values_adds
												(id, request_tagcode,inner_request_tagcode,task_tagcode,item_tagcode,unique_key,
												tagcode,repeatcounter,repeatitemcounter,repeatfieldcounter,fieldconfirm_nc)
												values
												('${maxid}', '${request_tagcode.Trim}', '${task_tagcode.Trim}', '${task_tagcode.Trim}', 
									'${item_tagcode.Trim}', '${uniquekey.Trim}',
									'${tagcode.Trim}', '${repeatcounter}', '${repeatitemcounter}',
									'${repeatfieldcounter}', '${fieldconfirm_nc}')"$
								Else
									Dim sSQL As String = $"update dta_requests_values_adds set fieldconfirm_nc='${fieldconfirm_nc}'
												where request_tagcode='${request_tagcode.Trim}' and
												task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
												unique_key='${uniquekey.Trim}' ${strTagcode}
												And repeatcounter=${repeatcounter}
												and repeatitemcounter=${repeatitemcounter}
												and repeatfieldcounter=${repeatfieldcounter}"$
								End If
								Utils.SaveSQLToLog("CLAItemEditValue_NonConformity",sSQL, request_tagcode)
							
								Dim ACLSessUser As String = ShareCode.SESS_OPER_User
								Dim params As Map
								params.Initialize
								params.Clear
								params.Put("_token", ShareCode.APP_TOKEN)
								params.Put("ACLARequest", request_tagcode.Trim)
								params.Put("ACLAAction", action_tagcode.Trim)
								params.Put("ACLATask", task_tagcode.Trim)
								params.Put("ACLAItem", item_tagcode.Trim)
								params.Put("ACLAUniqueKey", uniquekey.Trim)
								params.Put("ACLATagcode", tagcode.Trim)
								params.Put("ACLAReqCounter", repeatcounter)
								params.Put("ACLARepeatItem", repeatitemcounter)
								params.Put("ACLARepeatField", repeatfieldcounter)
								params.Put("ACLSessUser", ACLSessUser.Trim)
								params.Put("ACLADatetime", sACLADatetime.Trim)
								params.Put("ACLALatitude", sACLALatitude.Trim)
								params.Put("ACLALongitude", sACLALongitude.Trim)
								params.Put("ACLAFieldConfirmNC", fieldconfirm_nc)
								params.Put("versionTagcode", Main.VersionTagcode)
								params.Put("_authorization", Main.DeviceAuthorization)
								params.Put("_instance", Main.DeviceInstance)
								params.put("_deviceBrand", Main.DeviceBrand)
								params.put("_deviceModel", Main.DeviceModel)
								params.put("_deviceMacAddress", Main.DeviceMacAddress)
								params.Put("_user", ShareCode.SESS_User)
								Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/ncadds"$
								If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
									If Not(ShareCode.APP_WORKING_LOCAL) Then
										Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
										Wait For (GODR) Complete (HasResults As Boolean)
										If HasResults Then
											Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
											Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
										Else
											Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim)
										End If
									Else
										Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
										Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
									End If
									Sleep(250)
								Else
									Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
									Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
								End If
								Sleep(500)
							
							
							End If
								
							Dim action_on_buttons As Int = double_button_settings.Get("action_on_buttons")
							If Utils.Int2Bool(action_on_buttons) Then
								Dim action_buttons As List = double_button_settings.Get("action_buttons")
								For Each colaction_buttons As Map In action_buttons
									Dim button_number As String = colaction_buttons.Get("button_number")
									If (val = button_number) Then
										Dim resobsgrp_tagcode As String = colaction_buttons.Get("resobsgrp_tagcode")
										Dim have_condition As Int = colaction_buttons.Get("have_condition")
										Dim event_tagcode As String = colaction_buttons.Get("event_tagcode")
										Dim add_object_email As Int = colaction_buttons.Get("add_object_email")
										Dim type_item As Int = colaction_buttons.Get("type_item")
										Dim use_internal_image As Int = colaction_buttons.Get("use_internal_image")
										Dim request_signature As Int = colaction_buttons.Get("request_signature")
										Dim is_status As Int = colaction_buttons.Get("is_status")
										Dim is_more As Int = colaction_buttons.Get("is_more")
										Dim have_formula As Int = colaction_buttons.Get("have_formula")
										Dim team_tagcode As String = colaction_buttons.Get("team_tagcode")
										Dim value As String = colaction_buttons.Get("value")
										Dim email_to As String = colaction_buttons.Get("email_to")
										Dim is_email As Int = colaction_buttons.Get("is_email")
										Dim active As Int = colaction_buttons.Get("active")
										Dim is_alert As Int = colaction_buttons.Get("is_alert")
										Dim is_foto As Int = colaction_buttons.Get("is_foto")
										Dim is_action As Int = colaction_buttons.Get("is_action")
										Dim have_status As Int = colaction_buttons.Get("have_status")
										Dim default_typerequest As String = colaction_buttons.Get("default_typerequest")
										Dim add_entity_email As Int = colaction_buttons.Get("add_entity_email")
										Dim formula As String = colaction_buttons.Get("formula")
										Dim position As Int = colaction_buttons.Get("position")
										Dim is_jump As Int = colaction_buttons.Get("is_jump")
										Dim inc_object_contacts As Int = colaction_buttons.Get("inc_object_contacts")
										Dim email_cc As String = colaction_buttons.Get("email_cc")
										
										'										Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
										Dim evt As CLAIEvent = Types.MakeCLAIEvent( event_tagcode, _
																					position, _
																					type_item, _
																					active, _
																					value, _
																					formula, _
																					have_formula, _
																					have_condition, _
																					have_status, _
																					is_jump, _
																					is_status, _
																					is_alert, _
																					is_email, _
																					is_more, _
																					is_foto, _
																					is_action, _
																					inc_object_contacts, _
																					team_tagcode, _
																					email_to, _
																					email_cc, _
																					use_internal_image, _
																					default_typerequest, _
																					resobsgrp_tagcode, _
																					add_entity_email, _
																					add_object_email, _
																					request_signature)
									
										Dim res As ResumableSub = CallForceTriggers(request_tagcode, task_tagcode, _
														item_tagcode, uniquekey, repeatcounter, repeatitemcounter, _
														QuestParams, vMulti, evt, bb.tag, this, tagcode.trim)
										Wait For(res) Complete (resbool As Boolean)
										If(resbool) Then
											Log("sucesso!")
										End If
											
									End If
										
								Next
							End If
						End If
					End If
				
					'===============================================
	
				End If
			End If
		End If

	
	End If
End Sub

' *************************************************************
' TIP: ATUALIZA REGISTO DE INTERVENÇÃO (TIPO STD)
' *************************************************************
Sub CLALineButtonSTD_StateClick (State As Int)
	If (LoadingProcess = False) Then
		
		Dim this As B4XStateButton = Sender
		Dim pan As Panel = this.Parent
'		Dim panEdit As Panel = pan.GetView(7)
'		Dim edit As EditText = panEdit.GetView(0)
		
		Dim Columns As List = Regex.Split("\|", this.tag )
		If (Columns.Size >= 1) Then
			Dim doContinua As Boolean = True
			Try
				Dim request_tagcode As String = Columns.Get(0)
				Dim action_tagcode As String = Columns.Get(1)
				Dim task_tagcode As String = Columns.Get(2)
				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
				Dim tagcode As String = Columns.Get(5)
				Dim val As String = Columns.Get(6)
				Dim StatusIcon As Int = Columns.Get(7)
				'Dim Multi As Int = Columns.Get(8)
				Dim repeatcounter As Int = Columns.Get(9)
				Dim repeatitemcounter As Int = Columns.Get(10)
				Dim repeatfieldcounter As Int = Columns.Get(11)
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				doContinua = False
			End Try
	
			If (doContinua) Then
				PressedAnswerTagCode = tagcode
				If State = 0 Then val = ""
				Dim sACLADatetime As String = Utils.GetCurrDatetime
				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
			
				Dim vMulti As String = ""
				If (val = "1") Then
					Dim vMulti As String = ShareCode.Option_COMPLIANT
				else if (val = "2") Then
					Dim vMulti As String = ShareCode.Option_NOTCOMPLIANT
				else if (val = "3") Then
					Dim vMulti As String = ShareCode.Option_NOTAPPLICABLE
				End If
				
				Log($"${val}::${vMulti}"$)
				
				Dim ACLSessUser As String = ShareCode.SESS_OPER_User
				Dim sSQL As String = $"update dta_requests_values set
							execute_status=${State},
							execute_value='${val}',  
							execute_value_title='${vMulti}',
							execute_datetime='${sACLADatetime.Trim}',
							sess_user='${ACLSessUser}',
							execute_latitude='${sACLALatitude.Trim}',
							execute_longitude='${sACLALongitude.Trim}' where request_tagcode='${request_tagcode.Trim}' and
							task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
							unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
				Log(sSQL)
				Utils.SaveSQLToLog("CLAItemButtonSTD_StateClick",sSQL, request_tagcode)
				'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
		
				Dim params As Map
				params.Initialize
				params.Clear
				params.Put("_token", ShareCode.APP_TOKEN)
				params.Put("ACLARequest", request_tagcode)
				params.Put("ACLAAction", action_tagcode)
				params.Put("ACLATask", task_tagcode)
				params.Put("ACLAItem", item_tagcode)
				params.Put("ACLAUniqueKey", uniquekey)
				params.Put("ACLATagcode", tagcode)
				params.Put("ACLAValue", val)
				params.Put("ACLAValuetitle", vMulti)
				params.Put("ACLAReqCounter", repeatcounter)
				params.Put("ACLARepeatItem", repeatitemcounter)
				params.Put("ACLARepeatField", repeatfieldcounter)
				params.Put("ACLAInner", 0)
				params.Put("ACLADatetime", sACLADatetime)
				params.Put("ACLALatitude", sACLALatitude)
				params.Put("ACLALongitude", sACLALongitude)
				params.Put("ACLSessUser", ACLSessUser)
				params.Put("ACLClear", 0)
				params.Put("versionTagcode", Main.VersionTagcode)
				params.Put("_authorization", Main.DeviceAuthorization)
				params.Put("_instance", Main.DeviceInstance)
				params.put("_deviceBrand", Main.DeviceBrand)
				params.put("_deviceModel", Main.DeviceModel)
				params.put("_deviceMacAddress", Main.DeviceMacAddress)
				params.Put("_user", ShareCode.SESS_User)
				Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
				If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
					If Not(ShareCode.APP_WORKING_LOCAL) Then
						Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
						Wait For (GODR) Complete (HasResults As Boolean)
						If HasResults Then
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						Else
							Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim)
						End If
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
					Sleep(500)
				Else
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
				End If
				
				
				'===============================================
				Dim ppar As Panel = this.Parent
				Dim bb As Button
				Try
					Dim bb As Button = ppar.GetView(3)
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
				'******************************************************************************
				'	CONTROLO DE EVENTOS
				'******************************************************************************
				If (bb.IsInitialized) Then
						
					Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
											$"select distinct paramters 
											from dta_tasks_items_adds where 1=1
											And task_tagcode='${task_tagcode.trim}'
											And item_tagcode='${item_tagcode.trim}'
											And unique_key='${uniquekey.trim}'"$, "paramters")	

						
					Try
						Dim double_button_control As Int = QuestParams.Get("double_button_control")
					Catch
						Dim double_button_control As Int = 0
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
					End Try
					
					If Utils.Int2Bool(double_button_control) Then
						Dim double_button_settings As Map = QuestParams.Get("double_button_settings")
						
						Dim control_conformities As Int = double_button_settings.Get("control_conformities")
						If Utils.Int2Bool(control_conformities) Then
							Dim fieldconfirm_nc As Int = 0
							If (val = "1") Then
								Dim conformity_type_button1 As String = double_button_settings.Get("conformity_type_button1")
								If (conformity_type_button1="TCTT_002") Or (conformity_type_button1="NC") Then
									Dim fieldconfirm_nc As Int = 2
								End If
							else If (val = "2") Then
								Dim conformity_type_button2 As String = double_button_settings.Get("conformity_type_button2")
								If (conformity_type_button2="TCTT_002") Or (conformity_type_button2="NC") Then
									Dim fieldconfirm_nc As Int = 2
								End If
							End If
							
							Dim strTagcode As String = ""
							If Utils.NNE(tagcode) Then
								Dim strTagcode As String = $" and tagcode='${tagcode.Trim}'"$
							End If
							
							Dim ExisteAdds As Int = DBStructures.GetScriptColumnIntEVC($"select count(0) as total from dta_requests_values_adds
											 	where request_tagcode='${request_tagcode.Trim}' and
												task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
												unique_key='${uniquekey.Trim}' ${strTagcode}
												And repeatcounter=${repeatcounter}
												and repeatitemcounter=${repeatitemcounter}
												and repeatfieldcounter=${repeatfieldcounter}"$, "total")
												
							If (ExisteAdds = 0) Then
								Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_values_adds", "id", "") +3 + 1000000
								Dim sSQL As String = $"insert into dta_requests_values_adds
												(id, request_tagcode,inner_request_tagcode,task_tagcode,item_tagcode,unique_key,
												tagcode,repeatcounter,repeatitemcounter,repeatfieldcounter,fieldconfirm_nc)
												values
												('${maxid}', '${request_tagcode.Trim}', '${task_tagcode.Trim}', '${task_tagcode.Trim}', 
												'${item_tagcode.Trim}', '${uniquekey.Trim}',
												'${tagcode.Trim}', '${repeatcounter}', '${repeatitemcounter}',
												'${repeatfieldcounter}', '${fieldconfirm_nc}')"$	
							Else
								Dim sSQL As String = $"update dta_requests_values_adds set fieldconfirm_nc='${fieldconfirm_nc}'
												where request_tagcode='${request_tagcode.Trim}' and
												task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
												unique_key='${uniquekey.Trim}' ${strTagcode}
												And repeatcounter=${repeatcounter}
												and repeatitemcounter=${repeatitemcounter}
												and repeatfieldcounter=${repeatfieldcounter}"$
							End If
							Utils.SaveSQLToLog("CLAItemEditValue_NonConformity",sSQL, request_tagcode)
							
							Dim ACLSessUser As String = ShareCode.SESS_OPER_User
							Dim params As Map
							params.Initialize
							params.Clear
							params.Put("_token", ShareCode.APP_TOKEN)
							params.Put("ACLARequest", request_tagcode.Trim)
							params.Put("ACLAAction", action_tagcode.Trim)
							params.Put("ACLATask", task_tagcode.Trim)
							params.Put("ACLAItem", item_tagcode.Trim)
							params.Put("ACLAUniqueKey", uniquekey.Trim)
							params.Put("ACLATagcode", tagcode.Trim)
							params.Put("ACLAReqCounter", repeatcounter)
							params.Put("ACLARepeatItem", repeatitemcounter)
							params.Put("ACLARepeatField", repeatfieldcounter)
							params.Put("ACLSessUser", ACLSessUser.Trim)
							params.Put("ACLADatetime", sACLADatetime.Trim)
							params.Put("ACLALatitude", sACLALatitude.Trim)
							params.Put("ACLALongitude", sACLALongitude.Trim)
							params.Put("ACLAFieldConfirmNC", fieldconfirm_nc)
							params.Put("versionTagcode", Main.VersionTagcode)
							params.Put("_authorization", Main.DeviceAuthorization)
							params.Put("_instance", Main.DeviceInstance)
							params.put("_deviceBrand", Main.DeviceBrand)
							params.put("_deviceModel", Main.DeviceModel)
							params.put("_deviceMacAddress", Main.DeviceMacAddress)
							params.Put("_user", ShareCode.SESS_User)
							Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/ncadds"$
							If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
								If Not(ShareCode.APP_WORKING_LOCAL) Then
									Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
									Wait For (GODR) Complete (HasResults As Boolean)
									If HasResults Then
										Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
										Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
									Else
										Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim)
									End If
								Else
									Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
									Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
								End If
								Sleep(250)
							Else
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							End If
							Sleep(500)
							
							
						End If
								
						Dim action_on_buttons As Int = double_button_settings.Get("action_on_buttons")
						If Utils.Int2Bool(action_on_buttons) Then
							Dim action_buttons As List = double_button_settings.Get("action_buttons")
							For Each colaction_buttons As Map In action_buttons
								Dim button_number As String = colaction_buttons.Get("button_number")
								If (val = button_number) Then
									Dim resobsgrp_tagcode As String = colaction_buttons.Get("resobsgrp_tagcode")
									Dim have_condition As Int = colaction_buttons.Get("have_condition")
									Dim event_tagcode As String = colaction_buttons.Get("event_tagcode")
									Dim add_object_email As Int = colaction_buttons.Get("add_object_email")
									Dim type_item As Int = colaction_buttons.Get("type_item")
									Dim use_internal_image As Int = colaction_buttons.Get("use_internal_image")
									Dim request_signature As Int = colaction_buttons.Get("request_signature")
									Dim is_status As Int = colaction_buttons.Get("is_status")
									Dim is_more As Int = colaction_buttons.Get("is_more")
									Dim have_formula As Int = colaction_buttons.Get("have_formula")
									Dim team_tagcode As String = colaction_buttons.Get("team_tagcode")
									Dim value As String = colaction_buttons.Get("value")
									Dim email_to As String = colaction_buttons.Get("email_to")
									Dim is_email As Int = colaction_buttons.Get("is_email")
									Dim active As Int = colaction_buttons.Get("active")
									Dim is_alert As Int = colaction_buttons.Get("is_alert")
									Dim is_foto As Int = colaction_buttons.Get("is_foto")
									Dim is_action As Int = colaction_buttons.Get("is_action")
									Dim have_status As Int = colaction_buttons.Get("have_status")
									Dim default_typerequest As String = colaction_buttons.Get("default_typerequest")
									Dim add_entity_email As Int = colaction_buttons.Get("add_entity_email")
									Dim formula As String = colaction_buttons.Get("formula")
									Dim position As Int = colaction_buttons.Get("position")
									Dim is_jump As Int = colaction_buttons.Get("is_jump")
									Dim inc_object_contacts As Int = colaction_buttons.Get("inc_object_contacts")
									Dim email_cc As String = colaction_buttons.Get("email_cc")
										
	'										Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
									Dim evt As CLAIEvent = Types.MakeCLAIEvent( event_tagcode, _
																					position, _
																					type_item, _
																					active, _
																					value, _
																					formula, _
																					have_formula, _
																					have_condition, _
																					have_status, _
																					is_jump, _
																					is_status, _
																					is_alert, _
																					is_email, _
																					is_more, _
																					is_foto, _
																					is_action, _
																					inc_object_contacts, _
																					team_tagcode, _
																					email_to, _
																					email_cc, _
																					use_internal_image, _
																					default_typerequest, _
																					resobsgrp_tagcode, _
																					add_entity_email, _
																					add_object_email, _
																					request_signature)
									
									Dim res As ResumableSub = CallForceTriggers(request_tagcode, task_tagcode, _
														item_tagcode, uniquekey, repeatcounter, repeatitemcounter, _
														QuestParams, vMulti, evt, bb.tag, this, tagcode.trim)
									Wait For(res) Complete (resbool As Boolean)
									If(resbool) Then
										Log("sucesso!")
									End If
											
								End If
										
							Next
						End If
					End If
				End If
				
				'===============================================
			End If
		End If
	
	End If
End Sub

Sub CLAObjectClear_Click
	CLAObjectList.Clear
	CLAObjectDesc.Text = ""
	butAssociateObject.Tag = ""
End Sub

Sub CLAObjectFind_Click
	Dim obtIndex As Int = CLAObjectTypeSpinner.SelectedIndex 
	Dim obgIndex As Int = CLAObjectGroupSpinner.SelectedIndex
	Dim obtext As String = CLAObjectDesc.Text
	Dim res As ResumableSub = GetObjectsList(obtIndex,obgIndex,obtext,True)
	Wait For(res) Complete (finish As Boolean)
	If(finish) Then
		Log(finish)
	End If
	ObjectsListIndex = 0
End Sub

'TIP: ASSOCIAR OBJECTO A INTERVENCAO E FILTRA LISTA DE OBJECTOS
Sub SetUpObjectTypeList
	Dim vis As Boolean = noObjectPanel.Visible
	Dim ObjectsTypes As List = DBStructures.getObjectTypes
	'*****************************************************************
	' ALTERACAO PC
	' APANHAR O CAMPO connect2data DE dta_tasks
	'*****************************************************************
	Dim GetObjSql As String = $"select connect2data from dta_tasks where tagcode = '${CurrentCLA.Task.Trim}'"$
	Dim ObjInChk As String = DBStructures.GetScriptColumnStrEVC(GetObjSql,"connect2data")
	
	'PARA TESTAR A FUNCIONALIDADE
	'ObjInChk = "OBJECT_COMPANY|OBJECT_CONSTRUCTION|OBJECT_PROJECT"
	
	Dim ListObjinChk As List = Regex.Split("\|",ObjInChk)
		
	Dim CurrItcObj As String = ""
	
	For n=0 To ObjectsTypes.Size-1
		Dim itc As DB_ITC = ObjectsTypes.Get(n)
		
	'	Log($"ObjInChk : ${ObjInChk} / TagCode : ${itc.TagCode}"$)
		
		For inx=0 To ListObjinChk.Size -1
			Dim linhaObj As String = ListObjinChk.Get(inx)
			If linhaObj = "" Then
				ObjectTypeListView.Add(createObjectTypeLineItemDetail(itc.Title, itc.TagCode, 45dip), itc.ID)
			Else if linhaObj = itc.TagCode Then
				ObjectTypeListView.Add(createObjectTypeLineItemDetail(itc.Title, itc.TagCode, 45dip), itc.ID)
			End If
		Next

	Next
	
Log("")

End Sub

Sub createObjectTypeLineItemDetail(title As String, tagcode As String, height As Int) As Panel
	Dim p As Panel
	p.Initialize("")
	Activity.AddView(p, 0, 0, 100%x, height)
	p.LoadLayout("itemobjecttype")
	p.RemoveView
	lblGroupObjectTitle.text = title
	p.Height = lblGroupObjectTitle.Height
	p.Tag = tagcode
	Return p
End Sub

Sub createObjGroupLineItemDetail(title As String, height As Int) As Panel
	Dim p As Panel
	p.Initialize("")
	Activity.AddView(p, 0, 0, 100%x, height)
	p.LoadLayout("ItemGroupTitle")
	p.RemoveView
	'ALTERACAO PC - AQUI ADICIONA O TEXTO COM O TITULO DO TIPO DO OBJECTO A ASSOCIAR
	lblGroupTitle.text = title
	p.Height = lblGroupTitle.Height
	p.Tag = ""
	Return p
End Sub

Sub createObjectLineItemDetail(tagcode As String, title As String, titledesc As String, height As Int) As Panel
	Dim p As Panel
	p.Initialize("")
	Activity.AddView(p, 0, 0, 100%x, height)
	'p.LoadLayout("ItemGroupLineDetails" )
	p.LoadLayout("ItemGroupLine" )
	p.RemoveView
	'ALTERACAO PC - AQUI ADICIONA O TEXTO COM O NOME DO OBJECTO A ASSOCIAR, adicionar mais uma label na view
	lblLineHeader.text = title
	lblLineHeader.tag = tagcode
	p.Height =  lblLineHeader.Height
	p.tag = tagcode
	'lblLineData.text = titledesc
	Return p
End Sub

Sub ListItemsListClearSelection
	For n=0 To ListItemsList.Size-1
		Dim pan As B4XView = ListItemsList.GetPanel(n)
		If Utils.NNE(pan.tag) Then
			Dim lbl As Label = pan.GetView(0)
			lbl.Color = 0xFFFFFFFF
		End If
	Next
End Sub

Sub CLAObjectList_ItemClick (Index As Int, Value As Object)
'	ListItemsListClearSelection
	Dim pan As B4XView = CLAObjectList.GetPanel(Index)
'	Dim pan As B4XView = ObjectTypeListView.GetPanel(Index)
	Dim lbl As Label = pan.GetView(0)
	lbl.Color = 0x9637FF4B
	Dim ObjectName As String = lbl.Text
	butAssociateObject.Tag = lbl.Tag
	Dim i As Int = Msgbox2(ShareCode.checklistperguntaassociarobjecto1 & " " & ObjectName  & ShareCode.checklistperguntaassociarobjecto2, ShareCode.checklistperguntaassociarobjecto, ShareCode.Option_YES, ShareCode.Option_CANCEL, ShareCode.Option_NO,  Null)
	If (i=DialogResponse.POSITIVE) Then
		AssociateObject(lbl.Tag)
		noObjectPanel.Visible = False
		createObjectPanel.Visible = False
	End If
End Sub

Sub butCreateObject_Click
	createObjectPanel.Visible = True
End Sub

Sub createObjectCancelButton_Click
	createObjectPanel.Visible = False

End Sub

Sub ObjectTypeListView_ItemClick (Index As Int, Value As Object)
	
	For n=0 To ObjectTypeListView.Size-1
		Dim pan As B4XView = ObjectTypeListView.GetPanel(n)
		Dim lbl As Label = pan.GetView(0)
		lbl.Color = 0xFFFFFFFF
	Next
	
	If ObjectTypeListView.Size > 0 Then
		Dim pan As B4XView = ObjectTypeListView.GetPanel(Index)
		Dim lbl As Label = pan.GetView(0)
		lbl.Color = 0x9637FF4B
		Dim TagCode As String = pan.Tag
		Dim ObjTypeText As String = lbl.Text
		SelectedObjectTypeTagcode = TagCode
'	butAssociateObject.Tag = lbl.Tag
		Sleep(50)
		SelectObjectType(Index)
		CLAObjectTypeSpinner.SelectedIndex = Index
		'*************************************************************************
		' ALTERACAO PC
		' O CLAObjectTypeSpinner TEM DE SER POSICIONADO NO TIPO DE OBJECTO PARA ACTUAR COMO FILTRO
		'*************************************************************************
		For inx=0 To CLAObjectTypeSpinner.Size -1
			Dim CItem As String = CLAObjectTypeSpinner.GetItem(inx)
			If CItem = ObjTypeText Then
				CLAObjectTypeSpinner.SelectedIndex = inx
				CLAObjectTypeSpinner_ItemClick(inx,CItem)
				Exit
			End If
		
		Next
	Else
		CLAObjectTypeSpinner.SelectedIndex = 0
		CLAObjectTypeSpinner_ItemClick(inx,CItem)
	End If

End Sub
'
Sub createObjectCancelButton2_Click
	selectObjectPanel.Visible = False
	objectTypePanel.Visible = True
'	createObjectPanel.Visible = False
End Sub

Sub createObjectConfirmButton_Click
	
	objectTypePanel.Visible = False
	selectObjectPanel.Visible = True
'	CLAObjectList.sv.Left = 10
'	CLAObjectList.sv.Top = 140
'	CLAObjectList.sv.Width = 940
'	CLAObjectList.sv.Height = 190
'	CLAObjectList.sv.Visible = True
End Sub

Sub CLAObjectTypeSpinner_ItemClick (Position As Int, Value As Object)
	Dim obtIndex As Int = CLAObjectTypeSpinner.SelectedIndex
	Dim obgIndex As Int = CLAObjectGroupSpinner.SelectedIndex
	Dim obtext As String = CLAObjectDesc.Text
	Dim res As ResumableSub = GetObjectsList(obtIndex,obgIndex,obtext,True)
	Wait For(res) Complete (finish As Boolean)
	If(finish) Then
		Log(finish)
	End If
	ObjectsListIndex = 0
End Sub

Sub SelectObjectType(index As Int)
		CLAObjectDesc.Text = ""
		CLAObjectGroupSpinner.SelectedIndex = 0
		Dim obtIndex As Int = index
		Dim obgIndex As Int = CLAObjectGroupSpinner.SelectedIndex
		Dim obtext As String = CLAObjectDesc.Text
		Dim res As ResumableSub = GetObjectsList(obtIndex,obgIndex,obtext,True)
		Wait For(res) Complete (finish As Boolean)
		If(finish) Then
			Log(finish)
		End If
		ObjectsListIndex = 0
End Sub

Sub suggestObjectButton_Click
	
End Sub

Sub CancelSelectObjectButton_Click
	objectTypePanel.Visible = True
	selectObjectPanel.Visible = False
End Sub

Sub CLAObjectDesc_TextChanged (Old As String, New As String)
	Dim obtIndex As Int = CLAObjectTypeSpinner.SelectedIndex
	Dim obgIndex As Int = CLAObjectGroupSpinner.SelectedIndex
	ObjectsListIndex = 0
	
	Dim obtext As String = New
	
	If(Utils.NNE(obtext)) Then
		Dim res As ResumableSub = GetObjectsList(obtIndex,obgIndex,obtext,True)
		Wait For(res) Complete (finish As Boolean)
		If(finish) Then
			Log(finish)
		End If
	End If
End Sub

' *************************************************************
' TIP: CRIA LISTA DE OBJECTOS
' *************************************************************
Sub GetObjectsList(ObjectTypeIndex As Int, ObjectGroupIndex As Int, ObjectDescText As String, newRequest As Boolean) As ResumableSub
	Dim result As Boolean = False
	If(newRequest) Then
		CLAObjectList.Clear
	End If
	
	butAssociateObject.Tag = ""			
	Dim sType As String = ""
	If ObjectTypeIndex > 0 Then
		Dim itc As DB_ITC = OBJ_Types.Get(ObjectTypeIndex)
		sType = $" and (b.id=${itc.ID}) "$
	End If
		
	Dim sGroup As String = ""
	If ObjectGroupIndex > 0 Then
		Dim itc As DB_ITC = OBJ_Groups.Get(ObjectGroupIndex)
		'sGroup = $" and (a.object_group in (select tagcode from dta_objecttypes_groups where id=${itc.ID})) "$
	End If
		
	Dim sDesc As String = ""
	If Utils.NNE(ObjectDescText) Then
		sDesc = $" and (a.title_import||a.tagcode||ifnull(a.reference,'')||b.title||ifnull(a1.reference,'')||ifnull(a1.title_import,'') like '%${ObjectDescText.Trim}%') "$
	End If
		
	Dim sSQL As String = $"select a.id, a.tagcode, a.object_type, a.title_import, a.`status`, ifnull(b.title, '') as objecttype_desc,
		a.reference, a1.reference as parent_reference, a1.title_import as parent_title
		from dta_objects as a 
		inner join dta_objecttypes as b on (b.tagcode=a.object_type)
		left join dta_objects as a1 on (a1.tagcode=a.parent_tagcode)
		where a.active=1 and b.active=1 and a.tagcode<>'__NONE__' and a.title_import<>'Insira um descritivo/título'
		${sType}${sGroup}${sDesc}
		group by b.title, a.id, a.tagcode, a.object_type, a.title_import
			order by b.title, a.title_import limit ${ObjectsListIndex}, 10"$
	Log(sSQL)



	Dim LastGroup As String = ""
	Dim RecordRowCount As Int = 0
	Private Record As ResultSet = Starter.LocalSQLEVC.ExecQuery(sSQL)
'	If(ObjectsListIndex < Record.RowCount) Then			
	Do While Record.NextRow 

		Dim object_type As String = Record.GetString("object_type")
		Dim objecttype_desc As String = Record.GetString("objecttype_desc")
		Dim title_import As String = Record.GetString("title_import")
		Dim reference As String = Record.GetString("reference")
		Dim tagcode As String = Record.GetString("tagcode")
		Dim parent_reference As String = Record.GetString("parent_reference")
		Dim parent_title As String = Record.GetString("parent_title")
		If(newRequest) Then
			If (object_type.Trim <> LastGroup.Trim) Then
				LastGroup = object_type
				CLAObjectList.Add( createObjGroupLineItemDetail(objecttype_desc, 45dip), object_type)
			End If
		End If
		
		If  (ShareCode.APP_DOMAIN.ToLowerCase.Contains("grandative")) Then
			Dim Entidade As String = ""
			If Utils.NNE(parent_reference) Then
				Entidade = $"(${parent_reference}) "$
			End If
			If Utils.NNE(parent_title) Then
				Entidade = $"- ${Entidade}${parent_title}"$
			End If
			title_import = $"${title_import} ${Entidade}"$
		else If  (ShareCode.APP_DOMAIN.ToLowerCase = "somafel") Then
			Dim Entidade As String = ""
			If Utils.NNE(reference) Then
				Entidade = $"(${reference}) "$
			End If
			title_import = $"${title_import} ${Entidade}"$
		End If

		CLAObjectList.Add(createObjectLineItemDetail(tagcode, title_import, objecttype_desc, 45dip), "")
		RecordRowCount = RecordRowCount +1
		result = True
	Loop
	Record.Close
'	End If
'	ProgressDialogHide
	Return result
End Sub

Sub CLAObjectGroupSpinner_ItemClick (Position As Int, Value As Object)
	Dim obtIndex As Int = CLAObjectTypeSpinner.SelectedIndex
	Dim obgIndex As Int = CLAObjectGroupSpinner.SelectedIndex
	Dim obtext As String = CLAObjectDesc.Text
	Dim res As ResumableSub = GetObjectsList(obtIndex,obgIndex,obtext,True)
	Wait For(res) Complete (finish As Boolean)
	If(finish) Then
		Log(finish)
	End If
	ObjectsListIndex = 0
End Sub

Sub CLAObjectList_ReachEnd
	ObjectsListIndex = ObjectsListIndex + 10	
	Dim obtIndex As Int = CLAObjectTypeSpinner.SelectedIndex
	Dim obgIndex As Int = CLAObjectGroupSpinner.SelectedIndex
	Dim obtext As String = CLAObjectDesc.Text
	
	Dim res As ResumableSub = GetObjectsList(obtIndex,obgIndex,obtext,False)
	Wait For(res) Complete (finish As Boolean)
	If(finish) Then
		Log(finish)
	End If
	
	
End Sub



Sub imageSelectedTrash_Click
	Try
		
		Dim sndr As Label = Sender
		Dim thisPanel As B4XView = sndr.Parent
		Dim this As RequestCLAItem = thisPanel.Tag
		Dim fname As Label = thisPanel.GetView(2)
		Dim Index As Int = FINItemImages.GetItemFromView(thisPanel)
	'	Log(Value)
		
		If (this.BaseImage = 1) Then
			MsgboxAsync(ShareCode.checklistimagembasenaopode, ShareCode.GeneralAlertTitle)
		Else
			
			Dim i As Int = Msgbox2(ShareCode.CLAImageRemove, ShareCode.GeneralAlertTitle, ShareCode.Option_YES, ShareCode.Option_NO, "", Null)
			If (i=DialogResponse.POSITIVE) Then
				''			Dim thisPanel As B4XView = ItemImages.GetPanel(thisPanel)
				''			Dim this As RequestCLAItem = thisPanel.Tag
				''			Dim fname As Label = thisPanel.GetView(1)
				'imageb64|imagename
				Dim sSQL As String = $"delete from dta_requests_values_images where request_tagcode='${this.Request}' and task_tagcode='${this.Task}' and
										item_tagcode='${this.Item}' and unique_key='${this.UniqueKey}' and tagcode='${this.Tagcode}' and imagename='${fname.Text}'
										And repeatcounter=${this.RepeatCounter}
										And repeatitemcounter=${this.RepeatItemCounter}"$

				Utils.SaveSQLToLog("ItemImages_ItemLongClick",sSQL, this.Request)
				'Starter.LocalSQLEVC.ExecNonQuery($"${sSQL}"$)
				Log(sSQL)
				FINItemImages.RemoveAt(Index)

				Dim params As Map
				params.Initialize
				params.Clear
				params.Put("_token", ShareCode.APP_TOKEN)
				params.Put("ACLARequest", this.Request)
				params.Put("ACLAAction", this.Action)
				params.Put("ACLATask", this.Task)
				params.Put("ACLAItem", this.Item)
				params.Put("ACLAUniqueKey", this.UniqueKey)
				params.Put("ACLATagcode", this.Tagcode)
				params.Put("ACLAValueFileImage", fname.Text)
				'
				params.Put("ACLAReqCounter", this.RepeatCounter)
				params.Put("ACLARepeatItem", this.RepeatItemCounter)
				params.Put("versionTagcode", Main.VersionTagcode)
				params.Put("_authorization", Main.DeviceAuthorization)
				params.Put("_instance", Main.DeviceInstance)
				params.put("_deviceBrand", Main.DeviceBrand)
				params.put("_deviceModel", Main.DeviceModel)
				params.put("_deviceMacAddress", Main.DeviceMacAddress)
				params.Put("_user", ShareCode.SESS_User)
				If (params.IsInitialized) Then
					Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai-more/img/delete"$
					If Not(ShareCode.APP_WORKING_LOCAL) Then
						Dim GODR As ResumableSub = GetOfflineDataRec(1, this.Request.Trim,this.Task.trim,this.Item.trim)
						Wait For (GODR) Complete (HasResults As Boolean)
						If HasResults Then
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, this.Request.Trim,this.Task.trim,this.Item.trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						Else
							Utils.CallApi(0, params, Me, Url, "", this.Request)
						End If
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, this.Request.Trim,this.Task.trim,this.Item.trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
					Sleep(250)
				End If
			End If
			
		End If
	
	Catch
		Log(LastException.Message)
	End Try
End Sub

Sub OpenPicturesMapDialog
	Dim sf As Object = ApplDialog.ShowAsync(ShareCode.GeneralInfoTitle, ShareCode.Option_CONTINUE, "", "", Null, False)
	ApplDialog.SetSize(70%x, 90%y)
	
	Wait For Dialog_Ready (Panel As Panel)
	Panel.LoadLayout("dialog_pictures_map")
	
    DialogMap_Ready
'	GoogleMaps = DialogMap.GetMap

	rp.CheckAndRequest(rp.PERMISSION_ACCESS_FINE_LOCATION)
	Wait For Activity_PermissionResult (Permission As String, Result As Boolean)
	If Result Then
'		GoogleMaps.MyLocationEnabled = True
		Log("Permission!")
	Else
		Log("No permission!")
	End If
	
	Wait For (sf) Dialog_Result(Res As Int)
	If Res = DialogResponse.POSITIVE Then

	End If
	
End Sub


Sub DialogMap_Ready
	GoogleMaps = DialogMap.GetMap
	'rp.CheckAndRequest(rp.PERMISSION_ACCESS_FINE_LOCATION)
	If GoogleMaps.IsInitialized Then
		If GoogleMaps.MyLocation.IsInitialized Then
			Sleep(50)
			Log("Loop")
		End If
'		Dim cp As CameraPosition
'		cp.Initialize(gmap.MyLocation.Latitude, gmap.MyLocation.Longitude, 17)
'		gmap.MoveCamera(cp)
	End If
End Sub


Sub getMaxCounter(ChapterItem As RequestCLAItem) As Int
	Dim sSQL As String = $"select max(a.repeatitemcounter) as MaxCounter from dta_requests_values as a where
	    					a.item_tagcode||a.unique_key in (select item_tagcode||unique_key
						from dta_tasks_items where parent_tagcode in (select unique_key from dta_tasks_items 
						where unique_key='${ChapterItem.UniqueKey.Trim}' and repeated=1)) 
						And a.repeatcounter=${ChapterItem.RepeatCounter}
						and a.request_tagcode='${ChapterItem.Request.Trim}'
						and a.task_tagcode='${ChapterItem.Task.Trim}'"$
	Log(sSQL)
	Private nextCounter As Int = 0
	Private TotalItemsCursor As Cursor
	TotalItemsCursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
	If TotalItemsCursor.RowCount > 0 Then
		TotalItemsCursor.Position = 0
		nextCounter = TotalItemsCursor.GetInt("MaxCounter")
	End If
	TotalItemsCursor.Close
	Return nextCounter
End Sub

Sub getTaggedID(parPanel As Panel) As Int
	Dim vid As Int = 1
	Try
		vid = parPanel.Tag+1
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	Return vid
End Sub

' *************************************************************
' TIP: EVENTO DE ADIÇÃO DE CAPÍTULO A PARTIR DE EVENTO
' *************************************************************
Sub AddChapter(CurrentItem2Repeat As String, times2add As Int)As ResumableSub
	
	Dim GoodTC As String = ""
	
	For i =0 To ComponentList.Size -1
		Dim ClItem As ComponentRecords = ComponentList.Get(i)
		If ClItem.item_tagcode = CurrentItem2Repeat Then
			Dim View2Process As B4XView = ClItem.component
			If View2Process Is Panel Then
				Dim pnl2Process As Panel = View2Process
				GoodTC = CurrentItem2Repeat
			End If
			Exit
		End If
	Next
	Log(GoodTC)
	If Utils.NE(GoodTC) Then Return
		
	Dim parPanel As Panel = pnl2Process.GetView(0)
	Dim ExpandPanel As Panel = pnl2Process.GetView(1)
	
	Dim parTitle As Label = parPanel.GetView(0)
	Dim parLeft As Button = parPanel.GetView(3)
	Dim parAdd As Button = parPanel.GetView(4)
	Dim parRight As Button = parPanel.GetView(5)
	Dim parLabel As Label = parPanel.GetView(6)
	Dim ChapterItem As RequestCLAItem = parAdd.tag

	Dim Duplica As Boolean = False
		
	Sleep(100)
	
	If times2add > 0 Then
		ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
		Sleep(150)
				
		Dim CountCurrent As Int = DBStructures.GetScriptColumnIntEVC($"SELECT count(a.id) As counter from dta_requests_values as a 
										WHERE a.request_tagcode='${ChapterItem.Request}'
	    								And a.repeatcounter=0
										And a.item_tagcode = '${CurrentItem2Repeat}'
										And a.task_tagcode='${ChapterItem.Action}'"$,"counter")
		
'		CountCurrent = CountCurrent + 1
		
		If CountCurrent > = times2add Then
			ProgressDialogHide
			Return True
		Else
			times2add = times2add - CountCurrent
		End If
		
		For n=1 To times2add
			Log(n)
			Private nextCounter As Int = getMaxCounter(ChapterItem)
	
			Private sSQL As String = $"select max(id) as maxID from dta_requests_values"$
			Private maxItems As Int = 0
			Private maxItemsCursor As Cursor
			maxItemsCursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
			If maxItemsCursor.RowCount > 0 Then
				maxItemsCursor.Position = 0
				maxItems = maxItemsCursor.GetInt("maxID")
			End If
			maxItemsCursor.Close
	
			Dim sSQL As String = $"select a.* from dta_requests_values as a where
	    					a.item_tagcode||a.unique_key in (select item_tagcode||unique_key
						from dta_tasks_items where parent_tagcode in (select unique_key from dta_tasks_items 
						where unique_key='${ChapterItem.UniqueKey.Trim}' and repeated=1)) 
						and a.repeatcounter=${ChapterItem.RepeatCounter} and repeatitemcounter=0
						and a.request_tagcode='${ChapterItem.Request.Trim}'
						and a.task_tagcode='${ChapterItem.Task.Trim}'  order by a.position"$
			Private TotalItems As Int = 0
			Private TotalItemsCursor As Cursor
			TotalItemsCursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
			TotalItems = TotalItemsCursor.RowCount
			TotalItemsCursor.Close
		
		
			If (TotalItems >= 1) Then
				nextCounter = nextCounter + 1

				Dim execStatus As String = "0"
				Dim execValue As String = "''"
				Dim execValueTitle As String = "''"
				Dim execTitle As String = "''"
				Dim repitem As Int = 0
			
				If (Duplica) Then
					Dim execStatus As String = "execute_status"
					Dim execValue As String = "execute_value"
					Dim execValueTitle As String = "execute_value_title"
					Dim execTitle As String = "title"
					Dim repitem As Int = ChapterItem.RepeatItemCounter
				End If
							
				Dim sSQL As String = $"insert into dta_requests_values (id, request_tagcode,inner_request_tagcode, task_tagcode,item_tagcode,unique_key,
							tagcode,position,
							execute_status, execute_value, execute_value_title, title, execute_format_title,
							confirmed,changed_value, repeatcounter, repeatitemcounter, repeatfieldcounter,val_min, val_max)
							select id, request_tagcode,inner_request_tagcode, task_tagcode,item_tagcode,unique_key,
							tagcode,position,
							${execStatus}, ${execValue}, ${execValueTitle}, ${execTitle}, a.execute_format_title,
							confirmed,changed_value, repeatcounter, ${nextCounter}  AS repeatitemcounter, repeatfieldcounter,val_min, val_max
							from dta_requests_values As a where
							a.item_tagcode||a.unique_key in (Select item_tagcode||unique_key
								from dta_tasks_items where (parent_tagcode in (Select unique_key from dta_tasks_items 
								where unique_key='${ChapterItem.UniqueKey.Trim}' and repeated=1)) or 
									(unique_key='${ChapterItem.UniqueKey.Trim}' and repeated=1)) 
							And a.repeatcounter=${ChapterItem.RepeatCounter} 
							and repeatitemcounter=${repitem}
							and a.request_tagcode='${ChapterItem.Request.Trim}'
							and a.task_tagcode='${ChapterItem.Task.Trim}'  order by a.position"$
				'
				Log(sSQL)
				Utils.SaveSQLToLog("AddChapter",sSQL, ChapterItem.Request)

				parLabel.Text = $"(${nextCounter+1}/${nextCounter+1})"$

				ChapterItem.RepeatItemCounter = nextCounter
				parLeft.Tag = ChapterItem
				parRight.Tag = ChapterItem
				parAdd.Tag = ChapterItem
			
				Dim params As Map
				params.Initialize
				params.Clear
				params.Put("_token", ShareCode.APP_TOKEN)
				params.Put("ACLARequest", ChapterItem.Request.Trim)
				params.Put("ACLATask", ChapterItem.Task.Trim)
				params.Put("ACLAUniqueKey", ChapterItem.UniqueKey.Trim)
				params.Put("ACLAReqCounter", ChapterItem.RepeatCounter)
				params.Put("ACLARepeatItem", nextCounter)
'				params.Put("ACLARepeatField", ChapterItem.repeatfieldcounter)
				params.Put("versionTagcode", Main.VersionTagcode)
				params.Put("_authorization", Main.DeviceAuthorization)
				params.Put("_instance", Main.DeviceInstance)
				params.put("_deviceBrand", Main.DeviceBrand)
				params.put("_deviceModel", Main.DeviceModel)
				params.put("_deviceMacAddress", Main.DeviceMacAddress)
				params.Put("_user", ShareCode.SESS_User)
				Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/new"$
				If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
					If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
						Utils.CallApi(0, params, Me, Url, "", ChapterItem.Request.Trim)
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, ChapterItem.Request.Trim,ChapterItem.Task.trim,"")
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
					Sleep(250)
				Else
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, ChapterItem.Request.Trim,ChapterItem.Task.trim,"")
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
				End If
			
			End If
		Next
	End If
	ProgressDialogHide
	Return True
End Sub

' *************************************************************
' TIP: EVENTO DE ADIÇÃO DE CAPÍTULO
' *************************************************************
Sub butAddMore_Click
	Dim But As Button = Sender
	butAddMoreClick(But)
End Sub

Sub butAddMoreClick(But As Button)
'	Dim but As Button = Sender
	Dim ChapterItem As RequestCLAItem = But.Tag
	Dim parPanel As Panel = But.Parent
	Dim parLeft As Button = parPanel.GetView(3)
	Dim parRight As Button = parPanel.GetView(5)
	Dim parLabel As Label = parPanel.GetView(6)
	Dim parRoot As Panel = parPanel.Parent
	Dim ExpandPanel As Panel = parRoot.GetView(1)

	Dim i As Int = Msgbox2($"Pretende criar/duplicar novo capítulo ${ChapterItem.Title}"$, _
						"Criação/Duplicação de capítulo", _
						ShareCode.Option_CREATE, ShareCode.Option_CANCEL, ShareCode.Option_DUPLICATE,  Null)
	If (i=DialogResponse.POSITIVE) Or (i=DialogResponse.NEGATIVE) Then
		
		Dim Duplica As Boolean = (i=DialogResponse.NEGATIVE)
		ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
		
		Sleep(100)
		Private nextCounter As Int = getMaxCounter(ChapterItem)
	
		Private sSQL As String = $"select max(id) as maxID from dta_requests_values"$
		Private maxItems As Int = 0
		Private maxItemsCursor As Cursor
		maxItemsCursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
		If maxItemsCursor.RowCount > 0 Then
			maxItemsCursor.Position = 0
			maxItems = maxItemsCursor.GetInt("maxID")
		End If
		maxItemsCursor.Close
	
		Dim sSQL As String = $"select a.* from dta_requests_values as a where
	    					a.item_tagcode||a.unique_key in (select item_tagcode||unique_key
						from dta_tasks_items where parent_tagcode in (select unique_key from dta_tasks_items 
						where unique_key='${ChapterItem.UniqueKey.Trim}' and repeated=1)) 
						and a.repeatcounter=${ChapterItem.RepeatCounter} and repeatitemcounter=0
						and a.request_tagcode='${ChapterItem.Request.Trim}'
						and a.task_tagcode='${ChapterItem.Task.Trim}'  order by a.position"$
		Private TotalItems As Int = 0
		Private TotalItemsCursor As Cursor
		TotalItemsCursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
		TotalItems = TotalItemsCursor.RowCount
'		If TotalItemsCursor.RowCount > 0 Then
'			TotalItemsCursor.Position = 0
'			TotalItems = TotalItemsCursor.RowCount  'GetInt("total")
'		End If
		TotalItemsCursor.Close
		
		
		If (TotalItems >= 1) Then
			nextCounter = nextCounter +1

			Dim execStatus As String = "0"
			Dim execValue As String = "''"
			Dim execValueTitle As String = "''"
			Dim execTitle As String = "''"
			Dim repitem As Int = 0
			
			If (Duplica) Then
				Dim execStatus As String = "execute_status"
				Dim execValue As String = "execute_value"
				Dim execValueTitle As String = "execute_value_title"
				Dim execTitle As String = "title"
				Dim repitem As Int = ChapterItem.RepeatItemCounter
			End If
			
			
			Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_values", "id", "") +1 + 1000000
			
			Dim sSQL As String = $"insert into dta_requests_values (id, request_tagcode,inner_request_tagcode, task_tagcode,item_tagcode,unique_key,
							tagcode,position,
							execute_status, execute_value, execute_value_title, title, execute_format_title,
							confirmed,changed_value, repeatcounter, repeatitemcounter, repeatfieldcounter,val_min, val_max)
							select ${maxid}, request_tagcode,inner_request_tagcode, task_tagcode,item_tagcode,unique_key,
							tagcode,position,
							${execStatus}, ${execValue}, ${execValueTitle}, ${execTitle}, a.execute_format_title,
							confirmed,changed_value, repeatcounter, ${nextCounter}  AS repeatitemcounter, repeatfieldcounter,val_min, val_max
							from dta_requests_values As a where
							a.item_tagcode||a.unique_key in (Select item_tagcode||unique_key
								from dta_tasks_items where (parent_tagcode in (Select unique_key from dta_tasks_items 
								where unique_key='${ChapterItem.UniqueKey.Trim}' and repeated=1)) or 
									(unique_key='${ChapterItem.UniqueKey.Trim}' and repeated=1)) 
							And a.repeatcounter=${ChapterItem.RepeatCounter} 
							and repeatitemcounter=${repitem}
							and a.request_tagcode='${ChapterItem.Request.Trim}'
							and a.task_tagcode='${ChapterItem.Task.Trim}'  order by a.position"$
			'
			Log(sSQL)
			Utils.SaveSQLToLog("butAddMore_Click",sSQL, ChapterItem.Request)
			'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
			parLabel.Text = $"(${nextCounter+1}/${nextCounter+1})"$
			
			ChapterItem.RepeatItemCounter = nextCounter
			parLeft.Tag = ChapterItem
			parRight.Tag = ChapterItem
			But.Tag = ChapterItem
			
			Dim params As Map
			params.Initialize
			params.Clear
			params.Put("_token", ShareCode.APP_TOKEN)
			params.Put("ACLARequest", ChapterItem.Request.Trim)
			params.Put("ACLATask", ChapterItem.Task.Trim)
			params.Put("ACLAUniqueKey", ChapterItem.UniqueKey.Trim)
			params.Put("ACLAReqCounter", ChapterItem.RepeatCounter)
			params.Put("ACLARepeatItem", nextCounter)
'			params.Put("ACLARepeatField", ChapterItem.repeatfieldcounter)
			params.Put("versionTagcode", Main.VersionTagcode)
			params.Put("_authorization", Main.DeviceAuthorization)
			params.Put("_instance", Main.DeviceInstance)
			params.put("_deviceBrand", Main.DeviceBrand)
			params.put("_deviceModel", Main.DeviceModel)
			params.put("_deviceMacAddress", Main.DeviceMacAddress)
			params.Put("_user", ShareCode.SESS_User)
			
			Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/new"$
			If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
				If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
					Utils.CallApi(0, params, Me, Url, "", ChapterItem.Request.Trim)
				Else
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, ChapterItem.Request.Trim,ChapterItem.Task.trim,"")
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
				End If
				Sleep(250)
			Else
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, ChapterItem.Request.Trim,ChapterItem.Task.trim,"")
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			End If
			
			
			If (Duplica) Then
				ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
				
				' XXX Novo codigo para actualizar o BO no capitulo repetitivo quando nao se validam os campos
				Dim CF As ResultSet = Starter.LocalSQLEVC.ExecQuery($"select * from dta_requests_values where 1=1
																	and request_Tagcode = '${ChapterItem.Request.Trim}'
																	And task_tagcode = '${ChapterItem.Task.trim}'
																	And repeatcounter = ${ChapterItem.RepeatCounter}
																	and repeatitemcounter = ${ChapterItem.RepeatItemCounter}"$)
				If CF.RowCount > 0 Then
					Do While CF.NextRow
						Dim rtc As String = CF.GetString("request_tagcode")
						Dim ttc As String = CF.GetString("task_tagcode")
						Dim itc As String = CF.GetString("item_tagcode")
						Dim tc As String = CF.GetString("tagcode")
						Dim uk As String = CF.GetString("unique_key")
						Dim exv As String = CF.GetString("execute_value")
						Dim exvt As String = CF.GetString("execute_value_title")
						Dim exvft As String = CF.GetString("execute_format_title")
				
						Dim params As Map
						params.Initialize
						params.Clear
						params.Put("_token", ShareCode.APP_TOKEN)
						params.Put("ACLARequest", rtc)
						params.Put("ACLAAction", ttc)
						params.Put("ACLATask", ttc)
						params.Put("ACLAItem", itc)
						params.Put("ACLAUniqueKey", uk)
						params.Put("ACLATagcode", tc)
						params.Put("ACLAValue",exv)
						params.Put("ACLAValuetitle", exvt)
						params.Put("ACLAFormattitle", exvft)
						params.Put("ACLAReqCounter", ChapterItem.RepeatCounter)
						params.Put("ACLARepeatItem",ChapterItem.RepeatItemCounter )
						params.Put("ACLARepeatField",0 )
				
	
						Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
						Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
	
						params.Put("ACLADatetime", Utils.GetCurrDatetimeExt)
						params.Put("ACLALatitude", sACLALatitude)
						params.Put("ACLALongitude", sACLALongitude)
				
						Dim ACLSessUser As String = ShareCode.SESS_OPER_User
						Dim ACLClear As Int = 0
						params.Put("ACLSessUser", ACLSessUser.trim)
						params.Put("ACLClear", ACLClear)
						params.Put("versionTagcode", Main.VersionTagcode.trim)
						params.Put("_authorization", Main.DeviceAuthorization)
						params.Put("_instance", Main.DeviceInstance)
						params.put("_deviceBrand", Main.DeviceBrand)
						params.put("_deviceModel", Main.DeviceModel)
						params.put("_deviceMacAddress", Main.DeviceMacAddress)
						params.Put("_user", ShareCode.SESS_User)
						Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
						Log("Enviou para o BO")
						If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
							If Not(ShareCode.APP_WORKING_LOCAL) Then
								Utils.CallApi(0, params, Me, Url, "", rtc)
							Else
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,rtc,ttc,itc)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							End If
							Sleep(200)
						Else
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,rtc,ttc,itc)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						End If
					Loop
				End If
				
				ProgressDialogHide
				
			End If

			'Dim pList As B4XView = ExpandPanel.Parent
			ExpandPanel.RemoveAllViews
			
			Dim tid As Int = getTaggedID(parPanel)
			
			ComponentList.add( Types.MakeComponentRecords(ExpandPanel, tid, ChapterItem.Item, 0, nextCounter, 0, True) )
			
			ChapterRepeat(tid, ExpandPanel, ChapterItem.UniqueKey.Trim, nextCounter)
		End If
'		ProgressDialogHide
	End If
End Sub

' *************************************************************
' TIP: EVENTO DE REMOÇÃO DE CAPÍTULO
' *************************************************************
Sub butAddLess_Click
	Dim But As Button = Sender
	butAddLessClick(butAddLess)
End Sub

Sub butAddLessClick(But As Button)
'	Dim but As Button = Sender
	Dim ChapterItem As RequestCLAItem = But.Tag
	Dim parPanel As Panel = But.Parent
	Dim parLeft As Button = parPanel.GetView(3)
'	Dim parRight As Button = parPanel.GetView(5)
	Dim parLabel As Label = parPanel.GetView(6)
'	Dim parRoot As Panel = parPanel.Parent
'	Dim ExpandPanel As Panel = parRoot.GetView(1)
	
	If (ChapterItem.RepeatItemCounter=0) Then
		MsgboxAsync("O capítulo inicial (posição 1) não pode ser removido!", "Alerta!")
	Else
		
		Msgbox2Async($"Pretende remover o capítulo ${ChapterItem.Title}?"$, "Remoção de capítulo", _
					ShareCode.Option_YES, "", ShareCode.Option_NO, Null, False)
		Wait For Msgbox_Result (ResCloud As Int)
		If ResCloud = DialogResponse.POSITIVE Then
			ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
			Sleep(100)
			Private nextCounter As Int = getMaxCounter(ChapterItem)
			
			Dim repitem As Int = ChapterItem.RepeatItemCounter
			Dim sSQLDel As String = $"delete from dta_requests_values where 1=1
										and request_tagcode='${ChapterItem.Request.Trim}'
										and task_tagcode='${ChapterItem.Task.Trim}'
										and repeatcounter=${ChapterItem.RepeatCounter} 
										and repeatitemcounter=${repitem} "$
			'
			Log(sSQLDel)
			Utils.SaveSQLToLog("butAddLess_Click",sSQLDel, ChapterItem.Request)
			
			Dim sSQL As String = $"update dta_requests_values as a 
								set repeatitemcounter=repeatitemcounter-1
								where 1=1 and 
								(
								a.item_tagcode||a.unique_key in (select item_tagcode||unique_key
								from dta_tasks_items where parent_tagcode in (select unique_key from dta_tasks_items 
								where unique_key='${ChapterItem.UniqueKey.Trim}' and repeated=1)) 
								or 
								a.unique_key='${ChapterItem.UniqueKey.Trim}'
								) 
								and a.repeatcounter=${ChapterItem.RepeatCounter} 
								and a.repeatitemcounter>0
								and a.request_tagcode='${ChapterItem.Request.Trim}'
								and a.task_tagcode='${ChapterItem.Task.Trim}'  order by a.position"$
			Log(sSQL)
			Utils.SaveSQLToLog("butAddLess_Click",sSQL, ChapterItem.Request)
			parLabel.Text = $"(${nextCounter+1}/${nextCounter+1})"$
			Dim params As Map
			params.Initialize
			params.Clear
			params.Put("_token", ShareCode.APP_TOKEN)
			params.Put("ACLARequest", ChapterItem.Request.Trim)
			params.Put("ACLATask", ChapterItem.Task.Trim)
			params.Put("ACLAUniqueKey", ChapterItem.UniqueKey.Trim)
			params.Put("ACLAReqCounter", ChapterItem.RepeatCounter)
			params.Put("ACLARepeatItem", repitem)
			params.Put("versionTagcode", Main.VersionTagcode)
			params.Put("_authorization", Main.DeviceAuthorization)
			params.Put("_instance", Main.DeviceInstance)
			params.put("_deviceBrand", Main.DeviceBrand)
			params.put("_deviceModel", Main.DeviceModel)
			params.put("_deviceMacAddress", Main.DeviceMacAddress)
			params.Put("_user", ShareCode.SESS_User)
			Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/delete"$
			If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
				If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
					Utils.CallApi(0, params, Me, Url, "", ChapterItem.Request.Trim)
				Else
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, ChapterItem.Request.Trim,ChapterItem.Task.trim,"")
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
				End If
				Sleep(250)
			Else
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, ChapterItem.Request.Trim,ChapterItem.Task.trim,"")
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			End If
			ChapterLeftClick(parLeft)
			ProgressDialogHide
		End If
	End If
End Sub


Sub butMoreLeft_Click
	Dim But As Button = Sender
	ChapterLeftClick(But)
End Sub

' TIP: BOTAO NAVEGACAO CAPITULO - ESQUERDA
Sub ChapterLeftClick(But As Button)
'	Dim But As Button = Sender
	Dim ChapterItem As RequestCLAItem = But.Tag
	Dim parPanel As Panel = But.Parent
	Dim parLeft As Button = parPanel.GetView(3)
	Dim parRight As Button = parPanel.GetView(5)
	Dim parLabel As Label = parPanel.GetView(6)
	Dim parRoot As Panel = parPanel.Parent
	Dim ExpandPanel As Panel = parRoot.GetView(1)
	If (ChapterItem.RepeatItemCounter  > 0) Then
		ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
		Sleep(100)
		
		Dim previousChapter As Int = ChapterItem.RepeatItemCounter -1
		
		Dim anterior As Int = DBStructures.GetScriptColumnIntEVC($"select max(repeatitemcounter) as anterior from dta_requests_values where 1=1
		and request_tagcode = '${ChapterItem.Request}'
		and task_tagcode = '${ChapterItem.Action}'
		and repeatcounter = ${ChapterItem.RepeatCounter}
		And repeatitemcounter<(${ChapterItem.RepeatItemCounter})"$,"anterior")
		
		' select RepeatItemCounter from dtarequests_values where
		
		
		If previousChapter = anterior Then
			ChapterItem.RepeatItemCounter = ChapterItem.RepeatItemCounter -1
		Else
			Dim dif As Int = Abs(anterior - ChapterItem.RepeatItemCounter)
			ChapterItem.RepeatItemCounter = ChapterItem.RepeatItemCounter - dif
		End If
		
		
		Private nextCounter As Int = getMaxCounter(ChapterItem)
'		Private MaxRecs As Int = getNumRecs(ChapterItem)
		
		parLabel.Text = $"(${ChapterItem.RepeatItemCounter+1}/${nextCounter+1})"$
'		parLabel.Text = $"(${ChapterItem.RepeatItemCounter+1}/${MaxRecs})"$
			
		parLeft.Tag = ChapterItem
		parRight.Tag = ChapterItem
		But.Tag = ChapterItem
		ExpandPanel.RemoveAllViews

		Dim tid As Int = getTaggedID(parPanel)
			
		ComponentList.add( Types.MakeComponentRecords(ExpandPanel, tid, ChapterItem.Item, 0, nextCounter, 0, True) )
		ChapterRepeat(tid, ExpandPanel, ChapterItem.UniqueKey.Trim, ChapterItem.RepeatItemCounter)
'		ProgressDialogHide
	End If
End Sub

Sub butMoreRight_Click
	Dim But As Button = Sender
	ChapterRightClick(But)
End Sub

' TIP: BOTAO NAVEGACAO CAPITULO - DIREITA
Sub ChapterRightClick(But As Button)
'	Dim But As Button = Sender
	Dim ChapterItem As RequestCLAItem = But.Tag
	Dim parPanel As Panel = But.Parent
	Dim parLeft As Button = parPanel.GetView(3)
	Dim parRight As Button = parPanel.GetView(5)
	Dim parLabel As Label = parPanel.GetView(6)
	Dim parRoot As Panel = parPanel.Parent
	Dim ExpandPanel As Panel = parRoot.GetView(1)
	Private nextCounter As Int = getMaxCounter(ChapterItem)
	
	If (ChapterItem.RepeatItemCounter<nextCounter) Then
		ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
		Sleep(100)
		
		Dim nextChapter As Int = ChapterItem.RepeatItemCounter +1
		
		Dim seguinte As Int = DBStructures.GetScriptColumnIntEVC($"select ifnull(min(repeatitemcounter),0) as seguinte from dta_requests_values where 1=1
		and request_tagcode = '${ChapterItem.Request}'
		and task_tagcode = '${ChapterItem.Action}'
		and repeatcounter = ${ChapterItem.RepeatCounter}
		And repeatitemcounter>(${ChapterItem.RepeatItemCounter})"$,"seguinte")
		
		If nextChapter = seguinte Then
			ChapterItem.RepeatItemCounter = ChapterItem.RepeatItemCounter + 1
		Else
			Dim dif As Int = Abs(seguinte - ChapterItem.RepeatItemCounter)
			ChapterItem.RepeatItemCounter = ChapterItem.RepeatItemCounter + dif
		End If
	
		parLabel.Text = $"(${ChapterItem.RepeatItemCounter+1}/${nextCounter+1})"$
'		Private MaxRecs As Int = getNumRecs(ChapterItem)
'		parLabel.Text = $"(${ChapterItem.RepeatItemCounter+1}/${MaxRecs})"$
			
		parLeft.Tag = ChapterItem
		parRight.Tag = ChapterItem
		But.Tag = ChapterItem
		ExpandPanel.RemoveAllViews
		
		Dim tid As Int = getTaggedID(parPanel)

		ComponentList.add( Types.MakeComponentRecords(ExpandPanel, tid, ChapterItem.Item, 0, nextCounter, 0, True) )
		ChapterRepeat(tid, ExpandPanel, ChapterItem.UniqueKey.Trim, ChapterItem.RepeatItemCounter)
'		ProgressDialogHide
	End If
End Sub

Sub getNumRecs (RCLA As RequestCLAItem) As Int
	Dim NumRecs As Int = DBStructures.GetScriptColumnIntEVC($"select count(a.repeatitemcounter) as NumRecs from dta_requests_values as a where 1=1
															and a.request_tagcode='${RCLA.Request}'
															And a.task_tagcode='${RCLA.Action}'
															And a.unique_key='${RCLA.UniqueKey}'"$,"NumRecs")
	Return NumRecs
End Sub

Sub CLAItemEditTextValue_FocusChanged (HasFocus As Boolean)
	Dim txt As FloatLabeledEditText = Sender
	Log(txt.tag)
	Dim cTag As String = txt.Tag

	If HasFocus And cTag.EndsWith("NOSEARCH") Then
		CLAButtonEditTextCall(txt)
	End If
End Sub

Sub CLAButtonSearchText_Click
	Dim this As Button = Sender
	Dim pthis As Panel = this.Parent
	Dim ftxt As FloatLabeledEditText = pthis.Getview(2)
	Log(ftxt.tag)
	Sleep(500)
	CLAButtonSearchTextCall(ftxt)
End Sub

Sub CLAButtonEditText_Click
	
	Dim this As Button = Sender
	Dim pthis As Panel = this.Parent
	Dim txt As FloatLabeledEditText = pthis.Getview(2)
	Log(txt.tag)
	Sleep(500)
	CLAButtonEditTextCall(txt)

End Sub

' *************************************************************
' TIP: EVENTO DE PESQUISA Type = 29
' *************************************************************
Sub CLAButtonSearchTextCall(this As FloatLabeledEditText)
		
	Sleep(500)
	ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
	Dim pthis As Panel = this.Parent
	Dim StartingRow As String = 0
	Dim ReadRows As Int = 20
	Dim Columns As List = Regex.Split("\|", this.tag )
	Dim doContinua As Boolean = False
	
	If Columns.Size >= 1 Then doContinua = True
	
	If (doContinua) Then
		Try
			Dim request_tagcode As String = Columns.Get(0)
			Dim action_tagcode As String = Columns.Get(1)
			Dim task_tagcode As String = Columns.Get(2)
			Dim item_tagcode As String = Columns.Get(3)
			Dim uniquekey As String = Columns.Get(4)
			Dim tagcode As String = Columns.Get(5)
			Dim val As String = Columns.Get(6)
			Dim StatusIcon As Int = Columns.Get(7)
			Dim Multi As Int = Columns.Get(8)
			Dim repeatcounter As Int = Columns.Get(9)
			Dim repeatitemcounter As Int = Columns.Get(10)
			Dim repeatfieldcounter As Int = Columns.Get(11)
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
			doContinua = False
		End Try
		Log(doContinua)
	
		Dim ThisCLA As CLATaskItem = DBStructures.DB2CLATaskItem(action_tagcode, uniquekey)

		Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
												$"select paramters from dta_tasks_items_adds
												where task_tagcode='${action_tagcode.trim}' 
												and item_tagcode='${item_tagcode.Trim}' 
												and unique_key='${uniquekey.Trim}'"$, "paramters")	
		Try
			Dim search_field As Int = QuestParams.Get("search_field")
		Catch
			Dim search_field As Int = 0
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
					
		Log(search_field)
		If Utils.Int2Bool(search_field) Then
			Dim continua As Boolean = True
'			Dim ValorCaixaTexto As String = this.Text
			Dim ValorCaixaTexto As String = ":__VALOR"
			
				
			Dim search_field_settings As Map = QuestParams.Get("search_field_settings")
			Try
				Dim allow_others As Int = search_field_settings.Get("allow_others")
			Catch
				Dim allow_others As Int = 0
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
			
			Try
				Dim sfs_query_type As Int = search_field_settings.Get("sfs_query_type")
			Catch
				Dim sfs_query_type As Int = 0
			End Try
			
			Dim gScript As String = ""
			ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
			If (sfs_query_type >= 1) Then
				'"":"select distinct a.reference, a.title, a.serialnumber, ifnull(b.fieldval_01, 0) as risk from dta_equipments as a left join dta_equipments_adds as b on (b.equipment_tagcode=a.tagcode)",
				ShareCode.SearchFromQuery = True
				Dim gScript As String = search_field_settings.Get("sfs_sqlscript")
				Dim types_tagcode As String = search_field_settings.Get("types_tagcode")
				'Dim sfs_query_tagcode As String = search_field_settings.Get("sfs_query_tagcode")
				If Utils.NNE(gScript) Then
					gScript = gScript.Replace("«", "'")
					gScript = gScript.Replace($":REQUEST"$,request_tagcode.Trim)
					gScript = gScript.Replace($":TASK"$,task_tagcode.Trim)
					gScript = gScript.Replace($":ITEM"$,item_tagcode.Trim)
					gScript = gScript.Replace($":UNIQUEKEY"$,uniquekey.Trim)
					gScript = gScript.Replace($":TAGCODE"$,tagcode.Trim) '
					
					Dim tTech As String = DBStructures.GetScriptColumnStrEVC($"Select technical_tagcode as valor
											from dta_requests where tagcode='${request_tagcode.Trim}'"$, "valor")
					Dim tObj As String = DBStructures.GetScriptColumnStrEVC($"Select object_tagcode as valor
											from dta_requests where tagcode='${request_tagcode.Trim}'"$, "valor")
					Dim tEnt As String = DBStructures.GetScriptColumnStrEVC($"Select entity_tagcode as valor
											from dta_requests where tagcode='${request_tagcode.Trim}'"$, "valor")
					Dim tTpr As String = DBStructures.GetScriptColumnStrEVC($"Select typerequest_tagcode as valor
											from dta_requests where tagcode='${request_tagcode.Trim}'"$, "valor")
					Dim tCar As String = DBStructures.GetScriptColumnStrEVC($"Select vehicle_tagcode as valor
											from dta_requests where tagcode='${request_tagcode.Trim}'"$, "valor")
					
					gScript = gScript.Replace($":OBJECT"$,tObj.Trim)
					gScript = gScript.Replace($":ENTITY"$,tEnt.Trim)
					gScript = gScript.Replace($":TECHNICAL"$,tTech.Trim)
					gScript = gScript.Replace($":TYPEREQUEST"$,tTpr.Trim)
					gScript = gScript.Replace($":VEHICLE"$,tCar.Trim)
					gScript = gScript.Replace($":CLIENTDB."$, "")
					
					Dim request_tagcode As String = Columns.Get(0)
					Dim action_tagcode As String = Columns.Get(1)
					Dim task_tagcode As String = Columns.Get(2)
					Dim item_tagcode As String = Columns.Get(3)
					Dim uniquekey As String = Columns.Get(4)
					Dim tagcode As String = Columns.Get(5)
				End If
				
				Log(gScript)
				
			Else
				ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
				ShareCode.SearchFromQuery = False
				Dim inout_tagcode As String = search_field_settings.Get("inout_tagcode")
				Dim group_tagcodes As String = search_field_settings.Get("group_tagcodes")
				Dim subgroup_tagcodes As String = search_field_settings.Get("subgroup_tagcodes")
				Dim types_tagcode As String = search_field_settings.Get("types_tagcode")
				Dim fields As List = search_field_settings.Get("fields")

				Dim gField As String = ""
				Dim sField As String = ""
				Dim fField As String = "title"
				Dim xField As String = ""
				Dim lJoin As String = ""
					

				Dim iField As Int = DBStructures.GetScriptColumnIntEVC($"select reference from type_inouttypes where tagcode='${inout_tagcode}'"$, "reference")

				If iField = 1 Then
					Dim gField As String = "dta_technicals"
					Dim fField As String = "title"
					If (Utils.NNE(group_tagcodes)) Then
						Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", group_tagcodes ))
						If Utils.NNE(theList) Then
							sField = $" and object_type in ${theList}"$
						End If
					End If
				else If iField = 2 Then
					Dim gField As String = "dta_departments"
				else If iField = 3 Then
					Dim gField As String = "dta_teams"
				else If iField = 4 Then
					Dim gField As String = "dta_objects"
					Dim fField As String = "title_import"
					Dim sField As String = " and active=1 and object_type in (select tagcode from dta_objecttypes where inout_tagcode in (select tagcode from type_inouttypes where reference=4))"
				else If iField = 5 Then
					Dim gField As String = "" 'Empresas
				else If iField = 6 Then
					Dim gField As String = "dta_warehouses"
				else If iField = 8 Then
					Dim gField As String = "dta_articles"
					If (Utils.NNE(group_tagcodes)) Then
						Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", group_tagcodes ))
						If Utils.NNE(theList) Then
							sField = $" and article_group in ${theList}"$
						End If
					End If
					If (Utils.NNE(subgroup_tagcodes)) Then
						Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", subgroup_tagcodes ))
						If Utils.NNE(theList) Then
							sField = $"${sField} and article_type in ${theList}"$
						End If
					End If
				else If iField = 9 Then
					Dim gField As String = "aut_users"
					Dim fField As String = "name"
					If (Utils.NNE(group_tagcodes)) Then
						Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", group_tagcodes ))
						If Utils.NNE(theList) Then
							sField = $" and profile_tagcode in ${theList}"$
						End If
'							ordField = $""$
					End If
				else If iField = 12 Then
					Dim gField As String = "dta_equipments"
					If (Utils.NNE(group_tagcodes)) Then
						Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", group_tagcodes ))
						If Utils.NNE(theList) Then
							sField = $" and equipment_group in ${theList}"$
						End If
					End If
					If (Utils.NNE(subgroup_tagcodes)) Then
						Dim theList1 As String = Utils.StrList2SQLArray(Regex.Split("\|", subgroup_tagcodes ))
						If Utils.NNE(theList1) Then
							sField = $"${sField} and equipment_type in ${theList1}"$
						End If
					End If
				else If iField = 14 Then
					Dim gField As String = "dta_objects"
					Dim fField As String = "title_import"
					If (Utils.NNE(group_tagcodes)) Then
						Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", group_tagcodes ))
						If Utils.NNE(theList) Then
							sField = $" and object_type in ${theList}"$
						End If
					End If
					If (Utils.NNE(subgroup_tagcodes)) Then
						Dim theList1 As String = Utils.StrList2SQLArray(Regex.Split("\|", subgroup_tagcodes ))
						If Utils.NNE(theList1) Then
							sField = $"${sField} and object_group in ${theList1}"$
						End If
					End If
				Else
					Dim gField As String = "dta_articles"
					If (Utils.NNE(group_tagcodes)) Then
						Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", group_tagcodes ))
						If Utils.NNE(theList) Then
							sField = $" and article_group in ${theList}"$
						End If
					End If
					If (Utils.NNE(subgroup_tagcodes)) Then
						Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", subgroup_tagcodes ))
						If Utils.NNE(theList) Then
							sField = $"${sField} and article_type in ${theList}"$
						End If
					End If
				End If
				
				Dim TblCounter As Int = 1
				Dim part1Script As String = ""
				Dim part2Script As String = ""
				Dim part3Script As String = ""
				For Each colfields As Map In fields
					Dim field_name As String = colfields.Get("field_name")
					Dim is_location As Int = colfields.Get("is_location")
					Dim is_additional As Int = colfields.Get("is_additional")
					Dim is_contact As Int = colfields.Get("is_contact")
					Dim chave As String=""
					If Utils.Int2Bool(is_additional) Then
						If (iField = 14) Then 'Objectos
							chave = $"(tagcode in (select object_tagcode from dta_objects_fields where 1=1 and field_tagcode='${field_name}' and value like '%${ValorCaixaTexto}%'))"$
							lJoin = "left join dta_objects_fields as "
						End If

					else If Utils.Int2Bool(is_location) Then
						If Not(iField = 9) And Not(iField = 12) Then 'Utilizadores e Equipamentos
							chave = $"(local_tagcode in (select tagcode from dta_locations where 1=1 and ${field_name} like '%${ValorCaixaTexto}%'))"$
							lJoin = "left join dta_locations as "
						End If
					else If Utils.Int2Bool(is_contact) Then
						If (iField = 14) Then 'Objectos
							chave = $"(tagcode in (select object_tagcode from dta_objects_contacts where 1=1 and
											contact_tagcode in (select tagcode from dta_contacts where 1=1 and ${field_name} like '%${ValorCaixaTexto}%')))"$
							lJoin = "left join dta_contacts as "
						End If
					Else
						chave = $"(${field_name} like '%${ValorCaixaTexto}%')"$
					End If
				
					If Utils.NNE(chave) Then
						If Utils.NNE(xField) Then
							xField = $"${xField} or "$
						End If
						xField = $"${xField}${chave}"$
					End If
					If iField = 1 Then
						If Utils.Int2Bool(is_additional) Then
							part1Script = $""$
						else if Utils.Int2Bool(is_contact) Then
							part1Script = $""$
						else if Utils.Int2Bool(is_location) Then
							part1Script = $""$
						Else
							'part1Script = $"${part1Script} a.title as ${field_name},"$
							part1Script = $"${part1Script} a.${field_name} as ${field_name},"$
						End If
					
						part3Script = $""$
						TblCounter = TblCounter + 1
					Else If iField = 12 Then
						If Utils.Int2Bool(is_additional) Then
							part1Script = $""$
						else if Utils.Int2Bool(is_contact) Then
							part1Script = $""$
						else if Utils.Int2Bool(is_location) Then
							part1Script = $""$
						Else
							part1Script = $"${part1Script} a.${field_name} as ${field_name},"$
						End If
						part3Script = $""$
						TblCounter = TblCounter + 1
					Else If iField = 14 Then'AQUI DAVA ERRO SE ADDITIONAL, MOVI O part3script para dentro dos IF
						If Utils.Int2Bool(is_additional) Then
							part1Script = $"${part1Script} a${TblCounter}.value as ${field_name},"$
							part3Script = $"${part3Script} ${lJoin}a${TblCounter} on(a.tagcode = a${TblCounter}.object_tagcode AND a${TblCounter}.field_tagcode = '${field_name}')"$
						else if Utils.Int2Bool(is_contact) Then
							part1Script = $"${part1Script} a${TblCounter}.details as ${field_name},"$
							part3Script = $"${part3Script} ${lJoin}a${TblCounter} on(a.tagcode = a${TblCounter}.object_tagcode AND a${TblCounter}.field_tagcode = '${field_name}')"$
						else if Utils.Int2Bool(is_location) Then
							part1Script = $"${part1Script} a${TblCounter}.address as ${field_name},"$
							part3Script = $"${part3Script} ${lJoin}a${TblCounter} on(a.tagcode = a${TblCounter}.object_tagcode AND a${TblCounter}.field_tagcode = '${field_name}')"$
						Else
							part1Script = $"${part1Script} a.title_import as ${field_name},"$
						End If
						TblCounter = TblCounter + 1
					End If
				
								
				Next
				If part1Script.EndsWith(",") Then
					part1Script = part1Script.SubString2(0,part1Script.Length-1)
				End If
			
				part2Script = $"${part1Script} from ${gField} as a"$
				
				Dim gScript As String = $"SELECT${part2Script} ${part3Script} where 1=1 AND a.active=1 ${sField} and (${xField})"$
				Log(gScript)
			End If
'			ProgressDialogHide
			
			If Utils.NNE(gScript) Then
				Dim Filter As AppDialogs
				Filter.Initialize
				' O ULTIMO PARAMETRO TEM DE SER LIDO DO CAMPO allow_others do Params, para ja fica em FALSE
				allow_others = 0
				ShareCode.Current29Map.clear
				ShareCode.Current29Map = QuestParams
				Filter.getBoxEditSearch(Activity,this,gScript,"Pesquisa",QuestParams, allow_others)
			End If
		Else
			MsgboxAsync("Sem parametrização definida",ShareCode.GeneralInfoTitle)
			ProgressDialogHide
		End If
	End If
End Sub

Sub ExecQueryListaSearch(inScript As String,field2get As String, lRow As Int, uRow As Int) As ResumableSub
	
	If Utils.nne(lRow) And Utils.nne(uRow) Then
		inScript = inScript & $" limit ${lRow}, ${uRow}"$
	End If

	ListReturnedfromQuery.Initialize
	
	Try
		Private RecordOri As ResultSet = Starter.LocalSQLEVC.ExecQuery(inScript)
		Dim posis As Int = 0
		Do While RecordOri.NextRow
			If (posis=0) Then
				ListReturnedfromQuery.Add(Types.MakeObjectTypes(0, "", "(Sem seleção)"))  'ObjectTypes
			End If
			ListReturnedfromQuery.Add(Types.MakeObjectTypes(RecordOri.GetString("id"), RecordOri.GetString("tagcode"), RecordOri.GetString(field2get)))
			posis = posis + 1
		Loop
		
		
		Return True
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	
	Return False

End Sub

' *************************************************************
' TIP: EVENTO DE RETORNO DE OPÇÃO : OUTROS
' *************************************************************
Sub returnFromOutros(this As FloatLabeledEditText, paramsMap As Map)
	
	If ShareCode.ITEM_RETURNED_FROM_SEARCHLIST = "" Or ShareCode.TAG_RETURNED_FROM_SEARCHLIST = "" Then Return
	ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
	Dim listareturned As List = Regex.Split("\|",ShareCode.ITEM_RETURNED_FROM_SEARCHLIST)
	Dim list2Map As List =  Regex.Split("\|",ShareCode.TAG_RETURNED_FROM_SEARCHLIST)
	Dim mapOfItems As Map
	mapOfItems.Initialize
	
	For l=0 To list2Map.Size -1
		Dim listItems As List = Regex.Split("=",list2Map.Get(l))
		Dim MapKey As String = listItems.Get(0)
		Dim MapValue As String = listItems.Get(1)
		mapOfItems.Put(MapKey,MapValue)
	Next
	
	If listareturned.Size >= 1 Then
		Dim ValorCaixaTexto As String = listareturned.Get(0)
	Else
		Dim ValorCaixaTexto As String =""
	End If
	Dim pThis As Panel = this.parent
	
	Dim Columns As List = Regex.Split("\|", this.tag )
	Dim doContinua As Boolean = Columns.Size >= 1
	Log(ShareCode.TAG_RETURNED_FROM_SEARCHLIST)
	If (doContinua) Then
		Try
			Dim request_tagcode As String = Columns.Get(0)
			Dim action_tagcode As String = Columns.Get(1)
			Dim task_tagcode As String = Columns.Get(2)
			Dim item_tagcode As String = Columns.Get(3)
			Dim uniquekey As String = Columns.Get(4)
			Dim tagcode As String = Columns.Get(5)
			Dim val As String = Columns.Get(6)
			Dim StatusIcon As Int = Columns.Get(7)
			Dim Multi As Int = Columns.Get(8)
			Dim repeatcounter As Int = Columns.Get(9)
			Dim repeatitemcounter As Int = Columns.Get(10)
			Dim repeatfieldcounter As Int = Columns.Get(11)
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
			doContinua = False
		End Try
		Dim ThisCLA As CLATaskItem = DBStructures.DB2CLATaskItem(action_tagcode, uniquekey)
		Dim ACLAObjectTag As String = ""
		Dim sACLADatetime As String = Utils.GetCurrDatetimeExt
		Dim ACLSessUser As String = ShareCode.SESS_OPER_User
		Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
		Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
		
		Dim search_field_settings As Map = paramsMap.Get("search_field_settings")
		Dim inout_tagcode As String = search_field_settings.Get("inout_tagcode")
		Dim group_tagcodes As String = search_field_settings.Get("group_tagcodes")
		Dim subgroup_tagcodes As String = search_field_settings.Get("subgroup_tagcodes")
		Dim types_tagcode As String = search_field_settings.Get("types_tagcode")
		Dim fields As List = search_field_settings.Get("fields")
		Dim returned_field As String = search_field_settings.Get("returned_field")
		Dim fill_other_fields As Int = search_field_settings.Get("fill_other_fields")
				
		If fill_other_fields = 1 Then
						
			Dim fillotherfields_settings As List = search_field_settings.Get("fillotherfields_settings")
			
			For Each colfillotherfields_settings As Map In fillotherfields_settings
				Dim field_name As String = colfillotherfields_settings.Get("field_name")
				Dim is_contact As Int = colfillotherfields_settings.Get("is_contact")
				Dim is_location As Int = colfillotherfields_settings.Get("is_location")
				Dim is_additional As Int = colfillotherfields_settings.Get("is_additional")
				Dim item_tagcode As String = colfillotherfields_settings.Get("item_tagcode")
				Dim repeatcountercontrol As Int = colfillotherfields_settings.Get("repeatcountercontrol")
								
				Try
					Dim field2Fill As String = mapOfItems.Get(field_name)
				Catch
					Dim field2Fill As String = ""
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
				
'							**********************************************************************************							
'							ACTUALIZA REGISTO NA BD LOCAL
'							**********************************************************************************							
				Dim SqlString As String = $"update dta_requests_values set execute_value = '${field2Fill}',
															execute_status=1, execute_datetime='${sACLADatetime}',
															sess_user='${ACLSessUser}',
															execute_latitude='${sACLALatitude.Trim}',
															execute_longitude='${sACLALongitude.Trim}',
															object_tagcode='${ACLAObjectTag.trim}'
															where request_tagcode='${request_tagcode.trim}'
															And task_tagcode = '${action_tagcode.Trim}'
															And item_tagcode = '${item_tagcode.trim}'
															And repeatcounter=${repeatcounter}
															and repeatitemcounter=${repeatitemcounter}
															and repeatfieldcounter=${repeatfieldcounter}"$
				Log(SqlString)
				Utils.SaveSQLToLog("CLAButtonEditTextCall",SqlString, request_tagcode.trim)
							
'							**********************************************************************************
'							ACTUALIZA O SERVIDOR COM A RESPOSTA
'							**********************************************************************************
				Dim uK As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_requests_values
																					where request_tagcode='${request_tagcode.trim}'
																					And task_tagcode = '${action_tagcode.Trim}'
																					And item_tagcode = '${item_tagcode.trim}'
																					And repeatcounter=${repeatcounter}
																					And repeatitemcounter=${repeatitemcounter}
																					And repeatfieldcounter=${repeatfieldcounter}"$,"unique_key")
																					
				Dim Tc As String = DBStructures.GetScriptColumnStrEVC($"select tagcode from dta_requests_values
																					where request_tagcode='${request_tagcode.trim}'
																					And task_tagcode = '${action_tagcode.Trim}'
																					And item_tagcode = '${item_tagcode.trim}'
																					And repeatcounter=${repeatcounter}
																					And repeatitemcounter=${repeatitemcounter}
																					And repeatfieldcounter=${repeatfieldcounter}"$,"tagcode")
																				
				Dim params As Map
				params.Initialize
				params.Clear
				params.Put("_token", ShareCode.APP_TOKEN)
				params.Put("ACLARequest", request_tagcode.trim)
				params.Put("ACLAAction", action_tagcode.trim)
				params.Put("ACLATask", task_tagcode.trim)
				params.Put("ACLAItem", item_tagcode.trim)
				params.Put("ACLAUniqueKey", uK.trim)
				params.Put("ACLATagcode", Tc.trim)
				params.Put("ACLAValue", field2Fill.trim)
				params.Put("ACLAReqCounter", repeatcounter)
				params.Put("ACLARepeatItem", repeatitemcounter)
				params.Put("ACLARepeatField", repeatfieldcounter)
				params.Put("ACLAInner",0)
				params.Put("ACLADatetime", sACLADatetime.trim)
				params.Put("ACLALatitude", sACLALatitude.trim)
				params.Put("ACLALongitude", sACLALongitude.trim)
				params.Put("ACLAObjectTag", ACLAObjectTag.trim)
				params.Put("ACLSessUser", ShareCode.SESS_OPER_User.Trim)
				params.Put("ACLClear", 0)
				params.Put("versionTagcode", Main.VersionTagcode)
				params.Put("_authorization", Main.DeviceAuthorization)
				params.Put("_instance", Main.DeviceInstance)
				params.put("_deviceBrand", Main.DeviceBrand)
				params.put("_deviceModel", Main.DeviceModel)
				params.put("_deviceMacAddress", Main.DeviceMacAddress)
				params.Put("_user", ShareCode.SESS_User)
				Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
				If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
					If Not(ShareCode.APP_WORKING_LOCAL) Then
						Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
						Wait For (GODR) Complete (HasResults As Boolean)
						If HasResults Then
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						Else
							Utils.CallApi(0, params, Me, Url, "", request_tagcode.trim)
						End If
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
					Sleep(250)
				Else
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
				End If
								
'				ITERA SOBRE AS VIEWS DO CAPITULO ATE ENCONTRAR UMA QUE SEJA FLOATLABELEDITTEXT E TENHA O ITEMTAGCODE IGUAL AO item_tagcode
				
				Dim exp As Panel = pThis.Parent
				For Each v As View In exp.GetAllViewsRecursive
'				For Each v As View In ListOfTextViews
					If v Is FloatLabeledEditText Then
						Dim f As FloatLabeledEditText = v
						Dim itemTag As List = Regex.Split("\|",f.Tag)
						If itemTag.Size >= 3 Then
							Dim itemTC As String = itemTag.Get(3)
							If itemTC = item_tagcode Then
								f.Text = field2Fill
							End If
						End If
					Else If v Is Label Then
						Dim lbl As Label = v
						Dim itemTag As List = Regex.Split("\|",lbl.Tag)
						If itemTag.Size >= 3 And lbl.Text <> Chr(0xF002) Then
							Dim itemTC As String = itemTag.Get(3)
							If itemTC = item_tagcode Then
								lbl.Text = field2Fill
							End If
						End If
					End If
				Next

				
			Next

		End If
	
	End If
		
	ProgressDialogHide
	
End Sub

' *************************************************************
' TIP: EVENTO DE RETORNO DE PESQUISA TIPO 29
' *************************************************************
Sub ReturnFromSearchDialog(this As FloatLabeledEditText, paramsMap As Map )
	
	If ShareCode.ITEM_RETURNED_FROM_SEARCHLIST = "" Or ShareCode.TAG_RETURNED_FROM_SEARCHLIST = "" Then Return
	
	ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
	
	Dim listareturned As List = Regex.Split(",",ShareCode.ITEM_RETURNED_FROM_SEARCHLIST)
	Dim listareturnedTag As List = Regex.Split("\|",ShareCode.TAG_RETURNED_FROM_SEARCHLIST)
	
	Dim key_returnvalue As String = Utils.IfNullOrEmpty(listareturnedTag.Get(listareturnedTag.Size -1),"")
	Log(key_returnvalue)
	
	Dim fLista As List = Regex.Split("=",key_returnvalue)
	If fLista.Size > 1 Then
		key_returnvalue = fLista.get(1)
	End If
	Log(key_returnvalue)
	 
	If listareturned.Size >= 1 Then
		Dim ValorCaixaTexto As String = listareturned.Get(0)
	Else
		Dim ValorCaixaTexto As String =""
	End If
	Dim pThis As Panel = this.parent
	Dim chave As String = ""
	
	Dim Columns As List = Regex.Split("\|", this.tag )
	Dim doContinua As Boolean = Columns.Size >= 1
	Log(ShareCode.TAG_RETURNED_FROM_SEARCHLIST)
	Dim camposMapped As Map
	camposMapped.Initialize
	Dim Initialitem_tagcode As String = ""
	
	Try
		Dim tmplst As List = Regex.Split("\|",ShareCode.TAG_RETURNED_FROM_SEARCHLIST)
		For x=0 To tmplst.Size -1
			Dim tmpstr As String = tmplst.Get(x)
			If tmpstr.EndsWith("=") Then tmpstr= tmpstr & "0"
			Dim tt As List = Regex.Split("=",tmpstr.Trim)
			Dim tmpkey As String = tt.Get(0)
			Dim tmpval As String = tt.Get(1)
			camposMapped.Put(tmpkey,tmpval)
		Next
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	Log(camposMapped)
	
	If (doContinua) Then
		Try
			Dim request_tagcode As String = Columns.Get(0)
			Dim action_tagcode As String = Columns.Get(1)
			Dim task_tagcode As String = Columns.Get(2)
			Dim item_tagcode As String = Columns.Get(3)
			Dim uniquekey As String = Columns.Get(4)
			Dim tagcode As String = Columns.Get(5)
			Dim val As String = Columns.Get(6)
			Dim StatusIcon As Int = Columns.Get(7)
			Dim Multi As Int = Columns.Get(8)
			Dim repeatcounter As Int = Columns.Get(9)
			Dim repeatitemcounter As Int = Columns.Get(10)
			Dim repeatfieldcounter As Int = Columns.Get(11)
			Initialitem_tagcode = item_tagcode
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
			doContinua = False
		End Try
		Dim ThisCLA As CLATaskItem = DBStructures.DB2CLATaskItem(action_tagcode, uniquekey)
		Dim ACLAObjectTag As String = ""
		Dim sACLADatetime As String = Utils.GetCurrDatetimeExt
		Dim ACLSessUser As String = ShareCode.SESS_OPER_User
		Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
		Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")

		' PARA ISTO FUNCIONAR O PRIMEIRO CAMPO DOS PARAMTERS TEM DE SER O CAMPO CHAVE

		Dim search_field_settings As Map = paramsMap.Get("search_field_settings")
		Try
			Dim sfs_query_type As Int = search_field_settings.Get("sfs_query_type")
		Catch
			Dim sfs_query_type As Int = 0
		End Try
		
		Dim SqlString As String = ""
		Dim mapFields As Map
		mapFields.Initialize
		
		Dim inout_tagcode As String = search_field_settings.Get("inout_tagcode")
		Dim group_tagcodes As String = search_field_settings.Get("group_tagcodes")
		Dim subgroup_tagcodes As String = search_field_settings.Get("subgroup_tagcodes")
		Dim types_tagcode As String = search_field_settings.Get("types_tagcode")
		Dim fields As List = search_field_settings.Get("fields")
		Dim returned_field As String = search_field_settings.Get("returned_field")
		Dim fill_other_fields As Int = search_field_settings.Get("fill_other_fields")
		
		' OBTEM O CAMPO CORRESPONDENTE AO types_tagcode enviado no tag de retorno, constroi um mapa e apanha o valor correspondente para gravar o object_tagcode
		
		Try
			Dim MapOfRetunedFields As Map
			MapOfRetunedFields.Initialize
			For n=0 To listareturnedTag.Size -1
				Dim itemLista As List = Regex.Split("=",listareturnedTag.Get(n))
				Dim MapKey As String = itemLista.Get(0)
				Try
					Dim MapVal As String = itemLista.Get(1)
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
					Dim MapVal As String = ""
				End Try
				
				MapOfRetunedFields.Put(MapKey,MapVal)
			Next

			Dim Returned_Object_Tagcode As String = MapOfRetunedFields.get(types_tagcode)
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
			Dim Returned_Object_Tagcode As String = ""
		End Try
		
		If Utils.NE(inout_tagcode) Then
			ProgressDialogHide
			Return
		End If
		
		If ( sfs_query_type >= 1 And Not(ShareCode.APP_DOMAIN.ToLowerCase = "somafel") ) Then
			'"":"select distinct a.reference, a.title, a.serialnumber, ifnull(b.fieldval_01, 0) as risk from dta_equipments as a left join dta_equipments_adds as b on (b.equipment_tagcode=a.tagcode)",
				
			Dim SqlString As String = search_field_settings.Get("sfs_sqlscript")
			'Dim sfs_query_tagcode As String = search_field_settings.Get("sfs_query_tagcode")
			If Utils.NNE(SqlString) Then
				SqlString = SqlString.Replace("«", "'")
				SqlString = SqlString.Replace($":REQUEST"$,request_tagcode.Trim)
				SqlString = SqlString.Replace($":TASK"$,task_tagcode.Trim)
				SqlString = SqlString.Replace($":ITEM"$,item_tagcode.Trim)
				SqlString = SqlString.Replace($":UNIQUEKEY"$,uniquekey.Trim)
				SqlString = SqlString.Replace($":TAGCODE"$,tagcode.Trim) '
					
				Dim tTech As String = DBStructures.GetScriptColumnStrEVC($"Select technical_tagcode as valor
											from dta_requests where tagcode='${request_tagcode.Trim}'"$, "valor")
				Dim tObj As String = DBStructures.GetScriptColumnStrEVC($"Select object_tagcode as valor
											from dta_requests where tagcode='${request_tagcode.Trim}'"$, "valor")
				Dim tEnt As String = DBStructures.GetScriptColumnStrEVC($"Select entity_tagcode as valor
											from dta_requests where tagcode='${request_tagcode.Trim}'"$, "valor")
				Dim tTpr As String = DBStructures.GetScriptColumnStrEVC($"Select typerequest_tagcode as valor
											from dta_requests where tagcode='${request_tagcode.Trim}'"$, "valor")
				Dim tCar As String = DBStructures.GetScriptColumnStrEVC($"Select vehicle_tagcode as valor
											from dta_requests where tagcode='${request_tagcode.Trim}'"$, "valor")
					
				SqlString = SqlString.Replace($":OBJECT"$,tObj.Trim)
				SqlString = SqlString.Replace($":ENTITY"$,tEnt.Trim)
				SqlString = SqlString.Replace($":TECHNICAL"$,tTech.Trim)
				SqlString = SqlString.Replace($":TYPEREQUEST"$,tTpr.Trim)
				SqlString = SqlString.Replace($":VEHICLE"$,tCar.Trim)
				SqlString = SqlString.Replace($":CLIENTDB."$, "")
				
				chave = $"${SqlString} limit 1"$
				Dim types_tagcode As String = search_field_settings.Get("types_tagcode")
				
				If Utils.NNE(types_tagcode) And Utils.NNE(key_returnvalue) Then
					Dim vss As List = Regex.Split("\=", key_returnvalue )
					If vss.Size>=1 Then
						key_returnvalue = vss.Get(0)
					Else
						key_returnvalue = ""
					End If
				End If
				
'				If Utils.NNE(types_tagcode) And Utils.NNE(key_returnvalue) Then
'					If key_returnvalue.Contains("=") Then
'						Dim vss As List = Regex.Split("\=", key_returnvalue )
'						If vss.Size>=2 Then
'							key_returnvalue = vss.Get(1)
'						Else
'							key_returnvalue = ""
'						End If
'					End If
'				End If
				
				If Utils.NNE(key_returnvalue) Then
					chave = $"${SqlString} and ${types_tagcode} = '${key_returnvalue}' limit 1"$
				End If
					
				Log(chave)
				Dim tcontinua As Boolean = True
				Try
					Dim RS As ResultSet = Starter.LocalSQLEVC.ExecQuery(chave)
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
					tcontinua = False
				End Try
			
				chave = ""
				If Utils.NNE(types_tagcode) And Utils.NNE(key_returnvalue) Then
					chave = key_returnvalue
				End If
				If tcontinua Then
					Do While RS.NextRow
						Dim returnedfield As String = search_field_settings.Get("returned_field")
						For i = 0 To RS.ColumnCount -1
							Dim fname As String = RS.GetColumnName(i)
							Dim fvalue As String = RS.GetString(RS.GetColumnName(i))
						
							If (returnedfield = fname) And Utils.NE(chave) Then
								chave = fvalue
							End If
						
							mapFields.Put(fname,fvalue)
						
						Next
						Exit
					Loop
				End If
				Dim request_tagcode As String = Columns.Get(0)
				Dim action_tagcode As String = Columns.Get(1)
				Dim task_tagcode As String = Columns.Get(2)
				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
				Dim tagcode As String = Columns.Get(5)
			End If
	Else
			
			Dim table2get As String = DBStructures.GetScriptColumnStrEVC($"select tablename from type_inouttypes where tagcode='${inout_tagcode}'"$, "tablename")
			Dim table_additional As String = $"${table2get}_fields"$
			Dim table_contacts As String = $"${table2get}_contacts"$
			Dim table_location As String = "dta_locations"
						
			'ITERAR NOS DIVERSOS CAMPOS E CONDICOES PARA CONSTRUIR O SCIPT SQL
										
			For Each colfields As Map In fields
				Dim field_name As String = colfields.Get("field_name")
				Dim show_position As Int = colfields.Get("show_position")
				Dim show_inlist As Int = colfields.Get("show_inlist")
				Dim is_location As Int = colfields.Get("is_location")
				Dim is_additional As Int = colfields.Get("is_additional")
				Dim is_contact As Int = colfields.Get("is_contact")
		
				If field_name = returned_field Then
					Dim chave As String="" 'APANHA O CAMPO DEFINIDO COMO PESQUISA (return_field)
					If Utils.Int2Bool(is_additional) Then
						chave = DBStructures.GetScriptColumnStrEVC($" select object_tagcode from ${table_additional} where field_tagcode = '${field_name}' and value = '${ValorCaixaTexto}'"$,"object_tagcode")
					Else If Utils.Int2Bool(is_contact) Then
						chave = DBStructures.GetScriptColumnStrEVC($" select object_tagcode from ${table_contacts} where contact_tagcode = '${field_name}' and value = '${ValorCaixaTexto}'"$,"object_tagcode")
					Else If Utils.Int2Bool(is_location) Then
						chave = DBStructures.GetScriptColumnStrEVC($" select local_tagcode from ${table_location} where tagcode = '${field_name}' and address = '${ValorCaixaTexto}'"$,"local_tagcode")
					Else
						chave = DBStructures.GetScriptColumnStrEVC($" select tagcode from ${table2get} where ${field_name} = '${ValorCaixaTexto}' limit 1"$,"tagcode")
						If chave = "" Then
							chave = DBStructures.GetScriptColumnStrEVC($" select tagcode from ${table2get} where ${field_name} like '${ValorCaixaTexto}' limit 1"$,"tagcode")
						End If
					End If
							
					If Global_oType = 28 Then
						If chave = "" Then
							MsgboxAsync($"Não foi encontrada correspondência para o valor introduzido :${ValorCaixaTexto} !!"$,ShareCode.GeneralInfoTitle)
							chave = "__NULL__"
							mapFields.Put(field_name,"")
						Else
							mapFields.Put(field_name,ValorCaixaTexto)
						End If
					Else
						mapFields.Put(field_name,ValorCaixaTexto)
					End If
							
					
				Else 'APANHA OS RESTANTES
					Dim campo As String=""
					Dim testeOptions As String = ""
					mapFields.Put(field_name,campo)
							
					If Utils.Int2Bool(is_additional) And Utils.NNE(chave) Then
						campo = DBStructures.GetScriptColumnStrEVC($" select value from ${table_additional} where object_tagcode = '${chave}' and field_tagcode = '${field_name}'"$,"value")
						testeOptions = DBStructures.GetScriptColumnStrEVC($"select options_list from dta_fields where tagcode = '${field_name}' and dataentrytype_id = 6"$,"options_list")
						If Utils.NNE(testeOptions) And Utils.NNE(campo) Then
							Dim components As List = Regex.Split("\|", testeOptions)
								
							If components.Size >= campo Then
								campo = components.Get(campo-1)
							End If
						End If
								
					Else If Utils.Int2Bool(is_contact) And Utils.NNE(chave) Then
						campo  = DBStructures.GetScriptColumnStrEVC($" select contact_tagcode from ${table_contacts} where object_tagcode = '${chave}'"$,"contact_tagcode")
					Else If Utils.Int2Bool(is_location) And Utils.NNE(chave) Then
						campo = DBStructures.GetScriptColumnStrEVC($" select ${field_name} from ${table_location} where tagcode = '${chave}'"$,field_name)
					Else if is_additional=0 And is_contact=0 And is_location=0 And Utils.NNE(chave) Then
						campo = DBStructures.GetScriptColumnStrEVC($" select ${field_name} from ${table2get} where tagcode = '${chave}'"$,field_name)
					End If
					mapFields.Put(field_name,campo) 'falta passar o map com os values a '' se nao corresponder
				End If
			Next
	End If
		
		' SCRIPT SQL FINAL COMPOSTO DOS DIVERSOS SCRIPTS PARCIAIS DE ACIMA
		' ESTE SCRIPT IRA RETORNAR OS CAMPOS PARA DEPOIS PREENCHER OS CAMPOS ABAIXO
		' FAZENDO UM UPDATE A BD E FORÇANDO OS CAMPOS DE RESPOSTA DA CHECKLIST A MOSTRAR OS VALORES, SEM FAZER
		' REFRESH DA CHECKLIST
		Log(mapFields)
		ACLAObjectTag = chave
		
		If fill_other_fields = 1 Then
						
			Dim fillotherfields_settings As List = search_field_settings.Get("fillotherfields_settings")
			
			For Each colfillotherfields_settings As Map In fillotherfields_settings
				Dim field_name As String = colfillotherfields_settings.Get("field_name")
				Dim is_contact As Int = colfillotherfields_settings.Get("is_contact")
				Dim is_location As Int = colfillotherfields_settings.Get("is_location")
				Dim is_additional As Int = colfillotherfields_settings.Get("is_additional")
				Dim item_tagcode As String = colfillotherfields_settings.Get("item_tagcode")
				Dim repeatcountercontrol As Int = colfillotherfields_settings.Get("repeatcountercontrol")
													
				Dim field2Fill As String = mapFields.get(field_name)
				
				If Utils.NE(field2Fill) Then
					Try
						field2Fill = camposMapped.Get(field_name)
						
					Catch
						field2Fill="(none)"
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
					End Try
				End If
							
								
'				ITERA SOBRE AS VIEWS DO CAPITULO ATE ENCONTRAR UMA QUE SEJA FLOATLABELEDITTEXT E TENHA O ITEMTAGCODE IGUAL AO item_tagcode
				
				Dim exp As Panel = pThis.Parent
				For Each v As View In exp.GetAllViewsRecursive
'				For Each v As View In ListOfTextViews
					If v Is FloatLabeledEditText Then
						Dim f As FloatLabeledEditText = v
						Dim itemTag As List = Regex.Split("\|",f.Tag)
						If itemTag.Size >= 3 Then
							Dim itemTC As String = itemTag.Get(3)
							If itemTC = item_tagcode Then
								f.Text = field2Fill
								Dim execute_value_title As String = ""
							End If
						End If
					Else If v Is Spinner Then
						Dim ls As Spinner = v
						Dim itemTag As List = Regex.Split("\|",ls.Tag)
						If itemTag.Size >= 3 Then
							Dim itemTC As String = itemTag.Get(3)
							If itemTC = item_tagcode Then
								ls.SelectedIndex = field2Fill
								Dim execute_value_title As String = ls.GetItem(ls.SelectedIndex)
							End If
						End If
					Else If v Is Label Then
						Dim l As Label = v
						Dim itemTag As List = Regex.Split("\|",l.Tag)
						If itemTag.Size >= 3 And l.Text <> Chr(0xF002) Then
							Dim itemTC As String = itemTag.Get(3)
							Log(itemTC & " : " & item_tagcode)
							If itemTC = item_tagcode Then
								l.Text = field2Fill
								Dim execute_value_title As String = ""
							End If
						End If
					End If
				Next
				
'				Dim ObjAnalise As String = DBStructures.GetScriptColumnStrEVC($"select object_tagcode from dta_requests where tagcode = '${request_tagcode.Trim}'"$,"object_tagcode")
				
				ACLAObjectTag = Utils.IfNullOrEmpty(Returned_Object_Tagcode,"__NONE__")
	
'			**********************************************************************************
'			ACTUALIZA REGISTO NA BD LOCAL
'			**********************************************************************************							
				Dim SqlString As String = $"update dta_requests_values set execute_value = '${field2Fill}',
															execute_value_title = '${execute_value_title}',
															execute_status=1, execute_datetime='${sACLADatetime}',
															sess_user='${ACLSessUser}',
															execute_latitude='${sACLALatitude.Trim}',
															execute_longitude='${sACLALongitude.Trim}',
															object_tagcode='${ACLAObjectTag.trim}'
															where request_tagcode='${request_tagcode.trim}'
															And task_tagcode = '${action_tagcode.Trim}'
															And item_tagcode = '${item_tagcode.trim}'
															And repeatcounter=${repeatcounter}
															and repeatitemcounter=${repeatitemcounter}
															and repeatfieldcounter=${repeatfieldcounter}"$
				Log(SqlString)
				Utils.SaveSQLToLog("CLAButtonEditTextCall",SqlString, request_tagcode.trim)
							
'			**********************************************************************************
'			ACTUALIZA O SERVIDOR COM A RESPOSTA
'			**********************************************************************************

				Dim uK As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_requests_values
																					where request_tagcode='${request_tagcode.trim}'
																					And task_tagcode = '${action_tagcode.Trim}'
																					And item_tagcode = '${item_tagcode.trim}'
																					And repeatcounter=${repeatcounter}
																					And repeatitemcounter=${repeatitemcounter}
																					And repeatfieldcounter=${repeatfieldcounter}"$,"unique_key")
																					
				Dim Tc As String = DBStructures.GetScriptColumnStrEVC($"select tagcode from dta_requests_values
																					where request_tagcode='${request_tagcode.trim}'
																					And task_tagcode = '${action_tagcode.Trim}'
																					And item_tagcode = '${item_tagcode.trim}'
																					And repeatcounter=${repeatcounter}
																					And repeatitemcounter=${repeatitemcounter}
																					And repeatfieldcounter=${repeatfieldcounter}"$,"tagcode")
																					
				If Utils.NE(execute_value_title) Then execute_value_title = field2Fill.Trim
				
				Dim params As Map
				params.Initialize
				params.Clear
				params.Put("_token", ShareCode.APP_TOKEN)
				params.Put("ACLARequest", request_tagcode.trim)
				params.Put("ACLAAction", action_tagcode.trim)
				params.Put("ACLATask", task_tagcode.trim)
				params.Put("ACLAItem", item_tagcode.trim)
				params.Put("ACLAUniqueKey", uK.trim)
				params.Put("ACLATagcode", Tc.trim)
				params.Put("ACLAValue", field2Fill.trim)
				params.Put("ACLAValuetitle", execute_value_title.trim)
				params.Put("ACLAReqCounter", repeatcounter)
				params.Put("ACLARepeatItem", repeatitemcounter)
				params.Put("ACLARepeatField", repeatfieldcounter)
				params.Put("ACLAInner",0)
				params.Put("ACLADatetime", sACLADatetime.trim)
				params.Put("ACLALatitude", sACLALatitude.trim)
				params.Put("ACLALongitude", sACLALongitude.trim)
				params.Put("ACLAObjectTag", ACLAObjectTag.trim)
				params.Put("ACLSessUser", ShareCode.SESS_OPER_User.Trim)
				params.Put("ACLClear", 0)
				params.Put("versionTagcode", Main.VersionTagcode)
				params.Put("_authorization", Main.DeviceAuthorization)
				params.Put("_instance", Main.DeviceInstance)
				params.put("_deviceBrand", Main.DeviceBrand)
				params.put("_deviceModel", Main.DeviceModel)
				params.put("_deviceMacAddress", Main.DeviceMacAddress)
				params.Put("_user", ShareCode.SESS_User)
				Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
				If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
					If Not(ShareCode.APP_WORKING_LOCAL) Then
						Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
						Wait For (GODR) Complete (HasResults As Boolean)
						If HasResults Then
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						Else
							Utils.CallApi(0, params, Me, Url, "", request_tagcode.trim)
						End If
					Else
						Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
						Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
					End If
					Sleep(250)
				Else
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
				End If
										
'				ITERA SOBRE AS VIEWS DO CAPITULO ATE ENCONTRAR UMA QUE SEJA FLOATLABELEDITTEXT E TENHA O ITEMTAGCODE IGUAL AO item_tagcode
				
				Dim exp As Panel = pThis.Parent
				For Each v As View In exp.GetAllViewsRecursive
'				For Each v As View In ListOfTextViews
					If v Is FloatLabeledEditText Then
						Dim f As FloatLabeledEditText = v
						Dim itemTag As List = Regex.Split("\|",f.Tag)
						If itemTag.Size >= 3 Then
							Dim itemTC As String = itemTag.Get(3)
							If itemTC = item_tagcode Then
								f.Text = field2Fill
							End If
						End If
					Else If v Is Label Then
						Dim l As Label = v
						Dim itemTag As List = Regex.Split("\|",l.Tag)
						If itemTag.Size >= 3 And l.Text <> Chr(0xF002) Then
							Dim itemTC As String = itemTag.Get(3)
							If itemTC = item_tagcode Then
								l.Text = field2Fill
							End If
						End If
					End If
				Next
			Next
		End If
		
	'CallForceTriggers
		Log(Initialitem_tagcode)
		If ( Utils.NNE(Initialitem_tagcode) ) Then
		
			Dim bbTag As RequestCLAItem = Types.MakeRequestCLAItem( request_tagcode, task_tagcode, _
					task_tagcode, Initialitem_tagcode, uniquekey, tagcode, repeatcounter, _
					repeatitemcounter, repeatfieldcounter, _
					"", "", "", 0, 0, 1, "", DBStructures.DB2CLATaskItem(task_tagcode.Trim, uniquekey), "") 
		
		
			Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
										$"select distinct paramters 
										from dta_tasks_items_adds where 1=1
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${Initialitem_tagcode.trim}'
										And unique_key='${uniquekey.trim}'"$, "paramters")	

			Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${Initialitem_tagcode.trim}'
										And unique_key='${uniquekey.trim}'
										And tagcode='${tagcode.trim}'
										Order by position"$  
			Log( sSQL)
			Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
			If Eventos.RowCount >= 1 Then
				For n=0 To Eventos.RowCount-1
					Eventos.Position = n
					Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)
					Dim resEvt As ResumableSub = CallForceTriggers(request_tagcode.trim, task_tagcode.trim, _
													Initialitem_tagcode.trim, uniquekey.trim, repeatcounter, repeatitemcounter, _
													QuestParams, 1, evt, bbTag, this, tagcode.trim)
					Wait For(resEvt) Complete (resbool As Boolean)
					If(resbool) Then
						Log("sucesso!")
					End If
		
				Next
			End If
			Eventos.Close
		End If 
	End If
		
	ProgressDialogHide
	
End Sub

' *************************************************************
' TIP: EVENTO DE RETORNO DO TIPO 28/29
' *************************************************************
Sub CLAButtonEditTextCall(this As FloatLabeledEditText)
	
	Dim pthis As Panel = this.Parent
	
	Dim Columns As List = Regex.Split("\|", this.tag )
	Dim doContinua As Boolean = Columns.Size >= 1
	
	If (doContinua) Then
		Try
			Dim request_tagcode As String = Columns.Get(0)
			Dim action_tagcode As String = Columns.Get(1)
			Dim task_tagcode As String = Columns.Get(2)
			Dim item_tagcode As String = Columns.Get(3)
			Dim uniquekey As String = Columns.Get(4)
			Dim tagcode As String = Columns.Get(5)
			Dim val As String = Columns.Get(6)
			Dim StatusIcon As Int = Columns.Get(7)
			Dim Multi As Int = Columns.Get(8)
			Dim repeatcounter As Int = Columns.Get(9)
			Dim repeatitemcounter As Int = Columns.Get(10)
			Dim repeatfieldcounter As Int = Columns.Get(11)
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
			doContinua = False
		End Try
		Dim ThisCLA As CLATaskItem = DBStructures.DB2CLATaskItem(action_tagcode, uniquekey)
		
		Dim typeControl As Int = ThisCLA.type_control
	
		If (typeControl = 3) Or (typeControl = 4) Then
			'*************************************************************************************
			' TYPECONTROL 3/4 ==> GRAVA LATITUDE E LONGITUDE
			'*************************************************************************************
			Dim sACLADatetime As String = Utils.GetCurrDatetime
			Dim ACLSessUser As String = ShareCode.SESS_OPER_User
			Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
			Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
			Dim ACLAObjectTag As String = Utils.IfNullOrEmpty(DBStructures.GetScriptColumnStrEVC( _
						$"select object_tagcode from dta_requests where tagcode='${request_tagcode.Trim}'"$, "object_tagcode"),"")
					
			Dim val As String = $"${sACLALatitude}, ${sACLALongitude}"$
			this.text = val
							
			If (typeControl=4) Then
													
				Dim sINSQL As String = $"update dta_locations set latitude='${sACLALatitude}',
									longitude='${sACLALongitude}' where tagcode in (select local_tagcode from dta_requests
									where tagcode='${request_tagcode.Trim}')"$
									
				Utils.SaveSQLToLog("CLAButtonEditText",sINSQL, request_tagcode.Trim)
				Sleep(100)
									
									
				Dim sINSQL As String = $"update dta_locations set latitude='${sACLALatitude}',
									longitude='${sACLALongitude}' where tagcode in (select local_tagcode from dta_objects where
									tagcode in (select object_tagcode from dta_requests
									where tagcode='${request_tagcode}'))"$
									
				Utils.SaveSQLToLog("CLAItemButton_Localtion2",sINSQL, request_tagcode.trim)
				Sleep(100)
			End If
			
			Dim sSQL As String = $"update dta_requests_values set execute_value='', execute_status=0, execute_datetime='${sACLADatetime.Trim}',
								sess_user='${ACLSessUser}',
								execute_latitude='${sACLALatitude.Trim}',
								execute_longitude='${sACLALongitude.Trim}' where request_tagcode='${request_tagcode.trim}' and
								task_tagcode='${task_tagcode.trim}' and item_tagcode='${item_tagcode.Trim}' 
								and unique_key='${uniquekey.Trim}'
								and repeatcounter=${repeatcounter}
								and repeatitemcounter=${repeatitemcounter}
								and repeatfieldcounter=${repeatfieldcounter}"$
			Log(sSQL)
			Utils.SaveSQLToLog("CLAItemButton_StateClick",sSQL, request_tagcode.trim)
			
		Else if (typeControl = 99) Then
			'*************************************************************************************
			' ALTERACAO PC - TYPECONTROL 99 ==> PESQUISA BASEADA NOS PARAMTERS
			'*************************************************************************************
	
			Dim TxtBox As FloatLabeledEditText = pthis.GetView(2)
			If TxtBox.Text = "" Then Return
			
			Dim parameters As String = DBStructures.GetScriptColumnStrEVC($"select paramters from dta_tasks_items_adds
																			where task_tagcode='${action_tagcode.trim}' 
																			and item_tagcode='${item_tagcode.Trim}' 
																			and unique_key='${uniquekey.Trim}'"$, "paramters")
			Log("ITEM:" & item_tagcode)
			Dim continua As Boolean = True
			Dim ValorCaixaTexto As String = TxtBox.Text.Trim
			Dim sACLADatetime As String = Utils.GetCurrDatetimeExt
			Dim ACLSessUser As String = ShareCode.SESS_OPER_User
			Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
			Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
			
			ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
			Sleep(150)
			
			Try
				Dim JsonStruct As String = parameters
				Log("JSON:" & parameters)
				Dim parser As JSONParser
				parser.Initialize(JsonStruct)
				Dim root As Map = parser.NextObject
				Dim search_field As Int = Utils.IfNullOrEmpty(root.Get("search_field"), 0)
				
				Dim fieldsList As List
				fieldsList.Initialize
				Dim mapFields As Map
				mapFields.Initialize
				
				If search_field = 1 Then
	
					Dim search_field_settings As Map = root.Get("search_field_settings")
					Dim inout_tagcode As String = search_field_settings.Get("inout_tagcode")
					Dim group_tagcodes As String = search_field_settings.Get("group_tagcodes")
					Dim subgroup_tagcodes As String = search_field_settings.Get("subgroup_tagcodes")
					Dim types_tagcode As String = search_field_settings.Get("types_tagcode")
					Dim fields As List = search_field_settings.Get("fields")
					Dim returned_field As String = search_field_settings.Get("returned_field")
					Dim fill_other_fields As Int = search_field_settings.Get("fill_other_fields")
					
					' VAI BUSCAR O NOME DA TABELA PRINCIPAL A PESQUISAR, BASEADA NO TAGCODE DO TYPE_INOUTTYPES E
					' E OS NOMES DAS TABELAS AUXILIARES BASEADAS NA PRINCIAL RETORNADA
					Dim table2get As String = DBStructures.GetScriptColumnStrEVC($"select tablename from type_inouttypes where tagcode='${inout_tagcode}'"$, "tablename")
					Dim table_additional As String = $"${table2get}_fields"$
					Dim table_contacts As String = $"${table2get}_contacts"$
					Dim table_location As String = "dta_locations"
					
					' VERIFICA AS VARIAVEIS 'group_tagcode',subgroup_tagcode,types_cagcode CRIANDO UMA LISTA SEPARADAS POR ,
					' E CRIA A LINHA DO SCRIPT SQL BASEADAS NESSES GROUPOS COM O CAMPO OBJECT_TYPE
					' SE NAO CONSEGUIR RETORNA UMA VARIAVEL VAZIA
					
					Dim gField As String = ""
					Dim sField As String = ""
					Dim fField As String = ""
					
					If (Utils.NNE(group_tagcodes)) Then
						Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", group_tagcodes ))
						If Utils.NNE(theList) Then
							gField = $" and object_group in ${theList}"$
						End If
					End If
					
					If (Utils.NNE(subgroup_tagcodes)) Then
						Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", subgroup_tagcodes ))
						If Utils.NNE(theList) Then
							sField = $" and object_group in ${theList}"$
						End If
					End If
					
					If (Utils.NNE(types_tagcode)) Then
						Dim theList As String = Utils.StrList2SQLArray(Regex.Split("\|", types_tagcode ))
						If Utils.NNE(theList) Then
							fField = $" and object_type in ${theList}"$
						End If
					End If
					
					Dim SqlString As String = ""
					
					'ITERAR NOS DIVERSOS CAMPOS E CONDICOES PARA CONSTRUIR O SCIPT SQL
										
					For Each colfields As Map In fields
						Dim field_name As String = colfields.Get("field_name")
						Dim show_position As Int = colfields.Get("show_position")
						Dim show_inlist As Int = colfields.Get("show_inlist")
						Dim is_location As Int = colfields.Get("is_location")
						Dim is_additional As Int = colfields.Get("is_additional")
						Dim is_contact As Int = colfields.Get("is_contact")
						
						' PARA ISTO FUNCIONAR O PRIMEIRO CAMPO DOS PARAMTERS TEM DE SER O CAMPO CHAVE
						
						If field_name = returned_field Then
							Dim chave As String="" 'APANHA O CAMPO DEFINIDO COMO PESQUISA (return_field)
							If Utils.Int2Bool(is_additional) Then
								chave = DBStructures.GetScriptColumnStrEVC($" select object_tagcode from ${table_additional} where field_tagcode = '${field_name}' and value = '${ValorCaixaTexto}'"$,"object_tagcode")
							Else If Utils.Int2Bool(is_contact) Then
								chave = DBStructures.GetScriptColumnStrEVC($" select object_tagcode from ${table_contacts} where contact_tagcode = '${field_name}' and value = '${ValorCaixaTexto}'"$,"object_tagcode")
							Else If Utils.Int2Bool(is_location) Then
								chave = DBStructures.GetScriptColumnStrEVC($" select local_tagcode from ${table_location} where tagcode = '${field_name}' and address = '${ValorCaixaTexto}'"$,"local_tagcode")
							Else
								chave = DBStructures.GetScriptColumnStrEVC($" select tagcode from ${table2get} where ${field_name} = '${ValorCaixaTexto}' limit 1"$,"tagcode")
								If chave = "" Then 
									chave = DBStructures.GetScriptColumnStrEVC($" select tagcode from ${table2get} where ${field_name} like '${ValorCaixaTexto}' limit 1"$,"tagcode")
								End If
							End If
							
							If chave = "" Then
								MsgboxAsync($"Não foi encontrada correspondência para o valor introduzido :${ValorCaixaTexto} !!"$,ShareCode.GeneralInfoTitle)
								chave = "__NULL__"
								mapFields.Put(field_name,"")
							Else
								mapFields.Put(field_name,ValorCaixaTexto)
							End If

						Else 'APANHA OS RESTANTES
							Dim campo As String=""
							Dim testeOptions As String = ""
							mapFields.Put(field_name,campo)
							
							If Utils.Int2Bool(is_additional) And Utils.NNE(chave) Then
								campo = DBStructures.GetScriptColumnStrEVC($" select value from ${table_additional} where object_tagcode = '${chave}' and field_tagcode = '${field_name}'"$,"value")
								testeOptions = DBStructures.GetScriptColumnStrEVC($"select options_list from dta_fields where tagcode = '${field_name}' and dataentrytype_id = 6"$,"options_list")
								If Utils.NNE(testeOptions) And Utils.NNE(campo) Then
									Dim components As List = Regex.Split("\|", testeOptions)
								
									If components.Size >= campo Then
										campo = components.Get(campo-1)
									End If
								End If
								
							Else If Utils.Int2Bool(is_contact) And Utils.NNE(chave) Then
								campo  = DBStructures.GetScriptColumnStrEVC($" select contact_tagcode from ${table_contacts} where object_tagcode = '${chave}'"$,"contact_tagcode")
							Else If Utils.Int2Bool(is_location) And Utils.NNE(chave) Then
								campo = DBStructures.GetScriptColumnStrEVC($" select ${field_name} from ${table_location} where tagcode = '${chave}'"$,field_name)
							Else if is_additional=0 And is_contact=0 And is_location=0 And Utils.NNE(chave) Then
								campo = DBStructures.GetScriptColumnStrEVC($" select ${field_name} from ${table2get} where tagcode = '${chave}'"$,field_name)
							End If
							mapFields.Put(field_name,campo) 'falta passar o map com os values a '' se nao corresponder
						End If
					Next
								
					' SCRIPT SQL FINAL COMPOSTO DOS DIVERSOS SCRIPTS PARCIAIS DE ACIMA
					' ESTE SCRIPT IRA RETORNAR OS CAMPOS PARA DEPOIS PREENCHER OS CAMPOS ABAIXO
					' FAZENDO UM UPDATE A BD E FORÇANDO OS CAMPOS DE RESPOSTA DA CHECKLIST A MOSTRAR OS VALORES, SEM FAZER
					' REFRESH DA CHECKLIST
					Log("mapFields")
									
					If fill_other_fields = 1 Then
						
						Dim fillotherfields_settings As List = search_field_settings.Get("fillotherfields_settings")
			
						For Each colfillotherfields_settings As Map In fillotherfields_settings
							Dim field_name As String = colfillotherfields_settings.Get("field_name")
							Dim is_contact As Int = colfillotherfields_settings.Get("is_contact")
							Dim is_location As Int = colfillotherfields_settings.Get("is_location")
							Dim is_additional As Int = colfillotherfields_settings.Get("is_additional")
							Dim item_tagcode As String = colfillotherfields_settings.Get("item_tagcode")
							Dim repeatcountercontrol As Int = colfillotherfields_settings.Get("repeatcountercontrol")
													
							Dim field2Fill As String = mapFields.get(field_name)
'							**********************************************************************************							
'							ACTUALIZA REGISTO NA BD LOCAL
'							**********************************************************************************							
							Dim SqlString As String = $"update dta_requests_values set execute_value = '${field2Fill}',
															execute_status=1, execute_datetime='${sACLADatetime}',
															sess_user='${ACLSessUser}',
															execute_latitude='${sACLALatitude.Trim}',
															execute_longitude='${sACLALongitude.Trim}'
															where request_tagcode='${request_tagcode.trim}'
															and task_tagcode = '${action_tagcode.Trim}'
															and item_tagcode = '${item_tagcode.trim}'
															and repeatcounter=${repeatcounter}
															and repeatitemcounter=${repeatitemcounter}
															and repeatfieldcounter=${repeatfieldcounter}"$
							Log(SqlString)
							Utils.SaveSQLToLog("CLAButtonEditTextCall",SqlString, request_tagcode.trim)
							
'							**********************************************************************************
'							ACTUALIZA O SERVIDOR COM A RESPOSTA
'							**********************************************************************************
							Dim uK As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_requests_values 
																					where request_tagcode='${request_tagcode.trim}'
																					And task_tagcode = '${action_tagcode.Trim}'
																					And item_tagcode = '${item_tagcode.trim}'
																					And repeatcounter=${repeatcounter}
																					And repeatitemcounter=${repeatitemcounter}
																					And repeatfieldcounter=${repeatfieldcounter}"$,"unique_key")
																					
							Dim Tc As String = DBStructures.GetScriptColumnStrEVC($"select tagcode from dta_requests_values
																					where request_tagcode='${request_tagcode.trim}'
																					And task_tagcode = '${action_tagcode.Trim}'
																					And item_tagcode = '${item_tagcode.trim}'
																					And repeatcounter=${repeatcounter}
																					And repeatitemcounter=${repeatitemcounter}
																					And repeatfieldcounter=${repeatfieldcounter}"$,"tagcode")
																				
							Dim params As Map
							params.Initialize
							params.Clear
							params.Put("_token", ShareCode.APP_TOKEN)
							params.Put("ACLARequest", request_tagcode.trim)
							params.Put("ACLAAction", action_tagcode.trim)
							params.Put("ACLATask", task_tagcode.trim)
							params.Put("ACLAItem", item_tagcode.trim)
							params.Put("ACLAUniqueKey", uK.trim)
							params.Put("ACLATagcode", Tc.trim)
							params.Put("ACLAValue", field2Fill.trim)
							params.Put("ACLAReqCounter", repeatcounter)
							params.Put("ACLARepeatItem", repeatitemcounter)
							params.Put("ACLARepeatField", repeatfieldcounter)
							params.Put("ACLAInner",0)
							params.Put("ACLADatetime", sACLADatetime.trim)
							params.Put("ACLALatitude", sACLALatitude.trim)
							params.Put("ACLALongitude", sACLALongitude.trim)
							params.Put("ACLSessUser", ShareCode.SESS_OPER_User.Trim)
							params.Put("ACLClear", 0)
							params.Put("versionTagcode", Main.VersionTagcode)
							params.Put("_authorization", Main.DeviceAuthorization)
							params.Put("_instance", Main.DeviceInstance)
							params.put("_deviceBrand", Main.DeviceBrand)
							params.put("_deviceModel", Main.DeviceModel)
							params.put("_deviceMacAddress", Main.DeviceMacAddress)
							params.Put("_user", ShareCode.SESS_User)
							Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
							If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
								If Not(ShareCode.APP_WORKING_LOCAL) Then
									Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
									Wait For (GODR) Complete (HasResults As Boolean)
									If HasResults Then
										Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
										Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
									Else
										Utils.CallApi(0, params, Me, Url, "", request_tagcode.trim)
									End If
								Else
									Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
									Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
								End If
								Sleep(250)
							Else
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							End If
								
								
'							ITERA SOBRE AS VIEWS DO CAPITULO ATE ENCONTRAR UMA QUE SEJA FLOATLABELEDITTEXT E TENHA O ITEMTAGCODE IGUAL AO item_tagcode
							Dim exp As Panel = pthis.Parent
							For Each v As View In exp.GetAllViewsRecursive
								If v Is FloatLabeledEditText Then
									Dim f As FloatLabeledEditText = v
									Dim itemTag As List = Regex.Split("\|",f.Tag)
									If itemTag.Size >= 3 Then
										Dim itemTC As String = itemTag.Get(3)
										If itemTC = item_tagcode Then
											f.Text = field2Fill
										End If
									End If
								Else If v Is Label Then
									Dim l As Label = v
									Dim itemTag As List = Regex.Split("\|",l.Tag)
									If itemTag.Size >= 3 And l.Text <> Chr(0xF002) Then
										Dim itemTC As String = itemTag.Get(3)
										If itemTC = item_tagcode Then
											l.Text = field2Fill
										End If
									End If
								Else If v Is ListView Then
									Dim ls As ListView = v
									Dim itemTag As List = Regex.Split("\|",ls.Tag)
									If itemTag.Size >= 3 Then
										Dim itemTC As String = itemTag.Get(3)
										If itemTC = item_tagcode Then
											ls.GetItem(itemTC)
										End If
									End If
								End If
							Next
						Next
					End If
				End If
			
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				continua = False
				MsgboxAsync($"Erro na configuração dos pârametros !!"$,ShareCode.GeneralErrorTitle)
			End Try
		
			ProgressDialogHide
		
		else if (typeControl = 28) Then
			'*************************************************************************************
			' TYPECONTROL 28 ==> CARREGA DIALOGO DE EDICAO DE TEXTO
			'*************************************************************************************
			Dim title As String = CLAItemTitle.text
			Try
				Dim lbl As Label = pthis.GetView(0)
				Dim title As String = lbl.Text
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
			Log(this.Text)
			Dim Filter As AppDialogs
			Filter.Initialize
			Filter.getBoxEditFullText("CheckList3",this, title, CLAItemEditTextValue.text)
		Else
			'*************************************************************************************
			' SE NAO ESTIVER DEFINIDO ASSUME O TYPECONTROL 28 ==> CARREGA DIALOGO DE EDICAO DE TEXTO
			'*************************************************************************************
			Dim title As String = CLAItemTitle.text
			Try
				Dim lbl As Label = pthis.GetView(0)
				Dim title As String = lbl.Text
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
			
			Dim Filter As AppDialogs
			Filter.Initialize
			Filter.getBoxEditFullText("CheckList3", this, title, CLAItemEditTextValue.text)
'			CLAItemEditTextValue.text=ShareCode.FullText
		End If
	End If
	
End Sub

' *************************************************************
' TIP: IMPRIME PARA IMPRESSORA BT - ERGUELOP
' *************************************************************
Sub butChecklistPrinter_Click   
	Dim thisbut As Button = Sender
	
	ProgressDialogShow2("Aguarde sff ...", True)
	Sleep(150)
	
	Dim data As RequestCLA = thisbut.Tag
	
	If  (ShareCode.APP_DOMAIN.ToLowerCase = "erguelop") Then
		Dim doctype As String = ""
		Dim Continuar As Boolean = True
		Try
			Dim document As String = DBStructures.GetScriptColumnStrEVC($"select execute_value from dta_requests_values
										where request_tagcode='${data.Request.trim}' and task_tagcode='${data.Action.trim}'
										and item_tagcode='FIELD_DOCUMENTO'"$,  "execute_value")
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
			Continuar = False
		End Try
		
		If (Continuar) Then
			If Utils.NNE(document) Then
				If (document.StartsWith("GR")) Then
					doctype = "Guia de Remessa"
				Else
					doctype = "Guia de Transporte"
				End If
			End If
		End If
		
		If (Continuar) Then
			Try
				Dim LOCAL_CARGA As String = DBStructures.GetScriptColumnStrEVC($"select execute_value_title from dta_requests_values
										where request_tagcode='${data.Request.trim}' and task_tagcode='${data.Action.trim}'
										and item_tagcode='LOCAL_CARGA'"$,  "execute_value_title")
				LOCAL_CARGA = Utils.IfNullOrEmpty(LOCAL_CARGA,"")
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				Continuar = False
			End Try
		End If
		
		If (Continuar) Then
			Try
				Dim HORA_CARGA As String = DBStructures.GetScriptColumnStrEVC($"select execute_value from dta_requests_values
										where request_tagcode='${data.Request.trim}' and task_tagcode='${data.Action.trim}'
										and item_tagcode='HORA_CARGA'"$,  "execute_value")
				
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				Continuar = False
			End Try
		End If
		
		Dim HORA_DESCARGA As String = "23:00"
		
		If Utils.NNE(HORA_CARGA) Then
			HORA_DESCARGA = Utils.SetNHours(2,HORA_CARGA)
		End If
		
		
		If (Continuar) Then
			Try
				Dim PESO_CARGA As String = DBStructures.GetScriptColumnStrEVC($"select execute_value from dta_requests_values
										where request_tagcode='${data.Request.trim}' and task_tagcode='${data.Action.trim}'
										and item_tagcode='PESO_CARGA'"$,  "execute_value")
				PESO_CARGA = Utils.IfNullOrEmpty(PESO_CARGA,"")
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				Continuar = False
			End Try
		End If
	
		
		If (Continuar) Then
			Try
				Dim LOCAL_DESCARGA As String = DBStructures.GetScriptColumnStrEVC($"select execute_value_title from dta_requests_values
										where request_tagcode='${data.Request.trim}' and task_tagcode='${data.Action.trim}'
										and item_tagcode='LOCAL_DESCARGA'"$,  "execute_value_title")
				LOCAL_DESCARGA = Utils.IfNullOrEmpty(LOCAL_DESCARGA,"")
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				Continuar = False
			End Try
		End If

		If (Continuar) Then
			Try
				Dim FIELD_CODIGO_AT As String = DBStructures.GetScriptColumnStrEVC($"select execute_value from dta_requests_values
										where request_tagcode='${data.Request.trim}' and task_tagcode='${data.Action.trim}'
										and item_tagcode='FIELD_CODIGO_AT'"$,  "execute_value")
				FIELD_CODIGO_AT = Utils.IfNullOrEmpty(FIELD_CODIGO_AT,"")
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				Continuar = False
			End Try
		End If
		
	

		If (Continuar) Then
			Try
				Dim FIELD_TIPO_MAT As String = DBStructures.GetScriptColumnStrEVC($"select execute_value_title from dta_requests_values
										where request_tagcode='${data.Request.trim}' and task_tagcode='${data.Action.trim}'
										and item_tagcode='FIELD_TIPO_MAT'"$,  "execute_value_title")
				FIELD_TIPO_MAT = Utils.IfNullOrEmpty(FIELD_TIPO_MAT,"")
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				Continuar = False
			End Try
		End If

		If (Continuar) Then
			Try
				Dim FIELD_CUSTOMER_NAME As String = DBStructures.GetScriptColumnStrEVC($"select execute_value from dta_requests_values
										where request_tagcode='${data.Request.trim}' and task_tagcode='${data.Action.trim}'
										and item_tagcode='FIELD_CUSTOMER_NAME'"$,  "execute_value")
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				Continuar = False
			End Try
		End If
		Dim FIELD_OBS As String = ""
		Dim FIELD_PHC_NUMBER As String = ""

		If (Continuar) Then
			Try
				Dim FIELD_PHC_NUMBER As String = DBStructures.GetScriptColumnStrEVC($"select execute_value from dta_requests_values
										where request_tagcode='${data.Request.trim}' and task_tagcode='${data.Action.trim}'
										and item_tagcode='FIELD_PHC_NUMBER'"$,  "execute_value")
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				Dim FIELD_PHC_NUMBER As String = ""
			End Try
		End If

		If (Continuar) Then
			Try
				Dim DataActual As String = Utils.GetCurrDatetime
										
				Dim ClienteNome As String = ""
				Dim CliMorada As String = ""
				Dim CliPostal As String = ""
				Dim CliLocal As String = ""
				Dim CliNIF As String = ""  'FIELD_NIF
				Dim FIELD_OBS As String = ""
				Dim Executado As String = ""
	
				Dim SQL As String = $"${DBStructures.EVC_SQL_GETCURRENT_REQEST} and a.tagcode='${data.Request.trim}'"$
				Private Recordw As Cursor = Starter.LocalSQLEVC.ExecQuery(SQL)
				If Recordw.RowCount > 0 Then
					Recordw.Position = 0
					Dim ClienteNome As String = Recordw.GetString("cliname")
					Dim CliMorada As String = Recordw.GetString("address")
					Dim CliPostal As String = Recordw.GetString("postal_code")
					Dim CliLocal As String = Recordw.GetString("city")
					Dim CliNIF As String = Recordw.GetString("clinif")
					Dim Executado As String = Recordw.GetString("execute_date")
				End If
				Recordw.Close
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				Continuar = False
			End Try
		End If
		
		If (Continuar) Then
			Dim FIELD_OBS As String = DBStructures.GetScriptColumnStrEVC($"select request_obs from dta_requests_relations
										where request_tagcode='${data.Request.trim}' and relation_tagcode='${data.Action.trim}'
										and repeatcounter=${data.RepeatCounter}"$,  "request_obs")
			
			Dim vehicleplate As String = ""
			Dim vehicle As String = ""
			Dim vmodel As String = ""
			Dim tagcode As String = ""
			Dim vehicle_tagcode As String = ""
			Dim nSQL As String = $"Select ifnull(e1.value, '') as vmarca, ifnull(e2.value, '') as vmodelo,  ifnull(a.vehicle_tagcode,'') As vehicle_tagcode,
				ifnull(e3.value, '') as vmatricula, ifnull(e4.value, '') as vkm, a.*
				from dta_technicals as a
				left join dta_objects as d on (d.tagcode=a.vehicle_tagcode)
				left join dta_objects_fields as e1 on (e1.object_tagcode=d.tagcode and e1.field_tagcode='FIELD_MARCA')
				left join dta_objects_fields as e2 on (e2.object_tagcode=d.tagcode and e2.field_tagcode='FIELD_MODELO')
				left join dta_objects_fields as e3 on (e3.object_tagcode=d.tagcode and e3.field_tagcode='FIELD_MATRICULA')
				left join dta_objects_fields as e4 on (e4.object_tagcode=d.tagcode and e4.field_tagcode='FIELD_KM')
				where a.tagcode='${ShareCode.SESS_User}'"$  
			Try
				Dim Record As Cursor = Starter.LocalSQLEVC.ExecQuery(nSQL)
				Dim tagcode As String = ""
				If Record.RowCount > 0 Then
					Record.Position = 0
					Dim vehicleplate As String = Utils.IfNullOrEmpty(Record.GetString("vmatricula"), "")
					Dim vehicle As String = Utils.IfNullOrEmpty(Record.GetString("vmarca"), "")
					Dim vmodel As String = Utils.IfNullOrEmpty(Record.GetString("vmodelo"), "")
					Dim tagcode As String = Utils.IfNullOrEmpty(Record.GetString("tagcode"), "")
					Dim vehicle_tagcode As String = Utils.IfNullOrEmpty(Record.GetString("vehicle_tagcode"), "")
				End If
				Record.Close
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
			
		
			Dim SIGNATURE_CLIENT As String = ""
			Dim SIGNATURE_TECHNICAL As String = ""
			Private Recordw As Cursor
			Dim Rows As Int = 0
			Dim SQL As String = $"select * from dta_requests_signatures where  request_tagcode='${data.Request.Trim}'
							and inner_request_tagcode='${data.Action.Trim}' and repeatcounter=${data.RepeatCounter}"$
			Try
				Recordw = Starter.LocalSQLEVC.ExecQuery(SQL)
				If Recordw.RowCount > 0 Then
					For Rows = 0 To Recordw.RowCount-1
						Recordw.Position = Rows
						If (Recordw.GetInt("from_who") = 0) Then
							SIGNATURE_CLIENT = $"${Recordw.GetString("filename")}"$
						Else
							SIGNATURE_TECHNICAL = $"${Recordw.GetString("filename")}"$
						End If
					Next
				End If
				Recordw.Close
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
			
			Try
				
				CLPrinter.ClearBuffer
'				CLPrinter.AddBuffer_Bitmap(LoadBitmap(Starter.InternalFolder,"logo_monocromatico_mono.png"),0)
				CLPrinter.AddBuffer_Bitmap(LoadBitmapResize(Starter.InternalFolder,"logo_monocromatico_mono.png",400,120,True),0)
				
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "ERGUELOP LDA" & ESC_POS.DoubleOff)
				CLPrinter.AddBuffer_Writeline("Contribuinte: 507601190")
				CLPrinter.AddBuffer_Writeline("Rua Bartolomeu Perestelo")
				CLPrinter.AddBuffer_Writeline("Quinta do Machio - Bairro do Tarzim")
				CLPrinter.AddBuffer_Writeline(PT2Normal("2660-507 São Julião do Tojal"))
				CLPrinter.AddBuffer_Bitmap(LoadBitmap(File.DirAssets,"barra_cinza.png"),0)
				

				CLPrinter.AddBuffer_Writeline(doctype.ToUpperCase)
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Documento        : " & ESC_POS.DoubleOff & document.Trim)
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Data             : " & ESC_POS.DoubleOff & Executado.Trim)
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & PT2Normal("Código AT        : ") & ESC_POS.DoubleOff & FIELD_CODIGO_AT.Trim)
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & PT2Normal("Número PHC       : ") & ESC_POS.DoubleOff & FIELD_PHC_NUMBER.Trim)
		
				CLPrinter.AddBuffer_Writeline("")
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Cliente" & ESC_POS.DoubleOff)
				CLPrinter.AddBuffer_Writeline(PT2Normal(ClienteNome.Trim))
				CLPrinter.AddBuffer_Writeline(PT2Normal(CliMorada.Trim))
				CLPrinter.AddBuffer_Writeline($"${CliPostal} ${PT2Normal(CliLocal.Trim)}"$)
				CLPrinter.AddBuffer_Writeline($"Contribuinte: ${CliNIF.Trim}"$)
				CLPrinter.AddBuffer_Writeline("")
				CLPrinter.AddBuffer_Bitmap(LoadBitmap(File.DirAssets,"barra_cinza.png"),0)
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Viatura          : " & ESC_POS.DoubleOff & vehicleplate.Trim)
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Local de Carga   : " & ESC_POS.DoubleOff & PT2Normal(LOCAL_CARGA.Trim))
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Hora de Carga    : " & ESC_POS.DoubleOff & HORA_CARGA.Trim)
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Local de Descarga: " & ESC_POS.DoubleOff & PT2Normal(LOCAL_DESCARGA.Trim))
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Hora de Descarga : " & ESC_POS.DoubleOff & HORA_DESCARGA.Trim) '"23:00")
				CLPrinter.AddBuffer_Writeline("")
				CLPrinter.AddBuffer_Bitmap(LoadBitmap(File.DirAssets,"barra_cinza.png"),0)
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Material" & ESC_POS.DoubleOff)
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Descritivo       : " & ESC_POS.DoubleOff & PT2Normal(FIELD_TIPO_MAT.Trim))
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Peso             : " & ESC_POS.DoubleOff & PESO_CARGA.Trim)
				CLPrinter.AddBuffer_Writeline("")
				CLPrinter.AddBuffer_Bitmap(LoadBitmap(File.DirAssets,"barra_cinza.png"),0)
				CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & PT2Normal("Observações: ") & ESC_POS.DoubleOff)
				CLPrinter.AddBuffer_Writeline(PT2Normal(FIELD_OBS.Trim))
				CLPrinter.AddBuffer_Writeline("")
				CLPrinter.AddBuffer_Bitmap(LoadBitmap(File.DirAssets,"barra_cinza.png"),0)
				
				If Utils.NNE(FIELD_CUSTOMER_NAME) Then
					CLPrinter.AddBuffer_Writeline($"Pelo CLiente: ${FIELD_CUSTOMER_NAME.Trim}"$)
				Else
					CLPrinter.AddBuffer_Writeline("O CLiente")
				End If
				
				Try
					CLPrinter.AddBuffer_Bitmap(LoadBitmapResize(Starter.InternalFolder, SIGNATURE_CLIENT,350dip, 250dip, True),0)
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
				
				
				CLPrinter.AddBuffer_Writeline(PT2Normal("O Técnico"))
				Try
					CLPrinter.AddBuffer_Bitmap(LoadBitmapResize(Starter.InternalFolder, SIGNATURE_TECHNICAL,350dip, 250dip, True),0)
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
				
		
				CLPrinter.AddBuffer_Writeline("Documento processado por computador")
				CLPrinter.AddBuffer_Writeline(DataActual.Trim)
				CLPrinter.AddBuffer_Writeline("")
				CLPrinter.AddBuffer_Writeline("")
				CLPrinter.AddBuffer_Writeline("")
				CLPrinter.AddBuffer_Writeline("")
		
				CLPrinter.SelectFromMac(MacAddress)
'				CLPrinter.SendBufferToPrinter
'				CLPrinter.flushAllAndClose
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
			Sleep(1500)
		End If
	Else if (ShareCode.APP_DOMAIN.ToLowerCase.Contains( "transgrua")) Then
		
		Try
				
			CLPrinter.ClearBuffer
			
			Try
				If File.Exists(Starter.InternalFolder,"logo_transgrua_mono.png") Then
					CLPrinter.AddBuffer_Bitmap(LoadBitmapResize(Starter.InternalFolder,"logo_transgrua_mono.png",400dip,120dip,True),0)
				Else if File.Exists(Starter.AssetsFolder,"logo_transgrua_mono.png") Then
					File.Copy(Starter.AssetsFolder,"logo_transgrua_mono.png",Starter.InternalFolder,"logo_transgrua_mono.png")
					CLPrinter.AddBuffer_Bitmap(LoadBitmapResize(Starter.InternalFolder,"logo_transgrua_mono.png",400dip,120dip,True),0)
				End If
			Catch
				Log(LastException)
			End Try
					
			Dim Veiculo As String = ""
			Dim Motorista As String = ""
			Dim Contador As String = ""
			Dim DadosGPS As String = "Sem GPS"
			Dim Cliente As String = ""
			Dim Local As String = ""
			Dim Equipamento As String = ""
			Dim Observacoes As String = ""
			Dim numdocumento As String = ""
			Dim DataActual As String = Utils.GetCurrDatetime
			Dim CestoRiscado As String  = "-"
			Dim CestoSujo As String = "-"
			Dim CestoAmolgado As String = "-"
			Dim EstadoComandosBase As String = "-"
			Dim EstadoComandosCesto As String = "-"
			Dim FuncionamentoGeral As String = "-"
			Dim MaquinaRiscada As String = "-"
			Dim MaquinaAmolgada As String = "-"
			Dim EstadoPneus As String = "-"
			Dim Pirilampo As String = "-"
			Dim PastaDocs As String = "-"
			Dim TemObs As String = "-"
			
			Observacoes = DBStructures.GetScriptColumnStrEVC($"SELECT request_obs from dta_requests_relations where request_tagcode = '${data.Request.trim}'"$,"request_obs")
			
			
			Dim SIGNATURE_CLIENT As String = ""
			Dim SIGNATURE_TECHNICAL As String = ""
			Private Recordw As Cursor
			Dim Rows As Int = 0
			Dim SQL As String = $"select * from dta_requests_signatures where request_tagcode='${data.Request.Trim}'
							and inner_request_tagcode='${data.Action.Trim}' and repeatcounter=${data.RepeatCounter}"$
			Try
				Recordw = Starter.LocalSQLEVC.ExecQuery(SQL)
				If Recordw.RowCount > 0 Then
					For Rows = 0 To Recordw.RowCount-1
						Recordw.Position = Rows
						If (Recordw.GetInt("from_who") = 0) Then
							SIGNATURE_CLIENT = $"${Recordw.GetString("filename")}"$
						Else
							SIGNATURE_TECHNICAL = $"${Recordw.GetString("filename")}"$
						End If
					Next
				End If
				Recordw.Close
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
			
			
			Motorista = ShareCode.SESS_OPER_UserName
			
			Dim object_tagcode As String = DBStructures.GetScriptColumnStrEVC($"select object_tagcode from dta_requests where tagcode = '${data.Request.trim}'"$,"object_tagcode")
			If Utils.NNE(object_tagcode) Then
				Dim title_import As String = DBStructures.GetScriptColumnStrEVC($"select title_import from dta_objects where tagcode = '${object_tagcode.trim}'"$,"title_import")
				If Utils.NNE(title_import) Then
					Cliente = title_import
				Else
					Cliente = "(Sem identificação)"
				End If
			End If
			
			Dim vehicle_tagcode As String = DBStructures.GetScriptColumnStrEVC($"select vehicle_tagcode from dta_requests where tagcode = '${data.Request.trim}'"$,"vehicle_tagcode")
			If Utils.NNE(vehicle_tagcode) Then
				Dim plate_number As String = DBStructures.GetScriptColumnStrEVC($"select plate_number from dta_objects where tagcode = '${vehicle_tagcode.trim}'"$,"plate_number")
				If Utils.NNE(plate_number) Then
					Veiculo = plate_number
				Else
					Veiculo = "-"
				End If
			End If
			
			Dim GetSqlData As ResultSet = Starter.LocalSQLEVC.ExecQuery($"select * from dta_requests_values where execute_status = 1 and request_tagcode = '${data.Request}'"$)
			
			If GetSqlData.RowCount > 0 Then
				Do While GetSqlData.NextRow
					Dim item_tagcode As String = GetSqlData.GetString("item_tagcode")
					Dim execute_value As String = GetSqlData.GetString("execute_value")
					Dim execute_latitude As String = GetSqlData.GetString("execute_latitude")
					Dim execute_longitude As String = GetSqlData.GetString("execute_longitude")
					If item_tagcode = "KEY_COORDGPS" Then
						If Utils.NNE(execute_latitude) And Utils.nne(execute_longitude) Then
							DadosGPS = $"${execute_latitude}/${execute_longitude}"$
						Else
							DadosGPS = "Sem GPS"
						End If
					else if item_tagcode = "KEY_EQUIPAMENTO" Then
						Equipamento = execute_value
					else if item_tagcode = "FIELD_OBRA_ADDRESS" Then
						Local = execute_value
					else if item_tagcode = "TRGA1004" Then
						If execute_value = 1 Then
							Dim CestoRiscado As String  = "S"
						Else
							Dim CestoRiscado As String  = "N"
						End If
					else if item_tagcode = "TRGA1007" Then
						If execute_value = 1 Then
							Dim CestoSujo As String  = "S"
						Else
							Dim CestoSujo As String  = "N"
						End If
					else if item_tagcode = "TRGA1010" Then
						If execute_value = 1 Then
							Dim CestoAmolgado As String  = "S"
						Else
							Dim CestoAmolgado As String  = "N"
						End If
					else if item_tagcode = "TRGA1013" Then
						If execute_value = 1 Then
							Dim EstadoComandosBase As String  = "S"
						Else
							Dim EstadoComandosBase As String  = "N"
						End If
					else if item_tagcode = "TRGA1016" Then
						If execute_value = 1 Then
							Dim EstadoComandosCesto As String  = "S"
						Else
							Dim EstadoComandosCesto As String  = "N"
						End If
					else if item_tagcode = "TRGA1019" Then
						If execute_value = 1 Then
							Dim FuncionamentoGeral As String  = "S"
						Else
							Dim FuncionamentoGeral As String  = "N"
						End If
					else if item_tagcode = "TRGA1022" Then
						If execute_value = 1 Then
							Dim MaquinaRiscada As String  = "S"
						Else
							Dim MaquinaRiscada As String  = "N"
						End If
					else if item_tagcode = "TRGA1025" Then
						If execute_value = 1 Then
							Dim MaquinaAmolgada As String  = "S"
						Else
							Dim MaquinaAmolgada As String  = "N"
						End If
					else if item_tagcode = "TRGA1028" Then
						If execute_value = 1 Then
							Dim EstadoPneus As String  = "S"
						Else
							Dim EstadoPneus As String  = "N"
						End If
					else if item_tagcode = "TRGA1031" Then
						If execute_value = 1 Then
							Dim Pirilampo As String  = "S"
						Else
							Dim Pirilampo As String  = "N"
						End If
					else if item_tagcode = "TRGA1034" Then
						If execute_value = 1 Then
							Dim PastaDocs As String  = "S"
						Else
							Dim PastaDocs As String  = "N"
						End If
					else if item_tagcode = "TRGA1037" Then
						If execute_value = 1 Then
							Dim TemObs As String  = "S"
						Else
							Dim TemObs As String  = "N"
						End If
					End If
				Loop
			End If
			
			CLPrinter.AddBuffer_Writeline("")
			CLPrinter.AddBuffer_Writeline("Entrega : " & data.Request.Trim.ToUpperCase)
			CLPrinter.AddBuffer_Writeline("de      :" & DataActual.Trim)
			CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Veiculo     : " & ESC_POS.DoubleOff & Veiculo.Trim)
			CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Motorista   : " & ESC_POS.DoubleOff & Motorista.Trim)
			CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Contador    : " & ESC_POS.DoubleOff & Contador.Trim)
			CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & DadosGPS.Trim & ESC_POS.DoubleOff)
			CLPrinter.AddBuffer_Writeline("")
			CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Cliente :" & Cliente & ESC_POS.DoubleOff)
			CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Local   :" & Local & ESC_POS.DoubleOff)
			CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & "Equipamento :" & Equipamento & ESC_POS.DoubleOff)		
			CLPrinter.AddBuffer_Writeline("")
			CLPrinter.AddBuffer_Bitmap(LoadBitmap(File.DirAssets,"barra_cinza.png"),0)
			CLPrinter.AddBuffer_Writeline("")
			CLPrinter.AddBuffer_Writeline("-------------------------------")
  CLPrinter.AddBuffer_Writeline(PT2Normal("| Questionário          ENT|REC|"))
			CLPrinter.AddBuffer_Writeline("|------------------------------|")
			CLPrinter.AddBuffer_Writeline($"| Cesto Riscado          ${CestoRiscado} |   |"$)
			CLPrinter.AddBuffer_Writeline("|------------------------------|")
			CLPrinter.AddBuffer_Writeline($"| Cesto Sujo Tinta       ${CestoSujo} |   |"$)
			CLPrinter.AddBuffer_Writeline("|------------------------------|")
			CLPrinter.AddBuffer_Writeline($"| Cesto Amolgado         ${CestoAmolgado} |   |"$)
			CLPrinter.AddBuffer_Writeline("|------------------------------|")
			CLPrinter.AddBuffer_Writeline($"| Estado comandos base   ${EstadoComandosBase} |   |"$)
			CLPrinter.AddBuffer_Writeline("|------------------------------|")
			CLPrinter.AddBuffer_Writeline($"| Estado comandos cesto  ${EstadoComandosCesto} |   |"$)
			CLPrinter.AddBuffer_Writeline("|------------------------------|")
			CLPrinter.AddBuffer_Writeline($"| Funcionamento geral    ${FuncionamentoGeral} |   |"$)
			CLPrinter.AddBuffer_Writeline("|------------------------------|")
			CLPrinter.AddBuffer_Writeline($"| Maquina Riscada        ${MaquinaRiscada} |   |"$)
			CLPrinter.AddBuffer_Writeline("|------------------------------|")
			CLPrinter.AddBuffer_Writeline($"| Maquina Amolgada       ${MaquinaAmolgada} |   |"$)
			CLPrinter.AddBuffer_Writeline("|------------------------------|")
			CLPrinter.AddBuffer_Writeline($"| Estado PNEUS           ${EstadoPneus} |   |"$)
			CLPrinter.AddBuffer_Writeline("|------------------------------|")
			CLPrinter.AddBuffer_Writeline($"| Pirilampo              ${Pirilampo} |   |"$)
			CLPrinter.AddBuffer_Writeline("|------------------------------|")
			CLPrinter.AddBuffer_Writeline($"| Pasta documentos       ${PastaDocs} |   |"$)
			CLPrinter.AddBuffer_Writeline("|------------------------------|")
			CLPrinter.AddBuffer_Writeline($"| Tem OBS                ${TemObs} |   |"$)
			CLPrinter.AddBuffer_Writeline("-------------------------------")
			CLPrinter.AddBuffer_Writeline("")
			CLPrinter.AddBuffer_Writeline(ESC_POS.BoldOn & PT2Normal("Observações: ") & ESC_POS.DoubleOff)
			CLPrinter.AddBuffer_Writeline(PT2Normal(Observacoes.Trim))
			CLPrinter.AddBuffer_Writeline("")
			CLPrinter.AddBuffer_Writeline("O CLiente")
			
			Try
				CLPrinter.AddBuffer_Bitmap(LoadBitmapResize(Starter.InternalFolder, SIGNATURE_CLIENT,350dip, 250dip, True),0)
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
			
			CLPrinter.AddBuffer_Writeline("")
			CLPrinter.AddBuffer_Writeline("")
			CLPrinter.AddBuffer_Writeline("O Motorista")
			
			Try
				CLPrinter.AddBuffer_Bitmap(LoadBitmapResize(Starter.InternalFolder, SIGNATURE_TECHNICAL,350dip, 250dip, True),0)
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
			
			CLPrinter.AddBuffer_Writeline("")
			CLPrinter.AddBuffer_Writeline("")
			CLPrinter.AddBuffer_WriteLine(ESC_POS.FontB_Normal & PT2Normal("Condições gerais: "))

			CLPrinter.AddBuffer_Writeline(PT2Normal("1.	Na ausência de resposta escrita, a execução do serviço proposto implica aceitação integral das condições de aluguer."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("1.1	O preço apresentado e acordado tem como pressuposto a duração mínima do aluguer indicado na consulta do cliente, podendo a Transgrua ajustá-lo de acordo com a tabela vigente se a duração efetiva do aluguer se revelar inferior. Se o equipamento for mantido por tempo superior será prorrogada automaticamente por igual período."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("1.2	Aos preços indicados será acrescida a taxa de IVA em vigor."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("1.3	O aluguer tem como base diária uma média de 8Horas/dia calendário, e cada hora extra será faturada proporcionalmente ao preço do aluguer. Faturamos (salvo acordado de outro modo, por escrito) dia calendário."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("1.4	Cabe ao locatário o dever de informar atempadamente a data de devolução do equipamento, devendo fazê-lo por escrito com pelo menos 24H de antecedência em relação à data de devolução, sendo devidos alugueres até à data do levantamento do equipamento."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("1.5	O cliente não pode em caso algum, fazer a sublocação ou cedência, a qualquer título, a terceiros, do equipamento, a não ser que obtenha prévia autorização escrita da Transgrua."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("2.	Valor gestão resíduos – Devido ao volume de resíduos de vários tipos e às crescentes exigências e custos desta gestão para proteção do meio ambiente, cobramos o valor 8.00€ por máquina por contrato de aluguer."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("3.	  O equipamento é alugado sem operador."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("3.1	Caso o equipamento seja acima de 3500kg, para circular na via pública o operador tem que possuir carta de pesados categoria C."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("4.	A manutenção e assistência são por conta da Transgrua (salvo acordo contrário) mas o cliente compromete-se a manter e a devolver a máquina limpa e em bom estado, sem quaisquer danos ou sinais de desgaste anormal."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("4.1	O cliente é obrigado a facultar à locadora o seu exame quando solicitado."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("5.	O cliente ao receber a máquina assume total responsabilidade pela sua guarda, uso correto e verificação diária do seu bom estado de acordo com instruções dadas e de acordo com o manual do equipamento – deverá fazer uma utilização prudente do equipamento;"))
			CLPrinter.AddBuffer_Writeline(PT2Normal("5.1	Não poderá descaracterizar o equipamento na sua identificação, designadamente, retirando-lhe placas identificadoras ou colocando-lhe autocolantes."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("5.2	É da responsabilidade do locatário os danos provenientes de falta de verificação dos níveis de água ou óleo, causados em pneumáticos, incluindo furos (cuja reparação devem providenciar) bem como os provocados por excesso de carga, substâncias corrosivas, fogo e tintas; assim como é expressamente proibido a utilização do equipamento em operações de decapagem, pintura, projeção de betão ou trabalhos em minas e túneis, salvo autorização escrita da Trangrua. É da responsabilidade do locatário todos os danos e perdas causadas por utilização abusiva, indevida ou negligente, incluindo os danos causados por terceiros, mesmo provenientes de atos de vandalismo assim como perda total ou parcial do equipamento quer do proveniente de acidente quer quando tenha origem em furto ou roubo. No caso da ocorrência de danos os mesmos serão da responsabilidade do locatário que deverá suportar os custos da respetiva reparação."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("5.3	O cliente deverá contratar seguros que cubram os riscos ou perda total ou parcial do equipamento bem como um seguro da responsabilidade civil da operação de máquinas que cubra os danos causados a terceiros."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("5.4	 Em caso de acidente:"))
			CLPrinter.AddBuffer_Writeline(PT2Normal("5.4.1	- Franquia de 500€ por cada sinistro participado ao seguro auto."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("5.4.2	 - No seguro de cascos franquia 10% do valor do sinistro mínimo 2500€."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("5.4.3	 - É necessário o envio obrigatório do relatório do sinistro."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("5.4.4	-  Período de imobilização para reparação será faturado ao valor do aluguer contrato."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("5.4.5	- A utilização indevida do equipamento ou manuseamento por pessoa não qualificada poderá provocar o declínio por parte da seguradora, sendo por isso imputado o valor total da reparação e período de imobilização."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("5.5. O cliente é responsável (e será debitado) pelas multas, coimas, parquímetros, portagens, scuts ou outras sanções que venhas a ser aplicadas por razões imputáveis à utilização do equipamento."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("5.6. Em caso de acidente será imputado ao cliente o valor de 50% da diária, durante o tempo de reparação do mesmo."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("6. A entrega do equipamento é efetuada nas instalações da locadora, sendo da conta do cliente as operações de transporte e descarga no local da obra, bem como a sua devolução às instalações da locadora."))
			CLPrinter.SendBufferToPrinter
			CLPrinter.AddBuffer_Writeline(PT2Normal("6.1. A solicitação do cliente e em condições a acordar, a Trangrua poderá efetuar as referidas operações de transporte."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("6.2. Quando o cliente efetuar o transporte deverá assegurar que tem o seguro para o efeito, correndo por sua conta os riscos de perda ou deterioração do equipamento nas operações de transporte carga e descarga."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("7. O abastecimento de combustível/energia respetivo é por conta do locatário sendo da sua responsabilidade o seu fornecimento;"))
			CLPrinter.AddBuffer_Writeline(PT2Normal("7.1. Tratando-se do abastecimento de gasóleo é proibido o uso de aquecimento e/ou agrícola no abastecimento das máquinas."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("7.2. Tratando-se de equipamento elétrico, compete ao cliente efetuar o carregamento das baterias no final de cada período de trabalho, sem quebras de tensão."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("8. A documentação dos equipamentos fica à guarda do cliente/utilizador durante todo o período de aluguer, sendo a sua devolução obrigatória. A não devolução, perda, extravio ou inutilização da documentação implica o pagamento, pelo cliente, de uma verba de 100 euros."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("9. São por conta do locatário os eventuais períodos de imobilização dos seguintes equipamentos motivados por condições atmosféricas, avarias, paragens para reparações, exigências dos responsáveis de obra, condições do terreno, suspensão da obra bem como todas as outras situações alheias à vontade da Transgrua."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("9.1. Os períodos de paragem e funcionamento do equipamento, qualquer que seja a sua origem (incluindo avaria equipamento) não conferirão, em caso algum, direito a qualquer indemnização ou compensação de perdas ou danos ao cliente."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("10. Os acessos ao local e a autorização para a utilização da via pública são da responsabilidade do cliente, assim como acompanhamento policial."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("11.  A falta de pagamento de faturas vencidas, sendo a mora superior a 15 dias, bem como o incumprimento de qualquer das condições acordadas incluindo as incertas nas presentes Condições Gerais, por parte do cliente, conferirão à Transgrua o direito de rescindir o contrato, com justa causa, e com efeitos imediatos. Exercido esse direito, prescrito, a Transgrua poderá proceder à retirada imediata do equipamento, sendo os custos da retirada e transporte a cargo do cliente."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("11.1. Para todos os efeitos considerar-se-á domicílio convencionado do cliente aquele que ele indicar aquando da contratação."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("11.2. Salvo diferente estipulação contratual as faturas deverão ser liquidadas no prazo máximo de 30 dias a contar da sua emissão."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("11.3 Não se verificando o pagamento das faturas no prazo estipulado, além do capital faturado, o cliente ficará devedor de juros de mora calculados à taxa de juros comerciais em vigor."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("11.4. Para resolução de qualquer litígio é designado como exclusivamente competente o Tribunal Judicial da Comarca de Lisboa."))
			CLPrinter.AddBuffer_Writeline(PT2Normal("Casos específicos:"))
			CLPrinter.AddBuffer_Writeline(PT2Normal("Autoplataformas"))
			CLPrinter.AddBuffer_Writeline(PT2Normal(". Transporte, combustível e portagens são responsabilidade do Cliente. "))
			CLPrinter.AddBuffer_Writeline(PT2Normal(". Seguro automóvel com responsabilidade civil 50.000€."))
			CLPrinter.AddBuffer_Writeline(PT2Normal(". Seguro máquinas casco coberto em novo com franquia 10% do valor sinistro no mínimo 500€ e máximo 1.250€."))
			CLPrinter.AddBuffer_Writeline(PT2Normal(". Responsabilidade civil de laboração, bem como responsabilidade sequencial continua de responsabilidade do cliente."))
			CLPrinter.AddBuffer_WriteLine(ESC_POS.FontA_Normal & PT2Normal(""))
			CLPrinter.AddBuffer_Writeline("")

			For l=0 To 20
				CLPrinter.AddBuffer_Writeline(" ")
			Next
				
			CLPrinter.SelectFromMac(MacAddress)
'				CLPrinter.SendBufferToPrinter
'				CLPrinter.flushAllAndClose
		Catch
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		Sleep(1500)
		
		
			
	End If
	ProgressDialogHide
End Sub

Sub PT2Normal(inStr As String) As String
	If Utils.NNE(inStr) Then
		inStr = inStr.Replace("á", "a")
		inStr = inStr.Replace("à", "a")
		inStr = inStr.Replace("é", "e")
		inStr = inStr.Replace("è", "e")
		inStr = inStr.Replace("í", "i")
		inStr = inStr.Replace("ì", "i")
		inStr = inStr.Replace("ó", "o")
		inStr = inStr.Replace("ò", "o")
		inStr = inStr.Replace("ú", "u")
		inStr = inStr.Replace("ù", "u")
		inStr = inStr.Replace("ç", "c")
		inStr = inStr.Replace("ã", "a")
		inStr = inStr.Replace("õ", "o")
		inStr = inStr.Replace("ô", "o")
		inStr = inStr.Replace("ü", "u")
		inStr = inStr.Replace("Á", "A")
		inStr = inStr.Replace("À", "A")
		inStr = inStr.Replace("É", "E")
		inStr = inStr.Replace("È", "E")
		inStr = inStr.Replace("É", "I")
		inStr = inStr.Replace("Ì", "I")
		inStr = inStr.Replace("Ó", "O")
		inStr = inStr.Replace("Ò", "O")
		inStr = inStr.Replace("Ú", "U")
		inStr = inStr.Replace("Ù", "U")
		inStr = inStr.Replace("Ç", "C")
		inStr = inStr.Replace("Ã", "A")
		inStr = inStr.Replace("Õ", "O")
		inStr = inStr.Replace("Ô", "O")
		inStr = inStr.Replace("Ü", "U")
	End If
	Return inStr
End Sub


Sub CLPrinter_ConnectedToPrint (Success As Boolean)
	If (butChecklistPrinter.IsInitialized) Then
		If Success Then
			butChecklistPrinter.Enabled = True
			butChecklistPrinter.Color = Consts.ColorMain
		Else
			butChecklistPrinter.Enabled = True
			butChecklistPrinter.Color = Consts.ColorLightSilver
		End If
		CLPrinter.flushAllAndClose
	End If
End Sub

Sub CLPrinter_SendTerminated
	Log("Finish!!")
'	CLPrinter.Close
End Sub

Sub SetMandatoryValue(item_tagcode As String , value_in As Boolean)
	For i=0 To MandatoryValues.Size-1
		Dim mvs As MandatoryRecords = MandatoryValues.Get(i)
		If (mvs.item_tagcode = item_tagcode) Then
			mvs.value_in = value_in
			MandatoryValues.Set(i, mvs)
			Exit
		End If
	Next
End Sub

Sub SetMandatoryState(item_tagcode As String , Enabled As Boolean)
	For i=0 To MandatoryValues.Size-1
		Dim mvs As MandatoryRecords = MandatoryValues.Get(i)
		If (mvs.item_tagcode = item_tagcode) Then
			mvs.Enabled = Enabled
			MandatoryValues.Set(i, mvs)
			Exit
		End If
	Next
End Sub

Sub SetMandatoryStateAfterBullet(bullet_master As Int, bullet_child As Int, Enabled As Boolean)
	For i=0 To MandatoryValues.Size-1
		Dim mvs As MandatoryRecords = MandatoryValues.Get(i)
		If (mvs.bullet_child >= bullet_master) And (mvs.bullet_child >= bullet_child) Then
			mvs.Enabled = Enabled
			MandatoryValues.Set(i, mvs)
			Exit
		End If
	Next
End Sub

Sub SetMandatoryStateAfterItem(item_tagcode As String , Enabled As Boolean)
	Dim start As Int = 0
	For i=0 To MandatoryValues.Size-1
		Dim mvs As MandatoryRecords = MandatoryValues.Get(i)
		If (start = 1) Then
			mvs.Enabled = Enabled
			MandatoryValues.Set(i, mvs)
		End If
		
		If (mvs.item_tagcode = item_tagcode) Then
			start = 1
		End If
	Next
End Sub

Sub SetMandatoryStateAfterItemChapter(item_tagcode As String , bullet_master As Int, bullet_child As Int, Enabled As Boolean)
	Dim start As Int = 0
	For i=0 To MandatoryValues.Size-1
		Dim mvs As MandatoryRecords = MandatoryValues.Get(i)
		If (start = 1) Then
			If (mvs.bullet_child = bullet_master) And (mvs.bullet_child > bullet_child) Then
				mvs.Enabled = Enabled
				MandatoryValues.Set(i, mvs)
			Else
				start = 0
			End If
		End If
		
		If (mvs.item_tagcode = item_tagcode) Then
			start = 1
		End If
	Next
End Sub

Sub CountMandatoryState As Int
	Dim Ret As Int = 0
	For i=0 To MandatoryValues.Size-1
		Dim mvs As MandatoryRecords = MandatoryValues.Get(i)
		If (mvs.Enabled = True) Then
			Ret = Ret + 1
		End If
	Next
	Return Ret
End Sub


Sub CheckForMandatoryNew As Int
	Dim Ret As Int = 0
	For i=0 To MandatoryValues.Size-1
		Dim mvs As MandatoryRecords = MandatoryValues.Get(i)
		If (mvs.mandatory = 1) And (mvs.Enabled = True) And Not(mvs.value_in = True) Then
			Ret = Ret + 1
		End If
	Next
	Return Ret
End Sub

Sub ReturnFromNumberBox(this As FloatLabeledEditText)
	If (LoadingProcess = False) Then
		
		Log("»»»»»»»»»»»»»»»»»»»»»»»»»»  EDIT  «««««««««««««««««««««««««««")
		Dim pan As Panel = this.Parent
		Dim thisTAG As String = this.Tag
		Dim New As String = this.Text
		Dim ThisItemValue As String = New
		'If Not(Utils.isNullOrEmpty(pan.Tag)) And (pan.tag = thisTAG)  Then
		If Not(Utils.isNullOrEmpty(this.Tag)) Then
			Dim Columns As List = Regex.Split("\|", thisTAG) 'this.tag )
			If (Columns.Size > 1) Then
				
				Dim request_tagcode As String = Columns.Get(0)
				Dim action_tagcode As String = Columns.Get(1)
				Dim task_tagcode As String = Columns.Get(2)
				Dim item_tagcode As String = Columns.Get(3)
				Dim uniquekey As String = Columns.Get(4)
				Dim tagcode As String = Columns.Get(5)
'					Dim val As Int = Columns.Get(6)
'					Dim StatusIcon As Int = Columns.Get(7)
				Dim repeatcounter As Int = Columns.Get(9)
				Dim repeatitemcounter As Int = Columns.Get(10)
				Dim repeatfieldcounter As Int = Columns.Get(11)
				Dim sACLADatetime As String = Utils.GetCurrDatetime
				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
				
				Dim RequestInfo As RequestCLAItem = Types.MakeRequestCLAItem( _
						request_tagcode, action_tagcode, task_tagcode, item_tagcode, uniquekey, tagcode, _
						repeatcounter, repeatitemcounter, repeatfieldcounter, _
						"", "", "", 0, 0, 1, "", Types.MakeCLATaskItemClear, "")
				
				Dim SetInner As Int = 0
				Try
					Dim lbl As Label = pan.GetView(0)
					If (Utils.NNE(lbl.Text)) Then
						If (lbl.Tag = 1) Then
							Dim sSQLw As String = $"update dta_requests_relations set inner_title='${New}'
							where request_tagcode='${request_tagcode.trim}' 
							and relation_tagcode='${task_tagcode.trim}' 
							and repeatcounter=${repeatcounter}"$
							Utils.SaveSQLToLog("CLAItemEditValue_FocusChanged",sSQLw, request_tagcode)
							'Starter.LocalSQLEVC.ExecNonQuery(sSQLw)
							SetInner = 1
						End If
					End If
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
				PressedAnswerTagCode = tagcode
				Dim Continuar As Boolean = True
				
				Dim panpan As Panel = this.Parent
				Dim thisCLAItem As RequestCLAItem
				thisCLAItem.Initialize
				Try
					Dim thisCLAItem As RequestCLAItem = panpan.tag
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
					Continuar = False
				End Try
				
				Continuar = (Continuar) And (thisCLAItem Is RequestCLAItem)
				
				If Continuar Then
					Dim force_control As Int = 0
					Dim type_control As Int = 0
					Dim relUniqueKey As String = ""
			
					If (thisCLAItem.IsInitialized) Then
						If (Utils.NNE(thisCLAItem.Request)) Then
							Dim relUniqueKey As String = Utils.IfNullOrEmpty(thisCLAItem.TaskInfo.dependent_key, "")
							Dim force_control As Int = thisCLAItem.TaskInfo.force_control
							Dim type_control As Int = thisCLAItem.TaskInfo.type_control '1|2|3
						End If
					End If

					Dim status As Int = 0
					If Utils.NNE(New) Then
						status = 1
					
						If (force_control=1) And (type_control=1) Then
							Dim sSQLcheck As String = $"select execute_value from dta_requests_values where 1=1
						and request_tagcode='${request_tagcode.trim}'
						and task_tagcode='${task_tagcode.trim}' 
						and item_tagcode='${item_tagcode.trim}' 
						and unique_key='${relUniqueKey.Trim}'
						and repeatcounter=${repeatcounter}
						and repeatitemcounter=${repeatitemcounter}
						and repeatfieldcounter=${repeatfieldcounter}"$
						
							Dim recrec As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQLcheck)
							If recrec.RowCount > 0 Then
								recrec.Position = 0
								Dim compValue As String = Utils.IfNullOrEmpty(recrec.GetString("execute_value"), "")
								If Not(New = compValue) Then
									this.Color = Colors.Red
									this.EditText.TextColor = Colors.White
								Else
									this.Color = Colors.Green
									this.EditText.TextColor = Colors.White
								End If
							End If
						End If
					
					End If
					Try
						
						SetMandatoryValue(item_tagcode.Trim, Utils.Int2Bool(status))
						Dim sSQL As String = $"update dta_requests_values set execute_value='${New}',
							execute_status='${status}', 
							execute_datetime='${sACLADatetime}', 
							execute_latitude='${sACLALatitude}', execute_longitude='${sACLALongitude}'
							where request_tagcode='${request_tagcode.Trim}' and
							task_tagcode='${task_tagcode.Trim}' and item_tagcode='${item_tagcode.Trim}' and 
							unique_key='${uniquekey.Trim}' and tagcode='${tagcode.Trim}'
							and repeatcounter=${repeatcounter}
							and repeatitemcounter=${repeatitemcounter}
							and repeatfieldcounter=${repeatfieldcounter}"$
					
						Log(sSQL)
						Utils.SaveSQLToLog("CLAItemEditValue_FocusChanged",sSQL, request_tagcode)
						'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
						Dim params As Map
						params.Initialize
						params.Clear
						params.Put("_token", ShareCode.APP_TOKEN)
						params.Put("ACLARequest", request_tagcode)
						params.Put("ACLAAction", action_tagcode)
						params.Put("ACLATask", task_tagcode)
						params.Put("ACLAItem", item_tagcode)
						params.Put("ACLAUniqueKey", uniquekey)
						params.Put("ACLATagcode", tagcode)
						params.Put("ACLAValue", New)
						params.Put("ACLAReqCounter", repeatcounter)
						params.Put("ACLARepeatItem", repeatitemcounter)
						params.Put("ACLARepeatField", repeatfieldcounter)
						params.Put("ACLAInner", SetInner)
			
						params.Put("ACLADatetime", sACLADatetime)
						params.Put("ACLALatitude", sACLALatitude)
						params.Put("ACLALongitude", sACLALongitude)
						params.Put("versionTagcode", Main.VersionTagcode)
						params.Put("_authorization", Main.DeviceAuthorization)
						params.Put("_instance", Main.DeviceInstance)
						params.put("_deviceBrand", Main.DeviceBrand)
						params.put("_deviceModel", Main.DeviceModel)
						params.put("_deviceMacAddress", Main.DeviceMacAddress)
						params.Put("_user", ShareCode.SESS_User)
						Dim ACLSessUser As String = ShareCode.SESS_OPER_User
						Dim ACLClear As Int = 0
						params.Put("ACLSessUser", ACLSessUser)
						params.Put("ACLClear", ACLClear)
	
						Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
						If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
							If Not(ShareCode.APP_WORKING_LOCAL) Then
								Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
								Wait For (GODR) Complete (HasResults As Boolean)
								If HasResults Then
									Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
									Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
								Else
									Utils.CallApi(0, params, Me, Url, "", request_tagcode)
								End If
							Else
								Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
								Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
							End If
							Sleep(250)
						Else
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						End If
						
						'******************************************************************************
						'	CONTROLO DE ACAIL
						'******************************************************************************
						If (uniquekey.trim = "ad997355-0c5c-57a1-86ab-16aea41a974c") Or _
						(uniquekey.trim = "fe883a15-4df5-50b6-8eba-31b15564cddc") Or _
						(uniquekey.trim = "3c335a96-fc34-5bc8-b286-d61730eafe7c") Then
							Dim ContinuaAcail As Boolean = True
							Try
								Dim valueAcail As Int = New
							Catch
								ContinuaAcail = False
							End Try
						
							If (ContinuaAcail) Then
								If valueAcail >= 90 Then
									Dim backColor As Int = Consts.ColorGreen
									Dim fontColor As Int = Colors.Black
								Else
									Dim backColor As Int = Consts.ColorRed
									Dim fontColor As Int = Consts.ColorWhite
								End If
								this.Color = backColor
								this.EditText.TextColor = fontColor
							End If
						
						else If (uniquekey.trim = "0f89b48e-9214-560d-a056-77aa23e5e90c") Then
							Dim ContinuaAcail As Boolean = True
							Try
								Dim valueAcail As Int = New
							Catch
								ContinuaAcail = False
							End Try
						
							If (ContinuaAcail) Then
								If (valueAcail >= 5) And (valueAcail<=7) Then
									Dim backColor As Int = Consts.ColorGreen
									Dim fontColor As Int = Colors.Black
								Else
									Dim backColor As Int = Consts.ColorRed
									Dim fontColor As Int = Consts.ColorWhite
								End If
								this.Color = backColor
								this.EditText.TextColor = fontColor
						
							End If
						
						else If (uniquekey.trim = "3ff65480-d44f-50e3-9f21-3c7644c921be") Then
							Dim ContinuaAcail As Boolean = True
							Try
								Dim valueAcail As Int = New
							Catch
								ContinuaAcail = False
							End Try
						
							If (ContinuaAcail) Then
								If (valueAcail > 2) Then
									Dim backColor As Int = Consts.ColorGreen
									Dim fontColor As Int = Colors.Black
								Else
									Dim backColor As Int = Consts.ColorRed
									Dim fontColor As Int = Consts.ColorWhite
								End If
								this.Color = backColor
								this.EditText.TextColor = fontColor
						
							End If
						
						else If (uniquekey.trim = "20191212-ctrl-upup-0002-201912120002") Then
							FloatEditBoxChangeColor(New, "[tv]>2", this)
						else If (uniquekey.trim = "20191212-ctrl-down-0002-201912120002") Then
							FloatEditBoxChangeColor(New, "[tv]<2", this)
						End If
						
						
						'******************************************************************************
						'	CONTROLO DE EVENTOS E ENTRADA DE DADOS POR PARAMTERS
						'******************************************************************************
						Dim RSub1 As ResumableSub = InputControlCheck(this, pan, New, RequestInfo)
						wait for (RSub1) Complete (RetEnd As Boolean)

						'******************************************************************************
						'	CONTROLO DE EVENTOS
						'******************************************************************************
						If (NONCLICK = 0) Then
							Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
									$"select distinct paramters 
									from dta_tasks_items_adds where 1=1
									And task_tagcode='${task_tagcode.trim}'
									And item_tagcode='${item_tagcode.trim}'
									And unique_key='${uniquekey.trim}'"$, "paramters")	

							Dim sSQL As String = $"${DBStructures.EVC_SQL_GET_TESK_ITEM_VALUE_EVENTS}
								And task_tagcode='${task_tagcode.trim}'
								And item_tagcode='${item_tagcode.trim}'
								And unique_key='${uniquekey.trim}'
								And tagcode='${tagcode.trim}'
								Order by position"$  
							Dim Eventos As Cursor = Starter.LocalSQLEVC.ExecQuery(sSQL)
							If Eventos.RowCount >= 1 Then
								For n=0 To Eventos.RowCount-1
									Eventos.Position = n
				
									Dim evt  As CLAIEvent = DBStructures.EventRecord2CLAIEvent(Eventos)

									If (evt.type_item = 9) Then
										ControlUpdateRequestField(pan.Tag, evt.value, New)
									Else
										If (Utils.Int2Bool(evt.is_status)) Then
											If (Utils.Int2Bool(evt.have_condition) And Utils.Int2Bool(evt.have_status)) Then
												ForceTerminateChecklistAndCreate(evt.value)
											Else
												ForceTerminateChecklist(evt.value)
											End If
										else if (Utils.Int2Bool(evt.is_foto)) Then
											ForceTakePicture(pan.Tag)
										else if (Utils.Int2Bool(evt.is_more)) Then
											ForceAddMore(pan.Tag)
										else if (Utils.Int2Bool(evt.is_action)) Then
											'ForceAddAction(pan.Tag)
											If Utils.NNE(evt.value) Then
												ForceAddActionTPA(pan.Tag, evt.value, "", 0)
											Else
												ForceAddAction(pan.Tag)
											End If
										else if (Utils.Int2Bool(evt.is_jump)) Then
											ForceAddJump(evt.value)
										else if ((Utils.Int2Bool(evt.is_alert)) Or (Utils.Int2Bool(evt.is_email))) Then
										else if ((Utils.Int2Bool(evt.request_signature)) Or ((evt.event_tagcode = "EVENTTASK_SIGNATURE") And (evt.type_item = 4))) Then
											ForceAddSignature(pan.Tag)
										else if (Utils.Int2Bool(evt.have_formula) And (evt.type_item = 2)) Then
											Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
												item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
											Wait For(res) Complete (retAPI As ExternalDocsInfo)
											If(retAPI.status = 1) Then
												Log($"Missing File downloaded"$)
											End If
										else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
											Dim bullet_master As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
											Dim bullet_child As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
											SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, False)
										else if ((evt.event_tagcode = "EVENTTASK_MANDATORYCHAPTERDOWN") And (evt.type_item = 7)) Then
											Dim bullet_master As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_master from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_master"), "0")
											Dim bullet_child As Int = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnIntEVC($"select bullet_child from dta_tasks_items where 1=1
												And task_tagcode='${task_tagcode.trim}'
												And item_tagcode='${item_tagcode.trim}'
												And unique_key='${uniquekey.trim}'"$, "bullet_child"), "0")
											SetMandatoryStateAfterItemChapter(item_tagcode.trim, bullet_master, bullet_child, True)
										else if ((evt.event_tagcode = "EVENTTASK_NOMANDATORYALLDOWN") And (evt.type_item = 7)) Then
											SetMandatoryStateAfterItem(item_tagcode.trim, False)
										else if ((evt.event_tagcode = "EVENTTASK_MANDATORYALLDOWN") And (evt.type_item = 7)) Then
											SetMandatoryStateAfterItem(item_tagcode.trim, True)
										else if ((evt.event_tagcode = "EVENTTASK_INTEGRATION") And (evt.type_item = 8)) Then
											Dim res As ResumableSub = ForceExternalRequest2(request_tagcode, task_tagcode, _
												item_tagcode, uniquekey, repeatcounter, repeatitemcounter, evt.formula, QuestParams)
											Wait For(res) Complete (retAPI As ExternalDocsInfo)
											If(retAPI.status = 1) Then
												Log($"Missing File downloaded"$)
											End If
										else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTER") And (evt.type_item = 30)) Then
'											Dim ItemTagCode As String = item_tagcode.Trim
'											Dim valorVerificar As String = ""
'											If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
'												ItemTagCode = evt.value.Trim
'											End If
'											Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
'											Wait For(res) Complete (retval As Int)
'											valorVerificar = retval
'			
'											Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
'												repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
'											Wait For(res1) Complete (retbool As Boolean)
											Dim ContinuarCheck As Boolean = True
											If (Utils.NNE(ThisItemValue) And Utils.isNumeric(ThisItemValue) And Utils.Int2Bool(evt.have_status)) Then
												ContinuarCheck = False ' JÁ TEM VALOR
											End If
			
											If (ContinuarCheck) Then
												Dim ItemTagCode As String = item_tagcode.Trim
												Dim valorVerificar As String = ""
												If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
													ItemTagCode = evt.value.Trim
												End If
												Dim res As ResumableSub = CLAIGetSetExternalCounter(task_tagcode, ItemTagCode, ThisItemValue, evt)
												Wait For(res) Complete (retval As Int)
												valorVerificar = retval
				
												ThisItemValue = valorVerificar
			
												Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, ItemTagCode, uniquekey, PressedAnswerTagCode, _
													repeatcounter, repeatitemcounter, repeatitemcounter, ThisItemValue)
												Wait For(res1) Complete (retbool As Boolean)
											End If
			
'											If (Utils.NNE(ThisItemValue)) Then
'												If (this Is B4XStateButton) And (evt.have_condition=9) Then
'													Dim b4xsb_this As B4XStateButton = this
'													b4xsb_this.Text = ThisItemValue
'												End If
'											End If
										else if ((evt.event_tagcode = "EVENTTASK_GETSETCLAICOUNTEROTHER") And (evt.type_item = 31)) Then
											'*******************************************************************************************************
											' NOTE: A MESMA FUNCIONALIDADE SÓ QUE PERMITE INDICAR OUTRO ITEM_TAGCODE QUE VAI RECEBER O RESULTADO
											'*******************************************************************************************************
											Dim ItemTagCode As String = item_tagcode.Trim
											Dim OtherValue As String = ""
											Dim valorVerificar As String = ""
											If (Utils.NNE(evt.value) And Not(evt.value.Trim = ItemTagCode)) Then
												ItemTagCode = evt.value.Trim
											End If
											If (Utils.NNE(evt.formula)) Then
												OtherValue = evt.formula.Trim
											End If
											Dim res As ResumableSub = CLAIGetSetExternalCounterOther(task_tagcode, ItemTagCode, ThisItemValue, OtherValue, evt)
											Wait For(res) Complete (retval As Int)
											valorVerificar = retval
			
											Dim res1 As ResumableSub = CLAIItemUpdate(request_tagcode, task_tagcode, OtherValue, uniquekey, PressedAnswerTagCode, _
												repeatcounter, repeatitemcounter, repeatitemcounter, valorVerificar)
											Wait For(res1) Complete (retbool As Boolean)
			
										End If
									End If
				
								Next
							End If
						End If
						
					
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
					End Try
				End If

			End If

		End If
	End If
	NONCLICK = 0
End Sub

Sub InputControlCheck(this As FloatLabeledEditText, pan As Panel, New As String, RequestInfo As RequestCLAItem) As ResumableSub
	'******************************************************************************
	'	CONTROLO DE EVENTOS E ENTRADA DE DADOS POR PARAMTERS
	'******************************************************************************
	Dim paramters As String = Utils.IfNullOrEmpty( DBStructures.GetScriptColumnStrEVC( _
			$"select paramters from dta_tasks_items_adds where 1=1
									and task_tagcode='${RequestInfo.Task.Trim}' 
									and item_tagcode='${RequestInfo.Item.Trim}' 
									and unique_key='${RequestInfo.UniqueKey.Trim}'"$, "paramters"), "")
							
	If Utils.NNE(paramters) Then
		Dim parser As JSONParser
		parser.Initialize(paramters)
		Dim root As Map = parser.NextObject
							
		Dim InputControl As List = root.Get("inputcontrol")
		For Each colinputcontrol As Map In InputControl
			Dim actiontype As Int = colinputcontrol.Get("actiontype")
			Dim strmaxvalue As String = colinputcontrol.Get("maxvalue")
			Dim typecontrol As Int = colinputcontrol.Get("typecontrol")
			Dim actiontagcode As String = colinputcontrol.Get("actiontagcode")
			Dim formula As String = colinputcontrol.Get("formula")
			Dim actiongroup As String = colinputcontrol.Get("actiongroup")
			Dim actiononout As Int = colinputcontrol.Get("actiononout")
			Dim strminvalue As String = colinputcontrol.Get("minvalue")
								
			Dim actionresult As Int = Utils.IfNullOrEmpty(colinputcontrol.Get("actionresult"), "0")
			Dim actionforce As Int = Utils.IfNullOrEmpty(colinputcontrol.Get("actionforce"), "0")
								
			Dim respNC As Boolean = False
			If (typecontrol >= 1) Then
				If (typecontrol=1) Then
					Dim minvalue As Double = strminvalue.Replace(",",".")
					Dim maxvalue As Double = strmaxvalue.Replace(",",".")
					Dim form1 As String = $"[tv]>=${minvalue}&&[tv]<=${maxvalue}"$
					respNC = Not(FloatEditBoxChangeColor(New, form1, this))
				else if (typecontrol=2) Then
					
					Dim resFormula As ResumableSub = ReplaceFormulaFields(RequestInfo.Request.trim, RequestInfo.Task.Trim, _
								RequestInfo.Item.Trim,  RequestInfo.RepeatCounter, RequestInfo.RepeatItemCounter, _
								RequestInfo.repeatfieldcounter, formula, New)
					Wait For(resFormula) Complete (FormulaResultRet As String)
					formula = FormulaResultRet
					
					respNC = Not(FloatEditBoxChangeColor(New, formula, this))
				End If		
									
				Try
					Dim conformity As Int = colinputcontrol.Get("conformity")
					If Utils.Int2Bool(conformity) Then
						Dim conformity_settings As Map = colinputcontrol.Get("conformity_settings")
						Dim conformity_on As Int = conformity_settings.Get("conformity_on")
						Dim nonconformity_on As Int = conformity_settings.Get("nonconformity_on")
									
						If Utils.Int2Bool(conformity_on) And respNC Then
							Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC)
						else if Utils.Int2Bool(nonconformity_on) And Not(respNC) Then
							Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC) + 1
						End If
					End If
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
					Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC) + 1
				End Try
				
				Try
					Dim active_inactive As Int = colinputcontrol.Get("active_inactive")
					Dim active_inactive_settings As List = colinputcontrol.Get("active_inactive_settings")
					For Each col_active_inactive As Map In active_inactive_settings
						Dim item_tagcode As String = col_active_inactive.Get("item_tagcode")
						Dim active_color As String = col_active_inactive.Get("active_color")
						Dim inactive_color As String = col_active_inactive.Get("inactive_color")
													
						For i =0 To ComponentList.Size -1
							Dim ClItem As ComponentRecords = ComponentList.Get(i)
							If ClItem.item_tagcode = item_tagcode Then
								Dim View2Process As B4XView = ClItem.component
								If View2Process Is Panel Then
									Dim pnlB4x As Panel = View2Process
									Dim res As ResumableSub = ChangeComponent(item_tagcode,"ENABLE","",active_inactive)
									wait for (res) Complete (Finished As Boolean)
									If active_inactive = 1 Then
										If Utils.NNE(active_color) Then
											Dim ColorACTIVE As Int = Utils.ColorString(active_color.ToUpperCase)
										Else
											Dim ColorACTIVE As Int = Colors.White
										End If
										Dim res As ResumableSub = ChangeComponent(item_tagcode, "COLOR","", ColorACTIVE)
										wait for (res) Complete (Finished As Boolean)
									else If active_inactive = 0 Then
										If Utils.NNE(inactive_color) Then
											Dim ColorINACTIVE As Int = Utils.ColorString(inactive_color.ToUpperCase)
										Else
											Dim ColorINACTIVE As Int = Colors.LightGray
										End If
										Dim res As ResumableSub = ChangeComponent(item_tagcode, "ENABLE","", ColorACTIVE)
										wait for (res) Complete (Finished As Boolean)
									End If
								End If
							End If
						Next
					Next
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
									
				Dim Req2Pass As RequestCLAItem = Types.MakeRequestCLAItem(RequestInfo.Request.Trim, _
						RequestInfo.Action.Trim, _
						RequestInfo.Task.Trim, _
						RequestInfo.Item.Trim, _
						RequestInfo.UniqueKey.Trim, _
						RequestInfo.Tagcode.Trim, _
						RequestInfo.RepeatCounter, _
						RequestInfo.RepeatItemCounter, _
						RequestInfo.repeatfieldcounter,"","","",0,0,0,"",DBStructures.DB2CLATaskItem("", ""),"")
 
				Dim RSub As ResumableSub = InputControlNextEval(pan,Req2Pass,fieldconfirm_nc, _
						RequestInfo.Title.Trim, _
						RequestInfo.Answer.Trim, _
						RequestInfo.Value.Trim, _
						actiononout,actiontype,respNC,actionresult,actiontagcode,actiongroup,actionforce)
				wait for (RSub) Complete (ReturnVal As Boolean)
									
			End If
		Next
	End If
	Return True
End Sub


Sub InputControlParameter (TypeOfSender As String, item As String, thisText As String, RequestInfo As RequestCLAItem) As ResumableSub
	
'	
'	If b4xV Is B4XStateButton Then
'		Dim BsThis As B4XStateButton = b4xV
'	else If b4xV Is Spinner Then
'		Dim SpThis As B4XStateButton = b4xV
'	End If

	If TypeOfSender.ToUpperCase = "SPINNER" Then
		Dim IsSpinnerIndex As Boolean = True
	Else
		Dim IsSpinnerIndex As Boolean = False
	End If
'******************************************************************************
'	CONTROLO DE EVENTOS E ENTRADA DE DADOS POR PARAMTERS
'******************************************************************************
Dim paramters As String = Utils.IfNullOrEmpty( DBStructures.GetScriptColumnStrEVC( _
			$"select paramters from dta_tasks_items_adds where 1=1
									and task_tagcode='${RequestInfo.Task.Trim}' 
									and item_tagcode='${RequestInfo.Item.Trim}' 
									and unique_key='${RequestInfo.UniqueKey.Trim}'"$, "paramters"), "")
							
	If Utils.NNE(paramters) Then
		Dim parser As JSONParser
		parser.Initialize(paramters)
		Dim root As Map = parser.NextObject
					
							
		Dim inputcontrol As List = root.Get("inputcontrol")
		For Each colinputcontrol As Map In inputcontrol

			Dim actiontype As Int = colinputcontrol.Get("actiontype")
			Dim strmaxvalue As String = colinputcontrol.Get("maxvalue")
			Dim typecontrol As Int = colinputcontrol.Get("typecontrol")
			Dim actiontagcode As String = colinputcontrol.Get("actiontagcode")
			Dim formula As String = colinputcontrol.Get("formula")
			Dim actiongroup As String = colinputcontrol.Get("actiongroup")
			Dim actiononout As Int = colinputcontrol.Get("actiononout")
			Dim strminvalue As String = colinputcontrol.Get("minvalue")
								
			Dim actionresult As Int = Utils.IfNullOrEmpty(colinputcontrol.Get("actionresult"), "0")
			Dim actionforce As Int = Utils.IfNullOrEmpty(colinputcontrol.Get("actionforce"), "0")
								
			Dim respNC As Boolean = False
			If (typecontrol >= 1) Then
				If (typecontrol=1) Then
					Dim minvalue As Double = strminvalue.Replace(",",".")
					Dim maxvalue As Double = strmaxvalue.Replace(",",".")
					Dim form1 As String = $"[tv]>=${minvalue}&&[tv]<=${maxvalue}"$
				else if (typecontrol=2) Then
					
					Dim resFormula As ResumableSub = ReplaceFormulaFields(RequestInfo.Request.trim, RequestInfo.Task.Trim, _
								RequestInfo.Item.Trim,  RequestInfo.RepeatCounter, RequestInfo.RepeatItemCounter, _
								RequestInfo.repeatfieldcounter, formula, thisText)
					Wait For(resFormula) Complete (FormulaResultRep As String)
					
					formula = FormulaResultRep
					
					If IsSpinnerIndex Then
						formula = formula.Replace(" = ",";=;")
						formula = formula.Replace(" < ",";<;")
						formula = formula.Replace(" <= ",";<=;")
						formula = formula.Replace(" > ",";>;")
						formula = formula.Replace(" >= ",";>=;")
						
						formula = $"__FNCEVALTRUE(${formula})"$
					End If
										
					Dim fncFormula As ResumableSub = FNCFormulas(RequestInfo.Request.trim, RequestInfo.Task.Trim, _
								RequestInfo.Item.Trim,  RequestInfo.RepeatCounter, RequestInfo.RepeatItemCounter, _
								RequestInfo.repeatfieldcounter, formula, thisText)
					Wait For(fncFormula) Complete (FormulaResultFnc As String)
				End If
									
				Try
					Dim conformity As Int = colinputcontrol.Get("conformity")
					If Utils.Int2Bool(conformity) Then
						Dim conformity_settings As Map = colinputcontrol.Get("conformity_settings")
						Dim conformity_on As Int = conformity_settings.Get("conformity_on")
						Dim nonconformity_on As Int = conformity_settings.Get("nonconformity_on")
									
						If Utils.Int2Bool(conformity_on) And respNC Then
							Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC)
						else if Utils.Int2Bool(nonconformity_on) And Not(respNC) Then
							Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC) + 1
						End If
					End If
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
					Dim fieldconfirm_nc As Int = Utils.Bool2Int(respNC) + 1
				End Try
				
				Try
					Dim active_inactive As Int = colinputcontrol.Get("active_inactive")
					If Utils.Int2Bool(active_inactive) Then
						Dim active_inactive_settings As List = colinputcontrol.Get("active_inactive_settings")
						For Each col_active_inactive As Map In active_inactive_settings
							Dim item_tagcode As String = col_active_inactive.Get("item_tagcode")
							Dim active_color As String = col_active_inactive.Get("active_color")
							Dim inactive_color As String = col_active_inactive.Get("inactive_color")
													
							For i =0 To ComponentList.Size -1
								Dim ClItem As ComponentRecords = ComponentList.Get(i)
								If ClItem.item_tagcode = item_tagcode Then
									Dim View2Process As B4XView = ClItem.component
									If View2Process Is Panel Then
										Dim pnlB4x As Panel = View2Process
										Dim res As ResumableSub = ChangeComponent(item_tagcode,"ENABLE","",active_inactive)
										wait for (res) Complete (Finished As Boolean)
										If active_inactive = 1 Then
											If Utils.NNE(active_color) Then
												Dim ColorACTIVE As Int = Utils.ColorString(active_color.ToUpperCase)
											Else
												Dim ColorACTIVE As Int = Colors.White
											End If
											Dim res As ResumableSub = ChangeComponent(item_tagcode, "COLOR","", ColorACTIVE)
											wait for (res) Complete (Finished As Boolean)
										else If active_inactive = 0 Then
											If Utils.NNE(inactive_color) Then
												Dim ColorINACTIVE As Int = Utils.ColorString(inactive_color.ToUpperCase)
											Else
												Dim ColorINACTIVE As Int = Colors.LightGray
											End If
											Dim res As ResumableSub = ChangeComponent(item_tagcode, "ENABLE","", ColorACTIVE)
											wait for (res) Complete (Finished As Boolean)
										End If
									End If
								End If
							Next
						Next
					End If

				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
	
				Try
					Dim event As Int = colinputcontrol.Get("event")
					
					If Utils.Int2Bool(event) Then
						Dim event_settings As List = colinputcontrol.Get("event_settings")
						For Each colevent_settings As Map In event_settings
							Dim is_email As Int = colevent_settings.Get("is_email")
							Dim have_condition As Int = colevent_settings.Get("have_condition")
							Dim event_tagcode As String = colevent_settings.Get("event_tagcode")
							Dim type_item As Int = colevent_settings.Get("type_item")
							Dim is_alert As Int = colevent_settings.Get("is_alert")
							Dim request_signature As Int = colevent_settings.Get("request_signature")
							Dim when_to_execute As Int = colevent_settings.Get("when_to_execute")
							Dim is_foto As Int = colevent_settings.Get("is_foto")
							Dim is_status As Int = colevent_settings.Get("is_status")
							Dim is_more As Int = colevent_settings.Get("is_more")
							Dim is_action As Int = colevent_settings.Get("is_action")
							Dim have_formula As Int = colevent_settings.Get("have_formula")
							Dim have_status As Int = colevent_settings.Get("have_status")
							Dim formula As String = colevent_settings.Get("formula")
							Dim is_jump As Int = colevent_settings.Get("is_jump")
							Dim value As String = colevent_settings.Get("value")
						
							
							
							
							If when_to_execute = 2 Then when_to_execute = 0
							'CORRE OS EVENTOS SE OS HOUVER
							
								If when_to_execute = FormulaResultFnc Then
									If (event_tagcode = "EVENTTASK_ACTIVE_INACTIVE_ITEM") And type_item = 25 Then
										Dim evt As CLAIEvent = Types.MakeCLAIEvent(event_tagcode, 0, type_item, 1, value, formula, _
													have_formula, have_condition,have_status,is_jump, _
													is_status,is_alert,is_email,is_more,is_foto,is_action, _
													0, "", "", "", 0, "", "", 0, 0, request_signature)
										
										Dim res As ResumableSub = ActiveInactiveOnlyByEventVals(evt,True,RequestInfo.RepeatItemCounter)
										Wait For(res) Complete (Ended As Boolean)
									End If
								End If
							
							
						
						Next
					End If
					
					
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
			End If
		Next
	End If
	
	Return True
	
End Sub

Sub SetConformAllDown(currView As B4XView, item As String, inLocal As Boolean) As ResumableSub
	Dim FoundItem As Boolean = False
	Dim ItemCount As Int = 0
	Dim CurrGroup, CurrItem As Int = 0
	
	Try
		If currView Is B4XStateButton Then
			Dim Btn As B4XStateButton = currView
			Dim btnText As String = Btn.Text
		End If
		
	Catch
		Dim btnText As String = ""
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	
	Log($"Botão item_tagcode: ${item}, text: ${btnText}"$)
	For n = 0 To B4XSButtonsList.Size-1
		Dim cpm As B4XSRecords = B4XSButtonsList.Get(n)
		Log(cpm.item_tagcode)
		Log(cpm.component.Text)
		If cpm.item_tagcode = item Then
			FoundItem = True
			CurrGroup = cpm.idgroup
			CurrItem = cpm.iditem
'			Log(CurrGroup)
		End If
		
		Log($"N:${n}  G:${CurrGroup}  R:${CurrItem} L:${inLocal} GI:${cpm.idgroup} R:${cpm.iditem}"$)
		
		If ((FoundItem = True) And (((CurrGroup = cpm.idgroup) And Not(cpm.iditem = CurrItem)) Or _
			(Not(CurrGroup = cpm.idgroup) And Not(inLocal)))) Then
			
			Log($"Reference: ${cpm.component.Conformity} "$)
'			If (cpm.component.Reference >= 1) Then
'				If (cpm.component.Reference = 1) Then
'					cpm.component.MakeClick
'				End If
''				ItemCount = ItemCount + 1
''				Log($"N:${n}  G:${CurrGroup}  R:${ItemCount}"$)
'			End If
			
			If (cpm.component.Conformity >= 1) Then
				If (cpm.component.Conformity = 1) Then
					cpm.component.MakeClick
				End If
'				ItemCount = ItemCount + 1
'				Log($"N:${n}  G:${CurrGroup}  R:${ItemCount}"$)
			End If
		End If
	Next
	
'	ESCREVE NA BD A ALTERACAO DE TODOS OS BOTOES MESMO QUE NAO ESTEJAM AINDA CARREGADOS
	Dim WB As ResumableSub = WriteSetButtonsStateAll(CurrentCLA.Request,CurrentCLA.Task,item,CurrentCLA.RepeatCounter,0,0,btnText,inLocal)
	Wait For (WB) Complete (Finished As Boolean)
	
'	ToastMessageShow( $"Registos identificados: ${ItemCount}"$, False )
	Return True
End Sub

Sub SetNoConformAllDown(currView As B4XView, item As String, inLocal As Boolean) As ResumableSub
	Dim FoundItem As Boolean = False
	Dim ItemCount As Int = 0
	Dim CurrGroup, CurrItem As Int = 0
	
	Try
		If currView Is B4XStateButton Then
			Dim Btn As B4XStateButton = currView
			Dim btnText As String = Btn.Text
		End If
		
	Catch
		Dim btnText As String = ""
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	
	For n = 0 To B4XSButtonsList.Size-1
		Dim cpm As B4XSRecords = B4XSButtonsList.Get(n)
		Log(cpm.item_tagcode)
		Log(cpm.component.Text)
		If cpm.item_tagcode = item Then
			FoundItem = True
			CurrGroup = cpm.idgroup
			CurrItem = cpm.iditem
'			Log(CurrGroup)
		End If
		If ((FoundItem = True) And (((CurrGroup = cpm.idgroup) And Not(cpm.iditem = CurrItem)) Or _
			(Not(CurrGroup = cpm.idgroup) And Not(inLocal)))) Then
			
'			If  (cpm.component.Reference >= 1) Then
'				If (cpm.component.Reference = 2) Then
'					cpm.component.MakeClick
'					
'				End If
'			End If
			
			If  (cpm.component.Conformity >= 1) Then
				If (cpm.component.Conformity = 2) Then
					cpm.component.MakeClick
					
				End If
			End If
		End If
	Next
	
'	ESCREVE NA BD A ALTERACAO DE TODOS OS BOTOES MESMO QUE NAO ESTEJAM AINDA CARREGADOS
	Dim WB As ResumableSub = WriteSetButtonsStateAll(CurrentCLA.Request,CurrentCLA.Task,item,CurrentCLA.RepeatCounter,0,0,btnText,inLocal)
	Wait For (WB) Complete (Finished As Boolean)
	
'	ToastMessageShow( $"Registos identificados: ${ItemCount}"$, False )
	Return True
End Sub

Sub SetNoAplicableAllDown(currView As B4XView, item As String, inLocal As Boolean) As ResumableSub
	Dim FoundItem As Boolean = False
	Dim ItemCount As Int = 0
	Dim CurrGroup, CurrItem As Int = 0
	
	Try
		If currView Is B4XStateButton Then
			Dim Btn As B4XStateButton = currView
			Dim btnText As String = Btn.Text
		End If
		
	Catch
		Dim btnText As String = ""
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	
	For n = 0 To B4XSButtonsList.Size-1
		Dim cpm As B4XSRecords = B4XSButtonsList.Get(n)
		Log(cpm.item_tagcode)
		Log(cpm.component.Text)
		If cpm.item_tagcode = item Then
			FoundItem = True
			CurrGroup = cpm.idgroup
			CurrItem = cpm.iditem
'			Log(CurrGroup)
		End If
		If ((FoundItem = True) And (((CurrGroup = cpm.idgroup) And Not(cpm.iditem = CurrItem)) Or _
			(Not(CurrGroup = cpm.idgroup) And Not(inLocal)))) Then
			
'			If (cpm.component.Reference >= 1) Then
'				If (cpm.component.Reference = 3) Then
'					cpm.component.MakeClick
'				End If
'			End If
			
			If  (cpm.component.Conformity >= 1) Then
				If (cpm.component.Conformity = 3) Then
					cpm.component.MakeClick
					
				End If
			End If
		End If
	Next
	
'	ESCREVE NA BD A ALTERACAO DE TODOS OS BOTOES MESMO QUE NAO ESTEJAM AINDA CARREGADOS
	Dim WB As ResumableSub = WriteSetButtonsStateAll(CurrentCLA.Request,CurrentCLA.Task,item,CurrentCLA.RepeatCounter,0,0,btnText,inLocal)
	Wait For (WB) Complete (Finished As Boolean)
	
'	ToastMessageShow( $"Registos identificados: ${ItemCount}"$, False )
	Return True
End Sub

Sub ReturnFromNumberBoxEDIT(this As EditText)

End Sub

Sub CLAButtonOptions_LongClick
	
	If ShareCode.APP_DOMAIN.ToLowerCase <> "demo" Then Return
	
	Dim continua As Boolean = False
	Dim TestType As Int = 0 ' 0 = Codigo Barras / 1 = TestComponentList
	
	Dim btn As Button = Sender
	Dim btnTag As String = btn.Tag
	If btnTag.Contains("data_type=2") Then continua = True
	' LER CODIGO DE BARRAS
	If continua Then
		If TestType = 0 Then
			Dim p As Panel = btn.Parent
			Dim txt2set As FloatLabeledEditText = p.GetView(2)
			ShareCode.SingleScan = True
			CallSubDelayed3(BarcodeScanner,"StartScanning", "CheckList3" ,txt2set)
		Else if TestType = 1 Then
			ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
			Sleep(150)
			Dim CC As ResumableSub = ChangeComponent("PRVISRV2002","Color","",0xFFD13339)
			Wait For(CC) Complete (Ended As Boolean)
			ProgressDialogHide
		Else
			' Nao faz nada para ja
		End If
		
	End If
	
End Sub

Sub returnedFromScanner(txt2set As FloatLabeledEditText)
		
	If ShareCode.SingleScan Then
		Try
			Dim val2set As String = ShareCode.ScanList.Get(0)
		Catch
			Dim val2set As String = ""
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
		txt2set.Text = val2set
	Else
		txt2set.Text = val2set
	End If
End Sub

Sub returnedFromScanner2
'	Dim this As B4XView = clListView.GetPanel(0)
	Dim rs As ResumableSub = UpdateBarCodesInchecklist(ShareCode.ScanList)
	wait for (rs) complete (Updated As Boolean)
	
End Sub

Sub TableValueCheck(CLA As RequestCLA, task_tagcode As String, item_tagcode As String, uniquekey As String) As ResumableSub
	
	Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
										$"select distinct paramters 
										from dta_tasks_items_adds where 1=1
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${item_tagcode.trim}'
										And unique_key='${uniquekey.trim}'"$, "paramters")
	If (QuestParams.Size > 0) Then
		Try
			Dim data_verification As Int = QuestParams.Get("data_verification")
		Catch
			Dim data_verification As Int = 0
		End Try
	
		Dim Columns As String = ""
		If (Utils.Int2Bool(data_verification)) Then
			Dim dverif_settings As Map = QuestParams.Get("dverif_settings")
			Dim sqlscript As String = dverif_settings.Get("sqlscript")
			Dim additional_condition As String = dverif_settings.Get("additional_condition")
			Dim item_tagcode As String = ""
			Dim verif_fields As List = dverif_settings.Get("verif_fields")
			For Each colverif_fields As Map In verif_fields
				Dim item_tagcode As String = colverif_fields.Get("item_tagcode")
				Dim field_name As String = colverif_fields.Get("field_name")
				Dim valuetitle As Int = colverif_fields.Get("valuetitle")
				
				Dim sqlField As String = "execute_value"
				If (valuetitle=1) Then
					Dim sqlField As String = "execute_value_title"
				else If (valuetitle=2) Then
					Dim sqlField As String = "execute_format_title"
				End If
			
				Dim thisFieldValue As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(${sqlField}, '') as valor
						from dta_requests_values where execute_status= 1 and request_tagcode='${CLA.Request}' and task_tagcode = '${CLA.Task}'
						and item_tagcode='${item_tagcode}' and repeatcounter = ${CLA.RepeatCounter}"$, "valor")
				If Utils.NNE(thisFieldValue) Then
					Columns = $"${Columns} and ${field_name}='${thisFieldValue}'"$
				End If
			Next
			Dim type_return As Int = dverif_settings.Get("type_return")
			Try
				Dim no_return_change As Int = dverif_settings.Get("no_return_change")
				Dim no_return_change_value As String = dverif_settings.Get("no_return_change_value")
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				Dim no_return_change As Int = 1
				Dim no_return_change_value As String = "NA"
			End Try
			Dim return_fields As List = dverif_settings.Get("return_fields")
			Dim newReturnList As List : newReturnList.initialize
			
			Try
				Dim return_value_field As String = dverif_settings.Get("return_value_field")
			Catch
				Dim return_value_field As String = ""
			End Try

			Dim ract_settings As Map : ract_settings.Initialize
			Dim nc_check_type As Int = 0
			Dim create_as_onfalse As Int = 0
			Dim nc_check As Int = 0
			Dim actiontype_tagcode_false As String = ""
			Dim actiontype_tagcode_true As String = ""
			Dim create_as_ontrue As Int = 0
			Dim type_ract As Int = 0
			
			Dim ract_formula As String = ""
			Dim event As Int = 0
			Dim event_settings As List : event_settings.Initialize
			
			
			Dim return_actions As Int = dverif_settings.Get("return_actions")
			If (Utils.Int2Bool(return_actions)) Then
				Dim ract_settings As Map = dverif_settings.Get("ract_settings")
				Dim nc_check_type As Int = ract_settings.Get("nc_check_type")
				Dim create_as_onfalse As Int = ract_settings.Get("create_as_onfalse")
				Dim nc_check As Int = ract_settings.Get("nc_check")
				Dim actiontype_tagcode_false As String = ract_settings.Get("actiontype_tagcode_false")
				Dim actiontype_tagcode_true As String = ract_settings.Get("actiontype_tagcode_true")
				Dim create_as_ontrue As Int = ract_settings.Get("create_as_ontrue")
				Dim type_ract As Int = ract_settings.Get("type_ract")
				
				Try
					Dim ract_formula As String = ract_settings.Get("ract_formula")
				Catch
					Dim ract_formula As String = ""
				End Try
				
				Try
					Dim event As Int = ract_settings.Get("event")
				Catch
					Dim event As Int = 0
				End Try
				
				Try
					Dim event_settings As List = ract_settings.Get("event_settings")
				Catch
					Dim event_settings As List : event_settings.Initialize
				End Try
				
				
			End If
			
			Dim MasterReturn As String = ""
			
			additional_condition = $"${additional_condition} limit 1"$
			
			'Sub MakeReturnFieldData(item_tagcode As String, field_value As String) As ReturnFieldData
			Dim RunScript As String = $"${sqlscript} ${Columns} ${additional_condition}"$
			
			RunScript = RunScript.Replace("«", "'")
			RunScript = RunScript.Replace($":REQUEST"$,CLA.Request.Trim)
			RunScript = RunScript.Replace($":TASK"$,CLA.Task.Trim)
			RunScript = RunScript.Replace($":ITEM"$,item_tagcode.Trim)
			RunScript = RunScript.Replace($":CLIENTDB."$, "")
			
			Log(RunScript)
			Dim loopCounter As Int = 0
			Dim RecordData As ResultSet = Starter.LocalSQLEVC.ExecQuery(RunScript)
			Do While RecordData.NextRow
				loopCounter = loopCounter +1
				For nt=0 To RecordData.ColumnCount-1
					If (RecordData.GetColumnName(nt) = return_value_field) Then
						MasterReturn = RecordData.GetString(return_value_field)
					End If
				Next
				
				For Each colreturn_fields As Map In return_fields
					Dim item_tagcode As String = colreturn_fields.Get("item_tagcode")
					Dim field_name As String = colreturn_fields.Get("field_name")
					Dim field_value As String = RecordData.GetString(field_name)
					newReturnList.Add(Types.MakeReturnFieldData(item_tagcode, field_value))
				Next
				Exit
'				If (type_return = 1) Then
'					Exit
'				End If
			Loop
			
			If ((loopCounter = 0) And (no_return_change = 1)) Then
				For Each colreturn_fields As Map In return_fields
					Dim item_tagcode As String = colreturn_fields.Get("item_tagcode")
					Dim field_name As String = colreturn_fields.Get("field_name")
					Dim field_value As String = no_return_change_value
					newReturnList.Add(Types.MakeReturnFieldData(item_tagcode, field_value))
				Next
			End If
			
			If (type_ract=1) And Utils.NNE(ract_formula) Then
				Dim currValue As String = DBStructures.GetScriptColumnStrEVC($"select distinct ifnull(execute_value, '') as valor
						from dta_requests_values where 1=1 and request_tagcode='${CLA.Request}' and task_tagcode = '${CLA.Task}'
						and item_tagcode='${item_tagcode}' and repeatcounter = ${CLA.RepeatCounter}"$, "valor")
'				If Utils.NNE(currValue) Then
'					ract_formula = ract_formula.ToUpperCase.Replace("[TV]", currValue)
'				End If
				ract_formula = ract_formula.ToUpperCase.Replace("[__RETURN__]", MasterReturn)
				
				Dim resFormula As ResumableSub = ReplaceFormulaFields(CLA.Request, CLA.Task, item_tagcode, CLA.RepeatCounter, 0, 0, ract_formula, currValue)
				Wait For(resFormula) Complete (FormulaResultRet As String)
				If Utils.NNE(FormulaResultRet) Then
					Dim FormulaResult As Boolean = Utils.Test4TrueOnlyValues(FormulaResultRet)
					If (Utils.Int2Bool(event)) Then
						If (event_settings.IsInitialized) Then
							For Each event_fields As Map In event_settings
								Dim event_when As Int = event_fields.Get("event_when")
								' NOTE: event_when = 0-NADA, 1-TRUE, 2-FALSE
								If (event_when >=1) Then
									If event_when = 2 Then event_when = 0
									If Utils.Int2Bool(event_when) = FormulaResult Then
										Dim when_to_execute As String = event_fields.Get("when_to_execute")
										Dim event_tagcode As String = event_fields.Get("event_tagcode")
										Dim evttype_item As Int = event_fields.Get("type_item")
										Dim evtvalue As String = event_fields.Get("value")
										Dim evtformula As String = event_fields.Get("formula")
										Dim evthave_formula As Int = event_fields.Get("have_formula")
										Dim evthave_condition As Int = event_fields.Get("have_condition")
										Dim evthave_status As Int = event_fields.Get("have_status")
									
										Dim is_jump As Int = event_fields.Get("is_jump")
										Dim is_status As Int = event_fields.Get("is_status")
										Dim is_alert As Int = event_fields.Get("is_alert")
										Dim is_email As Int = event_fields.Get("is_email")
										Dim is_more As Int = event_fields.Get("is_more")
										Dim is_foto As Int = event_fields.Get("is_foto")
										Dim is_action As Int = event_fields.Get("is_action")
										Dim request_signature As Int = event_fields.Get("request_signature")
									
										If (event_tagcode = "EVENTTASK_ACTIVE_INACTIVE_ITEM") Then
											Dim evt As CLAIEvent = Types.MakeCLAIEvent(event_tagcode, 0, evttype_item, 1, evtvalue, evtformula, _
													evthave_formula, evthave_condition,evthave_status,is_jump, _
													is_status,is_alert,is_email,is_more,is_foto,is_action, _
													0, "", "", "", 0, "", "", 0, 0, _
													request_signature)
										
											Dim res As ResumableSub = ActiveInactiveOnlyByEventVals(evt,False,0)
											Wait For(res) Complete (Ended As Boolean)
										End If
									End If
									
								End If
							Next
						End If
					End If
				End If
				
			End If
			

			If (newReturnList.Size >= 1) And (type_ract=0) Then
				Dim ACLAFieldsValues As List : ACLAFieldsValues.initialize
				
				Dim sACLADatetime As String = Utils.GetCurrDatetime
				Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
				Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
				
				For n=0 To newReturnList.Size-1 
					Dim v As ReturnFieldData = newReturnList.Get(n)
					Dim item_tagcode As String = v.item_tagcode
					Dim field_value As String = v.field_value
					Dim SqlString As String = $"update dta_requests_values 
									set execute_value = '${field_value.Trim}',
									execute_status=1
									where 1=1
									and request_tagcode='${CLA.Request.trim}'
									and task_tagcode = '${CLA.Action.Trim}'
									and item_tagcode = '${item_tagcode.trim}'
									and repeatcounter=0"$
					DBStructures.InsertIntoScript(SqlString)
					
					'UPDATED_INNER_FIELDS
					Try
						For nz = 0 To UPDATED_EDIT_FIELDS.Size-1
							Dim rrr As FieldReference = UPDATED_EDIT_FIELDS.Get(nz)
							If (rrr.tagname=item_tagcode.Trim) Then
								Dim thisLabel As B4XView = rrr.tagobject
								
								If thisLabel Is FloatLabeledEditText Then
									Dim f As FloatLabeledEditText = thisLabel
									f.Text = field_value.Trim
								Else If thisLabel Is EditText Then
									Dim e As EditText = thisLabel
									e.Text = field_value.Trim
								Else If thisLabel Is Label Then
									Dim l As Label = thisLabel
									l.Text = field_value.Trim
								End If
								
								'thisLabel.Text = field_value.Trim
								Dim This_uniquekey As String = ""
								Dim ThisTag As String = thisLabel.Tag
								If Utils.NNE(ThisTag) Then
									Dim ColumnsTemp As List = Regex.Split("\|", ThisTag)
									If (ColumnsTemp.Size >= 1) Then
										Dim doContinua As Boolean = True
										Try
											Dim This_uniquekey As String = ColumnsTemp.Get(4)
										Catch
											Log(LastException)
											doContinua = False
										End Try
									End If
								End If
								
								Dim res2 As ResumableSub = UpdateServer(CLA, item_tagcode, This_uniquekey, field_value.Trim)
								Wait For(res2) Complete (RetStatus As Boolean)
								Sleep(250)
							End If
						Next
					Catch
						Log(LastException)
						Utils.WriteErrors2Log(LastException)
					End Try
												
					Dim thisMAP As Map : thisMAP.Initialize
					thisMAP.Put(item_tagcode, field_value)
					ACLAFieldsValues.Add(thisMAP)
				Next
				
				
			End If
			
			
			Dim message_on_true As String = dverif_settings.Get("message_on_true")
			Dim message_on_false As String = dverif_settings.Get("message_on_false")
		End If
	End If
	Return True
End Sub

Sub UpdateServer(CLA As RequestCLA, item_tagcode As String, uniquekey As String, ACLAValue As String) As ResumableSub
	Dim RetStatus As Boolean = True
	Dim paramsRR As Map
	paramsRR.Initialize
	paramsRR.Put("_token", ShareCode.APP_TOKEN)
	paramsRR.Put("ACLARequest", CLA.Request.Trim)
	paramsRR.Put("ACLAAction", CLA.Action.Trim)
	paramsRR.Put("ACLATask", CLA.Action.Trim)
	paramsRR.Put("ACLAItem", item_tagcode)
	paramsRR.Put("ACLAUniqueKey", uniquekey)
	paramsRR.Put("ACLAReqCounter", 0)
	paramsRR.Put("ACLSessUser", ShareCode.SESS_OPER_User)
	paramsRR.Put("ACLAValue", ACLAValue)
			
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/table/control/update"$
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then
			Dim GODR As ResumableSub = GetOfflineDataRec(1, CLA.Request.Trim,CLA.Action.trim,item_tagcode.Trim)
			Wait For (GODR) Complete (HasResults As Boolean)
			If HasResults Then
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, CLA.Request.Trim,CLA.Action.trim,item_tagcode.Trim)
				Utils.save2update(Url, Utils.MapToJson(paramsRR), 0,WorkerND)
			Else
				Utils.CallApi(0, paramsRR, Me, Url, "", CLA.Request.Trim)
			End If
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, CLA.Request.Trim,CLA.Action.trim,item_tagcode.Trim)
			Utils.save2update(Url, Utils.MapToJson(paramsRR), 0,WorkerND)
		End If
		Sleep(250)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, CLA.Request.Trim,CLA.Action.trim,item_tagcode.Trim)
		Utils.save2update(Url, Utils.MapToJson(paramsRR), 0,WorkerND)
	End If
	Return RetStatus
End Sub

' *************************************************************
' TIP: VIEW: CRIAÇÃO DE VIEW TIPO 30 - RULER COM BOTAO NA
' *************************************************************
Sub CreateLineItemRulerNAOption(taggedID As Int, subidx As Int, chapter As B4XView, Title As String, Posis As Int, _
	ItemTagcode As String, UniqueKey As String, outRecord As Cursor, _
	ExtraInfo As String, repeatitemcounter As Int, innerPanel As Int) As Int
	
	SeekBarHasNA = True
	CurrentButtonNA = False
	
	If (CurrentOrientation=0) Then
		Dim height As Int = outRecord.GetInt("height_land") + DeviceHeight2
	Else
		Dim height As Int = outRecord.GetInt("height_port") + DeviceHeight2
		
		Dim rowitems As Int = outRecord.GetInt("rowitems")
		
		If(ShareCode.ISPHONE And rowitems > 1) Then
			height = height + (rowitems*60dip)
		Else If	(ShareCode.ISPHONE And rowitems = 1)Then
			height = height + 60dip
		End If
	End If
	'Dim height As Int = 75dip
	Dim LayOutStr As String = "CLA_ITEM_RulerNA_Device"
	If (ShareCode.ISPHONE) Then
		LayOutStr = "CLA_ITEM_RulerNA_Device_SP"
'		Dim height As Int = 100dip
	End If
	
	Dim p As Panel
	p.Initialize("CLALineClick")
	Activity.AddView(p, 0, 0, 100%x, height) '115dip)
	p.LoadLayout(LayOutStr)
	
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int = 0
	End Try
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	IconExtraInfo.Text = Chr(0xF05A) ' Icon do INFO dentro do Circulo
	IconExtraInfo.TextSize = 18
		
	If Utils.NNE(ExtraInfo) Then
		Dim Ext As ExtraInfo = Types.MakeExtraInfo(Title, ExtraInfo,ItemTagcode, repeatcounter, repeatitemcounter, repeatfieldcounter)
		IconExtraInfo.tag = Ext
		IconExtraInfo.textcolor = Colors.Blue
	Else
		IconExtraInfo.tag = ""
		IconExtraInfo.textcolor = Colors.LightGray
	End If
	
	p.RemoveView
	Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "",0,0,0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
'	p.Tag = ItemTagcode
	
	Dim bullet_master As Int = outRecord.GetInt("bullet_master")
	Dim bullet_child As Int = outRecord.GetInt("bullet_child")
	Dim typified_answers As Int = outRecord.GetInt("typified_answers")
	Dim include_numerators As Int = outRecord.GetInt("include_numerators")
	Try
		Dim repeatfieldcounter As Int = outRecord.GetInt("repeatfieldcounter")
	Catch
		Dim repeatfieldcounter As Int =0
	End Try
	If (include_numerators = 1) Then
		Title = $"${bullet_master}.${bullet_child}. ${Title}"$
	Else
		Title = $"${taggedID}.${subidx}. ${Title}"$
	End If
	
	CLAItemTitle.Text = $"${Title}"$
	CLAItemTitle.Tag = typified_answers
'	If Utils.NNE(ExtraInfo) Then CLAItemTitleInfo.Text = ExtraInfo
	Dim Mandatory As Int = outRecord.GetInt("mandatory")
	Dim Critical As Int = outRecord.GetInt("critical")
	Dim objValue As String = getObjectValue(CurrentCLA, ItemTagcode, UniqueKey)
	
	If (Mandatory=1) Then CLAMandatory.TextColor = Consts.ColorYellow
	If (Critical=1) Then CLACritical.TextColor = Consts.ColorRed
	
'	Private Row As Int = 0
	Private Record As Cursor
						
	Dim fieldval_04 As Int = outRecord.GetInt("fieldval_04")
	Dim repeatcounter As Int = outRecord.GetInt("repeatcounter")
	
	Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
						
	If (DataBulkUpload=1) And (fieldval_04>=0) Then
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						and x.item_tagcode||x.item_tagcode||x.unique_key||x.repeatcounter in (select z.item_tagcode||z.item_tagcode||z.unique_key||z.repeatcounter  
						from dta_requests_values_adds as z where  z.fieldval_04=${fieldval_04})
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	Else
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	End If
	Record = Starter.LocalSQLEVC.ExecQuery(AllSQL)
	
	If Record.RowCount > 0 Then
		Record.Position = 0
		Dim points As Double = Record.GetDouble("points")
		Dim risk As Int = Record.GetInt("risk")
		Dim repeatcounter As Int = Record.GetInt("repeatcounter")
		Dim valMin As Int = 1 'Record.GetInt("val_min")
		Dim valMax As Int = 10 'Record.GetInt("val_max")
		If (valMax <= valMin) Then
			valMax = 10
		End If
		CLAItemRulerValue.Max = valMax
		
		
		CLAItemRulerValueMin.text = valMin
		CLAItemRulerValueMax.text = valMax
'		Dim Status As Int = Record.GetInt("status")
		Dim i As Int = 0
		Dim ValordaBD As String = Record.GetString("value")
		If IsNumber(ValordaBD) Then
			i = Utils.IfNullOrEmpty(ValordaBD, Utils.IfNullOrEmpty(objValue, valMin))
		Else
			i=0
		End If
		
		If Record.GetString("value") = "NA" Then
			ButtonRulerNA.TextColor = Colors.Red
			CurrentButtonNA = True
		Else
			ButtonRulerNA.TextColor = Colors.Gray
			CurrentButtonNA = False
		End If
		
		CLAItemRulerValue.Value = i
		CLAItemRulerValueCurrent.Text = CLAItemRulerValue.Value
		CLAItemRulerValue.Enabled = Not(READONLY_FEATURES)
		Dim SSTAG As String = $"${Record.GetString("request_tagcode")}|${Record.GetString("inner_request_tagcode")}|
					${Record.GetString("task_tagcode")}|${Record.GetString("item_tagcode")}|${Record.GetString("unique_key")}|
					${Record.GetString("tagcode")}|1|0|0|${repeatcounter}|${repeatitemcounter}|${repeatfieldcounter}"$
		
		CLAItemRulerValue.Tag = SSTAG

		SelectOptionPanel.Tag = $"${i}|${points}|${risk}"$
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem(Record.GetString("request_tagcode"), _
				Record.GetString("inner_request_tagcode"), _
				Record.GetString("task_tagcode"), _
				Record.GetString("item_tagcode"), _
				Record.GetString("unique_key"), _
				Record.GetString("tagcode"), _
				Record.GetInt("repeatcounter"),repeatitemcounter, repeatfieldcounter, Title.Trim, "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem(Record.GetString("task_tagcode"), Record.GetString("unique_key")), "")
							
'	*********************************************************************************************************************
'	 ROTINA DE VERIFICACAO SE O PAINEL FOI INACTIVADO POR EVENTO E PROCEDER DE ACORDO, COLOCANDO-O A ENABLE OU DISABLED
'	 E MUDANDO A COR DE BRANCO PARA CINZA E VICE VERSA
'	*********************************************************************************************************************
								
		Dim EnabledState As String = DBStructures.GetScriptColumnStrEVC($"select ifnull(fieldref_02, 'enabled') as EnabledState from dta_requests_values_adds where 1=1
																	and request_tagcode = '${CLAItem.Request.Trim}'
																	and task_tagcode = '${CLAItem.task.trim}'
																	and item_tagcode = '${CLAItem.item.trim}'
																	and repeatcounter = ${repeatcounter}
																	and repeatitemcounter = ${repeatitemcounter}
																	and repeatfieldcounter = ${repeatfieldcounter}"$,"EnabledState")
		If EnabledState.ToLowerCase = "disabled" Then
			Dim Val2set As Boolean = False
			p.Enabled = Val2set
			p.Color = Colors.LightGray
			For Each v As View In p.GetAllViewsRecursive
							
				If v Is Label Then
					Dim lV As Label = v
					lV.Enabled = Val2set
				else If v Is EditText Then
					Dim eV As EditText = v
					eV.Enabled = Val2set
				else If v Is FloatLabeledEditText Then
					Dim fV As FloatLabeledEditText = v
					fV.Enabled = Val2set
				else If v Is Button Then
					Dim bV As Button = v
					bV.Enabled = Val2set
				else If v Is Spinner Then
					Dim sV As Spinner = v
					sV.Enabled = Val2set
				End If
			Next
		Else
			If READONLY_FEATURES = False Then
				Dim Val2set As Boolean = True
				p.Enabled = Val2set
				p.Color = Colors.white
				For Each v As View In p.GetAllViewsRecursive
							
					If v Is Label Then
						Dim lV As Label = v
						lV.Enabled = Val2set
					else If v Is EditText Then
						Dim eV As EditText = v
						eV.Enabled = Val2set
					else If v Is FloatLabeledEditText Then
						Dim fV As FloatLabeledEditText = v
						fV.Enabled = Val2set
					else If v Is Button Then
						Dim bV As Button = v
						bV.Enabled = Val2set
					else If v Is Spinner Then
						Dim sV As Spinner = v
						sV.Enabled = Val2set
					End If
				Next
			End If
			
		End If
'	*********************************************************************************************************************
'	*********************************************************************************************************************

		ComponentList.add( Types.MakeComponentRecords(p, taggedID, Record.GetString("item_tagcode"),height,repeatitemcounter,repeatfieldcounter ,True) )

	Else
		Dim CLAItem As RequestCLAItem = Types.MakeRequestCLAItem("", "", "", "", "", "", 0,0, 0, "", "", "", 3, 0, 0, "", _
							DBStructures.DB2CLATaskItem("", ""), "")
	End If
	Record.Close
	CLAButtonOptions.Tag = CLAItem
	CLAButtonOptions.Enabled = Not(READONLY_FEATURES)
	p.Tag = CLAItem

	If (innerPanel = 0) Then
		Dim pnl As B4XView = chapter.GetView(1)
		pnl.AddView(p, 0, Posis, chapter.Width, height)
'			pnlExpanded.AddView(p, 0, Posis, chapter.Width, height)
	Else
		chapter.AddView(p, 0, Posis, chapter.Width, height)
	End If
	'clListView.ExpandItem(0)
	Posis = Posis + height '115dip
	Return Posis
End Sub

Sub ButtonRulerNA_Click
	Dim btn As Button = Sender
	If btn.TextColor = Colors.Gray Then
		btn.TextColor = Colors.Red
		CurrentButtonNA = True
		CLAItemRulerValue.Value = 0
	Else
		btn.TextColor = Colors.Gray
		CurrentButtonNA = False
	End If
End Sub

'***************************************************
'TIP : ALTERACAO DE PAINEIS BASEADO NO COMPONENTLIST
'***************************************************
Sub ChangeComponent(ItemTC As String, ItemProperty As String, StrValue As String, IntValue As Int) As ResumableSub
	
	'COLOR, HEIGHT, VISIBLE, ENABLED
	
	For i =0 To ComponentList.Size -1
		Dim ClItem As ComponentRecords = ComponentList.Get(i)
		If ClItem.item_tagcode = ItemTC Then
			Dim View2Process As B4XView = ClItem.component
			If View2Process Is Panel Then
				Dim pnl2Process As Panel = View2Process
				Select Case ItemProperty.ToUpperCase
					Case "COLOR"
						
						pnl2Process.Color = IntValue
						
					Case "HEIGHT"
						
						pnl2Process.Height = IntValue
						
					Case "VISIBLE"
						
						If StrValue.ToUpperCase = "TRUE" Or IntValue = 1 Then
							Dim Val2set As Boolean = True
						Else
							Dim Val2set As Boolean = False
						End If
						
						pnl2Process.Visible = Val2set
						
					Case "ENABLE"
						
						If StrValue.ToUpperCase = "TRUE" Or IntValue = 1 Then
							Dim Val2set As Boolean = True
							Dim color2set As Int = Colors.White
						Else
							Dim Val2set As Boolean = False
							Dim color2set As Int = Colors.LightGray
						End If
						
						For Each v As View In pnl2Process.GetAllViewsRecursive
							
							If v Is Label Then
								Dim lV As Label = v
								lV.Enabled = Val2set
							else If v Is EditText Then
								Dim eV As EditText = v
								eV.Enabled = Val2set
							else If v Is FloatLabeledEditText Then
								Dim fV As FloatLabeledEditText = v
								fV.Enabled = Val2set
							else If v Is Button Then
								Dim bV As Button = v
								bV.Enabled = Val2set
							else If v Is Spinner Then
								Dim sV As Spinner = v
								sV.Enabled = Val2set
							End If
						Next
						
						pnl2Process.Enabled = Val2set
						pnl2Process.Color = color2set
						
				End Select
			End If
			Exit
		End If
	Next
	
	Return True
End Sub

Sub ChangeComponentbyEvent(ItemTC As String, ItemProperty As String, StrValue As String, IntValue As Int, ric As Int) As ResumableSub
	
	'COLOR, HEIGHT, VISIBLE, ENABLED
	Log("ItemTC:" & ItemTC & " / ItemProperty:" & ItemProperty & " / StrValue:" & StrValue & " / IntValue:" & IntValue & " / ric:" & ric)
	If InvertEnableState And ItemProperty.ToUpperCase = "ENABLE" Then
		If IntValue = 1 Then
			IntValue = 0
		Else
			IntValue = 1
		End If
	End If
	
	For i =0 To ComponentList.Size -1
		Dim ClItem As ComponentRecords = ComponentList.Get(i)
		If ClItem.item_tagcode = ItemTC And ClItem.RepeatItemCounter = ric Then
			
			Dim View2Process As B4XView = ClItem.component
'			Log(View2Process.tag)
'			Log(ClItem.component.Tag)
			If View2Process Is Panel Then
				Dim pnl2Process As Panel = View2Process
				Select Case ItemProperty.ToUpperCase
					Case "COLOR"
						
						pnl2Process.Color = IntValue
						
					Case "HEIGHT"
						
						pnl2Process.Height = IntValue
						
					Case "VISIBLE"
						
						If StrValue.ToUpperCase = "TRUE" Or IntValue = 1 Then
							Dim Val2set As Boolean = True
						Else
							Dim Val2set As Boolean = False
						End If
						
						pnl2Process.Visible = Val2set
						
					Case "ENABLE"
						
						If StrValue.ToUpperCase = "TRUE" Or IntValue = 1 Then
							Dim Val2set As Boolean = True
							Dim color2set As Int = Colors.White
						Else
							Dim Val2set As Boolean = False
							Dim color2set As Int = Colors.LightGray
						End If
						
						For Each v As View In pnl2Process.GetAllViewsRecursive
							
							If v Is Label Then
								Dim lV As Label = v
								lV.Enabled = Val2set
							else If v Is EditText Then
								Dim eV As EditText = v
								eV.Enabled = Val2set
							else If v Is FloatLabeledEditText Then
								Dim fV As FloatLabeledEditText = v
								fV.Enabled = Val2set
							else If v Is Button Then
								Dim bV As Button = v
								bV.Enabled = Val2set
							else If v Is Spinner Then
								Dim sV As Spinner = v
								sV.Enabled = Val2set
							End If
						Next
						
						pnl2Process.Enabled = Val2set
						pnl2Process.Color = color2set
						pnl2Process.Invalidate
				End Select
			End If
			Exit
		End If
	Next
	
	Return True
End Sub

Sub butBarCode_Click
	
	CallSubDelayed2(BarcodeScanner,"StarScanningMulti", "CalledFromChapter")
End Sub


'TIP: ACTUALIZA A CHECKLIST A PARTIR DA LISTA DE CODIGOS DE BARRAS
Sub UpdateBarCodesInchecklist(BarCodeList As List) As ResumableSub
	
	ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)
	Sleep(150)
	
	
	'PEGA NA LISTA E CRIA UM MAP COM O CODIGO E O NUMERO DE REPETICOES
	'ASSIM SO ACTUALIZA A BD E O TEXTO UMA VEZ POR CADA CODIGO
	Try
		Dim TestStr As String = ""
		Dim RepVal As Int = 0
		Dim NewListMap As Map
		NewListMap.Initialize
	
		For i=0 To BarCodeList.Size -1
			Dim Bcode As String = BarCodeList.Get(i)
			Try
				Dim Val2get As Double = NewListMap.Get(Bcode)
			Catch
				Log(LastException)
				Dim Val2get As Double = 0
			End Try
			
			NewListMap.Put(Bcode,Val2get + 1)
		Next
		
	Catch
		Dim NewListMap As Map
		NewListMap.Initialize
		For x=0 To BarCodeList.Size -1
			NewListMap.Put(BarCodeList.Get(x),"1")
		Next
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	
	
	Dim rItemCounter As Int = 0
	Dim rFieldCounter As Int = 0
	Dim Bc2Test As String = Utils.StrList2SQLArray(BarCodeList)
	Dim Bc_sqlStr As String = $"select * from dta_requests_values  where 1=1
								and ${ShareCode.BarCode_request_control_field} <> '' 
								and request_tagcode = '${CurrentCLA.Request}' 
								and task_tagcode = '${CurrentCLA.Task}'
								And repeatcounter = ${CurrentCLA.RepeatCounter} 
								and repeatitemcounter=${rItemCounter} "$
								
	Log(Bc_sqlStr)
	Dim BCData As ResultSet = Starter.LocalSQLEVC.ExecQuery(Bc_sqlStr)
	If BCData.RowCount > 0 Then
		Do While BCData.NextRow
			Dim ItemTC As String = BCData.GetString("item_tagcode")
			Dim Tcode As String = BCData.GetString("tagcode")
			Dim uKey As String = BCData.GetString("unique_key")
			Dim RFCounter As Int = BCData.GetInt("repeatfieldcounter")
			Dim field2searchBC As String = BCData.GetString($"${ShareCode.BarCode_request_control_field}"$)
			
			For v=0 To NewListMap.Size -1 ' Lista dos Codigos Lidos
				Dim Bc2Compare As String = NewListMap.GetKeyAt(v)
				Dim BcVal2Add As Double = NewListMap.GetValueAt(v)
				If Bc2Compare = field2searchBC Then
					For x=0 To UPDATED_EDIT_FIELDS.size -1
						Dim cItem As FieldReference = UPDATED_EDIT_FIELDS.Get(x)
						Log(cItem.tagname)
						If cItem.tagname=ItemTC And cItem.FieldCounter = RFCounter  Then
							If cItem.tagobject Is EditText Then
								Dim e As EditText = cItem.tagobject
								Dim Val2Add As Double = e.Text
								Val2Add = Val2Add + BcVal2Add
								e.Text = Val2Add
								e.TextColor = Utils.GetColorByName(ShareCode.BarCode_FoundColor)
								
								' ACTUALIZA A BD LOCAL E DE SEGUIDA O SERVIDOR
								Dim UpdateBCSQL As String = $"update dta_requests_values set execute_status=1, execute_value_title='${Val2Add}'
															where request_tagcode='${CurrentCLA.Request}' 
															and inner_request_tagcode='${CurrentCLA.Action}'
															and task_tagcode='${CurrentCLA.Task}'
															and item_tagcode='${ItemTC}'
															and unique_key='${uKey}'
															and repeatfieldcounter = ${RFCounter}
															And repeatcounter=${CurrentCLA.RepeatCounter} "$
								Log(UpdateBCSQL)
								Try
									Starter.LocalSQLEVC.ExecNonQuery(UpdateBCSQL)
								Catch
									Log($"Erro de campo: ${LastException}"$)
								End Try

								Dim rs As ResumableSub = UpdateServerwithObject(CurrentCLA, ItemTC, uKey, Val2Add,"" ,0, RFCounter)
								Wait For(rs) Complete (Updated As Boolean)
								
								Sleep(100)						
								
								If ShareCode.Barcode_SetConfirmButton Then	
								End If
							End If
						Else
							If cItem.tagobject Is EditText Then
								Dim e As EditText = cItem.tagobject
								e.TextColor = Utils.GetColorByName(ShareCode.BarCode_NotFoundColor)
							End If
						End If
					Next
				End If
			Next
			
		Loop
	End If
	BCData.Close
	
	
	ProgressDialogHide
	Sleep(100)
	
	Return True
	
End Sub

Sub InvertConformity(currView As B4XView, request_tagcode As String, task_tagcode As String, item_tagcode As String, uniquekey As String, _
	repeatcounter As Int, repeatitemcounter As Int, bbTag As RequestCLAItem, answertagcode As String) As ResumableSub	
	ProgressDialogHide
	
	ProgressDialogShow2(ShareCode.GeneralWaitPlease,False)
	Sleep(150)
	
	Dim ssSql As String = $"select distinct ifnull(paramters, '') as paramters
										from dta_tasks_items_adds where 1=1
										And task_tagcode='${task_tagcode.trim}'
										And item_tagcode='${item_tagcode.trim}'
										And unique_key='${uniquekey.trim}'"$
	Log(ssSql)
	
	Dim valcheck As String = DBStructures.GetScriptColumnStrEVC(ssSql,"paramters")
	Log(valcheck)
	
	Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( ssSql, "paramters")
										
	If (QuestParams.Size > 0) Then
		
		Try
			Dim affect_conformity_condition As Int = QuestParams.Get("affect_conformity_condition")
		Catch
			Dim affect_conformity_condition As Int = 0
		End Try
		Log(affect_conformity_condition)
		
		If 	Utils.Int2Bool(affect_conformity_condition) Then
			Dim acc_settings As List = QuestParams.Get("acc_settings")
			Log(acc_settings)
			For Each colacc_settings As Map In acc_settings
				Dim answer_tagcode As String = colacc_settings.Get("answer_tagcode")
				Log(answertagcode)
				Log(answer_tagcode)
								
				If (answertagcode = answer_tagcode) Then
					
					Dim answer_items As List = colacc_settings.Get("answer_items")
					For Each colanswer_items As Map In answer_items
						Dim affected_condition_type As Int = colanswer_items.Get("affected_condition_type")
						Dim affected_condition_formula As String = colanswer_items.Get("affected_condition_formula")
						Dim affected_items As List = colanswer_items.Get("affected_items")
						Log(affected_condition_type)
						For Each colaffected_items As Map In affected_items
							Dim affected_tagcode As String = colaffected_items.Get("affected_tagcode")
							Dim change_color_to As String = colaffected_items.Get("change_color_to")
							Dim set_conformity_to As String = colaffected_items.Get("set_conformity_to")
							Dim affected_item_tagcode As String = colaffected_items.Get("affected_item_tagcode")
							
							Log(affected_item_tagcode)
							If affected_condition_type = 0 Then
								
								Dim uniqueKeyValue As String = DBStructures.GetScriptColumnStrEVC($"select distinct a.unique_key as valor
																from dta_requests_values as a
																where 1=1
																	and a.request_tagcode='${request_tagcode}'
																	and a.task_tagcode='${task_tagcode}'
																	and a.item_tagcode='${affected_item_tagcode}'
																	and a.repeatcounter=${repeatcounter}
																	and a.repeatitemcounter=${repeatitemcounter}"$, "valor")
							
								If Utils.NNE(uniqueKeyValue) Then
									' VERIFICAR SE O REGISTO EXISTE
									Dim sqlthis As String = $"select count(0) as total from dta_requests_values_adds where 1=1
																				and request_tagcode = '${request_tagcode}'
																				and task_tagcode = '${task_tagcode}'
																				and item_tagcode='${affected_item_tagcode}'
																				and tagcode = '${affected_tagcode}'
																				and repeatcounter = ${repeatcounter}
																				and repeatitemcounter= ${repeatitemcounter}"$
									Log(sqlthis)
									Dim CheckItemExists As Int = DBStructures.GetScriptColumnIntEVC(sqlthis,"total")
				
									If CheckItemExists > 0 Then ' SE EXISTIR FAZ O UPDATE
										Starter.LocalSQLEVC.ExecNonQuery($"update dta_requests_values_adds set fieldconfirm_nc = 1,
																				fieldconfirm_state = ${set_conformity_to} where 1=1 and
																				request_tagcode = '${request_tagcode}'
																				and task_tagcode = '${task_tagcode}'
																				and tagcode = '${affected_tagcode}'
																				and item_tagcode = '${affected_item_tagcode} '
																				and unique_key = '${uniquekey} '
																				and repeatcounter = ${repeatcounter}
																				and repeatitemcounter= ${repeatitemcounter}"$)
									Else ' SE NAO EXISTIR INSERE
					
										Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_values_adds", "id", "") +1 + 1000000
						
										Starter.LocalSQLEVC.ExecNonQuery($"insert into dta_requests_values_adds
												(id, request_tagcode, inner_request_tagcode,task_tagcode, item_tagcode, 
												unique_key, tagcode, repeatcounter, repeatitemcounter, repeatfieldcounter, 
												fieldconfirm_state, fieldconfirm_nc) values
												(${maxid},'${request_tagcode}','${task_tagcode}','${task_tagcode}',
												'${affected_item_tagcode}', '${uniqueKeyValue.Trim}', '${affected_tagcode}',
												${repeatcounter}, ${repeatitemcounter}, 0, ${set_conformity_to}, 1)"$)
									End If
								
									Dim sACLADatetime As String = Utils.GetCurrDatetime
									Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
									Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
								
									Dim ACLSessUser As String = ShareCode.SESS_OPER_User
									Dim params As Map
									params.Initialize
									params.Clear
									params.Put("_token", ShareCode.APP_TOKEN)
									params.Put("ACLARequest", request_tagcode.Trim)
									params.Put("ACLAAction", task_tagcode.Trim)
									params.Put("ACLATask", task_tagcode.Trim)
									params.Put("ACLAItem", affected_item_tagcode.Trim)
									params.Put("ACLAUniqueKey", uniqueKeyValue.Trim)
									params.Put("ACLATagcode", affected_tagcode.Trim)
									params.Put("ACLAReqCounter", repeatcounter)
									params.Put("ACLARepeatItem", repeatitemcounter)
									params.Put("ACLARepeatField", 0)
									params.Put("ACLSessUser", ACLSessUser.Trim)
									params.Put("ACLADatetime", sACLADatetime.Trim)
									params.Put("ACLALatitude", sACLALatitude.Trim)
									params.Put("ACLALongitude", sACLALongitude.Trim)
									params.Put("ACLAFieldConfirmNC", set_conformity_to)
									params.Put("versionTagcode", Main.VersionTagcode)
									params.Put("_authorization", Main.DeviceAuthorization)
									params.Put("_instance", Main.DeviceInstance)
									params.put("_deviceBrand", Main.DeviceBrand)
									params.put("_deviceModel", Main.DeviceModel)
									params.put("_deviceMacAddress", Main.DeviceMacAddress)
									params.Put("_user", ShareCode.SESS_User)
									Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/ncadds"$
									If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
										If Not(ShareCode.APP_WORKING_LOCAL) Then
											Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.Trim,task_tagcode.trim,affected_item_tagcode.Trim)
											Wait For (GODR) Complete (HasResults As Boolean)
											If HasResults Then
												Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,affected_item_tagcode.Trim)
												Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
											Else
												Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim)
											End If
										Else
											Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,affected_item_tagcode.Trim)
											Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
										End If
										Sleep(250)
									Else
										Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,affected_item_tagcode.Trim)
										Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
									End If
									Sleep(500)
								
									For i =0 To B4XSButtonsList.Size -1
										Dim B4XSB As B4XSRecords = B4XSButtonsList.Get(i)

										Log($"»» Item:${B4XSB.item_tagcode}, Tag:${B4XSB.answer_tagcode}"$)
										If (B4XSB.item_tagcode = affected_item_tagcode) And (B4XSB.answer_tagcode = affected_tagcode) Then
											Dim CurrentButton As B4XStateButton = B4XSB.component
											CurrentButton.Conformity = set_conformity_to
											CurrentButton.Reference = set_conformity_to
										
											If (set_conformity_to = 1)  Then
												CurrentButton.SecondStateColor =  paramColor2button(change_color_to)
											else if (set_conformity_to = 2) Then
												CurrentButton.SecondStateColor =  paramColor2button(change_color_to)
											Else
												CurrentButton.SecondStateColor = paramColor2button(change_color_to)
											End If
										
											Log($"«« Item:${B4XSB.item_tagcode}, Tag:${B4XSB.answer_tagcode}, NC:${CurrentButton.Conformity}, Color:${CurrentButton.SecondStateColor}"$)
											B4XSB = ChangeB4XSBTag(B4XSB, set_conformity_to)
											B4XSButtonsList.Set(i, B4XSB)
										End If
									Next
								End If
								

							End If
						Next
					Next
					
				End If

			Next
		End If
	End If
	
	ProgressDialogHide
	
	Return True
	
End Sub

Sub paramColor2button(colorstr As String) As Int
	Dim RetColorBtn As Int
	If colorstr.ToUpperCase = "GREEN" Then
		RetColorBtn = Consts.ColorGreen
	Else If colorstr.ToUpperCase = "RED" Then
		RetColorBtn = Consts.ColorRed
	Else If colorstr.ToUpperCase = "BLUE" Then
		RetColorBtn = Consts.ColorBlue
	End If
	
	Return RetColorBtn
End Sub

Sub ChangeB4XSBTag(B4XSB As B4XSRecords, set_conformity_to As String) As B4XSRecords
	Dim btn As B4XStateButton = B4XSB.component
	Dim strTag As String = btn.Tag  
	set_conformity_to = Utils.IfNullOrEmpty(set_conformity_to, "0")
	Dim Columns As List = Regex.Split("\|", strTag )
	Columns.Set(6, set_conformity_to)
	btn.Tag = Utils.List2Str(Columns, "|")
	B4XSB.component = btn
	Return B4XSB
End Sub

Sub ActiveInactive(this As B4XView, bbTag As RequestCLAItem, evt As CLAIEvent, answertagcode As String, SCI As SingleCLAItem, hasRic As Boolean, ric As Int) As ResumableSub

	If Utils.NNE(evt.value) Then
		Dim TgList As List = Regex.Split("\|", evt.value)
		Dim active_inactive As Int = evt.formula
		Dim active_color As Int = Colors.White
		Dim inactive_color As Int = Colors.LightGray
		
		If CurrentButtonState = 0 Then
			If active_inactive = 1 Then
				active_inactive = 0
			Else
				active_inactive = 1
			End If
		End If
	Try
		For t =0 To TgList.Size -1
			Dim tg_2change As String = TgList.Get(t)
			For i =0 To ComponentList.Size -1
				Dim ClItem As ComponentRecords = ComponentList.Get(i)
				If ClItem.item_tagcode = tg_2change Then
					If hasRic Then
							If ClItem.RepeatItemCounter = ric Then
							
								Log("ClItem.item_tagcode : " & ClItem.RepeatItemCounter & " = RIC : " & ric)
								Dim View2Process As B4XView = ClItem.component
								If View2Process Is Panel Then
									If active_inactive = 1 Then
										Dim chg As ResumableSub = ChangeComponentbyEvent(tg_2change,"ENABLE","",1, ric)
										wait for (chg) Complete (Finished As Boolean)
																				
										Dim chg As ResumableSub = WriteEnableDisableComponent(CurrentCLA.Request.Trim,CurrentCLA.Task.Trim,ClItem.item_tagcode,CurrentCLA.RepeatCounter,ric,ClItem.RepeatFieldCounter,True)
										wait for (chg) Complete (Finished As Boolean)
										
									else If active_inactive = 0 Then
										Dim chg As ResumableSub = ChangeComponentbyEvent(tg_2change,"ENABLE","",0, ric)
										wait for (chg) Complete (Finished As Boolean)
										
										Dim chg As ResumableSub = WriteEnableDisableComponent(CurrentCLA.Request.Trim,CurrentCLA.Task.Trim,ClItem.item_tagcode,CurrentCLA.RepeatCounter,ric,ClItem.RepeatFieldCounter,False)
										wait for (chg) Complete (Finished As Boolean)
									End If
								End If
							
							End If
						Else
							Dim View2Process As B4XView = ClItem.component
							If View2Process Is Panel Then
								If active_inactive = 1 Then
									Dim chg As ResumableSub = ChangeComponent(tg_2change,"ENABLE","",1)
									wait for (chg) Complete (Finished As Boolean)
									
									Dim chg As ResumableSub = ChangeComponent(tg_2change, "COLOR","", active_color)
									wait for (chg) Complete (Finished As Boolean)
									
									Dim res1 As ResumableSub = WriteEnableDisableComponent(SCI.request_tc,SCI.task_tc,tg_2change,SCI.rc,SCI.ric, SCI.rfc, True)
									wait for (res1) Complete (Finished As Boolean)

								else If active_inactive = 0 Then
									Dim chg As ResumableSub = ChangeComponent(tg_2change,"ENABLE","",0)
									wait for (chg) Complete (Finished As Boolean)
									
									Dim chg As ResumableSub = ChangeComponent(tg_2change, "COLOR","", inactive_color)
									wait for (chg) Complete (Finished As Boolean)
									
									Dim res1 As ResumableSub = WriteEnableDisableComponent(SCI.request_tc,SCI.task_tc,tg_2change,SCI.rc,SCI.ric, SCI.rfc, False)
									wait for (res1) Complete (Finished As Boolean)
									
								End If
							End If
					
					End If
					
					
				End If
			Next
		Next
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
		
		
	End If

	
	
	
	Return True

End Sub

Sub ActiveInactiveOnlyByEventVals(evt As CLAIEvent, hasRic As Boolean, ric As Int) As ResumableSub
	
	If Utils.NNE(evt.value) Then
		Dim tg_2change As String = ""
		Dim TgList As List = Regex.Split("\|", evt.value)
		Dim active_inactive As Int = evt.formula
		Dim active_color As Int = Colors.White
		Dim inactive_color As Int = Colors.LightGray
	Try
		For t =0 To TgList.Size -1
			tg_2change=TgList.Get(t)
			For i =0 To ComponentList.Size -1
				Dim ClItem As ComponentRecords = ComponentList.Get(i)
				If ClItem.item_tagcode = tg_2change Then
						If hasRic Then
							If ClItem.RepeatItemCounter = ric Then
								
'								Log("ClItem.item_tagcode : " & ClItem.RepeatItemCounter & " = RIC : " & ric)
								Dim View2Process As B4XView = ClItem.component
								If View2Process Is Panel Then
									If active_inactive = 1 Then
										Dim chg As ResumableSub = ChangeComponentbyEvent(tg_2change,"ENABLE","",1, ric)
										wait for (chg) Complete (Finished As Boolean)
																				
										Dim chg As ResumableSub = WriteEnableDisableComponent(CurrentCLA.Request.Trim,CurrentCLA.Task.Trim,ClItem.item_tagcode,CurrentCLA.RepeatCounter,ric,ClItem.RepeatFieldCounter,True)
										wait for (chg) Complete (Finished As Boolean)
										
									else If active_inactive = 0 Then
										Dim chg As ResumableSub = ChangeComponentbyEvent(tg_2change,"ENABLE","",0, ric)
										wait for (chg) Complete (Finished As Boolean)
										
										Dim chg As ResumableSub = WriteEnableDisableComponent(CurrentCLA.Request.Trim,CurrentCLA.Task.Trim,ClItem.item_tagcode,CurrentCLA.RepeatCounter,ric,ClItem.RepeatFieldCounter,False)
										wait for (chg) Complete (Finished As Boolean)
									End If
								End If
							End If
						Else
							Log("ClItem.item_tagcode : " & ClItem.RepeatItemCounter & " = RIC : " & ric)
							Dim View2Process As B4XView = ClItem.component
							If View2Process Is Panel Then
								If active_inactive = 1 Then
									Dim chg As ResumableSub = ChangeComponent(tg_2change,"ENABLE","",1)
									wait for (chg) Complete (Finished As Boolean)
								else If active_inactive = 0 Then
									Dim chg As ResumableSub = ChangeComponent(tg_2change,"ENABLE","",0)
									wait for (chg) Complete (Finished As Boolean)
								End If
							End If
						End If
				End If
			Next
		Next
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
		
	End If
	Return True
End Sub

Sub WriteEnableDisableComponent(request As String, task As String, item As String, rc As Int, ric As Int, rfc As Int, EnableView As Boolean) As ResumableSub
	
	Dim SetViewState As String = "enabled"
	Dim IgnoraMandatorias As Int = 0
	Dim CreateUpdatedDate As String = Utils.GetCurrDatetimeExt
	If EnableView = False Then
		SetViewState = "disabled"
		IgnoraMandatorias = 1
	End If
	
	Dim ExistRec As Int = DBStructures.GetScriptColumnIntEVC($"select count(request_tagcode) as total from dta_requests_values_adds where 1=1
																and request_tagcode = '${request.trim}'
																and task_tagcode = '${task.trim}'
																and item_tagcode = '${item.trim}'
																and repeatcounter = ${rc}
																and repeatitemcounter = ${ric}
																and repeatfieldcounter = ${rfc}"$,"total")
	
	Dim Uk As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_tasks_items where 1=1
															and task_tagcode = '${task}'
															and item_tagcode = '${item}'"$,"unique_key")
	
	If ExistRec = 0 Then
		Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests_values_adds", "id", "") + 1+ 1000000
		Dim CreateRec As String = $"insert into dta_requests_values_adds (id, request_tagcode, inner_request_tagcode,
		task_tagcode,item_tagcode,unique_key,tagcode,fieldconfirm_ignore_mandatory,created_at,updated_at,repeatcounter,repeatitemcounter,repeatfieldcounter,fieldref_02)
		values ('${maxID}','${request}','' ,'${task}', '${item}','${Uk}','',${IgnoraMandatorias}, '${CreateUpdatedDate}','',${rc},${ric},${rfc},'${SetViewState}')"$
		Utils.SaveSQLToLog("WriteEnableDisableComponent",CreateRec, request)
	Else
		Dim CreateRec As String = $"update dta_requests_values_adds
									set fieldref_02 = '${SetViewState}',
									updated_at = '${CreateUpdatedDate}',
									fieldconfirm_ignore_mandatory = ${IgnoraMandatorias}
									where 1=1
									And request_tagcode='${request}'
									And task_tagcode='${task}'
									And item_tagcode='${item}'
									And repeatcounter=${rc}
									and repeatitemcounter=${ric}
									and repeatfieldcounter=${rfc}"$
		Utils.SaveSQLToLog("WriteEnableDisableComponent",CreateRec, request)
	End If
	
	Return True
End Sub

Sub Eval_Function (Name As String, Values As List) As Double
	Select Name 'it will be lower case
		Case "min"
			Dim d As Double = Values.Get(0)
			For Each n As Double In Values
				If n < d Then d = n
			Next
			Return d
		Case "max"
			Dim d As Double = Values.Get(0)
			For Each n As Double In Values
				If n > d Then d = n
			Next
			Return d
		Case "sin"
			Return SinD(Values.Get(0))
		Case Else
			Log("Invalid function: " & Name)
			Dim e As B4XEval = Sender
			e.Error = True
			Return 0
	End Select
End Sub

'*******************************************************************************************************************
'TIP : Evento do upload_bulk_data
'*******************************************************************************************************************
Sub CheckTypeRequestTaskParamters3(Request As String, task_tagcode As String, typerequest As String, Object2Get As String, whento As Int) As ResumableSub
	
'	whentotoupload = 0-Any, 1-Start, 2-End, 3-Open, 4-Close, 5-AssociateObject, 6-ChangeObject, 7-RemoveObject
'	on_change_status_to = 0-Any, 1 = por iniciar, 2 - em execucao, 3, 4 concluido 5,6

	ProgressDialogShow2(ShareCode.GeneralWaitPlease,True)
	Sleep(150)
	Dim continua As Boolean = False
	
	If typerequest = "_NONE_" Then
		Dim typerequest As String = DBStructures.GetScriptColumnStrEVC($"select typerequest_tagcode from dta_requests where tagcode = '${Request}'"$,"typerequest_tagcode")
	End If
	
	Dim JsonParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
												$"select distinct paramters 
												from dta_typerequests_tasks_adds where 1=1
												And typerequest_tagcode='${typerequest.Trim}'
												And task_tagcode='${task_tagcode.trim}'"$, "paramters")	
												
	Dim status_id As Int = DBStructures.GetScriptColumnIntEVC($"select status_id from dta_requests where 1=1 and tagcode='${Request}'"$, "status_id")
	
	If JsonParams.ContainsKey("upload_bulk_data") Then
		Try
			Dim upload_bulk_data As Int = JsonParams.Get("upload_bulk_data")
		Catch
			Dim upload_bulk_data As Int = 0
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try
	Else
		Dim upload_bulk_data As Int = 0
	End If
	
	If Utils.Int2Bool(upload_bulk_data) Then
		
		Dim upload_bulkdata_settings As List = JsonParams.Get("upload_bulkdata_settings")
		For Each colupload_bulkdata_settings As Map In upload_bulkdata_settings
			
			Dim whentotoupload As Int = colupload_bulkdata_settings.Get("whentotoupload")
			Dim ubd_overwrite_data As Int = colupload_bulkdata_settings.Get("ubd_overwrite_data")
			Dim on_change_status_to As Int = colupload_bulkdata_settings.Get("on_change_status_to")
			Dim ubd_add_chapters As Int = colupload_bulkdata_settings.Get("ubd_add_chapters")
			Dim ubd_chapters_field As String = colupload_bulkdata_settings.Get("ubd_chapters_field")
			Dim ubd_repeted_chapter As Int = colupload_bulkdata_settings.Get("ubd_repeted_chapter")
			Dim ubd_chapter_tagcode As String = colupload_bulkdata_settings.Get("ubd_chapter_tagcode")
			Dim data_dependent As Int = colupload_bulkdata_settings.Get("data_dependent")
			Dim datadependent_fixedvalue As String = colupload_bulkdata_settings.Get("datadependent_fixedvalue")
			Dim ubd_script As String = colupload_bulkdata_settings.Get("ubd_script")
			Dim ubd_script_tagcode As String = colupload_bulkdata_settings.Get("ubd_script_tagcode")
			Dim ubd_items As List = colupload_bulkdata_settings.Get("ubd_items")
				
'			0-Não, 1-Objecto, 2-Entidade, 3-Technical, 4-Teams, 5-Departments, 6-Vehicles, 7-Processo, 8-Select
'			(1,2,3,4,5,6,7 - Vem do dta_requests object_tagcode, entity_tagcode, technical_tagcode, team_tagcode, department_tagcode, vehicle_tagcode, process_tagcode)
'			(8 - campo object_tagcode de dta_requests_values)
			If whentotoupload = whento Then
				
				If (on_change_status_to = 0) Or (on_change_status_to = status_id) Then
					
					continua = True
					
					If data_dependent = 0 Then
						Dim Field2get As String = "_NONE_"
						Dim Table2Get As String = "_NONE_"
					else If data_dependent = 1 Then
						Dim Field2get As String = "object_tagcode"
						Dim Table2Get As String = "dta_requests"
					else If data_dependent = 2 Then
						Dim Field2get As String = "entity_tagcode"
						Dim Table2Get As String = "dta_requests"
					else If data_dependent = 3 Then
						Dim Field2get As String = "technical_tagcode"
						Dim Table2Get As String = "dta_requests"
					else If data_dependent = 4 Then
						Dim Field2get As String = "team_tagcode"
						Dim Table2Get As String = "dta_requests"
					else If data_dependent = 5 Then
						Dim Field2get As String = "department_tagcode"
						Dim Table2Get As String = "dta_requests"
					else If data_dependent = 6 Then
						Dim Field2get As String = "vehicle_tagcode"
						Dim Table2Get As String = "dta_requests"
					else If data_dependent = 7 Then
						Dim Field2get As String = "process_tagcode"
						Dim Table2Get As String = "dta_requests"
					else If data_dependent = 8 Then
						Dim Field2get As String = "object_tagcode"
						Dim Table2Get As String = "dta_requests_values"
					End If
			
					If Field2get <> "_NONE_" And Utils.NNE(Object2Get) Then
						Dim data_dependent_result As String = DBStructures.GetScriptColumnStrEVC($"select ${Field2get} from ${Table2Get} where ${Field2get} = '${Object2Get}'"$, Field2get)
					End If
						
					If Utils.nne(ubd_script) Then
						ubd_script = ubd_script.Replace("«","'")
						ubd_script = ubd_script.Replace(":DATADEPENDENT", data_dependent_result)
						ubd_script = ubd_script.Replace(":CLIENTDB.", "")
						ubd_script = ubd_script.Replace(":REQUEST", Request.Trim)
						ubd_script = ubd_script.Replace(":OBJECT", Object2Get.Trim)
						ubd_script = ubd_script.Replace($":TASK"$,task_tagcode.Trim)
'						ubd_script = ubd_script.Replace($":ITEM"$,item_tagcode.Trim)
						Dim ReSet As ResultSet = Starter.LocalSQLEVC.ExecQuery(ubd_script)
						Dim Chapter As Int = 0
						Dim NumRecs As Int = ReSet.RowCount
						Log("Rows:" & NumRecs)
						Dim FullChapterList As List
						FullChapterList.Initialize
						Dim ParamsChapterList As List
						ParamsChapterList.Initialize
						
						Dim ChaptersRS As ResultSet = Starter.LocalSQLEVC.ExecQuery($"select item_tagcode from dta_tasks_items where 1=1
														and parent_tagcode = (select unique_key from dta_tasks_items where item_tagcode = '${ubd_chapter_tagcode}')"$)
														
						Do While ChaptersRS.NextRow
							FullChapterList.Add(ChaptersRS.GetString("item_tagcode"))
						Loop
						
						Do While ReSet.NextRow
							Dim ReSetRow As Int = ReSet.Position
							Dim ChapterInsertedInBO As Boolean = False
							For Each colubd_items As Map In ubd_items
								Dim ubd_values_field As String = colubd_items.Get("ubd_values_field")
								Dim ubd_item_tagcode As String = colubd_items.Get("ubd_item_tagcode")
								Dim ubd_tagcode As String = colubd_items.Get("ubd_tagcode")
								Dim ubd_script_field As String = colubd_items.Get("ubd_script_field")
								
								If Utils.NNE(ubd_item_tagcode) Then
									ParamsChapterList.Add(ubd_item_tagcode)
								End If
								
																
								Dim Value2Set As String = ReSet.GetString(ubd_script_field)
								Log(ubd_item_tagcode & ":" & Value2Set)
								
								If Utils.NE(ubd_values_field) Then
									Dim Field2set As String = "execute_value"
								Else
									Dim Field2set As String = ubd_values_field
								End If
								
								Dim obj_tc As String = ""
								
								
								
								
						
								Dim ChapterUk As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_tasks_items where 1=1
																								and task_tagcode = '${task_tagcode}'
																								and item_tagcode = '${ubd_chapter_tagcode}'"$,"unique_key")
																								
								Dim Uk As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_requests_values where 1=1
																								and request_tagcode = '${Request.trim}'
																								and task_tagcode = '${task_tagcode}'
																								and item_tagcode = '${ubd_item_tagcode}'"$,"unique_key")
										
								Dim Tagcode As String = DBStructures.GetScriptColumnStrEVC($"select tagcode from dta_requests_values where 1=1
																								and request_tagcode = '${Request.trim}'
																								and task_tagcode = '${task_tagcode}'
																								and item_tagcode = '${ubd_item_tagcode}'"$,"tagcode")
								
								Dim position As String = DBStructures.GetScriptColumnStrEVC($"select position from dta_requests_values where 1=1
																								and request_tagcode = '${Request.trim}'
																								and task_tagcode = '${task_tagcode}'
																								and item_tagcode = '${ubd_item_tagcode}'"$,"position")
									
								Dim val_max As String = DBStructures.GetScriptColumnStrEVC($"select val_max from dta_requests_values where 1=1
																								and request_tagcode = '${Request.trim}'
																								and task_tagcode = '${task_tagcode}'
																								and item_tagcode = '${ubd_item_tagcode}'"$,"val_max")
									
								Dim val_min As String = DBStructures.GetScriptColumnStrEVC($"select val_min from dta_requests_values where 1=1
																								and request_tagcode = '${Request.trim}'
																								and task_tagcode = '${task_tagcode}'
																								and item_tagcode = '${ubd_item_tagcode}'"$,"val_min")
									
								Try
									Dim obj_tc As String = ReSet.GetString("object_tagcode")
								Catch
									Dim obj_tc As String = ""
									Log(LastException)
									Utils.WriteErrors2Log(LastException)
								End Try
								
								If Not(Utils.Int2Bool(ubd_repeted_chapter)) Then ' NAO E CAPITULO REPETITIVO
									If ReSetRow = 0 Then
										Dim Val2set As String = $"${Field2set}='${Value2Set}'"$
										
										If Field2set = "execute_value" Then
											Dim Val2set As String = $"execute_value='${Value2Set}', execute_value_title = ''"$
										End If
									
										If Field2set = "multi" Then
											Dim Val2set As String = ""
											Dim MapaCampos As Map
											MapaCampos.Initialize
											For f =0 To ReSet.ColumnCount -1
												Dim fieldname As String = ReSet.GetColumnName(f)
												Dim fieldVal As String = Utils.IfNotNullOrEmpty(ReSet.GetString(fieldname),"")
												MapaCampos.Put(fieldname,fieldVal)
											Next
											For x=0 To MapaCampos.Size -1
												Dim f2s As String = MapaCampos.GetKeyAt(x)
												Dim v2s As String = ReSet.GetString(f2s)
												Val2set = Val2set & $"${f2s} = '${v2s}',"$
											Next
											If Val2set.EndsWith(",") Then Val2set = Val2set.SubString2(0,Val2set.Length-1)
										End If
										
										
										
										Dim UpdateREQVAL As String = $"update dta_requests_values
																	set execute_status=1,
																	${Val2set},
																	object_tagcode = '${obj_tc}'
																	where request_tagcode='${Request.trim}' 
																	And inner_request_tagcode='${task_tagcode.trim}'
																	And task_tagcode='${task_tagcode.trim}'
																	And item_tagcode='${ubd_item_tagcode.trim}'
																	And unique_key='${Uk.Trim}'
																	And Tagcode = '${Tagcode.trim}'
																	And repeatfieldcounter = 0
																	And repeatitemcounter=0
																	And repeatcounter=0"$
'									Log(UpdateREQVAL)
										Try
											Starter.LocalSQLEVC.ExecNonQuery(UpdateREQVAL)
										Catch
											Log($"Erro de campo: ${LastException}"$)
										End Try
										
										Dim Rs2 As ResumableSub = UpdateServerUPDorINS("dta_requests_values", "update",Request,task_tagcode,ubd_item_tagcode,0,0,0)
										wait for (Rs2) complete (Finished As Boolean)
										Sleep(250)
										
									Else
										Dim execValue As String = ""
										Dim execValueTitle As String = ""
										Dim execTitle As String = ""
										
										
										If Field2set = "execute_value" Then
											execValue  = Value2Set
										else If Field2set = "execute_value_title" Then
											execValueTitle = Value2Set
										else If Field2set = "title" Then
											execTitle = Value2Set
										else If Field2set = "multi" Then
											Dim Val2set As String = ""
											Dim MapaCampos As Map
											MapaCampos.Initialize
											For f =0 To ReSet.ColumnCount -1
												Dim fieldname As String = ReSet.GetColumnName(f)
												Dim fieldVal As String = Utils.IfNotNullOrEmpty(ReSet.GetString(fieldname),"")
												MapaCampos.Put(fieldname, fieldVal)
											Next
											For x=0 To MapaCampos.Size -1
												Dim f2s As String = MapaCampos.GetKeyAt(x)
												Dim v2s As String = ReSet.GetString(f2s)
												If f2s.ToLowerCase = "execute_value" Then
													execValue = v2s
												else if f2s.ToLowerCase = "execute_value_title" Then
													execValueTitle = v2s
												else if f2s.ToLowerCase = "execute_format_title" Then
													execValueTitle = v2s
												else if f2s.ToLowerCase = "title" Then
													execTitle = v2s
												else if f2s.ToLowerCase = "object_tagcode" Then
													obj_tc = v2s
												End If
												
											Next
											
										End If
												
										Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_values", "id", "") +1 + 1000000
										Dim InsertREQVAL As String = $"insert into dta_requests_values (id, request_tagcode,inner_request_tagcode, task_tagcode,item_tagcode,unique_key,
																		tagcode,position, execute_status, object_tagcode, execute_value, execute_value_title, title, execute_format_title,
																		confirmed,changed_value, repeatcounter, repeatitemcounter, repeatfieldcounter,val_min, val_max)
																		values (${maxid},'${Request}','${task_tagcode}','${task_tagcode}','${ubd_item_tagcode}','${Uk}',
										'${Tagcode}',${position},1,'${obj_tc}','${execValue}','${execValueTitle}','${execTitle}','','','',0, 0, ${ReSetRow}, ${val_min}, ${val_max})"$

										Try
											Starter.LocalSQLEVC.ExecNonQuery(InsertREQVAL)
										Catch
											Log($"Erro de campo: ${LastException}"$)
										End Try
										
										If Not(ChapterInsertedInBO) Then
											Dim Rs2 As ResumableSub = UpdateServerUPDorINS("dta_requests_values", "insert",Request,task_tagcode,ubd_item_tagcode,0,ReSetRow,0)
											wait for (Rs2) complete (Finished As Boolean)
											Sleep(250)
'											Dim Rs1 As ResumableSub = ClaiNewSvrVarValue(Request, task_tagcode, ChapterUk, 0 ,Chapter)
'											wait for (Rs1) Complete (Finished As Boolean)
'											Sleep(250)
											ChapterInsertedInBO = True
										End If
										
									End If
									
									
								else If Utils.Int2Bool(ubd_repeted_chapter) And Utils.NNE(ubd_chapter_tagcode) Then ' É CAPITULO REPETITIVO
									If Chapter = 0 Then ' Item
										Dim Val2set As String = $"${Field2set}='${Value2Set}'"$
									
										If Field2set = "execute_value" Then
											Dim Val2set As String = $"execute_value='${Value2Set}', execute_value_title = ''"$
										End If
										
										If Field2set = "multi" Then
											Dim Val2set As String = ""
											Dim MapaCampos As Map
											MapaCampos.Initialize
											For f =0 To ReSet.ColumnCount -1
												Dim fieldname As String = ReSet.GetColumnName(f)
												Dim fieldVal As String = Utils.IfNotNullOrEmpty(ReSet.GetString(fieldname),"")
												MapaCampos.Put(fieldname,fieldVal)
											Next
											For x=0 To MapaCampos.Size -1
												Dim f2s As String = MapaCampos.GetKeyAt(x)
												Dim v2s As String = ReSet.GetString(f2s)
												Val2set = Val2set & $"${f2s} = '${v2s}',"$
											Next
											If Val2set.EndsWith(",") Then Val2set = Val2set.SubString2(0,Val2set.Length-1)
										End If
										
										
										Dim UpdateREQVAL As String = $"update dta_requests_values
																	set execute_status=1,
																	${Val2set},
																	object_tagcode = '${obj_tc}'
																	where request_tagcode='${Request.trim}' 
																	And inner_request_tagcode='${task_tagcode.trim}'
																	And task_tagcode='${task_tagcode.trim}'
																	And item_tagcode='${ubd_item_tagcode.trim}'
																	And unique_key='${Uk.Trim}'
																	and tagcode = '${Tagcode.trim}'
																	And repeatfieldcounter = 0
																	And repeatitemcounter=0
																	And repeatcounter=0"$
										Log(UpdateREQVAL)
										Try
											Starter.LocalSQLEVC.ExecNonQuery(UpdateREQVAL)
										Catch
											Log($"Erro de campo: ${LastException}"$)
										End Try
														
										Dim Rs2 As ResumableSub = UpdateServerUPDorINS("dta_requests_values", "update",Request,task_tagcode,ubd_item_tagcode,0,0,0)
										wait for (Rs2) complete (Finished As Boolean)
										Sleep(250)
										
									Else ' JA NAO E O PRIMEIRO CAPITULO; FAZ UM INSERT
										
										Dim execValue As String = ""
										Dim execValueTitle As String = ""
										Dim execTitle As String = ""
												
										If Field2set = "execute_value" Then
											execValue  = Value2Set
										else If Field2set = "execute_value_title" Then
											execValueTitle = Value2Set
										else If Field2set = "title" Then
											execTitle = Value2Set
										else If Field2set = "multi" Then
											Dim Val2set As String = ""
											Dim MapaCampos As Map
											MapaCampos.Initialize
											For f =0 To ReSet.ColumnCount
												Dim fieldname As String = ReSet.GetColumnName(f)
												Dim fieldVal As String = Utils.IfNotNullOrEmpty(ReSet.GetString(fieldname),"")
												MapaCampos.Put(fieldname,fieldVal)
											Next
											For x=0 To MapaCampos.Size -1
												Dim f2s As String = MapaCampos.GetKeyAt(x)
												Dim v2s As String = ReSet.GetString(f2s)
												If f2s.ToLowerCase = "execute_value" Then
													execValue = v2s
												else if f2s.ToLowerCase = "execute_value_title" Then
													execValueTitle = v2s
												else if f2s.ToLowerCase = "execute_format_title" Then
													execValueTitle = v2s
												else if f2s.ToLowerCase = "title" Then
													execTitle = v2s
												else if f2s.ToLowerCase = "object_tagcode" Then
													obj_tc = v2s
												End If
												
											Next
											
										End If
												
										Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_values", "id", "") +1 + 1000000
										Dim InsertREQVAL As String = $"insert into dta_requests_values (id, request_tagcode,inner_request_tagcode, task_tagcode,item_tagcode,unique_key,
																		tagcode,position, execute_status, object_tagcode, execute_value, execute_value_title, title, execute_format_title,
																		confirmed,changed_value, repeatcounter, repeatitemcounter, repeatfieldcounter,val_min, val_max)
																		values (${maxid},'${Request}','${task_tagcode}','${task_tagcode}','${ubd_item_tagcode}','${Uk}',
										'${Tagcode}',${position},1,'${obj_tc}','${execValue}','${execValueTitle}','${execTitle}','','','',0,${Chapter},0,${val_min},${val_max})"$
'																		'${Tagcode}','${position}',1,'${execValue}','${execValueTitle}','${execTitle}','','','',0,${Chapter},0,1,10)"$
										Try
											Starter.LocalSQLEVC.ExecNonQuery(InsertREQVAL)
										Catch
											Log($"Erro de campo: ${LastException}"$)
										End Try
										
										If Not(ChapterInsertedInBO) Then
											Dim Rs1 As ResumableSub = ClaiNewSvrVarValue(Request, task_tagcode, ChapterUk, 0 ,Chapter)
											wait for (Rs1) Complete (Finished As Boolean)
											Sleep(250)
											ChapterInsertedInBO = True
										End If
										
										
									End If
								End If
							Next
							
							Chapter = Chapter + 1
							
							
							For f = 0 To FullChapterList.Size -1
								Dim FCN As String = FullChapterList.Get(f)
								For p = 0 To ParamsChapterList.Size -1
									Dim PCN As String = ParamsChapterList.get(p)
									If PCN.Trim = FCN.Trim Then
										FullChapterList.Set(f,"-")
									End If
								Next
							Next
							
							For f = 0 To FullChapterList.Size -1
								Dim full_chapter_tagcode As String = FullChapterList.Get(f)
								If full_chapter_tagcode <> "-" And Chapter < = (NumRecs-1) Then
									
									Dim ch_Uk As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_requests_values where 1=1
																								and request_tagcode = '${Request.trim}'
																								and task_tagcode = '${task_tagcode}'
																								and item_tagcode = '${full_chapter_tagcode}'"$,"unique_key")
										
									Dim ch_tagcode As String = DBStructures.GetScriptColumnStrEVC($"select tagcode from dta_requests_values where 1=1
																								and request_tagcode = '${Request.trim}'
																								and task_tagcode = '${task_tagcode}'
																								and item_tagcode = '${full_chapter_tagcode}'"$,"tagcode")
									
									Dim maxid As Int = DBStructures.GetMaxOfEVC("dta_requests_values", "id", "") +1 + 1000000
									Dim InsertREQVAL2 As String = $"insert into dta_requests_values (id, request_tagcode,inner_request_tagcode, task_tagcode,item_tagcode,unique_key,
																		tagcode,position, execute_status, execute_value, execute_value_title, title, execute_format_title,
																		confirmed,changed_value, repeatcounter, repeatitemcounter, repeatfieldcounter,val_min, val_max)
																		select ${maxid}, request_tagcode,inner_request_tagcode, task_tagcode,item_tagcode,unique_key,
																		tagcode,position, execute_status, execute_value, execute_value_title, title, execute_format_title,
																		confirmed,changed_value, repeatcounter, ${Chapter}, repeatfieldcounter,val_min, val_max
																		from dta_requests_values where request_tagcode = '${Request}' and task_tagcode = '${task_tagcode}' 
																		and item_tagcode = '${full_chapter_tagcode}' and repeatitemcounter = 0"$
									Try
										Starter.LocalSQLEVC.ExecNonQuery(InsertREQVAL2)
									Catch
										Log($"Erro de campo: ${LastException}"$)
									End Try
													
								End If
								
							Next
							ChapterInsertedInBO = False
						Loop
						
					End If
				End If
			End If
		Next
		
		'**********************************************************************************************************************
		' CHAMADA AO NOVO ENDPOINT E ENVIO DE TODOS OS DADOS DE UMA VEZ EM VEZ DE CHAMAR O ENDPOINT UM A UM
		'**********************************************************************************************************************
		
		If continua Then
							
			Dim FinalSql As String =  $"select * from dta_requests_values where 1=1
											and request_tagcode='${Request}'
											And task_tagcode in ('${task_tagcode}')
											and repeatitemcounter > 0"$
			
			Dim RsArtigos As ResultSet = Starter.LocalSQLEVC.ExecQuery(FinalSql)

'				
			If RsArtigos.RowCount > 0 Then
				Do While RsArtigos.NextRow ' ITERA SOBRE TODOS OS REGISTOS

					Dim Req_TC As String = RsArtigos.GetString("request_tagcode")
					Dim Task_TC As String = RsArtigos.GetString("task_tagcode")
					Dim Item_TC As String = RsArtigos.GetString("item_tagcode")
					Dim rc As String = RsArtigos.GetString("repeatcounter")
					Dim rfc As String = RsArtigos.GetString("repeatfieldcounter")
					Dim ric As String = RsArtigos.GetString("repeatitemcounter")
					' ENVIA AO SERVIDOR
					Dim Rs2 As ResumableSub = UpdateServerUPDorINS("dta_requests_values", "update", Req_TC.trim, Task_TC.trim, Item_TC.trim, rc, rfc, ric)
					wait for (Rs2) complete (Finished As Boolean)
					Sleep(250)
				Loop
	
			End If
		End If
'	ProgressDialogHide

	End If
	
	Return True
	
End Sub

Sub ClaiNewSvrVarValue(request_tagcode As String, task_tagcode As String, Chapter_Uk As String, rc As Int, ric As Int) As ResumableSub
		
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLARequest", request_tagcode.trim)
	params.Put("ACLATask", task_tagcode.Trim)
	params.Put("ACLAUniqueKey", Chapter_Uk.Trim) ' chapter UK
	params.Put("ACLAReqCounter", rc)
	params.Put("ACLARepeatItem", ric)
'			params.Put("ACLARepeatField", ChapterItem.repeatfieldcounter)
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/new"$
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
			Utils.CallApi(0, params, Me, Url, "", request_tagcode.trim)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, request_tagcode.Trim,task_tagcode.trim,"")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(250)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, request_tagcode.Trim,task_tagcode.trim,"")
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If
	
	Return True
	
End Sub

Sub ClaiUpdateSvrVarValue(request_tagcode As String, task_tagcode As String,item_tagcode As String, Uk As String, tagcode As String, field2set As String, value2set As String, rc As Int, ric As Int, rfc As Int) As ResumableSub
	
	Log($"ESCREVE NO BO : ${request_tagcode} ${task_tagcode} ${item_tagcode} ${field2set} ${value2set}"$)
	
	Dim v2Set As String = ""
	Dim vt2Set As String = ""
	Dim t2Set As String = ""
	
	If field2set = "execute_value" Then
		v2Set = value2set
	Else If field2set = "execute_value_title" Then
		vt2Set = value2set
	Else  If field2set = "title" Then
		t2Set = value2set
	Else
		v2Set = value2set
	End If
	
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLARequest", request_tagcode)
	params.Put("ACLAAction", task_tagcode)
	params.Put("ACLATask", task_tagcode)
	params.Put("ACLAItem", item_tagcode)
	params.Put("ACLAUniqueKey", Uk)
	params.Put("ACLATagcode", tagcode)
	params.Put("ACLAValue", v2Set)
	params.Put("ACLAValueTitle", vt2Set)
	params.Put("ACLATitle", t2Set)
	params.Put("ACLAReqCounter", rc)
	params.Put("ACLARepeatItem", ric)
	params.Put("ACLARepeatField", rfc)
	params.Put("ACLAInner", 0)
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim sACLADatetime As String = Utils.GetCurrDatetime
	Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
	Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")

	params.Put("ACLADatetime", sACLADatetime)
	params.Put("ACLALatitude", sACLALatitude)
	params.Put("ACLALongitude", sACLALongitude)
	Dim ACLSessUser As String = ShareCode.SESS_OPER_User
			
	params.Put("ACLSessUser", ACLSessUser)
	params.Put("ACLClear", 0)
					
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then
			Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
			Wait For (GODR) Complete (HasResults As Boolean)
			If HasResults Then
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			Else
				Utils.CallApi(0, params, Me, Url, "", request_tagcode)
			End If
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(250)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.Trim,task_tagcode.trim,item_tagcode.Trim)
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If
	
	Return True
	
End Sub


'**********************************************************************************
' TIP : CHECKLIST DE CARREGAMENTO DE ARTIGOS
'**********************************************************************************
Sub UploadDataParamters(CLA As RequestCLA, tagcode As String) As ResumableSub
	Dim QuestParams As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
												$"select distinct paramters 
												from dta_tasks_adds where 1=1
												and tagcode='${CLA.action.trim}'"$, "paramters")
	Try
		Dim data_bulk_upload As Int = QuestParams.Get("data_bulk_upload")
	Catch
		Dim data_bulk_upload As Int = 0
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
							
	If Utils.Int2Bool(data_bulk_upload) Then

		Dim data_bulk_info As Map = QuestParams.Get("data_bulk_info")
		Dim affected_from As String = data_bulk_info.Get("affected_from")
		Dim related_to As String = data_bulk_info.Get("related_to")
		Dim origin_master As String = data_bulk_info.Get("origin_master")
		Dim origin_master_condition As String = data_bulk_info.Get("origin_master_condition")
		Dim origin_details As String = data_bulk_info.Get("origin_details")
		Dim origin_details_condition As String = data_bulk_info.Get("origin_details_condition")
		Dim field_group_checklist As String = data_bulk_info.Get("field_group_checklist")
		Dim field_group_chapter As String = data_bulk_info.Get("field_group_chapter")
		Dim is_object_relation As Int = data_bulk_info.Get("is_object_relation")
		Dim iField As Int = DBStructures.GetScriptColumnIntEVC($"select reference from type_inouttypes where tagcode='${affected_from}'"$, "reference")
		Dim gField As String = ""
		Dim WareHouseCode As String = ""
		Dim Obj_Tc As String = ""
		Dim sNewSQL As String = ""
		Dim ServerTempFileName As String = $"${tagcode}_exec.script"$
				
		If Utils.Int2Bool(is_object_relation) Then
			Obj_Tc = DBStructures.GetScriptColumnSTrEVC($"select object_tagcode from dta_requests where tagcode = '${tagcode}'"$,"object_tagcode")
		End If
					
		If iField = 1 Then
			gField = "dta_technicals"
		else If iField = 2 Then
			gField = "dta_departments"
		else If iField = 3 Then
			gField = "dta_teams"
		else If iField = 4 Then
			gField = "dta_objects"
		else If iField = 5 Then
			gField = "" 'Empresas
		else If iField = 6 Then
			gField = "dta_warehouses"
			If Utils.Int2Bool(is_object_relation) And Utils.NNE(Obj_Tc) Then
				WareHouseCode = DBStructures.GetScriptColumnStrEVC($"select tagcode from dta_warehouses where object_tagcode = '${Obj_Tc}'"$,"tagcode")
			Else
				WareHouseCode = related_to
			End If
			Dim sNewSQL As String = $"select x.title as article_title, x.tagcode as article_tagcode, x.*, e.* from (
							select  ifnull(b.title,'') as group_title, ifnull(c.tagdesc,'') as type_title, a.*, d.qtd as qtdw 
							from dta_articles as a
							left join dta_articles_groups as b on (b.tagcode=a.article_group)
							left join type_articlestypes as c on (c.tagcode=a.article_type)
							inner join dta_warehouses_articles as d on (d.article_tagcode=a.tagcode and
								d.warehouse_tagcode in ('${WareHouseCode}'))
							) As x
							, dta_requests_values As e
							inner join dta_tasks_items As f on (f.task_tagcode=e.task_tagcode
								And f.item_tagcode=e.item_tagcode
								And f.unique_key=e.unique_key)
							where 1=1
							And e.request_tagcode='${tagcode}'
							And e.task_tagcode in ('${CLA.Action.trim}')
							And f.`level`>0
							order by x.group_title, x.title"$
		else If iField = 8 Then
			gField = "dta_articles"
		else If iField = 9 Then
			gField = "aut_users"
		else If iField = 12 Then
			gField = "dta_equipments"
		else If iField = 14 Then
			gField  = "dta_objects"
		Else
			gField = "dta_articles"
		End If
										
		'SE A TABELA FOR ARMAZEM GROUP = ARMAZEM
		If (Utils.NNE(sNewSQL)) Then
			Dim rRecord As Cursor = Starter.LocalSQLEVC.ExecQuery(sNewSQL)
			If rRecord.RowCount > 0 Then
					
				Dim Chapter As String = ""
				Dim G_RItem As String = ""
				Dim G_RUniqueKey As String = ""
				Dim cntFieldVal04 As Int = -1
				Dim cntRepeatFieldCounter As Int = 0
				Dim cntRepeatItemCounter As Int = -1
				Dim cntPosicao As Int = 1
				Dim newRequest As String = CLA.Request.Trim
				Dim newTaskTC As String = CLA.Action.Trim
			
				For Row = 0 To rRecord.RowCount-1
					rRecord.Position = Row
					Dim Group As String = rRecord.GetString("group_title")
					Dim Qtd As Int = rRecord.GetInt("qtdw")
					Dim RRepeatcounter As Int = rRecord.GetInt("repeatcounter")
					Dim RObject As String = rRecord.GetString("article_tagcode")
					Dim RTitle As String = rRecord.GetString("article_title")
										
					Dim RItem As String = rRecord.GetString("item_tagcode")
					Dim RUniqueKey As String = rRecord.GetString("unique_key")
										
					Dim G_RItem As String = DBStructures.GetScriptColumnStrEVC($"select item_tagcode from dta_tasks_items where task_tagcode = '${newTaskTC}' and level=0 and components=2"$,"item_tagcode")
					Dim G_RUniqueKey As String = DBStructures.GetScriptColumnStrEVC($"select unique_key from dta_tasks_items where task_tagcode = '${newTaskTC}' and level=0 and components=2"$,"unique_key")
					
										
					' Validacao de capitulo
					If Not(Chapter=Group) Then ' Capitulo e diferente grupo
						cntRepeatItemCounter = cntRepeatItemCounter + 1
						If (Row = 0) Then
							Dim isUpdate As Int = 1
							Dim ss1 As String = $"update dta_requests_values set
																	execute_status=0,
																	execute_value='',
																	title='${Group}',
																	object_tagcode='',
																	position=1,
																	repeatfieldcounter=0,
																	repeatitemcounter=0
																	where 1=1
																	And request_tagcode='${newRequest}'
																	And task_tagcode in ('${newTaskTC}')
																	And item_tagcode='${G_RItem}'
																	And unique_key='${G_RUniqueKey}'
																	And repeatcounter=0
																	And repeatfieldcounter=0"$
							Utils.SaveSQLToLog("getTaskDetailsDialog",ss1, newRequest)
						Else
							Dim isUpdate As Int = 0
							Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests_values", "id", "") + 1 + 1000000
							Dim ss1 As String = $"insert into dta_requests_values (id, request_tagcode,inner_request_tagcode, task_tagcode,item_tagcode,unique_key,
																		tagcode,position,execute_value,execute_status,execute_format_title,title,object_tagcode,repeatfieldcounter,repeatitemcounter)
																		select ${maxID} as id, a.request_tagcode,a.inner_request_tagcode, a.task_tagcode, 
																		a.item_tagcode, a.unique_key, a.tagcode, 
																		1, '' as execute_value, 0 as execute_status, a.execute_format_title,'${Group}' as title,'' as object_tagcode,
																		${Row} as repeatfieldcounter,
																		${cntRepeatItemCounter} as repeatitemcounter
																		from dta_requests_values As a
																		where 1=1
																		And request_tagcode='${newRequest}'
																		And task_tagcode in ('${newTaskTC}')
																		And item_tagcode='${G_RItem}'
																		And unique_key='${G_RUniqueKey}'
																		And repeatcounter=0
																		And repeatfieldcounter=0 "$
							Utils.SaveSQLToLog("getTaskDetailsDialog",ss1, newRequest)
															
						End If
							
						cntFieldVal04 = cntFieldVal04 + 1
							
						Utils.SaveSQLToLog("getTaskDetailsDialog",ss1, newRequest)
							
						Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests_values_adds", "id", "") + 1 + 1000000
						Dim sSql1 As String = $"insert into dta_requests_values_adds (id, request_tagcode,inner_request_tagcode, task_tagcode,item_tagcode,unique_key,
									tagcode,fieldval_04,repeatfieldcounter,repeatitemcounter) values (${maxID}, '${newRequest}','${newTaskTC}', '${newTaskTC}', 
						'${G_RItem}', '${G_RUniqueKey}', '',${cntFieldVal04}, ${cntRepeatFieldCounter},${cntRepeatItemCounter})"$
						Utils.SaveSQLToLog("getTaskDetailsDialog",sSql1, newRequest)
							
						Chapter=Group
						cntPosicao = cntPosicao + 1
						
						'Dim ServerTempFileName As String = $"${tagcode}_exec.script"$
						Dim res1 As ResumableSub = updateServerUploadDataParamters(Group, "", "", newRequest, newTaskTC, _
																	G_RItem, G_RUniqueKey, 0,cntRepeatItemCounter, Row, cntFieldVal04, _
																	cntRepeatFieldCounter, 1, isUpdate, 0, 1, ServerTempFileName)
						Wait For(res1) Complete (Ended As Boolean)
	
						'Counter2=1
					End If
					' Validacao de registo
					If (Row = 0) Then
						Dim isUpdate As Int = 1
						Dim ss1 As String = $"update dta_requests_values set
									execute_status=1,
									execute_value='${Qtd}',
									title='${RTitle}',
									object_tagcode='${RObject}',
									position = 2,
									repeatfieldcounter=0,
									repeatitemcounter=0
									where 1=1
									And request_tagcode='${newRequest}'
									And task_tagcode in ('${newTaskTC}')
									And item_tagcode='${RItem}'
									And unique_key='${RUniqueKey}'
									And repeatcounter=${RRepeatcounter}
									and repeatfieldcounter=0 "$
						Utils.SaveSQLToLog("getTaskDetailsDialog",ss1, newRequest)
					Else
						Dim isUpdate As Int = 0
						Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests_values", "id", "") + 1 + 1000000
						Dim ss1 As String = $"insert into dta_requests_values (id, request_tagcode,inner_request_tagcode,
									task_tagcode,item_tagcode,unique_key,
									tagcode,position,execute_value,execute_status, execute_format_title,
									title,object_tagcode,repeatfieldcounter,repeatitemcounter)
									select ${maxID} as id, a.request_tagcode,a.inner_request_tagcode, a.task_tagcode, 
									a.item_tagcode, a.unique_key, a.tagcode, 
									2, '${Qtd}' as execute_value, 1 as execute_status, 
									a.execute_format_title,'${RTitle}' as title,'${RObject}' as object_tagcode,
									${Row} as repeatfieldcounter,
									${cntRepeatItemCounter} as repeatitemcounter
									from dta_requests_values As a
									where 1=1
									And request_tagcode='${newRequest}'
									And task_tagcode in ('${newTaskTC}')
									And item_tagcode='${RItem}'
									And unique_key='${RUniqueKey}'
									And repeatcounter=${RRepeatcounter}
									and repeatfieldcounter=0 "$
						Utils.SaveSQLToLog("getTaskDetailsDialog",ss1, newRequest)
	
					End If
					Utils.SaveSQLToLog("getTaskDetailsDialog",ss1, newRequest)
						
					Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests_values_adds", "id", "") + 1 + 1000000
							
					Dim sSql1 As String = $"insert into dta_requests_values_adds (id, request_tagcode,inner_request_tagcode, task_tagcode,item_tagcode,unique_key,
									tagcode,fieldval_04,repeatfieldcounter,repeatitemcounter) values (${maxID}, '${newRequest}','${newTaskTC}', '${newTaskTC}', 
					'${RItem}', '${RUniqueKey}', '',${cntFieldVal04}, ${cntRepeatFieldCounter},${cntRepeatItemCounter})"$
					Utils.SaveSQLToLog("getTaskDetailsDialog",sSql1, newRequest)
					
					Dim res1 As ResumableSub = updateServerUploadDataParamters(RTitle, RObject, Qtd, newRequest, newTaskTC, _
																	RItem, RUniqueKey, RRepeatcounter,cntRepeatItemCounter,Row, cntFieldVal04, _
																	cntRepeatFieldCounter, 0, isUpdate, 1, 2, ServerTempFileName)
					Wait For(res1) Complete (Ended As Boolean)
					
					cntRepeatFieldCounter = cntRepeatFieldCounter + 1
					cntPosicao = cntPosicao + 1
				Next
			End If
			rRecord.Close
		End If
	End If
	Sleep(250)
	Dim res2 As ResumableSub = updateServerUploadDataFileSet(ServerTempFileName)
	Wait For(res2) Complete (Ended As Boolean)
	Return True
End Sub


Sub updateServerUploadDataParamters(Title As String, RObject As String, Qtd As String, Request As String, Task As String, _
	RItem As String, RUniqueKey As String, RRepeatcounter As Int, IRepeatcounter As Int,Row As Int, FieldVal04 As Int, RRepeatFieldcounter As Int, _
	isChapter As Int, isUpdate As Int, Status As Int, Position As Int, ServerTempFileName As String) As ResumableSub
	
	Dim sACLADatetime As String = Utils.GetCurrDatetime
	Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
	Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
	
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLARequest", Request)
	params.Put("ACLAAction", Task)
	params.Put("ACLATask", Task)
	params.Put("ACLAItem", RItem)
	params.Put("ACLAUniqueKey", RUniqueKey)
	params.Put("ACLAValue", Qtd)
	params.Put("ACLAReqCounter", RRepeatcounter)
	params.Put("ACLARepeatItem", IRepeatcounter)
	If (Utils.Int2Bool(isChapter)) Then
		params.Put("ACLARepeatField", Row)
	Else
		params.Put("ACLARepeatField", RRepeatFieldcounter)
	End If
	params.Put("ACLAObject", RObject)
	params.Put("ACLATitle", Title)
	params.Put("ACLAFieldVal04", FieldVal04)
	params.Put("ACLAChapter", isChapter)
	params.Put("ACLAUpdate", isUpdate)
				
	params.Put("ACLADatetime", sACLADatetime)
	params.Put("ACLALatitude", sACLALatitude)
	params.Put("ACLALongitude", sACLALongitude)

	params.Put("ACLAStatus", Status)
	params.Put("ACLAPosition", Position)
	params.Put("ACLAFileNameTemp", ServerTempFileName)
	
					
	Dim ACLSessUser As String = ShareCode.SESS_OPER_User
	params.Put("ACLSessUser", ACLSessUser)
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/field/list/update"$
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then
			Dim GODR As ResumableSub = GetOfflineDataRec(1, Request.Trim,Task.trim,RItem.Trim)
			Wait For (GODR) Complete (HasResults As Boolean)
			If HasResults Then
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, Request.Trim,Task.trim,RItem.Trim)
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			Else
				Utils.CallApi(0, params, Me, Url, "", Request)
			End If
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, Request.Trim,Task.trim,RItem.Trim)
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(500)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, Request.Trim,Task.trim,RItem.Trim)
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If
	Return True
End Sub

Sub updateServerUploadDataFileSet(ServerTempFileName As String) As ResumableSub

	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("ACLAFileNameTemp", ServerTempFileName)
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
					
	Dim ACLSessUser As String = ShareCode.SESS_OPER_User
	params.Put("ACLSessUser", ACLSessUser)
		
	Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/field/list/runfile"$
	If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
			Utils.CallApi(0, params, Me, Url, "", "")
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(4, "","","")
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(250)
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(4, "","","")
		Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
	End If
	Return True
End Sub

Sub IconExtraInfo_Click

	Dim CurrBtn As Button = Sender
	If Utils.NNE(CurrBtn.Tag) Then
		Dim CurrExtTag As ExtraInfo = CurrBtn.Tag
		
		Dim Curr_ITC As String = CurrExtTag.item_tagcode
		Dim Curr_TxtExtraInfo As String = CurrExtTag.textoInfo
		Dim Curr_rc As Int = CurrExtTag.rc
		Dim Curr_ric As Int = CurrExtTag.ric
		Dim Curr_rfc As Int = CurrExtTag.rfc
		Dim InformacaoExtra As String = CurrExtTag.titleinfo
		
				Dim resultado As String = ""
		Dim sf As Object = ApplDialog.ShowAsync(InformacaoExtra, "Ok", "", "", Null, False)
		Utils.SetDialogColors(sf, Consts.ColorWhite, Consts.ColorGray, 3, 5)
	
		If Not(ShareCode.ISPHONE) Then
			ApplDialog.SetSize(60%x, 50%y)
		Else
			ApplDialog.SetSize(70%x, 50%y)
		End If
		
		Wait For (sf) Dialog_Ready(pnl As Panel)
		pnl.LoadLayout("dialog_extraInfo")
		dialogo_texto_extraInfo.Text = Curr_TxtExtraInfo
		Wait For (sf) Dialog_Result(res As Int)
		If res = DialogResponse.POSITIVE Then
		End If
	End If
	
End Sub


'*******************************************************************************************************************
'TIP: CRIAÇÃO DE INTERVENÇÃO/CHECKLIST POR PARAMETROS DE TYPEREQUEST_TASKS_ADDS
'	  	NOTA #003
'*******************************************************************************************************************
Sub CheckTypeRequestTaskParamters4(request_tagcode As String, task_tagcode As String, typerequest As String, object_tagcode As String, whento As Int, globalcode As String)  As ResumableSub
	Dim boolvalue As Boolean = False
	If (Utils.NNE(typerequest) And Utils.NNE(task_tagcode)) Then
		
		Dim paramters As Map = DBStructures.GetScriptColumnStrEVCJSONMAP( _
										$"select distinct paramters 
										from dta_typerequests_tasks_adds where 1=1
										And typerequest_tagcode='${typerequest.trim}'
										And task_tagcode='${task_tagcode.trim}'"$, "paramters")
	
		Dim status_id As Int = DBStructures.GetScriptColumnIntEVC($"select status_id from dta_requests where 1=1 and tagcode='${request_tagcode}'"$, "status_id")
		If (paramters.Size > 0) Then
			Try
				Dim create_additional_task As Int = paramters.Get("create_additional_task")
			Catch
				Dim create_additional_task As Int = 0
			End Try
			
			If Utils.Int2Bool(create_additional_task) Then
				Dim create_additional_settings As List = paramters.Get("create_additional_settings")
				For Each params As Map In create_additional_settings
					
					Dim whentocreate As Int = params.Get("whentocreate")
					Dim is_child_task As Int = params.Get("is_child_task")
					Dim dependent_request As Int = params.Get("dependent_request")
					
					Dim condition_based As Int = params.Get("condition_based")
					Dim condition_based_formula As String = params.Get("condition_based_formula")
					Dim condition_based_script As String = params.Get("condition_based_script")
					
					Dim typerequest_tagcode As String = params.Get("typerequest_tagcode")
					Dim checklist_tagcode As String = params.Get("checklist_tagcode")
					
					Dim global_code_based As Int = params.Get("global_code_based")
					Dim global_code_from As Int = params.Get("global_code_from")
					Dim global_code As String = params.Get("global_code")
					
					Dim MainDataScript As String = ""
					If (whento=whentocreate) Then
						boolvalue = True
						
						If (Utils.Int2Bool(is_child_task)) Then
							If (Utils.NNE(checklist_tagcode)) Then
								MainDataScript = $"select tagcode from dta_tasks where 1=1 and tagcode='${checklist_tagcode.Trim}'"$
							End If
						Else
							If (Utils.NNE(typerequest_tagcode)) Then
								MainDataScript = $"select tagcode from dta_typerequests where 1=1 and tagcode='${typerequest_tagcode.Trim}'"$
							End If
						End If
						
						If (condition_based>0) Then
							Dim  CondReturnTrue As Boolean = (condition_based=1) Or (condition_based=3)
							If (condition_based>=3) Then
								Dim gScript As String = condition_based_script
								
								gScript = gScript.Replace("«", "'")
								gScript = gScript.Replace($":REQUEST"$,request_tagcode.Trim)
								gScript = gScript.Replace($":TASK"$,task_tagcode.Trim)
								gScript = gScript.Replace($":OBJECT"$,object_tagcode.Trim)
								gScript = gScript.Replace($":TYPEREQUEST"$,typerequest.Trim)
								gScript = gScript.Replace($":CLIENTDB."$, "")
								
								Dim gScriptRetValue As String = DBStructures.GetScriptColumnStrEVC(gScript, "RESULT")
								condition_based_formula = condition_based_formula.Replace($"[__SCRIPT__]"$,gScriptRetValue.Trim)
							End If
							
							Dim gFormula As String = condition_based_formula
							gFormula = gFormula.Replace($"[REQUEST]"$,request_tagcode.Trim)
							gFormula = gFormula.Replace($"[TASK]"$,task_tagcode.Trim)
							gFormula = gFormula.Replace($"[OBJECT]"$,object_tagcode.Trim)
							gFormula = gFormula.Replace($"[TYPEREQUEST]"$,typerequest.Trim)
							gFormula = gFormula.Replace($"[STATUSID]"$,$"${status_id}"$)
							
							boolvalue = CondReturnTrue And Utils.Test4TrueOnlyValues(gFormula)
						End If
						
						Dim hasParam As Boolean = False
						
						If Utils.Int2Bool(global_code_based) Then
							'************************************************************************************
							' NOTE: VERIFICA SE EXISTEM CL A CRIAR COM BASE NA VERIFICAÇÃO DA FLAG GLOBAL_CODE
							'************************************************************************************
							'0-Identificado em "global_code", 1-Tipo de Intervenção, 2-Checklist, 3-Tipo de Objecto, 4-Armazém, 5-Artigo
							
							Dim localGlobalCode As String = ""
							If (global_code_from>0) Then
								If (global_code_from=1) Then
									localGlobalCode = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnStrEVCJSON($"select distinct paramters from dta_typerequests 
											where tagcode='${typerequest.Trim}'"$, "paramters", "global_code"), "")	
								Else if (global_code_from=2) Then
									localGlobalCode = DBStructures.GetScriptColumnStrEVC($"Select ifnull(reference, '') as valor
										from dta_tasks_adds where 1=1
										And tagcode='${task_tagcode.trim}'"$, "valor")
								Else if (global_code_from=3) Then
									localGlobalCode = DBStructures.GetScriptColumnStrEVC($"Select ifnull(reference, '') as valor
										from dta_objecttypes_groups where 1=1
										And tagcode in (Select object_group 
										from dta_objects where tagcode='${object_tagcode.trim}') limit 1"$, "valor")
								Else if (global_code_from=4) Then
									localGlobalCode = Utils.IfNullOrEmpty( _
										DBStructures.GetScriptColumnStrEVCJSON($"select distinct paramters from dta_warehouses_adds 
											where warehouse_tagcode in (select tagcode from dta_warehouses
											where 1=1
											and (object_tagcode='${object_tagcode.Trim}')) limit 1"$, "paramters", "global_code"), "")	
								Else if (global_code_from=5) Then
									localGlobalCode = DBStructures.GetScriptColumnStrEVC($"Select ifnull(taggedcode, '') as valor
										from dta_articles_adds where 1=1
										And article_tagcode='${object_tagcode.trim}'"$, "valor")
								End If
							Else
								If Utils.NNE(global_code) Then
									localGlobalCode = global_code
								End If
							End If
	
							If Utils.NNE(localGlobalCode) And Utils.NE(globalcode) Then
								globalcode = localGlobalCode
							End If
							
							If (Utils.Int2Bool(is_child_task)) Then
								MainDataScript = $"select tagcode from dta_tasks where 1=1"$
								If (Utils.NNE(checklist_tagcode)) Then
									MainDataScript = $"${MainDataScript} and tagcode='${checklist_tagcode.Trim}'"$
									hasParam = True
								else If (Utils.NNE(globalcode)) Then
									Dim TgLista As List = Regex.Split("\|", globalcode)
									Dim ssQLL As String = Utils.StrList2SQLArray(TgLista)
									
'									''MainDataScript = $"${MainDataScript} and tagcode in (select distinct tagcode from dta_tasks_adds where reference='${globalcode.Trim}')"$
'									'MainDataScript = $"${MainDataScript} and tagcode in (select distinct tagcode from dta_tasks_adds 
'									'				where 1=1 and '${globalcode.Trim}' like '%'||reference||'%')"$
													
									MainDataScript = $"${MainDataScript} and tagcode in (select distinct tagcode from dta_tasks_adds
													where 1=1 and reference in ${ssQLL})"$
									hasParam = True
								End If
							Else
								'typerequest_tagcode
								MainDataScript = $"select tagcode from dta_typerequests where 1=1"$
								If (Utils.NNE(typerequest_tagcode)) Then
									MainDataScript = $"${MainDataScript} and tagcode='${typerequest_tagcode.Trim}'"$
									hasParam = True
								else If (Utils.NNE(globalcode)) Then
									MainDataScript = $"${MainDataScript} and paramters like '%global_code":"${globalcode.Trim}"%' limit 1"$
									hasParam = True
								End If
							End If
						Else
							hasParam = True
						End If
						
						boolvalue = boolvalue And Utils.NNE(MainDataScript) And hasParam
						
						Log(MainDataScript)
						'boolvalue = False
						
						If (boolvalue) Then
							Dim GetReqData As ResultSet = Starter.LocalSQLEVC.ExecQuery(MainDataScript)
							Do While GetReqData.NextRow
								Dim vtagcode As String = GetReqData.GetString("tagcode")
								Log(vtagcode)
								If (Utils.Int2Bool(is_child_task)) Then
									Dim res As ResumableSub = CallCreateNewChecklistToRequest(request_tagcode, vtagcode)
									Wait For (res) Complete (Finished As Boolean)
								Else
									Dim res As ResumableSub = CallCreateNewRequest(request_tagcode, vtagcode, dependent_request)
									Wait For (res) Complete (Finished As Boolean)
								End If
							Loop
							
						End If
						
					End If
				Next

			End If
		
		End If
	End If


	Return boolvalue
End Sub

Sub CallCreateNewRequest(request_tagcode As String, newRequestType  As String, dependente As Int) As ResumableSub
	Dim resValue As Boolean = False
	ProgressDialogShow(ShareCode.AvisoPrepararChecklist)
	Try
		Dim newRequestItem As Map
		newRequestItem.Initialize

		If Utils.NNE(newRequestType) Then
			Dim Entidade As String = "__NONE__"
			Dim Objecto As String= "__NONE__"
			Dim Tecnico As String = ShareCode.SESS_OPER_User
			Dim Equipa As String = ""
			Dim Veiculo As String = ShareCode.SESS_VEHICLE_OBJECT
			Dim PedidoDependente As String = ""  'dependent_request
			
			Dim cScript As String = $"select * from dta_requests where tagcode='${request_tagcode.Trim}'"$
			Dim ResData As ResultSet = Starter.LocalSQLEVC.ExecQuery(cScript)
			Do While ResData.NextRow
				Dim Entidade As String = ResData.GetString("entity_tagcode")
				Dim Objecto As String= ResData.GetString("object_tagcode")
				Dim Equipa As String = ResData.GetString("team_tagcode")
				If Utils.Int2Bool(dependente) Then
					Dim PedidoDependente As String = ResData.GetString("tagcode")
				End If
				Exit
			Loop
			resValue = True
			'Dim status_id As Int = DBStructures.GetScriptColumnIntEVC($"select status_id from dta_requests where 1=1 and tagcode='${request_tagcode}'"$, "status_id")
	
			Dim newRequest As String = Utils.MakeRequestTagcode
			Dim newDate As String = Utils.GetCurrentDate
			Dim newTime As String = Utils.GetCurrentTimeExt
			Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests", "id", "") + 1 + 1000000
			' CRIA UMA INTERVENÇÃO
			Dim newExecution As Map
			newExecution.Initialize
			newExecution.Put("id", maxID)
			newExecution.Put("tagcode", newRequest)
			newExecution.Put("route_tagcode", "ROUTE__NONE__")
			newExecution.Put("is_child", 0)
			newExecution.Put("prerequest", "")
			newExecution.Put("status_id", 1)
			newExecution.Put("state_id", 4)
			newExecution.Put("req_date", newDate)
			newExecution.Put("req_time", newTime)
			newExecution.Put("execdate_type", 0)
			newExecution.Put("dayweekmonth", 0)
			newExecution.Put("execute_date", newDate)
			newExecution.Put("execute_start", newTime)
			newExecution.Put("execute_end", newTime)
			newExecution.Put("origin_tagcode", "TORI_INTERNAL")
			newExecution.Put("entity_tagcode", Entidade)
			newExecution.Put("object_tagcode", Objecto)
			newExecution.Put("technical_tagcode", Tecnico)
			newExecution.Put("team_tagcode", Equipa)
			newExecution.Put("local_tagcode", "")
			newExecution.Put("typerequest_tagcode", newRequestType)
			newExecution.Put("vehicle_tagcode", Veiculo)
			newExecution.Put("dependent_request", PedidoDependente)
			newExecution.Put("confirmed", 1)
			newExecution.Put("active", 1)
			Dim ListOfMaps As List
			ListOfMaps.Initialize
			ListOfMaps.Add(newExecution)
			newRequestItem.Put("request", ListOfMaps)
'			DBUtils.InsertMaps(Starter.LocalSQLEVC, "dta_requests", ListOfMaps)
			Utils.InsertMapsWithLog(Starter.LocalSQLEVC, 1, "dta_requests", ListOfMaps,newRequest,"")
		
			
			Dim newRequestItem2 As Map
			newRequestItem2.Initialize
			
			Dim cScript As String = $"Select a.task_tagcode, a.allowed from dta_typerequests_tasks As a
					left join dta_typerequests_tasks_adds As b on (b.typerequest_tagcode=a.typerequest_tagcode
						And b.task_tagcode=a.task_tagcode)
					where a.typerequest_tagcode='${newRequestType.Trim}'
					order by b.cl_is_father desc, a.position"$
			Dim ResData As ResultSet = Starter.LocalSQLEVC.ExecQuery(cScript)
			Dim n As Int = 0
			Do While ResData.NextRow
				Dim tagcode As String = ResData.GetString("task_tagcode")

'				Dim cl_is_father As Int = DBStructures.GetScriptColumnIntEVC($"select cl_is_father from dta_typerequests_tasks_adds
'											where typerequest_tagcode='${newRequestType.Trim}'
'											And task_tagcode='${tagcode.Trim}'"$, _
'											"cl_is_father")
				Dim repeatcounter As Int = DBStructures.GetCountOfEVC("dta_requests_relations", $" and request_tagcode='${newRequest}' and relation_tagcode='${tagcode}'"$)
			
				Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests_relations", "id", "") + 1 + 1000000
				Dim newExecution As Map
				newExecution.Initialize
				newExecution.Put("id", maxID)
				newExecution.Put("request_tagcode", newRequest)
				newExecution.Put("relation_tagcode", tagcode)
				newExecution.Put("inner_title", "")
				newExecution.Put("position", 0)
				newExecution.Put("type_relation", 0)
				newExecution.Put("status_id", 1)
				newExecution.Put("excel_import", 0)
				newExecution.Put("imported", 0)
				newExecution.Put("import_tagcode", "")
				newExecution.Put("object_tagcode", "__NONE__")
				newExecution.Put("execute_date", newDate)
				newExecution.Put("execute_start", newTime)
				newExecution.Put("execute_end", newTime)
				newExecution.Put("repeatcounter", repeatcounter)
				newExecution.Put("active", 1)
				Dim ListOfMaps As List
				ListOfMaps.Initialize
				ListOfMaps.Add(newExecution)
				newRequestItem2.Put($"${n}"$, ListOfMaps)
'				DBUtils.InsertMaps(Starter.LocalSQLEVC, "dta_requests_relations", ListOfMaps)
				Utils.InsertMapsWithLog(Starter.LocalSQLEVC, 2, "dta_requests_relations", ListOfMaps,newRequest,"")
				n = n + 1
			Loop
			newRequestItem.Put("relation", newRequestItem2)
			
			Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests_values", "id", "") + 1 + 1000000
		
			Dim sSQL As String = $"insert into dta_requests_values (id, request_tagcode,inner_request_tagcode, task_tagcode,item_tagcode,unique_key,
				tagcode,position,execute_value,execute_format_title,
				confirmed,changed_value,cbr_id)
				select ${maxID} as id, x.request_tagcode, x.inner_request_tagcode, x.task_tagcode, 
				x.item_tagcode, x.unique_key, x.tagcode, x.position, 
				x.execute_value, x.execute_format_title, 
				x.confirmed, x.changed_value, 0 As cbr_id
				from (Select d.id, a.request_tagcode, b.tagcode As inner_request_tagcode, a.relation_tagcode As task_tagcode, 
				c.item_tagcode, c.unique_key, d.tagcode As tagcode, ifnull(d.position, c.position) As position, 
				a.position As relposition, '' as execute_value, 
				Case when d.data_type=16 Then d.title Else '' end as execute_format_title,
				0 as confirmed, '' as changed_value
				from dta_requests_relations As a
				inner join dta_tasks As b on (b.tagcode=a.relation_tagcode)
				inner join dta_tasks_items as c on (c.task_tagcode=a.relation_tagcode)
				left join dta_tasks_items_answers as d on (d.parent_tagcode=c.unique_key)
				where a.type_relation=0 and a.request_tagcode='${newRequest}'
				union
				select d.id, '${newRequest}' as request_tagcode, a.request_tagcode as inner_request_tagcode, a.relation_tagcode as task_tagcode, 
				c.item_tagcode, c.unique_key, d.tagcode as tagcode, ifnull(d.position, c.position) As position,
				a.position as relposition, '' as execute_value, 
				Case when d.data_type=16 Then d.title Else '' end as execute_format_title,
				0 as confirmed, '' as changed_value
				from dta_requests_relations as a
				inner join dta_tasks as b on (b.tagcode=a.relation_tagcode)
				inner join dta_tasks_items as c on (c.task_tagcode=a.relation_tagcode)
				left join dta_tasks_items_answers as d on (d.parent_tagcode=c.unique_key)
				where a.type_relation=0 and a.request_tagcode in (select relation_tagcode 
				from dta_requests_relations where request_tagcode ='${newRequest}')) as x
				order by  x.relposition, x.position, x.request_tagcode, x.task_tagcode, x.id"$

			Utils.SaveSQLToLog("getTaskDetailsDialog",sSQL, newRequest)
			Dim stage As Int = 0
			Dim resfields As ResumableSub = createRequestFields(newRequest, newRequestType)
			Wait For(resfields) Complete (resfieldsOk As Boolean)
		
			Dim resa1 As ResumableSub = createRequestEntityRelation(newRequest, "")
			Wait For(resa1) Complete (resfieldsOk1 As Boolean)
		
			Dim resa2 As ResumableSub = createRequestObjectRelation(newRequest, "")
			Wait For(resa2) Complete (resfieldsOk2 As Boolean)
			
			Dim res As ResumableSub = UploadNewRequest2Server2(newRequest, newRequestItem, "1", stage)
			Wait For(res) Complete (NewRequestCode As CreateRequestReturn)
		Else
			MsgboxAsync(ShareCode.AppDialogsNaoVerificadoTipoIntervencao, ShareCode.GeneralAlertTitle)
		End If
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	ProgressDialogHide
	Return resValue
End Sub

Sub CallCreateNewChecklistToRequest(request_tagcode As String, newRequestType  As String) As ResumableSub
	Dim resValue As Boolean = False
	ProgressDialogShow(ShareCode.AvisoPrepararChecklist)
	Try
		Dim newRequestItem As Map
		newRequestItem.Initialize

		If Utils.NNE(newRequestType) Then
			
			resValue = True
			'Dim status_id As Int = DBStructures.GetScriptColumnIntEVC($"select status_id from dta_requests where 1=1 and tagcode='${request_tagcode}'"$, "status_id")
	
			Dim newRequest As String = request_tagcode
			Dim newDate As String = Utils.GetCurrentDate
			Dim newTime As String = Utils.GetCurrentTimeExt
			
			Dim newRequestItem2 As Map
			newRequestItem2.Initialize
			

			Dim tagcode As String = newRequestType
			Dim repeatcounter As Int = DBStructures.GetCountOfEVC("dta_requests_relations", $" and request_tagcode='${newRequest}' and relation_tagcode='${tagcode}'"$)
		
			Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests_relations", "id", "") + 1 + 1000000
			Dim newExecution As Map
			newExecution.Initialize
			newExecution.Put("id", maxID)
			newExecution.Put("request_tagcode", newRequest)
			newExecution.Put("relation_tagcode", tagcode)
			newExecution.Put("inner_title", "")
			newExecution.Put("position", 0)
			newExecution.Put("type_relation", 0)
			newExecution.Put("status_id", 1)
			newExecution.Put("excel_import", 0)
			newExecution.Put("imported", 0)
			newExecution.Put("import_tagcode", "")
			newExecution.Put("object_tagcode", "__NONE__")
			newExecution.Put("execute_date", newDate)
			newExecution.Put("execute_start", newTime)
			newExecution.Put("execute_end", newTime)
			newExecution.Put("repeatcounter", repeatcounter)
			newExecution.Put("active", 1)
			Dim ListOfMaps As List
			ListOfMaps.Initialize
			ListOfMaps.Add(newExecution)
			newRequestItem2.Put($"0"$, ListOfMaps)
			Utils.InsertMapsWithLog(Starter.LocalSQLEVC, 2, "dta_requests_relations", ListOfMaps,newRequest,"")
			newRequestItem.Put("relation", newRequestItem2)
			
			Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests_values", "id", "") + 1 + 1000000
		
'			Dim sSQL As String = $"insert into dta_requests_values (id, request_tagcode,inner_request_tagcode, task_tagcode,item_tagcode,unique_key,
'				tagcode,position,execute_value,execute_format_title,
'				confirmed,changed_value,cbr_id)
'				select ${maxID} as id, x.request_tagcode, x.inner_request_tagcode, x.task_tagcode, 
'				x.item_tagcode, x.unique_key, x.tagcode, x.position, 
'				x.execute_value, x.execute_format_title, 
'				x.confirmed, x.changed_value, 0 As cbr_id
'				from (Select d.id, a.request_tagcode, b.tagcode As inner_request_tagcode, a.relation_tagcode As task_tagcode, 
'				c.item_tagcode, c.unique_key, d.tagcode As tagcode, ifnull(d.position, c.position) As position, 
'				a.position As relposition, '' as execute_value, 
'				Case when d.data_type=16 Then d.title Else '' end as execute_format_title,
'				0 as confirmed, '' as changed_value
'				from dta_requests_relations As a
'				inner join dta_tasks As b on (b.tagcode=a.relation_tagcode)
'				inner join dta_tasks_items as c on (c.task_tagcode=a.relation_tagcode)
'				left join dta_tasks_items_answers as d on (d.parent_tagcode=c.unique_key)
'				where a.type_relation=0 and a.request_tagcode='${newRequest}'
'				union
'				select d.id, '${newRequest}' as request_tagcode, a.request_tagcode as inner_request_tagcode, a.relation_tagcode as task_tagcode, 
'				c.item_tagcode, c.unique_key, d.tagcode as tagcode, ifnull(d.position, c.position) As position,
'				a.position as relposition, '' as execute_value, 
'				Case when d.data_type=16 Then d.title Else '' end as execute_format_title,
'				0 as confirmed, '' as changed_value
'				from dta_requests_relations as a
'				inner join dta_tasks as b on (b.tagcode=a.relation_tagcode)
'				inner join dta_tasks_items as c on (c.task_tagcode=a.relation_tagcode)
'				left join dta_tasks_items_answers as d on (d.parent_tagcode=c.unique_key)
'				where a.type_relation=0 and a.request_tagcode in (select relation_tagcode 
'				from dta_requests_relations where request_tagcode ='${newRequest}')) as x
'				order by  x.relposition, x.position, x.request_tagcode, x.task_tagcode, x.id"$
				
			Dim sSQL As String = $"insert into dta_requests_values (id, request_tagcode,inner_request_tagcode, task_tagcode,item_tagcode,unique_key,
									tagcode,position,execute_value,execute_format_title,
									confirmed,changed_value,cbr_id, repeatcounter)
									select ${maxID} as id, x.request_tagcode, x.inner_request_tagcode, x.task_tagcode,
									x.item_tagcode, x.unique_key, x.tagcode, x.position,
									x.execute_value, x.execute_format_title,
									x.confirmed, x.changed_value, 0 As cbr_id, ${repeatcounter}
									from (Select d.id, a.request_tagcode, b.tagcode As inner_request_tagcode, a.relation_tagcode As task_tagcode,
									c.item_tagcode, c.unique_key, d.tagcode As tagcode, ifnull(d.position, c.position) As position,
									a.position As relposition, '' as execute_value,
									Case when d.data_type=16 Then d.title Else '' end as execute_format_title,
									0 As confirmed, '' as changed_value
									from dta_requests_relations As a
									inner join dta_tasks As b on (b.tagcode=a.relation_tagcode)
									inner join dta_tasks_items As c on (c.task_tagcode=a.relation_tagcode)
									left join dta_tasks_items_answers As d on (d.parent_tagcode=c.unique_key)
									where a.type_relation=0 And a.request_tagcode='${newRequest}' and a.relation_tagcode='${tagcode.trim}'
									) As x
									order by x.relposition, x.position, x.request_tagcode, x.task_tagcode, x.id"$

			Utils.SaveSQLToLog("getTaskDetailsDialog",sSQL, newRequest)
			Dim stage As Int = 2
			
			Dim res As ResumableSub = UploadNewRequest2Server2(newRequest, newRequestItem, "1", stage)
			Wait For(res) Complete (NewRequestCode As CreateRequestReturn)
		Else
			MsgboxAsync(ShareCode.AppDialogsNaoVerificadoTipoIntervencao, ShareCode.GeneralAlertTitle)
		End If
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
	End Try
	ProgressDialogHide
	Return resValue
End Sub

Sub createRequestFields(newRequest As String, newRequestType As String) As ResumableSub
	If (Utils.NNE(newRequest) And Utils.NNE(newRequestType)) Then
		Dim SQL1 As String = $"select distinct field_tagcode from dta_typerequests_fields
								where typerequest_tagcode='${newRequestType}'"$
								
		Dim ResData As ResultSet = Starter.LocalSQLEVC.ExecQuery(SQL1)
		Do While ResData.NextRow
			Dim sfield As String = ResData.GetString("field_tagcode")
			Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests_fields", "id", "") + 1 + 1000000
			Dim sSQL As String = $"insert into dta_requests_fields (id, request_tagcode, field_tagcode)
								values ('${maxID}', '${newRequest}', '${sfield}');"$
			Utils.SaveSQLToLog("createRequestFields",sSQL, newRequest)
		Loop
		ResData.Close
								
	End If
	Return True
End Sub

Sub createRequestObjectRelation(newRequest As String, newObject As String) As ResumableSub
	If (Utils.NNE(newRequest) And Utils.NNE(newObject)) Then
		Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests_objects", "id", "") + 1 + 1000000
		Dim sSQL As String = $"insert into dta_requests_objects (id, request_tagcode, object_tagcode, ismaster)
								values ('${maxID}', '${newRequest}', '${newObject}', 1);"$
		Utils.SaveSQLToLog("createRequestObjectRelation",sSQL, newRequest)
	End If
	Return True
End Sub

Sub createRequestEntityRelation(newRequest As String, newObject As String) As ResumableSub
	If (Utils.NNE(newRequest) And Utils.NNE(newObject)) Then
		Dim maxID As Int = DBStructures.GetMaxOfEVC("dta_requests_entities", "id", "") + 1 + 1000000
		Dim sSQL As String = $"insert into dta_requests_entities (id, request_tagcode, entity_tagcode, ismaster)
								values ('${maxID}', '${newRequest}', '${newObject}', 1);"$
		Utils.SaveSQLToLog("createRequestEntityRelation",sSQL, newRequest)
	End If
	Return True
End Sub

Sub UploadNewRequest2Server2(tagcode As String, items As Map, origin As String, stage As Int) As ResumableSub
	Dim RetValue As CreateRequestReturn = Types.MakeCreateRequestReturnClear
	Dim ListOfMaps As List
	ListOfMaps.Initialize
	ListOfMaps.Add(items)
	
	Dim params As Map
	params.Initialize
	params.Clear
	params.Put("authorization", ShareCode.APP_Authorization)
	params.Put("_token", ShareCode.APP_TOKEN)
	params.Put("_user", ShareCode.SESS_User)
	params.Put("_tagcode", tagcode)
	params.Put("origin", origin)
	params.Put("data", ListOfMaps)
	params.Put("versionTagcode", Main.VersionTagcode)
	params.Put("_authorization", Main.DeviceAuthorization)
	params.Put("_instance", Main.DeviceInstance)
	params.put("_deviceBrand", Main.DeviceBrand)
	params.put("_deviceModel", Main.DeviceModel)
	params.put("_deviceMacAddress", Main.DeviceMacAddress)
	params.Put("_user", ShareCode.SESS_User)
	params.Put("stageCheck", stage)
	
	Dim JSON As JSONGenerator
	JSON.Initialize(params)
	Dim data As String =   JSON.ToPrettyString(1)
	
	Dim ServerAddress As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/upload/request/new"$
	If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
		Dim Job As HttpJob
		Job.Initialize("",Me)
		Job.PostString(ServerAddress, data)
		Job.GetRequest.SetContentType("application/json")
		Wait For (Job) JobDone(Job As HttpJob)
		If Job.Success Then
			Log(Job.GetString)
			
			Dim JSON1 As JSONParser
			JSON1.Initialize(Job.GetString)
			Dim MapJSON As Map = JSON1.NextObject
			RetValue.RequestTagcode = Utils.IfNullOrEmpty(MapJSON.Get("newrequest"), "")
			RetValue.Status = Utils.IfNullOrEmptyInt(MapJSON.Get("status"), 0)
			RetValue.Stage = Utils.IfNullOrEmptyInt(MapJSON.Get("stage"), 0)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, tagcode.trim,"","")
			Utils.save2update(ServerAddress, data, 0, WorkerND)
		End If
		Job.Release
	Else
		Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, tagcode.trim,"","")
		Utils.save2update(ServerAddress, data, 0, WorkerND)
	End If

	Return RetValue
End Sub

' **********************************************************************
' TIP: EVENTO TRIGGER DE RECOLHA DE CONTADOR PARA O ITEM EM QUESTÃO
' 		NOTA: #004
' **********************************************************************
Sub CLAIGetSetExternalCounter(task_tagcode As String, item_tagcode As String, item_value As String, evt As CLAIEvent) As ResumableSub
	Dim RetornaRes As Int = 0
	If (Utils.NNE(item_tagcode)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
			Dim params As Map
			params.Initialize
			params.Clear
			params.Put("_token", ShareCode.APP_TOKEN)
			params.Put("ACLAItem",item_tagcode.trim)
			params.Put("ACLATask",task_tagcode.trim)
			params.Put("ACLAValue",item_value.trim)
			params.Put("ACLADataHora", Utils.GetCurrDatetime)
			params.Put("ACLAUser", ShareCode.SESS_OPER_User)
			params.Put("versionTagcode", Main.VersionTagcode)
			params.Put("_authorization", Main.DeviceAuthorization)
			params.Put("_instance", Main.DeviceInstance)
			params.put("_deviceBrand", Main.DeviceBrand)
			params.put("_deviceModel", Main.DeviceModel)
			params.put("_deviceMacAddress", Main.DeviceMacAddress)
			params.Put("_user", ShareCode.SESS_User)
			Dim request_url As String = "orion/clai/item/getset/counter"
			Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/${request_url}"$
			Dim data As String
			Try
				Dim JSON As JSONGenerator
				JSON.Initialize(params)
							
				data =   JSON.ToPrettyString(1)
				Dim Job As HttpJob
				Job.Initialize("",Me)
				Dim addr As String = Url
								
				Job.PostString(addr, data )
				Job.GetRequest.Timeout=40000
				Job.GetRequest.SetContentType("application/json")

				Wait For (Job) JobDone(Job As HttpJob)
				If Job.Success Then
					Log(Job.GetString)
					Dim m As Map =  Utils.JobAPIMAP(Job)
					Log(m)
					Dim status As Int = m.Get("status")
					If (status = 1) Then
						RetornaRes = m.Get("counter")
					End If
				End If
				Job.Release
			Catch
				Dim theData As String = $"${LastException}, ${data}"$
				MsgboxAsync(theData, ShareCode.GeneralErrorTitle)
			End Try
		End If
		
	End If
	Return RetornaRes
End Sub

Sub CLAIGetSetExternalCounterOther(task_tagcode As String, item_tagcode As String, item_value As String, other As String, evt As CLAIEvent) As ResumableSub
	Dim RetornaRes As Int = 0
	If (Utils.NNE(item_tagcode)) Then
		If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
			Dim params As Map
			params.Initialize
			params.Clear
			params.Put("_token", ShareCode.APP_TOKEN)
			params.Put("ACLAItem",item_tagcode.trim)
			params.Put("ACLATask",task_tagcode.trim)
			params.Put("ACLAValue",item_value.trim)
			params.Put("ACLAOther",other.trim)
			params.Put("ACLADataHora", Utils.GetCurrDatetime)
			params.Put("ACLAUser", ShareCode.SESS_OPER_User)
			params.Put("versionTagcode", Main.VersionTagcode)
			params.Put("_authorization", Main.DeviceAuthorization)
			params.Put("_instance", Main.DeviceInstance)
			params.put("_deviceBrand", Main.DeviceBrand)
			params.put("_deviceModel", Main.DeviceModel)
			params.put("_deviceMacAddress", Main.DeviceMacAddress)
			params.Put("_user", ShareCode.SESS_User)
			Dim request_url As String = "orion/clai/item/getset/other/counter"
			Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/${request_url}"$
			Dim data As String
			Try
				Dim JSON As JSONGenerator
				JSON.Initialize(params)
							
				data =   JSON.ToPrettyString(1)
				Dim Job As HttpJob
				Job.Initialize("",Me)
				Dim addr As String = Url
								
				Job.PostString(addr, data )
				Job.GetRequest.Timeout=40000
				Job.GetRequest.SetContentType("application/json")

				Wait For (Job) JobDone(Job As HttpJob)
				If Job.Success Then
					Log(Job.GetString)
					Dim m As Map =  Utils.JobAPIMAP(Job)
					Log(m)
					Dim status As Int = m.Get("status")
					If (status = 1) Then
						RetornaRes = m.Get("counter")
					End If
				End If
				Job.Release
			Catch
				Dim theData As String = $"${LastException}, ${data}"$
				MsgboxAsync(theData, ShareCode.GeneralErrorTitle)
			End Try
		End If
		
	End If
	Return RetornaRes
End Sub

Sub CLAIItemUpdate(request_tagcode As String, task_tagcode As String, item_tagcode As String, uniquekey As String, tagcode As String, _
				repeatcounter As Int, repeatitemcounter As Int, repeatfieldcounter As Int, valor As String) As ResumableSub
	Dim RetStatus As Boolean = True		
	PressedAnswerTagCode = tagcode
	Dim SetInner As Int = 0
	Dim status As Int = 1
	Dim sACLADatetime As String = Utils.GetCurrDatetime
	Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
	Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")

	Dim sSQL As String = $"update dta_requests_values set execute_value='${valor}',
				execute_status='${status}', 
				execute_datetime='${sACLADatetime}', 
				execute_latitude='${sACLALatitude}', 
				execute_longitude='${sACLALongitude}'
				where request_tagcode='${request_tagcode.trim}' and
				task_tagcode='${task_tagcode.trim}' and item_tagcode='${item_tagcode.trim}' and 
				unique_key='${uniquekey.trim}' and tagcode='${tagcode.trim}'
				and repeatcounter=${repeatcounter}
				and repeatitemcounter=${repeatitemcounter}
				and repeatfieldcounter=${repeatfieldcounter}"$
	Try
		Log(sSQL)
		Utils.SaveSQLToLog("CLAItemEditValue_EnterPressed",sSQL, request_tagcode)
		'Starter.LocalSQLEVC.ExecNonQuery(sSQL)
		Dim params As Map
		params.Initialize
		params.Clear
		params.Put("_token", ShareCode.APP_TOKEN)
		params.Put("ACLARequest", request_tagcode)
		params.Put("ACLAAction", task_tagcode)
		params.Put("ACLATask", task_tagcode)
		params.Put("ACLAItem", item_tagcode)
		params.Put("ACLAUniqueKey", uniquekey)
		params.Put("ACLATagcode", tagcode)
		params.Put("ACLAValue", valor)
		params.Put("ACLAReqCounter", repeatcounter)
		params.Put("ACLARepeatItem", repeatitemcounter)
		params.Put("ACLARepeatField", repeatfieldcounter)
		params.Put("ACLAInner", SetInner)
	
		params.Put("ACLADatetime", sACLADatetime)
		params.Put("ACLALatitude", sACLALatitude)
		params.Put("ACLALongitude", sACLALongitude)
		
		Dim ACLSessUser As String = ShareCode.SESS_OPER_User
		Dim ACLClear As Int = 0
		params.Put("ACLSessUser", ACLSessUser)
		params.Put("ACLClear", ACLClear)
		params.Put("versionTagcode", Main.VersionTagcode)
		params.Put("_authorization", Main.DeviceAuthorization)
		params.Put("_instance", Main.DeviceInstance)
		params.put("_deviceBrand", Main.DeviceBrand)
		params.put("_deviceModel", Main.DeviceModel)
		params.put("_deviceMacAddress", Main.DeviceMacAddress)
		params.Put("_user", ShareCode.SESS_User)
		Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
		If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
			If Not(ShareCode.APP_WORKING_LOCAL) Then
				Dim GODR As ResumableSub = GetOfflineDataRec(1, request_tagcode.trim, task_tagcode.Trim, item_tagcode.trim)
				Wait For (GODR) Complete (HasResults As Boolean)
				If HasResults Then
					Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.Trim, item_tagcode.trim)
					Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
				Else
					Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim)
				End If
			Else
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.Trim, item_tagcode.trim)
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			End If
			Sleep(250)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.Trim, item_tagcode.trim)
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
		RetStatus = False
	End Try
	Return RetStatus
End Sub

Sub SetCLAIRowPanel(outRecord As Cursor, indDH2 As Int, slayout1 As String, slayout2 As String, sisp As Boolean, extend As Int, spec As Boolean) As RowPanelInfo
	If (CurrentOrientation=0) Then
		Dim height As Int = Utils.IntToDIP(outRecord.GetInt("height_land") + indDH2)   
	Else
		If(ShareCode.ISPHONE) Then
			If spec Then
				Dim height As Int = Utils.IntToDIP(outRecord.GetInt("height_port_sp"))
			Else
				Dim height As Int = Utils.IntToDIP(outRecord.GetInt("height_port_sp") + indDH2)
			End If 
		Else
			Dim height As Int = Utils.IntToDIP(outRecord.GetInt("height_port") + indDH2) 
		End If
		Dim rowitems As Int = outRecord.GetInt("rowitems")
		If(ShareCode.ISPHONE And rowitems > 1) Then
			If spec Then
				height = height * rowitems
			Else
				height = height + (rowitems*60dip)
			End If
		Else If	((ShareCode.ISPHONE And rowitems = 1) And Not(spec)) Then
			height = height + 60dip
		End If
	End If
	
	height = height + extend  '30dip
	
	Dim LayOutStr As String = slayout1 
	If ((ShareCode.ISPHONE) And Utils.NNE(slayout2)) Then
		LayOutStr = slayout2 
	End If
	
	If (Not(ShareCode.ISPHONE) And sisp) Then
		Dim height As Int = 80dip
	End If
	
	Dim p As Panel
	p.Initialize("CLALineClick")
	Activity.AddView(p, 0, 0, 100%x, height) '115dip)
	p.LoadLayout(LayOutStr)
	p.RemoveView
	Return Types.MakeRowPanelInfo(p, height)
End Sub

Sub GetCLAIRowScrip(ItemTagcode As String, UniqueKey As String, repeatcounter As Int, repeatitemcounter As Int, _
		repeatfieldcounter As Int, fieldval_04 As Int) As String
	Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
						
	If (DataBulkUpload=1) And (fieldval_04>=0) Then
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						and x.item_tagcode||x.item_tagcode||x.unique_key||x.repeatcounter in (select z.item_tagcode||z.item_tagcode||z.unique_key||z.repeatcounter  
						from dta_requests_values_adds as z where  z.fieldval_04=${fieldval_04})
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	Else
		Dim AllSQL As String = $"${EVCSQLGETTASKITEMVALUE} where x.item_tagcode='${ItemTagcode.trim}' and x.unique_key='${UniqueKey.trim}'
						and x.repeatcounter=${repeatcounter} and x.repeatitemcounter=${repeatitemcounter} and x.repeatfieldcounter=${repeatfieldcounter}
						order by x.request_tagcode, x.task_tagcode, x.item_tagcode, x.unique_key, x.tagcode,  x.id"$
	End If
	Return AllSQL
End Sub

Sub  SetCLAIRowPosis(CLAItem As RequestCLAItem, RPI As RowPanelInfo, innerPanel As Int, chapter As B4XView, Posis As Int) As Int
	
	CLAButtonOptions.Tag = CLAItem
	CLAButtonOptions.Enabled = Not(READONLY_FEATURES)
	RPI.Pan.Tag = CLAItem
	
	If (innerPanel = 0) Then
		Dim pnl As B4XView = chapter.GetView(1)
		pnl.AddView(RPI.Pan, 0, Posis, chapter.Width, RPI.height)
	Else
		chapter.AddView(RPI.Pan, 0, Posis, chapter.Width, RPI.height)
	End If
	Posis = Posis + RPI.height '115dip
	Return Posis

End Sub

#Region UpdateDados2BO

Sub UpdateData2Server As ResumableSub
		
	Log("**************************************")
	Log(" SENDING LOCAL DATA TO SERVER ")
	Log("**************************************")
	
	Starter.RunUpdate = True	
	Dim WITHFILES As Boolean = True
	Dim RecCounter As Int = LocalDataToUpdate
	
	Try
		Dim sSQL As String = $"select distinct up_date, up_type, up_state, up_tableurl, up_values from loc_updatesrever where up_state=0 and up_type=0"$
		Dim RecordLocalDataToUpdate As ResultSet = Starter.LocalSQLWRK.ExecQuery(sSQL)
	Catch
		Log(LastException)
		Dim sSQL As String = $"select distinct up_date, 0 as up_type, up_state, up_tableurl, up_values from loc_updatesrever where up_state=0"$
		Dim RecordLocalDataToUpdate As ResultSet = Starter.LocalSQLWRK.ExecQuery(sSQL)
		WITHFILES = False
	End Try
				
	Try
		Dim sSQLEmails As String = $"select distinct up_date, up_type, up_state, up_tableurl, up_values from loc_updateemails where up_state=0 and up_type=0"$
		Dim RecordLocalEmailDataToUpdate As ResultSet = Starter.LocalSQLWRK.ExecQuery(sSQLEmails)
		Dim EmailCheck As Boolean = True
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
		Dim EmailCheck As Boolean = False
	End Try
				
	Dim ut0 As Int = RecordLocalDataToUpdate.RowCount
	Dim ut1 As Int = RecCounter - ut0
	
	ProgressDialogShow2(ShareCode.checklistenviardados2BO, False)
	
	If RecordLocalDataToUpdate.RowCount > 0 Then
		
		For n = 0 To RecordLocalDataToUpdate.RowCount-1
			RecordLocalDataToUpdate.Position = n
			Try
				Log("ENTER SetUpdateHTTPRecord")
				Dim r1  As ResumableSub = SetUpdateHTTPRecord(RecordLocalDataToUpdate, WITHFILES, 0)
				Wait For(r1) complete (finished As Boolean)
				
				' ENVIAR DADOS DE EMAIL (HTTP)
				If EmailCheck Then
					If RecordLocalEmailDataToUpdate.RowCount > 0 Then
						Dim r2 As ResumableSub = SetUpdateHTTPEmailRecord(RecordLocalEmailDataToUpdate)
						Wait For(r2) complete (finished As Boolean)
					End If
				End If
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
			
		Next
					
	End If
	RecordLocalDataToUpdate.Close
	Sleep(250)
				
	If (ut1 >= 1) And (WITHFILES) Then
		Dim sSQL As String = $"select distinct up_date, up_type, up_state, up_tableurl, up_values from loc_updatesrever where up_state=0 and up_type=1"$
		Dim RecordLocalDataToUpdate2 As ResultSet = Starter.LocalSQLWRK.ExecQuery(sSQL)

		If(RecordLocalDataToUpdate2.RowCount >= 1) Then
			For n1 = 0 To RecordLocalDataToUpdate2.RowCount-1
				RecordLocalDataToUpdate2.Position = n1
				Try
					Dim r2 As ResumableSub = SetUpdateFTPRecord(RecordLocalDataToUpdate2, WITHFILES, 1)
					Wait For(r2) complete (finished As Boolean)
				Catch
					Log(LastException)
					Utils.WriteErrors2Log(LastException)
				End Try
			Next
		End If
		RecordLocalDataToUpdate2.Close
	End If
	
	Starter.RunUpdate = False
	Return True
	
End Sub

Sub SetUpdateHTTPRecord(inRec As ResultSet, withImg As Boolean, def As Int) As ResumableSub

	If withImg Then
		Dim up_type As Int = Utils.IfNullOrEmpty(inRec.GetInt("up_type"), def)
	End If
	Dim up_date As String = Utils.IfNullOrEmpty(inRec.GetString("up_date"), "")
	Dim up_values As String = Utils.IfNullOrEmpty(inRec.GetString("up_values"), "")
	Dim up_tableurl As String = Utils.IfNullOrEmpty(inRec.GetString("up_tableurl"), "")
	If Utils.NNE(up_tableurl) And Utils.NNE(up_values) Then

		Dim Job As HttpJob
		Job.Initialize("",Me)
		Dim addr As String = up_tableurl

		Job.PostString(addr, up_values )
		Log(up_values)
		Job.GetRequest.SetContentType("application/json")

		Wait For (Job) JobDone(Job As HttpJob)
		If Job.Success Then
			Dim Status As Int = Utils.JobAPIStatus(Job)
			Log($"Status: ${Status}"$)
			Try
				If withImg Then
					Dim upd As String = $"update loc_updatesrever set up_state= 1 where up_date='${up_date}' and up_type=${up_type}"$
				Else
					Dim upd As String = $"update loc_updatesrever set up_state= 1 where up_date='${up_date}'"$
				End If
				
				Starter.LocalSQLWRK.ExecNonQuery(upd)
				Return True
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				Return False
			End Try
		Else
			Return False
		
		End If
	
		Job.Release
		Sleep(250)

	Else
		Return True
	End If
	
End Sub

Sub SetUpdateHTTPEmailRecord(inRec As ResultSet) As ResumableSub
	
	Dim up_date As String = Utils.IfNullOrEmpty(inRec.GetString("up_date"), "")
	Dim up_values As String = Utils.IfNullOrEmpty(inRec.GetString("up_values"), "")
	Dim up_tableurl As String = Utils.IfNullOrEmpty(inRec.GetString("up_tableurl"), "")
	If Utils.NNE(up_tableurl) And Utils.NNE(up_values) Then
		Dim Job As HttpJob
		Job.Initialize("",Me)
		Dim addr As String = up_tableurl

		Job.PostString(addr, up_values )
		Log(up_values)
		Job.GetRequest.SetContentType("application/json")

		Wait For (Job) JobDone(Job As HttpJob)
		If Job.Success Then
			Try
				Dim upd As String = $"update loc_updatesrever set up_state= 1 where up_date='${up_date}'"$
				Starter.LocalSQLWRK.ExecNonQuery(upd)
				Return True
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
				Return False
			End Try
		Else
			Return False
		End If
	Else
		Return True
	End If
	
End Sub


Sub SetUpdateFTPRecord(inRec As ResultSet, withImg As Boolean, def As Int) As ResumableSub

	If withImg Then
		Dim up_type As Int = Utils.IfNullOrEmpty(inRec.GetInt("up_type"), def)
	End If
	Dim up_date As String = Utils.IfNullOrEmpty(inRec.GetString("up_date"), "")
	Dim up_values As String = Utils.IfNullOrEmpty(inRec.GetString("up_values"), "")
	Dim up_tableurl As String = Utils.IfNullOrEmpty(inRec.GetString("up_tableurl"), "")
	If Utils.NNE(up_tableurl) And Utils.NNE(up_values) Then
		
		Dim myFTP As FTP
		myFTP.Initialize("ftp", $"${ShareCode.APPL_ACCOUNT.ToLowerCase}.${ShareCode.APPL_HOST}"$, 21, $"${ShareCode.APP_FTP_USER}@${ShareCode.APPL_HOST}"$, "..VRCG@EvolutionCheck20!9")
		myFTP.PassiveMode = True
		myFTP.TimeoutMs =240000
	
		Dim sf As Object = myFTP.UploadFile(Starter.InternalFolder, up_values, False, up_tableurl & up_values)
		Wait For (sf) ftp_UploadCompleted (ServerPath As String, Success As Boolean)
		Log($"Ficheiro: ${up_values}, URL: ${up_tableurl}, Status: ${Utils.Bool2String(Success)}"$)
		Dim finished As Boolean = Success
		myFTP.Close
				
		If (finished = True) Then
			Try
				If withImg Then
					Dim upd As String = $"update loc_updatesrever set up_state= 1 where up_date='${up_date}' and up_type=${up_type}"$
				Else
					Dim upd As String = $"update loc_updatesrever set up_state= 1 where up_date='${up_date}'"$
				End If
				Starter.LocalSQLWRK.ExecNonQuery(upd)
			Catch
				Log(LastException)
				Utils.WriteErrors2Log(LastException)
			End Try
		End If
	End If
	Return True
End Sub

Sub LocalDataToUpdate As Int
	Dim ret As Int = 0

	Dim sSQL As String = $"select distinct count(0) as total from loc_updatesrever where up_state=0"$
	Dim iRecord As Cursor
	Try
		iRecord = Starter.LocalSQLWRK.ExecQuery(sSQL)
		If (iRecord.RowCount>0) Then
			iRecord.Position = 0
			ret = iRecord.GetInt("total")
			Log("««««««««««««««««««««««««««««««««««««")
			Log($"Total local data to upload:${ret}"$)
			Log("««««««««««««««««««««««««««««««««««««")
		End If
	Catch
		Log(LastException)
		ret = 0
	End Try
	iRecord.Close
	Return ret
End Sub

#End Region

Sub GetOfflineDataRec(TypeRec As Int, ReqTagcode As String, RecTask As String, RecItem As String) As ResumableSub
	
	Try
		Dim WorkerSQLData As Int = DBStructures.GetScriptColumnIntWRK( $"select count(up_tagcode) as contador from loc_updatesrever where 1=1
																		and up_typeoper = ${TypeRec}
																		And up_tagcode = '${ReqTagcode.trim}'
																		And up_task = '${RecTask.Trim}'
																		And up_itemtagcode = '${RecItem.trim}'"$,"contador")
		Return (WorkerSQLData > 0)
	Catch
		Log(LastException)
		Utils.WriteErrors2Log(LastException)
		Return False
	End Try

End Sub

Sub UpdateServerUPDorINS (Tablename As String, Operationtype As String, request_tagcode As String, task_tagcode As String, item_tagcode As String, rc As Int, rfc As Int, ric As Int) As ResumableSub
	
	
	If item_tagcode <> "" Then
		
		Dim TableQuery As ResultSet = Starter.LocalSQLEVC.ExecQuery($"select * from ${Tablename} where 1=1
																	And request_tagcode = '${request_tagcode}'
																	And task_tagcode = '${task_tagcode}'
																	and item_tagcode = '${item_tagcode}'
																	and repeatcounter = ${rc}
																	and repeatfieldcounter = ${rfc}
																	and repeatitemcounter = ${ric}"$)
	Else
		Dim TableQuery As ResultSet = Starter.LocalSQLEVC.ExecQuery($"select * from ${Tablename} where 1=1
																	And request_tagcode = '${request_tagcode}'
																	And task_tagcode = '${task_tagcode}'
																	and repeatcounter = ${rc}
																	and repeatitemcounter = ${ric}"$)
	End If
	
	
	

	
	Dim MapFields As Map
	MapFields.Initialize
	Dim DataFields As List
	DataFields.Initialize
	Dim MapItems As Map
	MapItems.Initialize
	Dim ListItems As List
	ListItems.Initialize
	Dim MapConditions As Map
	MapConditions.Initialize
		
	MapItems.Put("table","dta_requests_values")
	MapItems.Put("type",Operationtype)
	
	'CRIAR A LISTA COM OS MAPS DOS NOMES DOS CAMPOS E VALORES
	If TableQuery.RowCount > 0 Then
		Do While TableQuery.NextRow
			For colnum = 0 To TableQuery.ColumnCount -1
				Dim ColName As String = TableQuery.GetColumnName(colnum)
				Dim ColValue As String = TableQuery.GetString(ColName)
				If ColName.ToLowerCase.trim <> "id" And ColName.ToLowerCase.trim <> "created_at" And ColName.ToLowerCase.trim <> "updated_at" Then
					If Utils.isNull(ColValue) Then
						ColValue = ""
					End If
					If Operationtype = "update" Then
						MapFields.Put("execute_status","1")
						If ColName.ToLowerCase.Trim = "execute_value" Then
							MapFields.Put(ColName, ColValue)
						Else If ColName.ToLowerCase.Trim = "execute_value_title" Then
							MapFields.Put(ColName, ColValue)
						Else If ColName.ToLowerCase.Trim = "title" Then
							MapFields.Put(ColName, ColValue)
						Else If ColName.ToLowerCase.Trim = "object_tagcode" Then
							MapFields.Put(ColName, ColValue)
						End If
					Else
						MapFields.Put(ColName, ColValue)
					End If
					
				End If
			Next
		
			DataFields.Add(MapFields)
			
		Loop
		
		MapItems.Put("fields",DataFields)
			
		If Operationtype = "update" Then
		
			MapConditions.Put("request_tagcode",request_tagcode.trim)
			MapConditions.Put("task_tagcode",task_tagcode.trim)
			MapConditions.Put("item_tagcode",item_tagcode.Trim)
			MapConditions.Put("repeatcounter",rc)
			MapConditions.Put("repeatitemcounter",ric)
			MapConditions.Put("repeatfieldcounter",rfc)
		
			Dim ListConditions As List
			ListConditions.Initialize
			ListConditions.Add(MapConditions)
			
			MapItems.Put("where", ListConditions)
			
		End If
		
		ListItems.Add(MapItems)
	
		Dim ACLAJson As Map
		ACLAJson.Initialize
		ACLAJson.put("items",ListItems)
	
		Dim NewParams As Map
		NewParams.Initialize
		NewParams.Clear
		NewParams.Put("_token", ShareCode.APP_TOKEN)
		NewParams.Put("debug", 1)
		NewParams.Put("ACLAJson", ACLAJson)
		Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/insert-update"$

		If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
			If Not(ShareCode.APP_WORKING_LOCAL) Then
'				Utils.CallApi(NewParams, Me, Url, "", request_tagcode)
				Try
					Dim data As String
					Dim JSON As JSONGenerator
					JSON.Initialize(NewParams)
        
					data = JSON.ToPrettyString(1)
					Dim JobD2S As HttpJob
					JobD2S.Initialize("",Me)
					Dim addr As String = Url
					Log(data)
					JobD2S.PostString(addr, data )
					JobD2S.GetRequest.SetContentType("application/json")
	
					Wait For (JobD2S) JobDone(JobD2S As HttpJob)
				
					If JobD2S.Success Then
						Log("API Reply:" & JobD2S.GetString)
					Else
						Log("API ERROR Reply:" & JobD2S.GetString)
					End If
					JobD2S.Release
				Catch
					Dim theData As String = $"${LastException}, ${data}"$
					Log(theData)
					Utils.logError("JobD2S", ShareCode.SESS_OPER_User, theData)
				End Try

			Else
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.Trim, item_tagcode.trim)
				Utils.save2update(Url, Utils.MapToJson(NewParams), 0, WorkerND)
			End If
			Sleep(250)
'			
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1, request_tagcode.trim, task_tagcode.Trim, item_tagcode.trim)
			Utils.save2update(Url, Utils.MapToJson(NewParams), 0, WorkerND)
		End If
	End If

	Return True
End Sub

Sub WriteObjData2CheckList (Request As String) As ResumableSub
	
	Request = Request.Trim
	
	If Utils.NE(Request) Or Request <> CurrentCLA.Request.Trim Then
		Return False
	End If
	
	Dim typerequest_tagcode As String = DBStructures.GetScriptColumnStrEVC($"select typerequest_tagcode	from dta_requests where tagcode='${Request}'"$, "typerequest_tagcode")
	Dim ObjectTag As String = DBStructures.GetScriptColumnStrEVC($"select object_tagcode from dta_requests where tagcode = '${Request}'"$,"object_tagcode")
	Dim actionkey As String = CurrentCLA.Action.Trim
	Dim tagcodereq As String = CurrentCLA.Request.Trim
	Dim repeatcounter As Int = CurrentCLA.RepeatCounter

	If Utils.NNE(ObjectTag) And Not(ObjectTag = "__NONE__") Then
		Private Record9 As Cursor
		Dim sSQL As String = $"SELECT b.connectmode, b.connect2data, a.do_name, a.do_field, a.do_is_additional,
										a.task_tagcode, a.item_tagcode, a.unique_key, a.data_type, a.title
										FROM dta_tasks_items AS a
										INNER JOIN dta_tasks AS b ON (b.tagcode=a.task_tagcode)
										WHERE  ((a.do_name <> '' AND a.do_field <> '' AND b.connect2data <> '') or
										 (a.do_name = '__TYPEREQUEST__' AND a.do_field <> '' )) and a.task_tagcode='${actionkey}'"$
		Record9 = Starter.LocalSQLEVC.ExecQuery(sSQL)
		If Record9.RowCount > 0 Then
			For ni = 0 To Record9.RowCount-1
				Record9.Position = ni
				Dim do_name As String = Record9.GetString("do_name")
				Dim do_field As String = Record9.GetString("do_field")
				Dim do_is_additional As Int = Record9.GetInt("do_is_additional")
				Dim task_tagcode As String = Record9.GetString("task_tagcode")
				Dim item_tagcode As String = Record9.GetString("item_tagcode")
				Dim unique_key As String = Record9.GetString("unique_key")

				Dim actuliza As Boolean = False
						
				If (do_name.ToUpperCase = "__TYPEREQUEST__") Then
					'VERIFICA SE OS CAMPOS FORAM LANÇADOS
					If (tagcodereq.StartsWith("IE_")) Then
						Dim insSQL As String = $"insert into dta_requests_fields (id, request_tagcode, field_tagcode)
														Select id, '${tagcodereq}' as request_tagcode, field_tagcode 
														from dta_typerequests_fields where typerequest_tagcode='${typerequest_tagcode}' 
														And '${tagcodereq}'||field_tagcode not in 
															(Select '${tagcodereq}'||field_tagcode as campo 
															from dta_requests_fields
															where request_tagcode='${tagcodereq}')"$
															
						Utils.SaveSQLToLog("CriaCamposAdicionais",insSQL, tagcodereq)
						Dim params As Map
						params.Initialize
						params.Clear
						params.Put("_token", ShareCode.APP_TOKEN)
						params.Put("ACLARequest", tagcodereq)
						params.Put("ACLARequestType", typerequest_tagcode)
						params.Put("versionTagcode", Main.VersionTagcode)
						params.Put("_authorization", Main.DeviceAuthorization)
						params.Put("_instance", Main.DeviceInstance)
						params.put("_deviceBrand", Main.DeviceBrand)
						params.put("_deviceModel", Main.DeviceModel)
						params.put("_deviceMacAddress", Main.DeviceMacAddress)
						params.Put("_user", ShareCode.SESS_User)
						Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/cla-fields/create"$
						If Not(ShareCode.APP_WORKING_LOCAL) Then 'And Not(ShareCode.IsInCheckExecution)) Then
							Utils.CallApi(0, params, Me, Url, "", tagcodereq)
						Else
							Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(0, tagcodereq.Trim,"","")
							Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
						End If
						Sleep(500)
					End If
						

						
					Dim ObjSQL As String = $"select distinct value from dta_requests_fields where request_tagcode='${typerequest_tagcode}' and field_tagcode='${do_field}'"$
					Private Record99 As Cursor = Starter.LocalSQLEVC.ExecQuery(ObjSQL)
					If Record99.RowCount > 0 Then
						For nii = 0 To Record99.RowCount-1
							Record99.Position = nii
							Dim val As String = Utils.IfNullOrEmpty(Record99.GetString("value"), "")
							Dim NewSQL As String = $"update dta_requests_values set execute_status=1, execute_value='${val}',
															execute_value_title='${val}'
															where request_tagcode='${tagcodereq}' 
															and inner_request_tagcode='${actionkey}'
															and task_tagcode='${task_tagcode}'
															and item_tagcode='${item_tagcode}'
															and unique_key='${unique_key}'
															and repeatcounter=${repeatcounter} "$
							Try
								Starter.LocalSQLEVC.ExecNonQuery(NewSQL)
							Catch
								Log($"Erro de campo: ${LastException}"$)
							End Try
								
							Dim rs As ResumableSub = UpdateServerwithObject(CurrentCLA, item_tagcode, unique_key, val, "" ,0, 0)
							Wait For(rs) Complete (updated As Boolean)
							Sleep(100)
						Next
					End If
					Record99.Close
				Else
															
					Dim objectTagValue As String = DBStructures.GetScriptColumnStrEVC($"select object_tagcode from
											dta_requests where tagcode='${CurrentCLA.Request.Trim}'"$, _
											"object_tagcode")
						
					Dim object_type As String = DBStructures.GetScriptColumnStrEVC($"select object_type from
											dta_objects where tagcode='${objectTagValue.Trim}'"$, _
											"object_type")	
						
					Dim title_import As String = DBStructures.GetScriptColumnStrEVC($"select title_import from
											dta_objects where tagcode='${objectTagValue.Trim}'"$, _
											"title_import")	
						
					If (do_name = object_type) Then
						If (do_is_additional = 1) Then
							Dim ObjSQL As String = $"select distinct `value` from dta_objects_fields where object_tagcode='${ObjectTag}' and field_tagcode='${do_field}'"$
						Else
							If Utils.FieldInList(do_field, "address|address2|postalcode|local|latitude|longitude|block|floor|door") Then
								Dim ObjSQL As String = $"select distinct ${do_field} as `value` from dta_locations where tagcode in
																	(select local_tagcode from dta_objects where tagcode='${ObjectTag}')"$
							Else If Utils.FieldInList(do_field, "name|phone|email|mobile") Then
								Dim ObjSQL As String = $"select distinct ${do_field} as `value` from dta_contacts where tagcode in
															(select contact_tagcode from dta_objects_contacts where object_tagcode='${ObjectTag}' limit 1)"$
							Else
								Dim ObjSQL As String = $"select distinct ${do_field} as `value` from dta_objects where tagcode='${ObjectTag}'"$
							End If
							Log(ObjSQL)
						End If
										
						Private Record99 As Cursor = Starter.LocalSQLEVC.ExecQuery(ObjSQL)
						If Record99.RowCount > 0 Then
							actuliza = True
							For nii = 0 To Record99.RowCount-1
								Record99.Position = nii
								Dim val As String = Utils.IfNullOrEmpty(Record99.GetString("value"), "")
								Dim NewSQL As String = $"update dta_requests_values set execute_status=1, execute_value='${val}', execute_value_title ='${val}',
															object_tagcode='${ObjectTag}'
															where request_tagcode='${tagcodereq}' 
															and inner_request_tagcode='${actionkey}'
															and task_tagcode='${task_tagcode}'
															and item_tagcode='${item_tagcode}'
															and unique_key='${unique_key}'
															and repeatcounter=${repeatcounter} "$
								Log(NewSQL)
								Try
									Utils.SaveSQLToLog("WriteObjDataCheckList",NewSQL, tagcodereq)
								Catch
									Log($"Erro de campo: ${LastException}"$)
								End Try
									
								Dim params As Map
								params.Initialize
								params.Clear
								params.Put("_token", ShareCode.APP_TOKEN)
								params.Put("ACLARequest", CurrentCLA.Request.Trim)
								params.Put("ACLAAction", CurrentCLA.Action.Trim)
								params.Put("ACLATask", CurrentCLA.Task.trim)
								params.Put("ACLAItem", item_tagcode.trim)
								params.Put("ACLAUniqueKey", unique_key.trim)
								params.Put("ACLATagcode", "")
								params.Put("ACLAValue", val.Trim)
								params.Put("ACLAValuetitle", val.trim)
								params.Put("ACLAReqCounter", CurrentCLA.RepeatCounter)
								params.Put("ACLARepeatItem",0 )
								params.Put("ACLARepeatField",0 )
								params.Put("ACLAInner", 0)
	
								Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
								Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
	
								params.Put("ACLADatetime", Utils.GetCurrDatetimeExt)
								params.Put("ACLALatitude", sACLALatitude)
								params.Put("ACLALongitude", sACLALongitude)
				
								Dim ACLSessUser As String = ShareCode.SESS_OPER_User
								Dim ACLClear As Int = 0
								params.Put("ACLSessUser", ACLSessUser.trim)
								params.Put("ACLClear", ACLClear)
								params.Put("versionTagcode", Main.VersionTagcode.trim)
								params.Put("_authorization", Main.DeviceAuthorization)
								params.Put("_instance", Main.DeviceInstance)
								params.put("_deviceBrand", Main.DeviceBrand)
								params.put("_deviceModel", Main.DeviceModel)
								params.put("_deviceMacAddress", Main.DeviceMacAddress)
								params.Put("_user", ShareCode.SESS_User)
								Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
	
								If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
									If Not(ShareCode.APP_WORKING_LOCAL) Then
										Utils.CallApi(0, params, Me, Url, "", CurrentCLA.Request.Trim)
									Else
									Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,CurrentCLA.Request.Trim,CurrentCLA.Action.Trim,item_tagcode.trim)
										Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
									End If
									Sleep(200)
								Else
									Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,CurrentCLA.Request.Trim,CurrentCLA.Action.Trim,item_tagcode.Trim)
									Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
								End If
								
								Sleep(100)
							Next
						End If
						Record99.Close
					End If
				End If
			Next
		End If
		Record9.Close
			
		Sleep(100)
			
	End If
	
	Return True
	
End Sub

Sub WriteSetButtonsStateAll(request_tagcode As String, task_tagcode As String, item_tagcode As String, rc As Int, ric As Int, rfc As Int, buttonText As String, inlocal As Boolean) As ResumableSub

	If Not(inlocal) Then


		ProgressDialogShow2(ShareCode.GeneralWaitPlease, False)

		
'       APANHA OS TITULOS DE TODOS OS BOTOES COM O MESMO ITEM_TAGCODE DO SELECCIONADO E ESCREVE-OS EM UMA LISTA EXCLUINDO O MESMO		
		Dim execute_format_titles As List
		execute_format_titles.Initialize
		Dim GetTitles As ResultSet = Starter.LocalSQLEVC.ExecQuery($"select execute_format_title from dta_requests_values where 1=1
															and request_tagcode = '${request_tagcode}'
															and task_tagcode = '${task_tagcode}'
															and item_tagcode = '${item_tagcode}'
															and repeatcounter = ${rc}
															and repeatitemcounter = ${ric}
															and repeatfieldcounter = ${rfc}"$)
		Do While GetTitles.NextRow
			Dim Titulo As String = GetTitles.GetString("execute_format_title")
			If Titulo <> buttonText Then
				execute_format_titles.Add($"'${Titulo}'"$)
			End If
		Loop
	
		Dim ListaTitulos As String = Utils.List2Str(execute_format_titles,",")
	
	
'       APANHA O EXECUTE VALUE DO BOTAO SELECCIONADO	
		Dim execute_value As String = DBStructures.GetScriptColumnStrEVC($"select execute_value from dta_requests_values where 1=1
															and request_tagcode = '${request_tagcode}'
															and task_tagcode = '${task_tagcode}'
															and item_tagcode = '${item_tagcode}'
															And execute_format_title = '${buttonText}'
															and repeatcounter = ${rc}
															and repeatitemcounter = ${ric}
															and repeatfieldcounter = ${rfc}"$,"execute_value")

'       APANHA O EXECUTE_STATUS DO BOTAO SELECCIONADO
		Dim execute_status As Int = DBStructures.GetScriptColumnIntEVC($"select execute_status from dta_requests_values where 1=1
															and request_tagcode = '${request_tagcode}'
															and task_tagcode = '${task_tagcode}'
															and item_tagcode = '${item_tagcode}'
															And execute_format_title = '${buttonText}'
															and repeatcounter = ${rc}
															and repeatitemcounter = ${ric}
															and repeatfieldcounter = ${rfc}"$,"execute_status")


'       ESCREVE O ESTADO DE TODOS OS OUTROS BOTOES COM O TITULO DIFERENTE DO SELECCIONADO PARA SO HAVER UM
		Dim WriteSql1 As String = $"update dta_requests_values set execute_value = '', execute_status = 0 where 1=1
								And request_tagcode = '${request_tagcode}'
								And task_tagcode = '${task_tagcode}'
								And execute_format_title in (${ListaTitulos})
								And repeatcounter = ${rc}
								And repeatitemcounter = ${ric}
								And repeatfieldcounter = ${rfc}"$
		Log(WriteSql1)
		Starter.LocalSQLEVC.ExecNonQuery(WriteSql1)
	
'       ESCREVE O ESTADO DE TODOS OS BOTOES CUJO TITULO SEJA IGUAL AO QUE SE SELECCIONOU
		Dim WriteSql2 As String = $"update dta_requests_values set execute_value = '${execute_value}', execute_status = ${execute_status} where 1=1
								And request_tagcode = '${request_tagcode}'
								And task_tagcode = '${task_tagcode}'
								And execute_format_title = '${buttonText}'
								And repeatcounter = ${rc}
								And repeatitemcounter = ${ric}
								And repeatfieldcounter = ${rfc}"$
	
		Log(WriteSql2)
		Starter.LocalSQLEVC.ExecNonQuery(WriteSql2)
		Sleep(250)

'       ENVIA O RESULTADO DAS OPERACOES DE ALTERACAO DOS BOTOES PARA O SERVIDOR, MAS PARA POUPAR TEMPO, SO MESMO OS BOTOES
		Dim WSvr As ResumableSub = UpdateAllButtonsInSvr(request_tagcode,task_tagcode,item_tagcode,rc,rfc,ric)
		Wait For (WSvr) Complete (Finished As Boolean)

		Sleep(200)
		
		ProgressDialogHide
	End If
	
Return True

End Sub

Sub UpdateAllButtonsInSvr(request_tagcode As String, task_tagcode As String, item_Tagcode As String, rc As Int, ric As Int, rfc As Int) As ResumableSub
	
	
	Dim eft As List
	eft.Initialize
	Dim GetT As ResultSet = Starter.LocalSQLEVC.ExecQuery($"select execute_format_title from dta_requests_values where 1=1
															and request_tagcode = '${request_tagcode}'
															and task_tagcode = '${task_tagcode}'
															and item_tagcode = '${item_Tagcode}'
															and repeatcounter = ${rc}
															and repeatitemcounter = ${ric}
															and repeatfieldcounter = ${rfc}"$)
	Do While GetT.NextRow
		Dim Titulo As String = GetT.GetString("execute_format_title")
		eft.Add($"'${Titulo}'"$)
	Loop
	
	Dim ListaT As String = Utils.List2Str(eft,",")
	
	Dim CL_Values As ResultSet = Starter.LocalSQLEVC.ExecQuery($"select * from dta_requests_values where 1=1
																and request_tagcode = '${request_tagcode}'
																and task_tagcode = '${task_tagcode}'
																And execute_format_title in (${ListaT})
																and repeatcounter = ${rc}
																and repeatitemcounter = ${ric}
																and repeatfieldcounter = ${rfc}"$)
	Do While CL_Values.NextRow
		
		Dim MapFields As Map
		MapFields.Initialize
		
		For i =  0 To CL_Values.ColumnCount -1
			Dim mapFName As String = CL_Values.GetColumnName(i)
			Dim mapFValue As String = CL_Values.GetString(mapFName)
			MapFields.Put(mapFName, mapFValue)
		Next
		
		Dim params As Map
		params.Initialize
		params.Clear
		params.Put("_token", ShareCode.APP_TOKEN)
		params.Put("ACLARequest", MapFields.Get("request_tagcode"))
		params.Put("ACLAAction", MapFields.Get("task_tagcode"))
		params.Put("ACLATask", MapFields.Get("task_tagcode"))
		params.Put("ACLAItem", MapFields.Get("item_tagcode"))
		params.Put("ACLAUniqueKey", MapFields.Get("unique_key"))
		params.Put("ACLATagcode", MapFields.Get("tagcode"))
		params.Put("ACLAValue", MapFields.Get("execute_value"))
		params.Put("ACLAValuetitle", MapFields.Get("execute_value_title"))
		params.Put("ACLAFormattitle", MapFields.Get("execute_format_title"))
		params.Put("ACLAReqCounter", MapFields.Get("repeatcounter"))
		params.Put("ACLARepeatItem",MapFields.Get("repeatitemcounter"))
		params.Put("ACLARepeatField",MapFields.Get("repeatfieldcounter"))
		params.Put("ACLAInner", 0)
	
		Private sACLALatitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lat, "")
		Private sACLALongitude As String = Utils.IfNullOrEmpty(LocationService.GeoLocal.lon, "")
	
		params.Put("ACLADatetime", Utils.GetCurrDatetimeExt)
		params.Put("ACLALatitude", sACLALatitude)
		params.Put("ACLALongitude", sACLALongitude)
				
		Dim ACLSessUser As String = ShareCode.SESS_OPER_User
		Dim ACLClear As Int = 0
		params.Put("ACLSessUser", ACLSessUser.trim)
		params.Put("ACLClear", ACLClear)
		params.Put("versionTagcode", Main.VersionTagcode.trim)
		params.Put("_authorization", Main.DeviceAuthorization)
		params.Put("_instance", Main.DeviceInstance)
		params.put("_deviceBrand", Main.DeviceBrand)
		params.put("_deviceModel", Main.DeviceModel)
		params.put("_deviceMacAddress", Main.DeviceMacAddress)
		params.Put("_user", ShareCode.SESS_User)
		Dim Url As String = $"https://${ShareCode.APP_DOMAIN}.${ShareCode.APPL_HOST}/api/orion/clai/update"$
	
		If (Utils.Int2Bool(ShareCode.DEVICE_REQUEST_UPLOAD_ONEXECUTION)) Then
			If Not(ShareCode.APP_WORKING_LOCAL) Then
				Utils.CallApi(0, params, Me, Url, "", request_tagcode.Trim)
			Else
				Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_Tagcode.trim)
				Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
			End If
			Sleep(200)
		Else
			Dim WorkerND As WorkerNewData = Types.MakeWorkerNewData(1,request_tagcode.Trim,task_tagcode.Trim,item_Tagcode.trim)
			Utils.save2update(Url, Utils.MapToJson(params), 0, WorkerND)
		End If
		Sleep(250)
		
	Loop
	
	
	Sleep(200)
	
	Return True
	
End Sub

Sub ViewChapters(evt As CLAIEvent, ric As Int) As ResumableSub
	
	Dim RetVal As Boolean = False
	
	If Utils.Int2Bool(evt.have_condition) Then
		'Apanhar os botoes correspondentes ao LEFT, RIGHT, ADD, REMOVE, COLLAPSE
		Dim FoundButton As Boolean = False
			
		Try
			For n=0 To ComponentList.Size -1
				Dim ClItem As ComponentRecords = ComponentList.Get(n)
				If ClItem.item_tagcode = evt.value And ClItem.RepeatItemCounter = 0 Then
					
					Dim ChapterView As B4XView = ClItem.component
					
					If ChapterView Is Panel Then
						Dim PnlTitulo As Panel = ChapterView.GetView(0)
						Dim PnlLista As Panel = ChapterView.GetView(1)
						Dim btnLeft As Button = PnlTitulo.GetView(3)
						Dim btnRight As Button = PnlTitulo.GetView(5)
						Dim btnAdd As Button = PnlTitulo.GetView(4)
						Dim btnRemove As Button = PnlTitulo.GetView(8)
						Dim btnExpand As Button = PnlTitulo.GetView(1)
						FoundButton = True
						Log(btnRight.Tag)
					End If
					Exit
				End If
			Next
		Catch
			FoundButton = False
			Log(LastException)
			Utils.WriteErrors2Log(LastException)
		End Try

		
		If FoundButton Then
			If evt.event_tagcode = "EVENTTASK_COLLAPSE" Then
				If evt.have_status = 0 Then ' Collapse
					clListView_ItemClick(PnlTitulo.tag, "")
				Else if evt.have_status = 1 Then ' Expand
					clListView_ItemClick(PnlTitulo.tag, "")
				End If
			else if evt.event_tagcode = "EVENTTASK_CHAPTERLEFTRIGHT" Then
				If evt.have_status = 0 Then ' Esquerda
					ChapterLeftClick(btnLeft)
				Else if evt.have_status = 1 Then ' Direita
					ChapterRightClick(btnRight)
				End If
			else if evt.event_tagcode = "EVENTTASK_CHAPTERADDREMOVE" Then
				If evt.have_status = 0 Then ' Add
					butAddMoreClick(btnAdd)
				Else if evt.have_status = 1 Then ' Remove
					butAddLessClick(btnRemove)
				End If
			End If
		End If
		RetVal = True
	Else
		RetVal = False
	End If
	ProgressDialogHide
	Return RetVal
End Sub
